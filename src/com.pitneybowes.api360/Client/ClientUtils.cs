/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using com.pitneybowes.api360.Model;
using System.Runtime.CompilerServices;

[assembly: InternalsVisibleTo("com.pitneybowes.api360.Test")]

namespace com.pitneybowes.api360.Client
{
    /// <summary>
    /// Utility functions providing some benefit to API client consumers.
    /// </summary>
    public static class ClientUtils
    {

        /// <summary>
        /// A delegate for events.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <returns></returns>
        public delegate void EventHandler<T>(object sender, T e) where T : EventArgs;

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="json"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(string json, JsonSerializerOptions options, out T result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(json, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="reader"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(ref Utf8JsonReader reader, JsonSerializerOptions options, out T result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(ref reader, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <param name="format">The DateTime serialization format.</param>
        /// <returns>Formatted string.</returns>
        public static string ParameterToString(object obj, string format = ISO8601_DATETIME_FORMAT)
        {
            if (obj is DateTime dateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTime.ToString(format);
            if (obj is DateTimeOffset dateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTimeOffset.ToString(format);
            if (obj is bool boolean)
                return boolean
                    ? "true"
                    : "false";
            if (obj is AdditionalAddressesInner.AddressTypeEnum additionalAddressesInnerAddressTypeEnum)
                return AdditionalAddressesInner.AddressTypeEnumToJsonValue(additionalAddressesInnerAddressTypeEnum);
            if (obj is CreateShipmentV2Request.RateShopByEnum createShipmentV2RequestRateShopByEnum)
                return CreateShipmentV2Request.RateShopByEnumToJsonValue(createShipmentV2RequestRateShopByEnum);
            if (obj is CustomsInfo.TermsOfSaleEnum customsInfoTermsOfSaleEnum)
                return CustomsInfo.TermsOfSaleEnumToJsonValue(customsInfoTermsOfSaleEnum);
            if (obj is CustomsItem.WeightUnitEnum customsItemWeightUnitEnum)
                return CustomsItem.WeightUnitEnumToJsonValue(customsItemWeightUnitEnum);
            if (obj is DHLExpressCarrierPayment.PartyEnum dHLExpressCarrierPaymentPartyEnum)
                return DHLExpressCarrierPayment.PartyEnumToJsonValue(dHLExpressCarrierPaymentPartyEnum);
            if (obj is DHLExpressCarrierPayment.TypeOfChargeEnum dHLExpressCarrierPaymentTypeOfChargeEnum)
                return DHLExpressCarrierPayment.TypeOfChargeEnumToJsonValue(dHLExpressCarrierPaymentTypeOfChargeEnum);
            if (obj is DomesticShipmentResponseLabelLayoutInner.ContentTypeEnum domesticShipmentResponseLabelLayoutInnerContentTypeEnum)
                return DomesticShipmentResponseLabelLayoutInner.ContentTypeEnumToJsonValue(domesticShipmentResponseLabelLayoutInnerContentTypeEnum);
            if (obj is DomesticShipmentResponseV2LabelLayoutInner.ContentTypeEnum domesticShipmentResponseV2LabelLayoutInnerContentTypeEnum)
                return DomesticShipmentResponseV2LabelLayoutInner.ContentTypeEnumToJsonValue(domesticShipmentResponseV2LabelLayoutInnerContentTypeEnum);
            if (obj is DomesticShipmentResponseV2LabelLayoutInner.TypeEnum domesticShipmentResponseV2LabelLayoutInnerTypeEnum)
                return DomesticShipmentResponseV2LabelLayoutInner.TypeEnumToJsonValue(domesticShipmentResponseV2LabelLayoutInnerTypeEnum);
            if (obj is ErrCoversheetRequest.TypeEnum errCoversheetRequestTypeEnum)
                return ErrCoversheetRequest.TypeEnumToJsonValue(errCoversheetRequestTypeEnum);
            if (obj is ErrCoversheetRequest.ParcelTypeEnum errCoversheetRequestParcelTypeEnum)
                return ErrCoversheetRequest.ParcelTypeEnumToJsonValue(errCoversheetRequestParcelTypeEnum);
            if (obj is ErrCoversheetRequest.FormatEnum errCoversheetRequestFormatEnum)
                return ErrCoversheetRequest.FormatEnumToJsonValue(errCoversheetRequestFormatEnum);
            if (obj is ErrCoversheetRequest.SizeEnum errCoversheetRequestSizeEnum)
                return ErrCoversheetRequest.SizeEnumToJsonValue(errCoversheetRequestSizeEnum);
            if (obj is ErrCoversheetRequestSpecialServicesInner.SpecialServiceIdEnum errCoversheetRequestSpecialServicesInnerSpecialServiceIdEnum)
                return ErrCoversheetRequestSpecialServicesInner.SpecialServiceIdEnumToJsonValue(errCoversheetRequestSpecialServicesInnerSpecialServiceIdEnum);
            if (obj is FedExCarrierPayment.PartyEnum fedExCarrierPaymentPartyEnum)
                return FedExCarrierPayment.PartyEnumToJsonValue(fedExCarrierPaymentPartyEnum);
            if (obj is FedExCarrierPayment.TypeOfChargeEnum fedExCarrierPaymentTypeOfChargeEnum)
                return FedExCarrierPayment.TypeOfChargeEnumToJsonValue(fedExCarrierPaymentTypeOfChargeEnum);
            if (obj is GetAllShipmentsDataInnerParcel.DimUnitEnum getAllShipmentsDataInnerParcelDimUnitEnum)
                return GetAllShipmentsDataInnerParcel.DimUnitEnumToJsonValue(getAllShipmentsDataInnerParcelDimUnitEnum);
            if (obj is GetAllShipmentsDataInnerParcel.WeightUnitEnum getAllShipmentsDataInnerParcelWeightUnitEnum)
                return GetAllShipmentsDataInnerParcel.WeightUnitEnumToJsonValue(getAllShipmentsDataInnerParcelWeightUnitEnum);
            if (obj is GetAllShipmentsDataInnerShipmentOptions.ReceiptOptionEnum getAllShipmentsDataInnerShipmentOptionsReceiptOptionEnum)
                return GetAllShipmentsDataInnerShipmentOptions.ReceiptOptionEnumToJsonValue(getAllShipmentsDataInnerShipmentOptionsReceiptOptionEnum);
            if (obj is GetSingleShipmentShipmentOptions.ReceiptOptionEnum getSingleShipmentShipmentOptionsReceiptOptionEnum)
                return GetSingleShipmentShipmentOptions.ReceiptOptionEnumToJsonValue(getSingleShipmentShipmentOptionsReceiptOptionEnum);
            if (obj is InternationalShipmentResponse.SizeEnum internationalShipmentResponseSizeEnum)
                return InternationalShipmentResponse.SizeEnumToJsonValue(internationalShipmentResponseSizeEnum);
            if (obj is InternationalShipmentResponse.TypeEnum internationalShipmentResponseTypeEnum)
                return InternationalShipmentResponse.TypeEnumToJsonValue(internationalShipmentResponseTypeEnum);
            if (obj is InternationalShipmentResponse.FormatEnum internationalShipmentResponseFormatEnum)
                return InternationalShipmentResponse.FormatEnumToJsonValue(internationalShipmentResponseFormatEnum);
            if (obj is InternationalShipmentResponseCustomsCustomsInfo.TermsOfSaleEnum internationalShipmentResponseCustomsCustomsInfoTermsOfSaleEnum)
                return InternationalShipmentResponseCustomsCustomsInfo.TermsOfSaleEnumToJsonValue(internationalShipmentResponseCustomsCustomsInfoTermsOfSaleEnum);
            if (obj is InternationalShipmentResponseFromAddress.TaxIdTypeEnum internationalShipmentResponseFromAddressTaxIdTypeEnum)
                return InternationalShipmentResponseFromAddress.TaxIdTypeEnumToJsonValue(internationalShipmentResponseFromAddressTaxIdTypeEnum);
            if (obj is InternationalShipmentResponseV2LabelLayoutInner.ContentTypeEnum internationalShipmentResponseV2LabelLayoutInnerContentTypeEnum)
                return InternationalShipmentResponseV2LabelLayoutInner.ContentTypeEnumToJsonValue(internationalShipmentResponseV2LabelLayoutInnerContentTypeEnum);
            if (obj is InternationalShipmentResponseV2LabelLayoutInner.TypeEnum internationalShipmentResponseV2LabelLayoutInnerTypeEnum)
                return InternationalShipmentResponseV2LabelLayoutInner.TypeEnumToJsonValue(internationalShipmentResponseV2LabelLayoutInnerTypeEnum);
            if (obj is InternationalShipmentResponseV2Parcel.DimUnitEnum internationalShipmentResponseV2ParcelDimUnitEnum)
                return InternationalShipmentResponseV2Parcel.DimUnitEnumToJsonValue(internationalShipmentResponseV2ParcelDimUnitEnum);
            if (obj is InternationalShipmentResponseV2Parcel.WeightUnitEnum internationalShipmentResponseV2ParcelWeightUnitEnum)
                return InternationalShipmentResponseV2Parcel.WeightUnitEnumToJsonValue(internationalShipmentResponseV2ParcelWeightUnitEnum);
            if (obj is MilitaryMailShipmentResponseV2AllOfCustomsCustomsInfo.ReasonForExportEnum militaryMailShipmentResponseV2AllOfCustomsCustomsInfoReasonForExportEnum)
                return MilitaryMailShipmentResponseV2AllOfCustomsCustomsInfo.ReasonForExportEnumToJsonValue(militaryMailShipmentResponseV2AllOfCustomsCustomsInfoReasonForExportEnum);
            if (obj is MilitaryMailShipmentResponseV2AllOfCustomsCustomsInfo.TermsOfSaleEnum militaryMailShipmentResponseV2AllOfCustomsCustomsInfoTermsOfSaleEnum)
                return MilitaryMailShipmentResponseV2AllOfCustomsCustomsInfo.TermsOfSaleEnumToJsonValue(militaryMailShipmentResponseV2AllOfCustomsCustomsInfoTermsOfSaleEnum);
            if (obj is MilitaryMailShipmentResponseV2AllOfCustomsCustomsItems.WeightUnitEnum militaryMailShipmentResponseV2AllOfCustomsCustomsItemsWeightUnitEnum)
                return MilitaryMailShipmentResponseV2AllOfCustomsCustomsItems.WeightUnitEnumToJsonValue(militaryMailShipmentResponseV2AllOfCustomsCustomsItemsWeightUnitEnum);
            if (obj is MilitaryMailShipments.SizeEnum militaryMailShipmentsSizeEnum)
                return MilitaryMailShipments.SizeEnumToJsonValue(militaryMailShipmentsSizeEnum);
            if (obj is MilitaryMailShipments.TypeEnum militaryMailShipmentsTypeEnum)
                return MilitaryMailShipments.TypeEnumToJsonValue(militaryMailShipmentsTypeEnum);
            if (obj is MilitaryMailShipments.FormatEnum militaryMailShipmentsFormatEnum)
                return MilitaryMailShipments.FormatEnumToJsonValue(militaryMailShipmentsFormatEnum);
            if (obj is MilitaryMailShipments.ContentTypeEnum militaryMailShipmentsContentTypeEnum)
                return MilitaryMailShipments.ContentTypeEnumToJsonValue(militaryMailShipmentsContentTypeEnum);
            if (obj is MilitaryMailShipmentsCustomsCustomsInfo.ReasonForExportEnum militaryMailShipmentsCustomsCustomsInfoReasonForExportEnum)
                return MilitaryMailShipmentsCustomsCustomsInfo.ReasonForExportEnumToJsonValue(militaryMailShipmentsCustomsCustomsInfoReasonForExportEnum);
            if (obj is MilitaryMailShipmentsCustomsCustomsInfo.TermsOfSaleEnum militaryMailShipmentsCustomsCustomsInfoTermsOfSaleEnum)
                return MilitaryMailShipmentsCustomsCustomsInfo.TermsOfSaleEnumToJsonValue(militaryMailShipmentsCustomsCustomsInfoTermsOfSaleEnum);
            if (obj is MilitaryMailShipmentsCustomsCustomsItemsInner.WeightUnitEnum militaryMailShipmentsCustomsCustomsItemsInnerWeightUnitEnum)
                return MilitaryMailShipmentsCustomsCustomsItemsInner.WeightUnitEnumToJsonValue(militaryMailShipmentsCustomsCustomsItemsInnerWeightUnitEnum);
            if (obj is MilitaryMailShipmentsParcel.DimUnitEnum militaryMailShipmentsParcelDimUnitEnum)
                return MilitaryMailShipmentsParcel.DimUnitEnumToJsonValue(militaryMailShipmentsParcelDimUnitEnum);
            if (obj is MilitaryMailShipmentsParcel.WeightUnitEnum militaryMailShipmentsParcelWeightUnitEnum)
                return MilitaryMailShipmentsParcel.WeightUnitEnumToJsonValue(militaryMailShipmentsParcelWeightUnitEnum);
            if (obj is MilitaryMailShipmentsRequestV2.RateShopByEnum militaryMailShipmentsRequestV2RateShopByEnum)
                return MilitaryMailShipmentsRequestV2.RateShopByEnumToJsonValue(militaryMailShipmentsRequestV2RateShopByEnum);
            if (obj is MilitaryMailShipmentsRequestV2.LabelSizeEnum militaryMailShipmentsRequestV2LabelSizeEnum)
                return MilitaryMailShipmentsRequestV2.LabelSizeEnumToJsonValue(militaryMailShipmentsRequestV2LabelSizeEnum);
            if (obj is MilitaryMailShipmentsRequestV2.LabelTypeEnum militaryMailShipmentsRequestV2LabelTypeEnum)
                return MilitaryMailShipmentsRequestV2.LabelTypeEnumToJsonValue(militaryMailShipmentsRequestV2LabelTypeEnum);
            if (obj is MilitaryMailShipmentsRequestV2.LabelFormatEnum militaryMailShipmentsRequestV2LabelFormatEnum)
                return MilitaryMailShipmentsRequestV2.LabelFormatEnumToJsonValue(militaryMailShipmentsRequestV2LabelFormatEnum);
            if (obj is MilitaryMailShipmentsRequestV2.ContentTypeEnum militaryMailShipmentsRequestV2ContentTypeEnum)
                return MilitaryMailShipmentsRequestV2.ContentTypeEnumToJsonValue(militaryMailShipmentsRequestV2ContentTypeEnum);
            if (obj is MilitaryMailShipmentsRequestV2DeliveryConfirmation.TypeEnum militaryMailShipmentsRequestV2DeliveryConfirmationTypeEnum)
                return MilitaryMailShipmentsRequestV2DeliveryConfirmation.TypeEnumToJsonValue(militaryMailShipmentsRequestV2DeliveryConfirmationTypeEnum);
            if (obj is MilitaryMailShipmentsRequestV2Handling.TypeEnum militaryMailShipmentsRequestV2HandlingTypeEnum)
                return MilitaryMailShipmentsRequestV2Handling.TypeEnumToJsonValue(militaryMailShipmentsRequestV2HandlingTypeEnum);
            if (obj is MilitaryMailShipmentsRequestV2Insurance.TypeEnum militaryMailShipmentsRequestV2InsuranceTypeEnum)
                return MilitaryMailShipmentsRequestV2Insurance.TypeEnumToJsonValue(militaryMailShipmentsRequestV2InsuranceTypeEnum);
            if (obj is MultipieceShipmentInternationalRequest.SizeEnum multipieceShipmentInternationalRequestSizeEnum)
                return MultipieceShipmentInternationalRequest.SizeEnumToJsonValue(multipieceShipmentInternationalRequestSizeEnum);
            if (obj is MultipieceShipmentInternationalRequest.FormatEnum multipieceShipmentInternationalRequestFormatEnum)
                return MultipieceShipmentInternationalRequest.FormatEnumToJsonValue(multipieceShipmentInternationalRequestFormatEnum);
            if (obj is MultipieceShipmentInternationalRequest.TypeEnum multipieceShipmentInternationalRequestTypeEnum)
                return MultipieceShipmentInternationalRequest.TypeEnumToJsonValue(multipieceShipmentInternationalRequestTypeEnum);
            if (obj is MultipieceShipmentInternationalRequest.ContentTypeEnum multipieceShipmentInternationalRequestContentTypeEnum)
                return MultipieceShipmentInternationalRequest.ContentTypeEnumToJsonValue(multipieceShipmentInternationalRequestContentTypeEnum);
            if (obj is MultipieceShipmentInternationalRequestCustomsCustomsInfo.TermsOfSaleEnum multipieceShipmentInternationalRequestCustomsCustomsInfoTermsOfSaleEnum)
                return MultipieceShipmentInternationalRequestCustomsCustomsInfo.TermsOfSaleEnumToJsonValue(multipieceShipmentInternationalRequestCustomsCustomsInfoTermsOfSaleEnum);
            if (obj is MultipieceShipmentInternationalRequestCustomsCustomsItemsInner.WeightUnitEnum multipieceShipmentInternationalRequestCustomsCustomsItemsInnerWeightUnitEnum)
                return MultipieceShipmentInternationalRequestCustomsCustomsItemsInner.WeightUnitEnumToJsonValue(multipieceShipmentInternationalRequestCustomsCustomsItemsInnerWeightUnitEnum);
            if (obj is MultipieceShipmentInternationalRequestFromAddress.TaxIdTypeEnum multipieceShipmentInternationalRequestFromAddressTaxIdTypeEnum)
                return MultipieceShipmentInternationalRequestFromAddress.TaxIdTypeEnumToJsonValue(multipieceShipmentInternationalRequestFromAddressTaxIdTypeEnum);
            if (obj is MultipieceShipmentInternationalRequestMultiPieceParcelsInner.ParcelTypeEnum multipieceShipmentInternationalRequestMultiPieceParcelsInnerParcelTypeEnum)
                return MultipieceShipmentInternationalRequestMultiPieceParcelsInner.ParcelTypeEnumToJsonValue(multipieceShipmentInternationalRequestMultiPieceParcelsInnerParcelTypeEnum);
            if (obj is MultipieceShipmentInternationalRequestToAddress.TaxIdTypeEnum multipieceShipmentInternationalRequestToAddressTaxIdTypeEnum)
                return MultipieceShipmentInternationalRequestToAddress.TaxIdTypeEnumToJsonValue(multipieceShipmentInternationalRequestToAddressTaxIdTypeEnum);
            if (obj is MultipieceShipmentInternationalResponseCustomsCustomsInfo.TermsOfSaleEnum multipieceShipmentInternationalResponseCustomsCustomsInfoTermsOfSaleEnum)
                return MultipieceShipmentInternationalResponseCustomsCustomsInfo.TermsOfSaleEnumToJsonValue(multipieceShipmentInternationalResponseCustomsCustomsInfoTermsOfSaleEnum);
            if (obj is MultipieceShipmentInternationalResponseCustomsCustomsItemsInner.WeightUnitEnum multipieceShipmentInternationalResponseCustomsCustomsItemsInnerWeightUnitEnum)
                return MultipieceShipmentInternationalResponseCustomsCustomsItemsInner.WeightUnitEnumToJsonValue(multipieceShipmentInternationalResponseCustomsCustomsItemsInnerWeightUnitEnum);
            if (obj is MultipieceShipmentInternationalResponseFromAddress.TaxIdTypeEnum multipieceShipmentInternationalResponseFromAddressTaxIdTypeEnum)
                return MultipieceShipmentInternationalResponseFromAddress.TaxIdTypeEnumToJsonValue(multipieceShipmentInternationalResponseFromAddressTaxIdTypeEnum);
            if (obj is MultipieceShipmentInternationalResponseToAddress.TaxIdTypeEnum multipieceShipmentInternationalResponseToAddressTaxIdTypeEnum)
                return MultipieceShipmentInternationalResponseToAddress.TaxIdTypeEnumToJsonValue(multipieceShipmentInternationalResponseToAddressTaxIdTypeEnum);
            if (obj is MultipieceShipmentRequest.FormatEnum multipieceShipmentRequestFormatEnum)
                return MultipieceShipmentRequest.FormatEnumToJsonValue(multipieceShipmentRequestFormatEnum);
            if (obj is MultipieceShipmentRequestMultiPieceParcelsInner.ParcelTypeEnum multipieceShipmentRequestMultiPieceParcelsInnerParcelTypeEnum)
                return MultipieceShipmentRequestMultiPieceParcelsInner.ParcelTypeEnumToJsonValue(multipieceShipmentRequestMultiPieceParcelsInnerParcelTypeEnum);
            if (obj is MultipieceShipmentResponseLabelLayoutInner.ContentTypeEnum multipieceShipmentResponseLabelLayoutInnerContentTypeEnum)
                return MultipieceShipmentResponseLabelLayoutInner.ContentTypeEnumToJsonValue(multipieceShipmentResponseLabelLayoutInnerContentTypeEnum);
            if (obj is MultipieceShipmentResponseLabelLayoutInner.FileFormatEnum multipieceShipmentResponseLabelLayoutInnerFileFormatEnum)
                return MultipieceShipmentResponseLabelLayoutInner.FileFormatEnumToJsonValue(multipieceShipmentResponseLabelLayoutInnerFileFormatEnum);
            if (obj is MultipieceShipmentResponseLabelLayoutInner.SizeEnum multipieceShipmentResponseLabelLayoutInnerSizeEnum)
                return MultipieceShipmentResponseLabelLayoutInner.SizeEnumToJsonValue(multipieceShipmentResponseLabelLayoutInnerSizeEnum);
            if (obj is MultipieceShipmentResponseLabelLayoutInner.TypeEnum multipieceShipmentResponseLabelLayoutInnerTypeEnum)
                return MultipieceShipmentResponseLabelLayoutInner.TypeEnumToJsonValue(multipieceShipmentResponseLabelLayoutInnerTypeEnum);
            if (obj is MultipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocument.ContentTypeEnum multipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocumentContentTypeEnum)
                return MultipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocument.ContentTypeEnumToJsonValue(multipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocumentContentTypeEnum);
            if (obj is MultipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocument.FileFormatEnum multipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocumentFileFormatEnum)
                return MultipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocument.FileFormatEnumToJsonValue(multipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocumentFileFormatEnum);
            if (obj is MultipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocument.SizeEnum multipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocumentSizeEnum)
                return MultipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocument.SizeEnumToJsonValue(multipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocumentSizeEnum);
            if (obj is MultipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocument.TypeEnum multipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocumentTypeEnum)
                return MultipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocument.TypeEnumToJsonValue(multipieceShipmentSplitParcelLabelResponseMultiPieceRatesInnerMultiPieceParcelsInnerDocumentTypeEnum);
            if (obj is ParcelV2.WeightUnitEnum parcelV2WeightUnitEnum)
                return ParcelV2.WeightUnitEnumToJsonValue(parcelV2WeightUnitEnum);
            if (obj is ParcelV2.DimUnitEnum parcelV2DimUnitEnum)
                return ParcelV2.DimUnitEnumToJsonValue(parcelV2DimUnitEnum);
            if (obj is PrintDocumentRequest.DataTypeEnum printDocumentRequestDataTypeEnum)
                return PrintDocumentRequest.DataTypeEnumToJsonValue(printDocumentRequestDataTypeEnum);
            if (obj is PrintDocumentRequest.DocumentTypeEnum printDocumentRequestDocumentTypeEnum)
                return PrintDocumentRequest.DocumentTypeEnumToJsonValue(printDocumentRequestDocumentTypeEnum);
            if (obj is PrintDocumentRequest.FormNameEnum printDocumentRequestFormNameEnum)
                return PrintDocumentRequest.FormNameEnumToJsonValue(printDocumentRequestFormNameEnum);
            if (obj is RateShipmentRequest.RateShopByEnum rateShipmentRequestRateShopByEnum)
                return RateShipmentRequest.RateShopByEnumToJsonValue(rateShipmentRequestRateShopByEnum);
            if (obj is RateShopParcel.DimUnitEnum rateShopParcelDimUnitEnum)
                return RateShopParcel.DimUnitEnumToJsonValue(rateShopParcelDimUnitEnum);
            if (obj is RateShopParcel.WeightUnitEnum rateShopParcelWeightUnitEnum)
                return RateShopParcel.WeightUnitEnumToJsonValue(rateShopParcelWeightUnitEnum);
            if (obj is RateShopResponseParcel.DimUnitEnum rateShopResponseParcelDimUnitEnum)
                return RateShopResponseParcel.DimUnitEnumToJsonValue(rateShopResponseParcelDimUnitEnum);
            if (obj is RateShopResponseParcel.WeightUnitEnum rateShopResponseParcelWeightUnitEnum)
                return RateShopResponseParcel.WeightUnitEnumToJsonValue(rateShopResponseParcelWeightUnitEnum);
            if (obj is RateShopbyCarrier.RateShopByEnum rateShopbyCarrierRateShopByEnum)
                return RateShopbyCarrier.RateShopByEnumToJsonValue(rateShopbyCarrierRateShopByEnum);
            if (obj is RateShopbyCarrierParcel.DimUnitEnum rateShopbyCarrierParcelDimUnitEnum)
                return RateShopbyCarrierParcel.DimUnitEnumToJsonValue(rateShopbyCarrierParcelDimUnitEnum);
            if (obj is RateShopbyCarrierParcel.WeightUnitEnum rateShopbyCarrierParcelWeightUnitEnum)
                return RateShopbyCarrierParcel.WeightUnitEnumToJsonValue(rateShopbyCarrierParcelWeightUnitEnum);
            if (obj is RateShopbyRategroup.RateShopByEnum rateShopbyRategroupRateShopByEnum)
                return RateShopbyRategroup.RateShopByEnumToJsonValue(rateShopbyRategroupRateShopByEnum);
            if (obj is RateShopbyRuleset.RateShopByEnum rateShopbyRulesetRateShopByEnum)
                return RateShopbyRuleset.RateShopByEnumToJsonValue(rateShopbyRulesetRateShopByEnum);
            if (obj is RateShopbyRulesetByRuleSet.RuleTypeEnum rateShopbyRulesetByRuleSetRuleTypeEnum)
                return RateShopbyRulesetByRuleSet.RuleTypeEnumToJsonValue(rateShopbyRulesetByRuleSetRuleTypeEnum);
            if (obj is ReprintShipment.SizeEnum reprintShipmentSizeEnum)
                return ReprintShipment.SizeEnumToJsonValue(reprintShipmentSizeEnum);
            if (obj is ReprintShipment.TypeEnum reprintShipmentTypeEnum)
                return ReprintShipment.TypeEnumToJsonValue(reprintShipmentTypeEnum);
            if (obj is ReprintShipment.FormatEnum reprintShipmentFormatEnum)
                return ReprintShipment.FormatEnumToJsonValue(reprintShipmentFormatEnum);
            if (obj is ReprintShipmentParcel.DimUnitEnum reprintShipmentParcelDimUnitEnum)
                return ReprintShipmentParcel.DimUnitEnumToJsonValue(reprintShipmentParcelDimUnitEnum);
            if (obj is ReprintShipmentParcel.WeightUnitEnum reprintShipmentParcelWeightUnitEnum)
                return ReprintShipmentParcel.WeightUnitEnumToJsonValue(reprintShipmentParcelWeightUnitEnum);
            if (obj is ReprintShipmentShipmentOptions.ReceiptOptionEnum reprintShipmentShipmentOptionsReceiptOptionEnum)
                return ReprintShipmentShipmentOptions.ReceiptOptionEnumToJsonValue(reprintShipmentShipmentOptionsReceiptOptionEnum);
            if (obj is ReprintShipmentV2LabelLayoutInner.ContentTypeEnum reprintShipmentV2LabelLayoutInnerContentTypeEnum)
                return ReprintShipmentV2LabelLayoutInner.ContentTypeEnumToJsonValue(reprintShipmentV2LabelLayoutInnerContentTypeEnum);
            if (obj is ReprintShipmentV2LabelLayoutInner.FileFormatEnum reprintShipmentV2LabelLayoutInnerFileFormatEnum)
                return ReprintShipmentV2LabelLayoutInner.FileFormatEnumToJsonValue(reprintShipmentV2LabelLayoutInnerFileFormatEnum);
            if (obj is ReprintShipmentV2LabelLayoutInner.SizeEnum reprintShipmentV2LabelLayoutInnerSizeEnum)
                return ReprintShipmentV2LabelLayoutInner.SizeEnumToJsonValue(reprintShipmentV2LabelLayoutInnerSizeEnum);
            if (obj is ReprintShipmentV2LabelLayoutInner.TypeEnum reprintShipmentV2LabelLayoutInnerTypeEnum)
                return ReprintShipmentV2LabelLayoutInner.TypeEnumToJsonValue(reprintShipmentV2LabelLayoutInnerTypeEnum);
            if (obj is ReturnLabel.SizeEnum returnLabelSizeEnum)
                return ReturnLabel.SizeEnumToJsonValue(returnLabelSizeEnum);
            if (obj is ReturnLabel.TypeEnum returnLabelTypeEnum)
                return ReturnLabel.TypeEnumToJsonValue(returnLabelTypeEnum);
            if (obj is ReturnLabelParcel.DimUnitEnum returnLabelParcelDimUnitEnum)
                return ReturnLabelParcel.DimUnitEnumToJsonValue(returnLabelParcelDimUnitEnum);
            if (obj is ReturnLabelParcel.WeightUnitEnum returnLabelParcelWeightUnitEnum)
                return ReturnLabelParcel.WeightUnitEnumToJsonValue(returnLabelParcelWeightUnitEnum);
            if (obj is SchedulePickupDHLEXPRequest.PackageLocationEnum schedulePickupDHLEXPRequestPackageLocationEnum)
                return SchedulePickupDHLEXPRequest.PackageLocationEnumToJsonValue(schedulePickupDHLEXPRequestPackageLocationEnum);
            if (obj is SchedulePickupDHLEXPResponse.PackageLocationEnum schedulePickupDHLEXPResponsePackageLocationEnum)
                return SchedulePickupDHLEXPResponse.PackageLocationEnumToJsonValue(schedulePickupDHLEXPResponsePackageLocationEnum);
            if (obj is SchedulePickupFedexRequest.PackageLocationEnum schedulePickupFedexRequestPackageLocationEnum)
                return SchedulePickupFedexRequest.PackageLocationEnumToJsonValue(schedulePickupFedexRequestPackageLocationEnum);
            if (obj is SchedulePickupUPSRequest.PackageLocationEnum schedulePickupUPSRequestPackageLocationEnum)
                return SchedulePickupUPSRequest.PackageLocationEnumToJsonValue(schedulePickupUPSRequestPackageLocationEnum);
            if (obj is SchedulePickupUSPSRequest.PackageLocationEnum schedulePickupUSPSRequestPackageLocationEnum)
                return SchedulePickupUSPSRequest.PackageLocationEnumToJsonValue(schedulePickupUSPSRequestPackageLocationEnum);
            if (obj is SendingOptions.CarrierEnum sendingOptionsCarrierEnum)
                return SendingOptions.CarrierEnumToJsonValue(sendingOptionsCarrierEnum);
            if (obj is SendingOptions.LabelSizeEnum sendingOptionsLabelSizeEnum)
                return SendingOptions.LabelSizeEnumToJsonValue(sendingOptionsLabelSizeEnum);
            if (obj is SendingOptionsResponse.LabelSizeEnum sendingOptionsResponseLabelSizeEnum)
                return SendingOptionsResponse.LabelSizeEnumToJsonValue(sendingOptionsResponseLabelSizeEnum);
            if (obj is ShipmentDomestic.SizeEnum shipmentDomesticSizeEnum)
                return ShipmentDomestic.SizeEnumToJsonValue(shipmentDomesticSizeEnum);
            if (obj is ShipmentDomestic.TypeEnum shipmentDomesticTypeEnum)
                return ShipmentDomestic.TypeEnumToJsonValue(shipmentDomesticTypeEnum);
            if (obj is ShipmentDomestic.FormatEnum shipmentDomesticFormatEnum)
                return ShipmentDomestic.FormatEnumToJsonValue(shipmentDomesticFormatEnum);
            if (obj is ShipmentDomestic.ContentTypeEnum shipmentDomesticContentTypeEnum)
                return ShipmentDomestic.ContentTypeEnumToJsonValue(shipmentDomesticContentTypeEnum);
            if (obj is ShipmentDomesticByCarrier.RateShopByEnum shipmentDomesticByCarrierRateShopByEnum)
                return ShipmentDomesticByCarrier.RateShopByEnumToJsonValue(shipmentDomesticByCarrierRateShopByEnum);
            if (obj is ShipmentDomesticByCarrier.LabelSizeEnum shipmentDomesticByCarrierLabelSizeEnum)
                return ShipmentDomesticByCarrier.LabelSizeEnumToJsonValue(shipmentDomesticByCarrierLabelSizeEnum);
            if (obj is ShipmentDomesticByCarrier.LabelTypeEnum shipmentDomesticByCarrierLabelTypeEnum)
                return ShipmentDomesticByCarrier.LabelTypeEnumToJsonValue(shipmentDomesticByCarrierLabelTypeEnum);
            if (obj is ShipmentDomesticByCarrier.LabelFormatEnum shipmentDomesticByCarrierLabelFormatEnum)
                return ShipmentDomesticByCarrier.LabelFormatEnumToJsonValue(shipmentDomesticByCarrierLabelFormatEnum);
            if (obj is ShipmentDomesticByCarrier.ContentTypeEnum shipmentDomesticByCarrierContentTypeEnum)
                return ShipmentDomesticByCarrier.ContentTypeEnumToJsonValue(shipmentDomesticByCarrierContentTypeEnum);
            if (obj is ShipmentDomesticByCarrierCustomsCustomsInfo.ReasonForExportEnum shipmentDomesticByCarrierCustomsCustomsInfoReasonForExportEnum)
                return ShipmentDomesticByCarrierCustomsCustomsInfo.ReasonForExportEnumToJsonValue(shipmentDomesticByCarrierCustomsCustomsInfoReasonForExportEnum);
            if (obj is ShipmentDomesticByCarrierCustomsCustomsInfo.TermsOfSaleEnum shipmentDomesticByCarrierCustomsCustomsInfoTermsOfSaleEnum)
                return ShipmentDomesticByCarrierCustomsCustomsInfo.TermsOfSaleEnumToJsonValue(shipmentDomesticByCarrierCustomsCustomsInfoTermsOfSaleEnum);
            if (obj is ShipmentDomesticByCarrierDeliveryConfirmation.TypeEnum shipmentDomesticByCarrierDeliveryConfirmationTypeEnum)
                return ShipmentDomesticByCarrierDeliveryConfirmation.TypeEnumToJsonValue(shipmentDomesticByCarrierDeliveryConfirmationTypeEnum);
            if (obj is ShipmentDomesticByCarrierHandling.TypeEnum shipmentDomesticByCarrierHandlingTypeEnum)
                return ShipmentDomesticByCarrierHandling.TypeEnumToJsonValue(shipmentDomesticByCarrierHandlingTypeEnum);
            if (obj is ShipmentDomesticByCarrierInsurance.TypeEnum shipmentDomesticByCarrierInsuranceTypeEnum)
                return ShipmentDomesticByCarrierInsurance.TypeEnumToJsonValue(shipmentDomesticByCarrierInsuranceTypeEnum);
            if (obj is ShipmentDomesticByRateGroup.LabelSizeEnum shipmentDomesticByRateGroupLabelSizeEnum)
                return ShipmentDomesticByRateGroup.LabelSizeEnumToJsonValue(shipmentDomesticByRateGroupLabelSizeEnum);
            if (obj is ShipmentDomesticByRateGroup.LabelTypeEnum shipmentDomesticByRateGroupLabelTypeEnum)
                return ShipmentDomesticByRateGroup.LabelTypeEnumToJsonValue(shipmentDomesticByRateGroupLabelTypeEnum);
            if (obj is ShipmentDomesticByRateGroup.LabelFormatEnum shipmentDomesticByRateGroupLabelFormatEnum)
                return ShipmentDomesticByRateGroup.LabelFormatEnumToJsonValue(shipmentDomesticByRateGroupLabelFormatEnum);
            if (obj is ShipmentDomesticByRateGroup.RateShopByEnum shipmentDomesticByRateGroupRateShopByEnum)
                return ShipmentDomesticByRateGroup.RateShopByEnumToJsonValue(shipmentDomesticByRateGroupRateShopByEnum);
            if (obj is ShipmentDomesticByRateGroup.ContentTypeEnum shipmentDomesticByRateGroupContentTypeEnum)
                return ShipmentDomesticByRateGroup.ContentTypeEnumToJsonValue(shipmentDomesticByRateGroupContentTypeEnum);
            if (obj is ShipmentDomesticByRateGroupByRateGroup.RuleTypeEnum shipmentDomesticByRateGroupByRateGroupRuleTypeEnum)
                return ShipmentDomesticByRateGroupByRateGroup.RuleTypeEnumToJsonValue(shipmentDomesticByRateGroupByRateGroupRuleTypeEnum);
            if (obj is ShipmentDomesticByRuleset.LabelSizeEnum shipmentDomesticByRulesetLabelSizeEnum)
                return ShipmentDomesticByRuleset.LabelSizeEnumToJsonValue(shipmentDomesticByRulesetLabelSizeEnum);
            if (obj is ShipmentDomesticByRuleset.LabelTypeEnum shipmentDomesticByRulesetLabelTypeEnum)
                return ShipmentDomesticByRuleset.LabelTypeEnumToJsonValue(shipmentDomesticByRulesetLabelTypeEnum);
            if (obj is ShipmentDomesticByRuleset.LabelFormatEnum shipmentDomesticByRulesetLabelFormatEnum)
                return ShipmentDomesticByRuleset.LabelFormatEnumToJsonValue(shipmentDomesticByRulesetLabelFormatEnum);
            if (obj is ShipmentDomesticByRuleset.RateShopByEnum shipmentDomesticByRulesetRateShopByEnum)
                return ShipmentDomesticByRuleset.RateShopByEnumToJsonValue(shipmentDomesticByRulesetRateShopByEnum);
            if (obj is ShipmentDomesticByRuleset.ContentTypeEnum shipmentDomesticByRulesetContentTypeEnum)
                return ShipmentDomesticByRuleset.ContentTypeEnumToJsonValue(shipmentDomesticByRulesetContentTypeEnum);
            if (obj is ShipmentDomesticByRulesetByRuleSet.RuleTypeEnum shipmentDomesticByRulesetByRuleSetRuleTypeEnum)
                return ShipmentDomesticByRulesetByRuleSet.RuleTypeEnumToJsonValue(shipmentDomesticByRulesetByRuleSetRuleTypeEnum);
            if (obj is ShipmentDomesticByRulesetShipmentOptions.ShipperIDEnum shipmentDomesticByRulesetShipmentOptionsShipperIDEnum)
                return ShipmentDomesticByRulesetShipmentOptions.ShipperIDEnumToJsonValue(shipmentDomesticByRulesetShipmentOptionsShipperIDEnum);
            if (obj is ShipmentDomesticCustomsCustomsInfo.ReasonForExportEnum shipmentDomesticCustomsCustomsInfoReasonForExportEnum)
                return ShipmentDomesticCustomsCustomsInfo.ReasonForExportEnumToJsonValue(shipmentDomesticCustomsCustomsInfoReasonForExportEnum);
            if (obj is ShipmentDomesticCustomsCustomsInfo.TermsOfSaleEnum shipmentDomesticCustomsCustomsInfoTermsOfSaleEnum)
                return ShipmentDomesticCustomsCustomsInfo.TermsOfSaleEnumToJsonValue(shipmentDomesticCustomsCustomsInfoTermsOfSaleEnum);
            if (obj is ShipmentDomesticCustomsCustomsItemsInner.WeightUnitEnum shipmentDomesticCustomsCustomsItemsInnerWeightUnitEnum)
                return ShipmentDomesticCustomsCustomsItemsInner.WeightUnitEnumToJsonValue(shipmentDomesticCustomsCustomsItemsInnerWeightUnitEnum);
            if (obj is ShipmentDomesticParcel.DimUnitEnum shipmentDomesticParcelDimUnitEnum)
                return ShipmentDomesticParcel.DimUnitEnumToJsonValue(shipmentDomesticParcelDimUnitEnum);
            if (obj is ShipmentDomesticParcel.WeightUnitEnum shipmentDomesticParcelWeightUnitEnum)
                return ShipmentDomesticParcel.WeightUnitEnumToJsonValue(shipmentDomesticParcelWeightUnitEnum);
            if (obj is ShipmentDomesticShipmentOptions.ReceiptOptionEnum shipmentDomesticShipmentOptionsReceiptOptionEnum)
                return ShipmentDomesticShipmentOptions.ReceiptOptionEnumToJsonValue(shipmentDomesticShipmentOptionsReceiptOptionEnum);
            if (obj is ShipmentInternational.SizeEnum shipmentInternationalSizeEnum)
                return ShipmentInternational.SizeEnumToJsonValue(shipmentInternationalSizeEnum);
            if (obj is ShipmentInternational.TypeEnum shipmentInternationalTypeEnum)
                return ShipmentInternational.TypeEnumToJsonValue(shipmentInternationalTypeEnum);
            if (obj is ShipmentInternational.ContentTypeEnum shipmentInternationalContentTypeEnum)
                return ShipmentInternational.ContentTypeEnumToJsonValue(shipmentInternationalContentTypeEnum);
            if (obj is ShipmentInternationalByCarrier.RateShopByEnum shipmentInternationalByCarrierRateShopByEnum)
                return ShipmentInternationalByCarrier.RateShopByEnumToJsonValue(shipmentInternationalByCarrierRateShopByEnum);
            if (obj is ShipmentInternationalByCarrier.LabelTypeEnum shipmentInternationalByCarrierLabelTypeEnum)
                return ShipmentInternationalByCarrier.LabelTypeEnumToJsonValue(shipmentInternationalByCarrierLabelTypeEnum);
            if (obj is ShipmentInternationalByCarrier.LabelFormatEnum shipmentInternationalByCarrierLabelFormatEnum)
                return ShipmentInternationalByCarrier.LabelFormatEnumToJsonValue(shipmentInternationalByCarrierLabelFormatEnum);
            if (obj is ShipmentInternationalByCarrier.ContentTypeEnum shipmentInternationalByCarrierContentTypeEnum)
                return ShipmentInternationalByCarrier.ContentTypeEnumToJsonValue(shipmentInternationalByCarrierContentTypeEnum);
            if (obj is ShipmentInternationalByCarrierFromAddress.TaxIdTypeEnum shipmentInternationalByCarrierFromAddressTaxIdTypeEnum)
                return ShipmentInternationalByCarrierFromAddress.TaxIdTypeEnumToJsonValue(shipmentInternationalByCarrierFromAddressTaxIdTypeEnum);
            if (obj is ShipmentInternationalByCarrierToAddress.TaxIdTypeEnum shipmentInternationalByCarrierToAddressTaxIdTypeEnum)
                return ShipmentInternationalByCarrierToAddress.TaxIdTypeEnumToJsonValue(shipmentInternationalByCarrierToAddressTaxIdTypeEnum);
            if (obj is ShipmentInternationalCustomsCustomsDocumentsInner.DocumentTypeEnum shipmentInternationalCustomsCustomsDocumentsInnerDocumentTypeEnum)
                return ShipmentInternationalCustomsCustomsDocumentsInner.DocumentTypeEnumToJsonValue(shipmentInternationalCustomsCustomsDocumentsInnerDocumentTypeEnum);
            if (obj is ShipmentInternationalCustomsCustomsInfo.ReasonForExportEnum shipmentInternationalCustomsCustomsInfoReasonForExportEnum)
                return ShipmentInternationalCustomsCustomsInfo.ReasonForExportEnumToJsonValue(shipmentInternationalCustomsCustomsInfoReasonForExportEnum);
            if (obj is ShipmentInternationalCustomsCustomsInfo.TermsOfSaleEnum shipmentInternationalCustomsCustomsInfoTermsOfSaleEnum)
                return ShipmentInternationalCustomsCustomsInfo.TermsOfSaleEnumToJsonValue(shipmentInternationalCustomsCustomsInfoTermsOfSaleEnum);
            if (obj is ShipmentInternationalCustomsCustomsItemsInner.WeightUnitEnum shipmentInternationalCustomsCustomsItemsInnerWeightUnitEnum)
                return ShipmentInternationalCustomsCustomsItemsInner.WeightUnitEnumToJsonValue(shipmentInternationalCustomsCustomsItemsInnerWeightUnitEnum);
            if (obj is ShipmentInternationalFromAddress.TaxIdTypeEnum shipmentInternationalFromAddressTaxIdTypeEnum)
                return ShipmentInternationalFromAddress.TaxIdTypeEnumToJsonValue(shipmentInternationalFromAddressTaxIdTypeEnum);
            if (obj is ShipmentInternationalToAddress.TaxIdTypeEnum shipmentInternationalToAddressTaxIdTypeEnum)
                return ShipmentInternationalToAddress.TaxIdTypeEnumToJsonValue(shipmentInternationalToAddressTaxIdTypeEnum);
            if (obj is ShipmentOptions.ReceiptOptionEnum shipmentOptionsReceiptOptionEnum)
                return ShipmentOptions.ReceiptOptionEnumToJsonValue(shipmentOptionsReceiptOptionEnum);
            if (obj is SingleRateParcel.DimUnitEnum singleRateParcelDimUnitEnum)
                return SingleRateParcel.DimUnitEnumToJsonValue(singleRateParcelDimUnitEnum);
            if (obj is SingleRateParcel.WeightUnitEnum singleRateParcelWeightUnitEnum)
                return SingleRateParcel.WeightUnitEnumToJsonValue(singleRateParcelWeightUnitEnum);
            if (obj is SingleRateResponseParcel.DimUnitEnum singleRateResponseParcelDimUnitEnum)
                return SingleRateResponseParcel.DimUnitEnumToJsonValue(singleRateResponseParcelDimUnitEnum);
            if (obj is SingleRateResponseParcel.WeightUnitEnum singleRateResponseParcelWeightUnitEnum)
                return SingleRateResponseParcel.WeightUnitEnumToJsonValue(singleRateResponseParcelWeightUnitEnum);
            if (obj is SoldToAddressV2.TaxIdTypeEnum soldToAddressV2TaxIdTypeEnum)
                return SoldToAddressV2.TaxIdTypeEnumToJsonValue(soldToAddressV2TaxIdTypeEnum);
            if (obj is ToAddressV2internationalResponse.TaxIdTypeEnum toAddressV2internationalResponseTaxIdTypeEnum)
                return ToAddressV2internationalResponse.TaxIdTypeEnumToJsonValue(toAddressV2internationalResponseTaxIdTypeEnum);
            if (obj is UPSCarrierPayment.PartyEnum uPSCarrierPaymentPartyEnum)
                return UPSCarrierPayment.PartyEnumToJsonValue(uPSCarrierPaymentPartyEnum);
            if (obj is UPSCarrierPayment.TypeOfChargeEnum uPSCarrierPaymentTypeOfChargeEnum)
                return UPSCarrierPayment.TypeOfChargeEnumToJsonValue(uPSCarrierPaymentTypeOfChargeEnum);
            if (obj is UploadETDRequest.FormatEnum uploadETDRequestFormatEnum)
                return UploadETDRequest.FormatEnumToJsonValue(uploadETDRequestFormatEnum);
            if (obj is UploadETDRequest.DocumentTypeEnum uploadETDRequestDocumentTypeEnum)
                return UploadETDRequest.DocumentTypeEnumToJsonValue(uploadETDRequestDocumentTypeEnum);
            if (obj is ICollection collection)
            {
                List<string> entries = new List<string>();
                foreach (var entry in collection)
                    entries.Add(ParameterToString(entry));
                return string.Join(",", entries);
            }

            return Convert.ToString(obj, System.Globalization.CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">string to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;

            if (input == null)
            {
                throw new ArgumentNullException("input");
            }

            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }

            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;

            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);

                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }

            return sb.ToString();
        }

        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">string to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return Convert.ToBase64String(global::System.Text.Encoding.UTF8.GetBytes(text));
        }

        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            using (var ms = new MemoryStream())
            {
                inputStream.CopyTo(ms);
                return ms.ToArray();
            }
        }

        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public static string SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return null;

            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType))
                    return contentType;
            }

            return contentTypes[0]; // use the first content type specified in 'consumes'
        }

        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public static string SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;

            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";

            return string.Join(",", accepts);
        }

        /// <summary>
        /// Provides a case-insensitive check that a provided content type is a known JSON-like content type.
        /// </summary>
        private static readonly Regex JsonRegex = new Regex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$");

        /// <summary>
        /// Check if the given MIME is a JSON MIME.
        /// JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public static bool IsJsonMime(string mime)
        {
            if (string.IsNullOrWhiteSpace(mime)) return false;

            return JsonRegex.IsMatch(mime) || mime.Equals("application/json-patch+json");
        }

        /// <summary>
        /// Get the discriminator
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="discriminator"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public static string GetDiscriminator(Utf8JsonReader utf8JsonReader, string discriminator)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    if (localVarJsonPropertyName != null && localVarJsonPropertyName.Equals(discriminator))
                        return utf8JsonReader.GetString();
                }
            }

            throw new JsonException("The specified discriminator was not found.");
        }

        /// <summary>
        /// The base path of the API
        /// </summary>
        public const string BASE_ADDRESS = "https://api-dev.sendpro360.pitneycloud.com/shipping";

        /// <summary>
        /// The scheme of the API
        /// </summary>
        public const string SCHEME = "https";

        /// <summary>
        /// The context path of the API
        /// </summary>
        public const string CONTEXT_PATH = "/shipping";

        /// <summary>
        /// The host of the API
        /// </summary>
        public const string HOST = "api-dev.sendpro360.pitneycloud.com";

        /// <summary>
        /// The format to use for DateTime serialization
        /// </summary>
        public const string ISO8601_DATETIME_FORMAT = "o";
    }
}
