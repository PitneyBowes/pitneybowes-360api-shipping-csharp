/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.pitneybowes.api360.Client;
using com.pitneybowes.api360.Model;

namespace com.pitneybowes.api360.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrintApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Printer mapping
        /// </summary>
        /// <remarks>
        /// delete printer mapping document
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePrinterMapping(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete Printer mapping
        /// </summary>
        /// <remarks>
        /// delete printer mapping document
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePrinterMappingWithHttpInfo(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Printer mapping
        /// </summary>
        /// <remarks>
        /// Get printer mapping document
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PrinterMappingGetResponse</returns>
        PrinterMappingGetResponse GetPrinterMapping(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Printer mapping
        /// </summary>
        /// <remarks>
        /// Get printer mapping document
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PrinterMappingGetResponse</returns>
        ApiResponse<PrinterMappingGetResponse> GetPrinterMappingWithHttpInfo(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Job status
        /// </summary>
        /// <remarks>
        /// job status
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The jobId, a unique identifier assigned for the job.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobStatus</returns>
        JobStatus JobStatus(string jobId, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Job status
        /// </summary>
        /// <remarks>
        /// job status
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The jobId, a unique identifier assigned for the job.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobStatus</returns>
        ApiResponse<JobStatus> JobStatusWithHttpInfo(string jobId, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Print Document
        /// </summary>
        /// <remarks>
        /// It contains information about a label or a document, e.g. a shipping label, a customs form, manifest report etc., that pertains to a shipment or manifest.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PrintDocumentResponse</returns>
        PrintDocumentResponse PrintDocument(PrintDocumentRequest printDocumentRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Print Document
        /// </summary>
        /// <remarks>
        /// It contains information about a label or a document, e.g. a shipping label, a customs form, manifest report etc., that pertains to a shipment or manifest.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PrintDocumentResponse</returns>
        ApiResponse<PrintDocumentResponse> PrintDocumentWithHttpInfo(PrintDocumentRequest printDocumentRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Printer mapping
        /// </summary>
        /// <remarks>
        /// printer mapping document
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PrinterMappingResponse</returns>
        PrinterMappingResponse PrinterMapping(PrinterMappingRequest printerMappingRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Printer mapping
        /// </summary>
        /// <remarks>
        /// printer mapping document
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PrinterMappingResponse</returns>
        ApiResponse<PrinterMappingResponse> PrinterMappingWithHttpInfo(PrinterMappingRequest printerMappingRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrintApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Printer mapping
        /// </summary>
        /// <remarks>
        /// delete printer mapping document
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePrinterMappingAsync(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Printer mapping
        /// </summary>
        /// <remarks>
        /// delete printer mapping document
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePrinterMappingWithHttpInfoAsync(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Printer mapping
        /// </summary>
        /// <remarks>
        /// Get printer mapping document
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrinterMappingGetResponse</returns>
        System.Threading.Tasks.Task<PrinterMappingGetResponse> GetPrinterMappingAsync(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Printer mapping
        /// </summary>
        /// <remarks>
        /// Get printer mapping document
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrinterMappingGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrinterMappingGetResponse>> GetPrinterMappingWithHttpInfoAsync(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Job status
        /// </summary>
        /// <remarks>
        /// job status
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The jobId, a unique identifier assigned for the job.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatus</returns>
        System.Threading.Tasks.Task<JobStatus> JobStatusAsync(string jobId, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Job status
        /// </summary>
        /// <remarks>
        /// job status
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The jobId, a unique identifier assigned for the job.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobStatus>> JobStatusWithHttpInfoAsync(string jobId, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Print Document
        /// </summary>
        /// <remarks>
        /// It contains information about a label or a document, e.g. a shipping label, a customs form, manifest report etc., that pertains to a shipment or manifest.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrintDocumentResponse</returns>
        System.Threading.Tasks.Task<PrintDocumentResponse> PrintDocumentAsync(PrintDocumentRequest printDocumentRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Print Document
        /// </summary>
        /// <remarks>
        /// It contains information about a label or a document, e.g. a shipping label, a customs form, manifest report etc., that pertains to a shipment or manifest.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrintDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrintDocumentResponse>> PrintDocumentWithHttpInfoAsync(PrintDocumentRequest printDocumentRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Printer mapping
        /// </summary>
        /// <remarks>
        /// printer mapping document
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrinterMappingResponse</returns>
        System.Threading.Tasks.Task<PrinterMappingResponse> PrinterMappingAsync(PrinterMappingRequest printerMappingRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Printer mapping
        /// </summary>
        /// <remarks>
        /// printer mapping document
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrinterMappingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrinterMappingResponse>> PrinterMappingWithHttpInfoAsync(PrinterMappingRequest printerMappingRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrintApi : IPrintApiSync, IPrintApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PrintApi : IPrintApi
    {
        private com.pitneybowes.api360.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrintApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrintApi(string basePath)
        {
            this.Configuration = com.pitneybowes.api360.Client.Configuration.MergeConfigurations(
                com.pitneybowes.api360.Client.GlobalConfiguration.Instance,
                new com.pitneybowes.api360.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PrintApi(com.pitneybowes.api360.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.pitneybowes.api360.Client.Configuration.MergeConfigurations(
                com.pitneybowes.api360.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PrintApi(com.pitneybowes.api360.Client.ISynchronousClient client, com.pitneybowes.api360.Client.IAsynchronousClient asyncClient, com.pitneybowes.api360.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.pitneybowes.api360.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.pitneybowes.api360.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.pitneybowes.api360.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.pitneybowes.api360.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Printer mapping delete printer mapping document
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePrinterMapping(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            DeletePrinterMappingWithHttpInfo(alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
        }

        /// <summary>
        /// Delete Printer mapping delete printer mapping document
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public com.pitneybowes.api360.Client.ApiResponse<Object> DeletePrinterMappingWithHttpInfo(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'alias' when calling PrintApi->DeletePrinterMapping");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "alias", alias));
            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }

            localVarRequestOptions.Operation = "PrintApi.DeletePrinterMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/printer/mapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePrinterMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Printer mapping delete printer mapping document
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePrinterMappingAsync(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePrinterMappingWithHttpInfoAsync(alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Printer mapping delete printer mapping document
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<Object>> DeletePrinterMappingWithHttpInfoAsync(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'alias' when calling PrintApi->DeletePrinterMapping");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "alias", alias));
            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }

            localVarRequestOptions.Operation = "PrintApi.DeletePrinterMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/printer/mapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePrinterMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Printer mapping Get printer mapping document
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PrinterMappingGetResponse</returns>
        public PrinterMappingGetResponse GetPrinterMapping(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<PrinterMappingGetResponse> localVarResponse = GetPrinterMappingWithHttpInfo(alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Printer mapping Get printer mapping document
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PrinterMappingGetResponse</returns>
        public com.pitneybowes.api360.Client.ApiResponse<PrinterMappingGetResponse> GetPrinterMappingWithHttpInfo(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'alias' when calling PrintApi->GetPrinterMapping");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "alias", alias));
            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }

            localVarRequestOptions.Operation = "PrintApi.GetPrinterMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PrinterMappingGetResponse>("/api/v1/printer/mapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrinterMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Printer mapping Get printer mapping document
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrinterMappingGetResponse</returns>
        public async System.Threading.Tasks.Task<PrinterMappingGetResponse> GetPrinterMappingAsync(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<PrinterMappingGetResponse> localVarResponse = await GetPrinterMappingWithHttpInfoAsync(alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Printer mapping Get printer mapping document
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrinterMappingGetResponse)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<PrinterMappingGetResponse>> GetPrinterMappingWithHttpInfoAsync(string alias, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'alias' when calling PrintApi->GetPrinterMapping");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "alias", alias));
            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }

            localVarRequestOptions.Operation = "PrintApi.GetPrinterMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PrinterMappingGetResponse>("/api/v1/printer/mapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrinterMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Job status job status
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The jobId, a unique identifier assigned for the job.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobStatus</returns>
        public JobStatus JobStatus(string jobId, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<JobStatus> localVarResponse = JobStatusWithHttpInfo(jobId, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Job status job status
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The jobId, a unique identifier assigned for the job.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobStatus</returns>
        public com.pitneybowes.api360.Client.ApiResponse<JobStatus> JobStatusWithHttpInfo(string jobId, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'jobId' when calling PrintApi->JobStatus");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }

            localVarRequestOptions.Operation = "PrintApi.JobStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobStatus>("/api/v1/jobs/{jobId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Job status job status
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The jobId, a unique identifier assigned for the job.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStatus</returns>
        public async System.Threading.Tasks.Task<JobStatus> JobStatusAsync(string jobId, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<JobStatus> localVarResponse = await JobStatusWithHttpInfoAsync(jobId, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Job status job status
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The jobId, a unique identifier assigned for the job.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStatus)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<JobStatus>> JobStatusWithHttpInfoAsync(string jobId, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'jobId' when calling PrintApi->JobStatus");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(jobId)); // path parameter
            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }

            localVarRequestOptions.Operation = "PrintApi.JobStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JobStatus>("/api/v1/jobs/{jobId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Print Document It contains information about a label or a document, e.g. a shipping label, a customs form, manifest report etc., that pertains to a shipment or manifest.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PrintDocumentResponse</returns>
        public PrintDocumentResponse PrintDocument(PrintDocumentRequest printDocumentRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<PrintDocumentResponse> localVarResponse = PrintDocumentWithHttpInfo(printDocumentRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Print Document It contains information about a label or a document, e.g. a shipping label, a customs form, manifest report etc., that pertains to a shipment or manifest.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PrintDocumentResponse</returns>
        public com.pitneybowes.api360.Client.ApiResponse<PrintDocumentResponse> PrintDocumentWithHttpInfo(PrintDocumentRequest printDocumentRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'printDocumentRequest' is set
            if (printDocumentRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'printDocumentRequest' when calling PrintApi->PrintDocument");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }
            localVarRequestOptions.Data = printDocumentRequest;

            localVarRequestOptions.Operation = "PrintApi.PrintDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PrintDocumentResponse>("/api/v1/document/print", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PrintDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Print Document It contains information about a label or a document, e.g. a shipping label, a customs form, manifest report etc., that pertains to a shipment or manifest.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrintDocumentResponse</returns>
        public async System.Threading.Tasks.Task<PrintDocumentResponse> PrintDocumentAsync(PrintDocumentRequest printDocumentRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<PrintDocumentResponse> localVarResponse = await PrintDocumentWithHttpInfoAsync(printDocumentRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Print Document It contains information about a label or a document, e.g. a shipping label, a customs form, manifest report etc., that pertains to a shipment or manifest.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrintDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<PrintDocumentResponse>> PrintDocumentWithHttpInfoAsync(PrintDocumentRequest printDocumentRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'printDocumentRequest' is set
            if (printDocumentRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'printDocumentRequest' when calling PrintApi->PrintDocument");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }
            localVarRequestOptions.Data = printDocumentRequest;

            localVarRequestOptions.Operation = "PrintApi.PrintDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PrintDocumentResponse>("/api/v1/document/print", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PrintDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Printer mapping printer mapping document
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PrinterMappingResponse</returns>
        public PrinterMappingResponse PrinterMapping(PrinterMappingRequest printerMappingRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<PrinterMappingResponse> localVarResponse = PrinterMappingWithHttpInfo(printerMappingRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Printer mapping printer mapping document
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PrinterMappingResponse</returns>
        public com.pitneybowes.api360.Client.ApiResponse<PrinterMappingResponse> PrinterMappingWithHttpInfo(PrinterMappingRequest printerMappingRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'printerMappingRequest' is set
            if (printerMappingRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'printerMappingRequest' when calling PrintApi->PrinterMapping");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }
            localVarRequestOptions.Data = printerMappingRequest;

            localVarRequestOptions.Operation = "PrintApi.PrinterMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PrinterMappingResponse>("/api/v1/printer/mapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PrinterMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Printer mapping printer mapping document
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrinterMappingResponse</returns>
        public async System.Threading.Tasks.Task<PrinterMappingResponse> PrinterMappingAsync(PrinterMappingRequest printerMappingRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<PrinterMappingResponse> localVarResponse = await PrinterMappingWithHttpInfoAsync(printerMappingRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Printer mapping printer mapping document
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrinterMappingResponse)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<PrinterMappingResponse>> PrinterMappingWithHttpInfoAsync(PrinterMappingRequest printerMappingRequest, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'printerMappingRequest' is set
            if (printerMappingRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'printerMappingRequest' when calling PrintApi->PrinterMapping");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }
            localVarRequestOptions.Data = printerMappingRequest;

            localVarRequestOptions.Operation = "PrintApi.PrinterMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PrinterMappingResponse>("/api/v1/printer/mapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PrinterMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
