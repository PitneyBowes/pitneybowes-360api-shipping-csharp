// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using com.pitneybowes.api360.Client;
using com.pitneybowes.api360.Model;
using System.Diagnostics.CodeAnalysis;

namespace com.pitneybowes.api360.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPrintApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PrintApiEvents Events { get; }

        /// <summary>
        /// Delete Printer mapping
        /// </summary>
        /// <remarks>
        /// delete printer mapping document
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePrinterMappingApiResponse"/>&gt;</returns>
        Task<IDeletePrinterMappingApiResponse> DeletePrinterMappingAsync(string alias, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Printer mapping
        /// </summary>
        /// <remarks>
        /// delete printer mapping document
        /// </remarks>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePrinterMappingApiResponse"/>?&gt;</returns>
        Task<IDeletePrinterMappingApiResponse?> DeletePrinterMappingOrDefaultAsync(string alias, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Printer mapping
        /// </summary>
        /// <remarks>
        /// Get printer mapping document
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPrinterMappingApiResponse"/>&gt;</returns>
        Task<IGetPrinterMappingApiResponse> GetPrinterMappingAsync(string alias, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Printer mapping
        /// </summary>
        /// <remarks>
        /// Get printer mapping document
        /// </remarks>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPrinterMappingApiResponse"/>?&gt;</returns>
        Task<IGetPrinterMappingApiResponse?> GetPrinterMappingOrDefaultAsync(string alias, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Job status
        /// </summary>
        /// <remarks>
        /// job status
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The jobId, a unique identifier assigned for the job.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJobStatusApiResponse"/>&gt;</returns>
        Task<IJobStatusApiResponse> JobStatusAsync(string jobId, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Job status
        /// </summary>
        /// <remarks>
        /// job status
        /// </remarks>
        /// <param name="jobId">The jobId, a unique identifier assigned for the job.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJobStatusApiResponse"/>?&gt;</returns>
        Task<IJobStatusApiResponse?> JobStatusOrDefaultAsync(string jobId, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Print Document
        /// </summary>
        /// <remarks>
        /// It contains information about a label or a document, e.g., a shipping label, a customs form, manifest report etc., that pertains to a shipment or manifest.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPrintDocumentApiResponse"/>&gt;</returns>
        Task<IPrintDocumentApiResponse> PrintDocumentAsync(PrintDocumentRequest printDocumentRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Print Document
        /// </summary>
        /// <remarks>
        /// It contains information about a label or a document, e.g., a shipping label, a customs form, manifest report etc., that pertains to a shipment or manifest.
        /// </remarks>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPrintDocumentApiResponse"/>?&gt;</returns>
        Task<IPrintDocumentApiResponse?> PrintDocumentOrDefaultAsync(PrintDocumentRequest printDocumentRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Printer mapping
        /// </summary>
        /// <remarks>
        /// printer mapping document
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPrinterMappingApiResponse"/>&gt;</returns>
        Task<IPrinterMappingApiResponse> PrinterMappingAsync(PrinterMappingRequest printerMappingRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Printer mapping
        /// </summary>
        /// <remarks>
        /// printer mapping document
        /// </remarks>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPrinterMappingApiResponse"/>?&gt;</returns>
        Task<IPrinterMappingApiResponse?> PrinterMappingOrDefaultAsync(PrinterMappingRequest printerMappingRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeletePrinterMappingApiResponse"/>
    /// </summary>
    public interface IDeletePrinterMappingApiResponse : com.pitneybowes.api360.Client.IApiResponse, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IGetPrinterMappingApiResponse"/>
    /// </summary>
    public interface IGetPrinterMappingApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.PrinterMappingGetResponse?>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IJobStatusApiResponse"/>
    /// </summary>
    public interface IJobStatusApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.JobStatus?>, IBadRequest<List<InvalidErrorsInner>?>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>, IInternalServerError<com.pitneybowes.api360.Model.ServerError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPrintDocumentApiResponse"/>
    /// </summary>
    public interface IPrintDocumentApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.PrintDocumentResponse?>, IBadRequest<List<InvalidErrorsInner>?>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>, IInternalServerError<com.pitneybowes.api360.Model.ServerError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPrinterMappingApiResponse"/>
    /// </summary>
    public interface IPrinterMappingApiResponse : com.pitneybowes.api360.Client.IApiResponse, ICreated<com.pitneybowes.api360.Model.PrinterMappingResponse?>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PrintApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletePrinterMapping;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletePrinterMapping;

        internal void ExecuteOnDeletePrinterMapping(PrintApi.DeletePrinterMappingApiResponse apiResponse)
        {
            OnDeletePrinterMapping?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePrinterMapping(Exception exception)
        {
            OnErrorDeletePrinterMapping?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPrinterMapping;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPrinterMapping;

        internal void ExecuteOnGetPrinterMapping(PrintApi.GetPrinterMappingApiResponse apiResponse)
        {
            OnGetPrinterMapping?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPrinterMapping(Exception exception)
        {
            OnErrorGetPrinterMapping?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJobStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJobStatus;

        internal void ExecuteOnJobStatus(PrintApi.JobStatusApiResponse apiResponse)
        {
            OnJobStatus?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJobStatus(Exception exception)
        {
            OnErrorJobStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPrintDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPrintDocument;

        internal void ExecuteOnPrintDocument(PrintApi.PrintDocumentApiResponse apiResponse)
        {
            OnPrintDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPrintDocument(Exception exception)
        {
            OnErrorPrintDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPrinterMapping;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPrinterMapping;

        internal void ExecuteOnPrinterMapping(PrintApi.PrinterMappingApiResponse apiResponse)
        {
            OnPrinterMapping?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPrinterMapping(Exception exception)
        {
            OnErrorPrinterMapping?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PrintApi : IPrintApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PrintApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PrintApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrintApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrintApi(ILogger<PrintApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PrintApiEvents printApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PrintApi>();
            HttpClient = httpClient;
            Events = printApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            BasicTokenProvider = basicTokenProvider;
        }

        partial void FormatDeletePrinterMapping(ref string alias, ref Option<string> xPBDeveloperPartnerId, ref Option<string> xPBLocationId, ref Option<string> xPBTransactionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="alias"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        /// <returns></returns>
        private void ValidateDeletePrinterMapping(string alias, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            if (alias == null)
                throw new ArgumentNullException(nameof(alias));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (xPBLocationId.IsSet && xPBLocationId.Value == null)
                throw new ArgumentNullException(nameof(xPBLocationId));

            if (xPBTransactionId.IsSet && xPBTransactionId.Value == null)
                throw new ArgumentNullException(nameof(xPBTransactionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="alias"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void AfterDeletePrinterMappingDefaultImplementation(IDeletePrinterMappingApiResponse apiResponseLocalVar, string alias, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLog = false;
            AfterDeletePrinterMapping(ref suppressDefaultLog, apiResponseLocalVar, alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="alias"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void AfterDeletePrinterMapping(ref bool suppressDefaultLog, IDeletePrinterMappingApiResponse apiResponseLocalVar, string alias, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="alias"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void OnErrorDeletePrinterMappingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string alias, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePrinterMapping(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="alias"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void OnErrorDeletePrinterMapping(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string alias, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Delete Printer mapping delete printer mapping document
        /// </summary>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePrinterMappingApiResponse"/>&gt;</returns>
        public async Task<IDeletePrinterMappingApiResponse?> DeletePrinterMappingOrDefaultAsync(string alias, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePrinterMappingAsync(alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Printer mapping delete printer mapping document
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePrinterMappingApiResponse"/>&gt;</returns>
        public async Task<IDeletePrinterMappingApiResponse> DeletePrinterMappingAsync(string alias, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeletePrinterMapping(alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                FormatDeletePrinterMapping(ref alias, ref xPBDeveloperPartnerId, ref xPBLocationId, ref xPBTransactionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/printer/mapping"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/printer/mapping");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["alias"] = ClientUtils.ParameterToString(alias);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    if (xPBLocationId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-LocationId", ClientUtils.ParameterToString(xPBLocationId.Value));

                    if (xPBTransactionId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-TransactionId", ClientUtils.ParameterToString(xPBTransactionId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletePrinterMappingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePrinterMappingApiResponse>();

                        DeletePrinterMappingApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/printer/mapping", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletePrinterMappingDefaultImplementation(apiResponseLocalVar, alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                        Events.ExecuteOnDeletePrinterMapping(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePrinterMappingDefaultImplementation(e, "/api/v1/printer/mapping", uriBuilderLocalVar.Path, alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
                Events.ExecuteOnErrorDeletePrinterMapping(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePrinterMappingApiResponse"/>
        /// </summary>
        public partial class DeletePrinterMappingApiResponse : com.pitneybowes.api360.Client.ApiResponse, IDeletePrinterMappingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePrinterMappingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePrinterMappingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePrinterMappingApiResponse(ILogger<DeletePrinterMappingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPrinterMapping(ref string alias, ref Option<string> xPBDeveloperPartnerId, ref Option<string> xPBLocationId, ref Option<string> xPBTransactionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="alias"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        /// <returns></returns>
        private void ValidateGetPrinterMapping(string alias, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            if (alias == null)
                throw new ArgumentNullException(nameof(alias));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (xPBLocationId.IsSet && xPBLocationId.Value == null)
                throw new ArgumentNullException(nameof(xPBLocationId));

            if (xPBTransactionId.IsSet && xPBTransactionId.Value == null)
                throw new ArgumentNullException(nameof(xPBTransactionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="alias"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void AfterGetPrinterMappingDefaultImplementation(IGetPrinterMappingApiResponse apiResponseLocalVar, string alias, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLog = false;
            AfterGetPrinterMapping(ref suppressDefaultLog, apiResponseLocalVar, alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="alias"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void AfterGetPrinterMapping(ref bool suppressDefaultLog, IGetPrinterMappingApiResponse apiResponseLocalVar, string alias, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="alias"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void OnErrorGetPrinterMappingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string alias, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPrinterMapping(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="alias"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void OnErrorGetPrinterMapping(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string alias, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Get Printer mapping Get printer mapping document
        /// </summary>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPrinterMappingApiResponse"/>&gt;</returns>
        public async Task<IGetPrinterMappingApiResponse?> GetPrinterMappingOrDefaultAsync(string alias, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPrinterMappingAsync(alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Printer mapping Get printer mapping document
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias">Refers to a printer connected (directly or via network) to a computer.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPrinterMappingApiResponse"/>&gt;</returns>
        public async Task<IGetPrinterMappingApiResponse> GetPrinterMappingAsync(string alias, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPrinterMapping(alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                FormatGetPrinterMapping(ref alias, ref xPBDeveloperPartnerId, ref xPBLocationId, ref xPBTransactionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/printer/mapping"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/printer/mapping");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["alias"] = ClientUtils.ParameterToString(alias);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    if (xPBLocationId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-LocationId", ClientUtils.ParameterToString(xPBLocationId.Value));

                    if (xPBTransactionId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-TransactionId", ClientUtils.ParameterToString(xPBTransactionId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPrinterMappingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPrinterMappingApiResponse>();

                        GetPrinterMappingApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/printer/mapping", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPrinterMappingDefaultImplementation(apiResponseLocalVar, alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                        Events.ExecuteOnGetPrinterMapping(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPrinterMappingDefaultImplementation(e, "/api/v1/printer/mapping", uriBuilderLocalVar.Path, alias, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
                Events.ExecuteOnErrorGetPrinterMapping(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPrinterMappingApiResponse"/>
        /// </summary>
        public partial class GetPrinterMappingApiResponse : com.pitneybowes.api360.Client.ApiResponse, IGetPrinterMappingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPrinterMappingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPrinterMappingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPrinterMappingApiResponse(ILogger<GetPrinterMappingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.PrinterMappingGetResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.PrinterMappingGetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out com.pitneybowes.api360.Model.PrinterMappingGetResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJobStatus(ref string jobId, ref Option<string> xPBDeveloperPartnerId, ref Option<string> xPBLocationId, ref Option<string> xPBTransactionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="jobId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        /// <returns></returns>
        private void ValidateJobStatus(string jobId, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            if (jobId == null)
                throw new ArgumentNullException(nameof(jobId));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (xPBLocationId.IsSet && xPBLocationId.Value == null)
                throw new ArgumentNullException(nameof(xPBLocationId));

            if (xPBTransactionId.IsSet && xPBTransactionId.Value == null)
                throw new ArgumentNullException(nameof(xPBTransactionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="jobId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void AfterJobStatusDefaultImplementation(IJobStatusApiResponse apiResponseLocalVar, string jobId, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLog = false;
            AfterJobStatus(ref suppressDefaultLog, apiResponseLocalVar, jobId, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="jobId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void AfterJobStatus(ref bool suppressDefaultLog, IJobStatusApiResponse apiResponseLocalVar, string jobId, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="jobId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void OnErrorJobStatusDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string jobId, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJobStatus(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, jobId, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="jobId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void OnErrorJobStatus(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string jobId, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Job status job status
        /// </summary>
        /// <param name="jobId">The jobId, a unique identifier assigned for the job.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJobStatusApiResponse"/>&gt;</returns>
        public async Task<IJobStatusApiResponse?> JobStatusOrDefaultAsync(string jobId, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JobStatusAsync(jobId, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Job status job status
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The jobId, a unique identifier assigned for the job.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJobStatusApiResponse"/>&gt;</returns>
        public async Task<IJobStatusApiResponse> JobStatusAsync(string jobId, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJobStatus(jobId, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                FormatJobStatus(ref jobId, ref xPBDeveloperPartnerId, ref xPBLocationId, ref xPBTransactionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/jobs/{jobId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/jobs/{jobId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BjobId%7D", Uri.EscapeDataString(jobId.ToString()));

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    if (xPBLocationId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-LocationId", ClientUtils.ParameterToString(xPBLocationId.Value));

                    if (xPBTransactionId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-TransactionId", ClientUtils.ParameterToString(xPBTransactionId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JobStatusApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JobStatusApiResponse>();

                        JobStatusApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/jobs/{jobId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJobStatusDefaultImplementation(apiResponseLocalVar, jobId, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                        Events.ExecuteOnJobStatus(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJobStatusDefaultImplementation(e, "/api/v1/jobs/{jobId}", uriBuilderLocalVar.Path, jobId, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
                Events.ExecuteOnErrorJobStatus(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JobStatusApiResponse"/>
        /// </summary>
        public partial class JobStatusApiResponse : com.pitneybowes.api360.Client.ApiResponse, IJobStatusApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JobStatusApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JobStatusApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JobStatusApiResponse(ILogger<JobStatusApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.JobStatus? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.JobStatus>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out com.pitneybowes.api360.Model.JobStatus? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner>? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out List<InvalidErrorsInner>? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out com.pitneybowes.api360.Model.ServerError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPrintDocument(PrintDocumentRequest printDocumentRequest, ref Option<string> xPBDeveloperPartnerId, ref Option<string> xPBLocationId, ref Option<string> xPBTransactionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        /// <returns></returns>
        private void ValidatePrintDocument(PrintDocumentRequest printDocumentRequest, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            if (printDocumentRequest == null)
                throw new ArgumentNullException(nameof(printDocumentRequest));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (xPBLocationId.IsSet && xPBLocationId.Value == null)
                throw new ArgumentNullException(nameof(xPBLocationId));

            if (xPBTransactionId.IsSet && xPBTransactionId.Value == null)
                throw new ArgumentNullException(nameof(xPBTransactionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void AfterPrintDocumentDefaultImplementation(IPrintDocumentApiResponse apiResponseLocalVar, PrintDocumentRequest printDocumentRequest, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLog = false;
            AfterPrintDocument(ref suppressDefaultLog, apiResponseLocalVar, printDocumentRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void AfterPrintDocument(ref bool suppressDefaultLog, IPrintDocumentApiResponse apiResponseLocalVar, PrintDocumentRequest printDocumentRequest, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void OnErrorPrintDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PrintDocumentRequest printDocumentRequest, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPrintDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, printDocumentRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void OnErrorPrintDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PrintDocumentRequest printDocumentRequest, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Print Document It contains information about a label or a document, e.g., a shipping label, a customs form, manifest report etc., that pertains to a shipment or manifest.
        /// </summary>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPrintDocumentApiResponse"/>&gt;</returns>
        public async Task<IPrintDocumentApiResponse?> PrintDocumentOrDefaultAsync(PrintDocumentRequest printDocumentRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PrintDocumentAsync(printDocumentRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Print Document It contains information about a label or a document, e.g., a shipping label, a customs form, manifest report etc., that pertains to a shipment or manifest.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="printDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPrintDocumentApiResponse"/>&gt;</returns>
        public async Task<IPrintDocumentApiResponse> PrintDocumentAsync(PrintDocumentRequest printDocumentRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePrintDocument(printDocumentRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                FormatPrintDocument(printDocumentRequest, ref xPBDeveloperPartnerId, ref xPBLocationId, ref xPBTransactionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/document/print"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/document/print");

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    if (xPBLocationId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-LocationId", ClientUtils.ParameterToString(xPBLocationId.Value));

                    if (xPBTransactionId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-TransactionId", ClientUtils.ParameterToString(xPBTransactionId.Value));

                    httpRequestMessageLocalVar.Content = (printDocumentRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(printDocumentRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PrintDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PrintDocumentApiResponse>();

                        PrintDocumentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/document/print", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPrintDocumentDefaultImplementation(apiResponseLocalVar, printDocumentRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                        Events.ExecuteOnPrintDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPrintDocumentDefaultImplementation(e, "/api/v1/document/print", uriBuilderLocalVar.Path, printDocumentRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
                Events.ExecuteOnErrorPrintDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PrintDocumentApiResponse"/>
        /// </summary>
        public partial class PrintDocumentApiResponse : com.pitneybowes.api360.Client.ApiResponse, IPrintDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PrintDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PrintDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PrintDocumentApiResponse(ILogger<PrintDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.PrintDocumentResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.PrintDocumentResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out com.pitneybowes.api360.Model.PrintDocumentResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner>? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out List<InvalidErrorsInner>? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out com.pitneybowes.api360.Model.ServerError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPrinterMapping(PrinterMappingRequest printerMappingRequest, ref Option<string> xPBDeveloperPartnerId, ref Option<string> xPBLocationId, ref Option<string> xPBTransactionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        /// <returns></returns>
        private void ValidatePrinterMapping(PrinterMappingRequest printerMappingRequest, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            if (printerMappingRequest == null)
                throw new ArgumentNullException(nameof(printerMappingRequest));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (xPBLocationId.IsSet && xPBLocationId.Value == null)
                throw new ArgumentNullException(nameof(xPBLocationId));

            if (xPBTransactionId.IsSet && xPBTransactionId.Value == null)
                throw new ArgumentNullException(nameof(xPBTransactionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void AfterPrinterMappingDefaultImplementation(IPrinterMappingApiResponse apiResponseLocalVar, PrinterMappingRequest printerMappingRequest, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLog = false;
            AfterPrinterMapping(ref suppressDefaultLog, apiResponseLocalVar, printerMappingRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void AfterPrinterMapping(ref bool suppressDefaultLog, IPrinterMappingApiResponse apiResponseLocalVar, PrinterMappingRequest printerMappingRequest, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void OnErrorPrinterMappingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PrinterMappingRequest printerMappingRequest, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPrinterMapping(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, printerMappingRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void OnErrorPrinterMapping(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PrinterMappingRequest printerMappingRequest, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Printer mapping printer mapping document
        /// </summary>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPrinterMappingApiResponse"/>&gt;</returns>
        public async Task<IPrinterMappingApiResponse?> PrinterMappingOrDefaultAsync(PrinterMappingRequest printerMappingRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PrinterMappingAsync(printerMappingRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Printer mapping printer mapping document
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerMappingRequest"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPrinterMappingApiResponse"/>&gt;</returns>
        public async Task<IPrinterMappingApiResponse> PrinterMappingAsync(PrinterMappingRequest printerMappingRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePrinterMapping(printerMappingRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                FormatPrinterMapping(printerMappingRequest, ref xPBDeveloperPartnerId, ref xPBLocationId, ref xPBTransactionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/printer/mapping"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/printer/mapping");

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    if (xPBLocationId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-LocationId", ClientUtils.ParameterToString(xPBLocationId.Value));

                    if (xPBTransactionId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-TransactionId", ClientUtils.ParameterToString(xPBTransactionId.Value));

                    httpRequestMessageLocalVar.Content = (printerMappingRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(printerMappingRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PrinterMappingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PrinterMappingApiResponse>();

                        PrinterMappingApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/printer/mapping", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPrinterMappingDefaultImplementation(apiResponseLocalVar, printerMappingRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                        Events.ExecuteOnPrinterMapping(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPrinterMappingDefaultImplementation(e, "/api/v1/printer/mapping", uriBuilderLocalVar.Path, printerMappingRequest, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
                Events.ExecuteOnErrorPrinterMapping(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PrinterMappingApiResponse"/>
        /// </summary>
        public partial class PrinterMappingApiResponse : com.pitneybowes.api360.Client.ApiResponse, IPrinterMappingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PrinterMappingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PrinterMappingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PrinterMappingApiResponse(ILogger<PrinterMappingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.PrinterMappingResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.PrinterMappingResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out com.pitneybowes.api360.Model.PrinterMappingResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
