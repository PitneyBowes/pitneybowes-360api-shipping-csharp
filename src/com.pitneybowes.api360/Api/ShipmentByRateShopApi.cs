/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.pitneybowes.api360.Client;
using com.pitneybowes.api360.Model;

namespace com.pitneybowes.api360.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentByRateShopApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Shipment
        /// </summary>
        /// <remarks>
        /// The operation cancel/void shipment.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelShipmentV2</returns>
        CancelShipmentV2 CancelShipmentByIdV2(ShipmentCancelV2 shipmentCancelV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Cancel Shipment
        /// </summary>
        /// <remarks>
        /// The operation cancel/void shipment.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelShipmentV2</returns>
        ApiResponse<CancelShipmentV2> CancelShipmentByIdV2WithHttpInfo(ShipmentCancelV2 shipmentCancelV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create Shipment
        /// </summary>
        /// <remarks>
        /// The operation creates a new Shipment or generate a Shipment Label. - To create a domestic shipment, the operation requires   - Domestic addresses &#39;To&#39; and &#39;From&#39; locations respectively within the same country   - carrier services, and   - associated special services. - While for the International shipment, the operation requires   - International address(es) for delivery, that is &#39;To&#39; address must be the international country location(s) and not the same country mentioned in &#39;From&#39; address   - supported international carrier services   - associated special service(s), and    - customs information. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomesticShipmentResponseV2</returns>
        DomesticShipmentResponseV2 CreateShipmentV2(CreateShipmentV2Request createShipmentV2Request, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create Shipment
        /// </summary>
        /// <remarks>
        /// The operation creates a new Shipment or generate a Shipment Label. - To create a domestic shipment, the operation requires   - Domestic addresses &#39;To&#39; and &#39;From&#39; locations respectively within the same country   - carrier services, and   - associated special services. - While for the International shipment, the operation requires   - International address(es) for delivery, that is &#39;To&#39; address must be the international country location(s) and not the same country mentioned in &#39;From&#39; address   - supported international carrier services   - associated special service(s), and    - customs information. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomesticShipmentResponseV2</returns>
        ApiResponse<DomesticShipmentResponseV2> CreateShipmentV2WithHttpInfo(CreateShipmentV2Request createShipmentV2Request, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Reprint Shipment
        /// </summary>
        /// <remarks>
        /// The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentID returned by the original created shipment request. Use this only if the shipping label in the Create Shipment response is missing or lost.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReprintShipmentV2</returns>
        ReprintShipmentV2 ReprintShipmentByIdV2(ShipmentReprintV2 shipmentReprintV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Reprint Shipment
        /// </summary>
        /// <remarks>
        /// The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentID returned by the original created shipment request. Use this only if the shipping label in the Create Shipment response is missing or lost.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReprintShipmentV2</returns>
        ApiResponse<ReprintShipmentV2> ReprintShipmentByIdV2WithHttpInfo(ShipmentReprintV2 shipmentReprintV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentByRateShopApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Shipment
        /// </summary>
        /// <remarks>
        /// The operation cancel/void shipment.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelShipmentV2</returns>
        System.Threading.Tasks.Task<CancelShipmentV2> CancelShipmentByIdV2Async(ShipmentCancelV2 shipmentCancelV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Shipment
        /// </summary>
        /// <remarks>
        /// The operation cancel/void shipment.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelShipmentV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelShipmentV2>> CancelShipmentByIdV2WithHttpInfoAsync(ShipmentCancelV2 shipmentCancelV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Shipment
        /// </summary>
        /// <remarks>
        /// The operation creates a new Shipment or generate a Shipment Label. - To create a domestic shipment, the operation requires   - Domestic addresses &#39;To&#39; and &#39;From&#39; locations respectively within the same country   - carrier services, and   - associated special services. - While for the International shipment, the operation requires   - International address(es) for delivery, that is &#39;To&#39; address must be the international country location(s) and not the same country mentioned in &#39;From&#39; address   - supported international carrier services   - associated special service(s), and    - customs information. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomesticShipmentResponseV2</returns>
        System.Threading.Tasks.Task<DomesticShipmentResponseV2> CreateShipmentV2Async(CreateShipmentV2Request createShipmentV2Request, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Shipment
        /// </summary>
        /// <remarks>
        /// The operation creates a new Shipment or generate a Shipment Label. - To create a domestic shipment, the operation requires   - Domestic addresses &#39;To&#39; and &#39;From&#39; locations respectively within the same country   - carrier services, and   - associated special services. - While for the International shipment, the operation requires   - International address(es) for delivery, that is &#39;To&#39; address must be the international country location(s) and not the same country mentioned in &#39;From&#39; address   - supported international carrier services   - associated special service(s), and    - customs information. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomesticShipmentResponseV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomesticShipmentResponseV2>> CreateShipmentV2WithHttpInfoAsync(CreateShipmentV2Request createShipmentV2Request, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reprint Shipment
        /// </summary>
        /// <remarks>
        /// The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentID returned by the original created shipment request. Use this only if the shipping label in the Create Shipment response is missing or lost.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReprintShipmentV2</returns>
        System.Threading.Tasks.Task<ReprintShipmentV2> ReprintShipmentByIdV2Async(ShipmentReprintV2 shipmentReprintV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reprint Shipment
        /// </summary>
        /// <remarks>
        /// The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentID returned by the original created shipment request. Use this only if the shipping label in the Create Shipment response is missing or lost.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReprintShipmentV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReprintShipmentV2>> ReprintShipmentByIdV2WithHttpInfoAsync(ShipmentReprintV2 shipmentReprintV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentByRateShopApi : IShipmentByRateShopApiSync, IShipmentByRateShopApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShipmentByRateShopApi : IShipmentByRateShopApi
    {
        private com.pitneybowes.api360.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentByRateShopApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentByRateShopApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentByRateShopApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentByRateShopApi(string basePath)
        {
            this.Configuration = com.pitneybowes.api360.Client.Configuration.MergeConfigurations(
                com.pitneybowes.api360.Client.GlobalConfiguration.Instance,
                new com.pitneybowes.api360.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentByRateShopApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShipmentByRateShopApi(com.pitneybowes.api360.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.pitneybowes.api360.Client.Configuration.MergeConfigurations(
                com.pitneybowes.api360.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentByRateShopApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ShipmentByRateShopApi(com.pitneybowes.api360.Client.ISynchronousClient client, com.pitneybowes.api360.Client.IAsynchronousClient asyncClient, com.pitneybowes.api360.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.pitneybowes.api360.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.pitneybowes.api360.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.pitneybowes.api360.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.pitneybowes.api360.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel Shipment The operation cancel/void shipment.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelShipmentV2</returns>
        public CancelShipmentV2 CancelShipmentByIdV2(ShipmentCancelV2 shipmentCancelV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<CancelShipmentV2> localVarResponse = CancelShipmentByIdV2WithHttpInfo(shipmentCancelV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Shipment The operation cancel/void shipment.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelShipmentV2</returns>
        public com.pitneybowes.api360.Client.ApiResponse<CancelShipmentV2> CancelShipmentByIdV2WithHttpInfo(ShipmentCancelV2 shipmentCancelV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'shipmentCancelV2' is set
            if (shipmentCancelV2 == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentCancelV2' when calling ShipmentByRateShopApi->CancelShipmentByIdV2");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }
            localVarRequestOptions.Data = shipmentCancelV2;

            localVarRequestOptions.Operation = "ShipmentByRateShopApi.CancelShipmentByIdV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CancelShipmentV2>("/api/v2/shipments/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelShipmentByIdV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Shipment The operation cancel/void shipment.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelShipmentV2</returns>
        public async System.Threading.Tasks.Task<CancelShipmentV2> CancelShipmentByIdV2Async(ShipmentCancelV2 shipmentCancelV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<CancelShipmentV2> localVarResponse = await CancelShipmentByIdV2WithHttpInfoAsync(shipmentCancelV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Shipment The operation cancel/void shipment.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelShipmentV2)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<CancelShipmentV2>> CancelShipmentByIdV2WithHttpInfoAsync(ShipmentCancelV2 shipmentCancelV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipmentCancelV2' is set
            if (shipmentCancelV2 == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentCancelV2' when calling ShipmentByRateShopApi->CancelShipmentByIdV2");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }
            localVarRequestOptions.Data = shipmentCancelV2;

            localVarRequestOptions.Operation = "ShipmentByRateShopApi.CancelShipmentByIdV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CancelShipmentV2>("/api/v2/shipments/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelShipmentByIdV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Shipment The operation creates a new Shipment or generate a Shipment Label. - To create a domestic shipment, the operation requires   - Domestic addresses &#39;To&#39; and &#39;From&#39; locations respectively within the same country   - carrier services, and   - associated special services. - While for the International shipment, the operation requires   - International address(es) for delivery, that is &#39;To&#39; address must be the international country location(s) and not the same country mentioned in &#39;From&#39; address   - supported international carrier services   - associated special service(s), and    - customs information. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomesticShipmentResponseV2</returns>
        public DomesticShipmentResponseV2 CreateShipmentV2(CreateShipmentV2Request createShipmentV2Request, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<DomesticShipmentResponseV2> localVarResponse = CreateShipmentV2WithHttpInfo(createShipmentV2Request, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Shipment The operation creates a new Shipment or generate a Shipment Label. - To create a domestic shipment, the operation requires   - Domestic addresses &#39;To&#39; and &#39;From&#39; locations respectively within the same country   - carrier services, and   - associated special services. - While for the International shipment, the operation requires   - International address(es) for delivery, that is &#39;To&#39; address must be the international country location(s) and not the same country mentioned in &#39;From&#39; address   - supported international carrier services   - associated special service(s), and    - customs information. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomesticShipmentResponseV2</returns>
        public com.pitneybowes.api360.Client.ApiResponse<DomesticShipmentResponseV2> CreateShipmentV2WithHttpInfo(CreateShipmentV2Request createShipmentV2Request, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'createShipmentV2Request' is set
            if (createShipmentV2Request == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'createShipmentV2Request' when calling ShipmentByRateShopApi->CreateShipmentV2");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }
            localVarRequestOptions.Data = createShipmentV2Request;

            localVarRequestOptions.Operation = "ShipmentByRateShopApi.CreateShipmentV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DomesticShipmentResponseV2>("/api/v2/shipments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShipmentV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Shipment The operation creates a new Shipment or generate a Shipment Label. - To create a domestic shipment, the operation requires   - Domestic addresses &#39;To&#39; and &#39;From&#39; locations respectively within the same country   - carrier services, and   - associated special services. - While for the International shipment, the operation requires   - International address(es) for delivery, that is &#39;To&#39; address must be the international country location(s) and not the same country mentioned in &#39;From&#39; address   - supported international carrier services   - associated special service(s), and    - customs information. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomesticShipmentResponseV2</returns>
        public async System.Threading.Tasks.Task<DomesticShipmentResponseV2> CreateShipmentV2Async(CreateShipmentV2Request createShipmentV2Request, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<DomesticShipmentResponseV2> localVarResponse = await CreateShipmentV2WithHttpInfoAsync(createShipmentV2Request, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Shipment The operation creates a new Shipment or generate a Shipment Label. - To create a domestic shipment, the operation requires   - Domestic addresses &#39;To&#39; and &#39;From&#39; locations respectively within the same country   - carrier services, and   - associated special services. - While for the International shipment, the operation requires   - International address(es) for delivery, that is &#39;To&#39; address must be the international country location(s) and not the same country mentioned in &#39;From&#39; address   - supported international carrier services   - associated special service(s), and    - customs information. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomesticShipmentResponseV2)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<DomesticShipmentResponseV2>> CreateShipmentV2WithHttpInfoAsync(CreateShipmentV2Request createShipmentV2Request, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createShipmentV2Request' is set
            if (createShipmentV2Request == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'createShipmentV2Request' when calling ShipmentByRateShopApi->CreateShipmentV2");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }
            localVarRequestOptions.Data = createShipmentV2Request;

            localVarRequestOptions.Operation = "ShipmentByRateShopApi.CreateShipmentV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DomesticShipmentResponseV2>("/api/v2/shipments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShipmentV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reprint Shipment The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentID returned by the original created shipment request. Use this only if the shipping label in the Create Shipment response is missing or lost.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReprintShipmentV2</returns>
        public ReprintShipmentV2 ReprintShipmentByIdV2(ShipmentReprintV2 shipmentReprintV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<ReprintShipmentV2> localVarResponse = ReprintShipmentByIdV2WithHttpInfo(shipmentReprintV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reprint Shipment The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentID returned by the original created shipment request. Use this only if the shipping label in the Create Shipment response is missing or lost.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReprintShipmentV2</returns>
        public com.pitneybowes.api360.Client.ApiResponse<ReprintShipmentV2> ReprintShipmentByIdV2WithHttpInfo(ShipmentReprintV2 shipmentReprintV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'shipmentReprintV2' is set
            if (shipmentReprintV2 == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentReprintV2' when calling ShipmentByRateShopApi->ReprintShipmentByIdV2");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }
            localVarRequestOptions.Data = shipmentReprintV2;

            localVarRequestOptions.Operation = "ShipmentByRateShopApi.ReprintShipmentByIdV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReprintShipmentV2>("/api/v2/shipments/reprint", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReprintShipmentByIdV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reprint Shipment The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentID returned by the original created shipment request. Use this only if the shipping label in the Create Shipment response is missing or lost.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReprintShipmentV2</returns>
        public async System.Threading.Tasks.Task<ReprintShipmentV2> ReprintShipmentByIdV2Async(ShipmentReprintV2 shipmentReprintV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<ReprintShipmentV2> localVarResponse = await ReprintShipmentByIdV2WithHttpInfoAsync(shipmentReprintV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reprint Shipment The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentID returned by the original created shipment request. Use this only if the shipping label in the Create Shipment response is missing or lost.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReprintShipmentV2)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<ReprintShipmentV2>> ReprintShipmentByIdV2WithHttpInfoAsync(ShipmentReprintV2 shipmentReprintV2, string? xPBDeveloperPartnerId = default(string?), string? xPBLocationId = default(string?), string? xPBTransactionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipmentReprintV2' is set
            if (shipmentReprintV2 == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentReprintV2' when calling ShipmentByRateShopApi->ReprintShipmentByIdV2");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-Id", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerId)); // header parameter
            }
            if (xPBLocationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-LocationId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBLocationId)); // header parameter
            }
            if (xPBTransactionId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-TransactionId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBTransactionId)); // header parameter
            }
            localVarRequestOptions.Data = shipmentReprintV2;

            localVarRequestOptions.Operation = "ShipmentByRateShopApi.ReprintShipmentByIdV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReprintShipmentV2>("/api/v2/shipments/reprint", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReprintShipmentByIdV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
