/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.pitneybowes.api360.Client;
using com.pitneybowes.api360.Model;

namespace com.pitneybowes.api360.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMultipieceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Multipiece Rateshop and Rates
        /// </summary>
        /// <remarks>
        /// This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType in multiPieceParcels object. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MultipieceRates200Response</returns>
        MultipieceRates200Response MultipieceRates(MultipieceRatesRequest multipieceRatesRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Multipiece Rateshop and Rates
        /// </summary>
        /// <remarks>
        /// This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType in multiPieceParcels object. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MultipieceRates200Response</returns>
        ApiResponse<MultipieceRates200Response> MultipieceRatesWithHttpInfo(MultipieceRatesRequest multipieceRatesRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// This operation is used to create Multipiece Shipments. UPS, FedEx and DHL Express are supported for Multipiece Shipments.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MultipieceShipment200Response</returns>
        MultipieceShipment200Response MultipieceShipment(MultipieceShipmentRequest multipieceShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// This operation is used to create Multipiece Shipments. UPS, FedEx and DHL Express are supported for Multipiece Shipments.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MultipieceShipment200Response</returns>
        ApiResponse<MultipieceShipment200Response> MultipieceShipmentWithHttpInfo(MultipieceShipmentRequest multipieceShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Cancel Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// This operation is used to cancel the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelShipment</returns>
        CancelShipment MultipieceShipmentCancel(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Cancel Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// This operation is used to cancel the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelShipment</returns>
        ApiResponse<CancelShipment> MultipieceShipmentCancelWithHttpInfo(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Reprint Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// This operation is used to reprint the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MultipieceDomesticShipmentResponse</returns>
        MultipieceDomesticShipmentResponse MultipieceShipmentReprint(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Reprint Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// This operation is used to reprint the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MultipieceDomesticShipmentResponse</returns>
        ApiResponse<MultipieceDomesticShipmentResponse> MultipieceShipmentReprintWithHttpInfo(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMultipieceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Multipiece Rateshop and Rates
        /// </summary>
        /// <remarks>
        /// This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType in multiPieceParcels object. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MultipieceRates200Response</returns>
        System.Threading.Tasks.Task<MultipieceRates200Response> MultipieceRatesAsync(MultipieceRatesRequest multipieceRatesRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Multipiece Rateshop and Rates
        /// </summary>
        /// <remarks>
        /// This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType in multiPieceParcels object. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MultipieceRates200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultipieceRates200Response>> MultipieceRatesWithHttpInfoAsync(MultipieceRatesRequest multipieceRatesRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// This operation is used to create Multipiece Shipments. UPS, FedEx and DHL Express are supported for Multipiece Shipments.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MultipieceShipment200Response</returns>
        System.Threading.Tasks.Task<MultipieceShipment200Response> MultipieceShipmentAsync(MultipieceShipmentRequest multipieceShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// This operation is used to create Multipiece Shipments. UPS, FedEx and DHL Express are supported for Multipiece Shipments.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MultipieceShipment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultipieceShipment200Response>> MultipieceShipmentWithHttpInfoAsync(MultipieceShipmentRequest multipieceShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// This operation is used to cancel the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelShipment</returns>
        System.Threading.Tasks.Task<CancelShipment> MultipieceShipmentCancelAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// This operation is used to cancel the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelShipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelShipment>> MultipieceShipmentCancelWithHttpInfoAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reprint Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// This operation is used to reprint the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MultipieceDomesticShipmentResponse</returns>
        System.Threading.Tasks.Task<MultipieceDomesticShipmentResponse> MultipieceShipmentReprintAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reprint Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// This operation is used to reprint the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MultipieceDomesticShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultipieceDomesticShipmentResponse>> MultipieceShipmentReprintWithHttpInfoAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMultipieceApi : IMultipieceApiSync, IMultipieceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MultipieceApi : IMultipieceApi
    {
        private com.pitneybowes.api360.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MultipieceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MultipieceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultipieceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MultipieceApi(string basePath)
        {
            this.Configuration = com.pitneybowes.api360.Client.Configuration.MergeConfigurations(
                com.pitneybowes.api360.Client.GlobalConfiguration.Instance,
                new com.pitneybowes.api360.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultipieceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MultipieceApi(com.pitneybowes.api360.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.pitneybowes.api360.Client.Configuration.MergeConfigurations(
                com.pitneybowes.api360.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultipieceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MultipieceApi(com.pitneybowes.api360.Client.ISynchronousClient client, com.pitneybowes.api360.Client.IAsynchronousClient asyncClient, com.pitneybowes.api360.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.pitneybowes.api360.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.pitneybowes.api360.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.pitneybowes.api360.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.pitneybowes.api360.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Multipiece Rateshop and Rates This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType in multiPieceParcels object. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MultipieceRates200Response</returns>
        public MultipieceRates200Response MultipieceRates(MultipieceRatesRequest multipieceRatesRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<MultipieceRates200Response> localVarResponse = MultipieceRatesWithHttpInfo(multipieceRatesRequest, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Multipiece Rateshop and Rates This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType in multiPieceParcels object. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MultipieceRates200Response</returns>
        public com.pitneybowes.api360.Client.ApiResponse<MultipieceRates200Response> MultipieceRatesWithHttpInfo(MultipieceRatesRequest multipieceRatesRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'multipieceRatesRequest' is set
            if (multipieceRatesRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'multipieceRatesRequest' when calling MultipieceApi->MultipieceRates");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = multipieceRatesRequest;

            localVarRequestOptions.Operation = "MultipieceApi.MultipieceRates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MultipieceRates200Response>("/api/v1/multipiece/rates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MultipieceRates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Multipiece Rateshop and Rates This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType in multiPieceParcels object. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MultipieceRates200Response</returns>
        public async System.Threading.Tasks.Task<MultipieceRates200Response> MultipieceRatesAsync(MultipieceRatesRequest multipieceRatesRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<MultipieceRates200Response> localVarResponse = await MultipieceRatesWithHttpInfoAsync(multipieceRatesRequest, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Multipiece Rateshop and Rates This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType in multiPieceParcels object. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MultipieceRates200Response)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<MultipieceRates200Response>> MultipieceRatesWithHttpInfoAsync(MultipieceRatesRequest multipieceRatesRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'multipieceRatesRequest' is set
            if (multipieceRatesRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'multipieceRatesRequest' when calling MultipieceApi->MultipieceRates");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = multipieceRatesRequest;

            localVarRequestOptions.Operation = "MultipieceApi.MultipieceRates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MultipieceRates200Response>("/api/v1/multipiece/rates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MultipieceRates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Multipiece Shipment This operation is used to create Multipiece Shipments. UPS, FedEx and DHL Express are supported for Multipiece Shipments.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MultipieceShipment200Response</returns>
        public MultipieceShipment200Response MultipieceShipment(MultipieceShipmentRequest multipieceShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<MultipieceShipment200Response> localVarResponse = MultipieceShipmentWithHttpInfo(multipieceShipmentRequest, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Multipiece Shipment This operation is used to create Multipiece Shipments. UPS, FedEx and DHL Express are supported for Multipiece Shipments.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MultipieceShipment200Response</returns>
        public com.pitneybowes.api360.Client.ApiResponse<MultipieceShipment200Response> MultipieceShipmentWithHttpInfo(MultipieceShipmentRequest multipieceShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'multipieceShipmentRequest' is set
            if (multipieceShipmentRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'multipieceShipmentRequest' when calling MultipieceApi->MultipieceShipment");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = multipieceShipmentRequest;

            localVarRequestOptions.Operation = "MultipieceApi.MultipieceShipment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MultipieceShipment200Response>("/api/v1/multipiece/shipments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MultipieceShipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Multipiece Shipment This operation is used to create Multipiece Shipments. UPS, FedEx and DHL Express are supported for Multipiece Shipments.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MultipieceShipment200Response</returns>
        public async System.Threading.Tasks.Task<MultipieceShipment200Response> MultipieceShipmentAsync(MultipieceShipmentRequest multipieceShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<MultipieceShipment200Response> localVarResponse = await MultipieceShipmentWithHttpInfoAsync(multipieceShipmentRequest, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Multipiece Shipment This operation is used to create Multipiece Shipments. UPS, FedEx and DHL Express are supported for Multipiece Shipments.  &lt;br&gt; For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  &lt;br&gt; For FEDEX Multipiece, all parcels must be of same packaging type while creating multipiece shipment
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MultipieceShipment200Response)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<MultipieceShipment200Response>> MultipieceShipmentWithHttpInfoAsync(MultipieceShipmentRequest multipieceShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'multipieceShipmentRequest' is set
            if (multipieceShipmentRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'multipieceShipmentRequest' when calling MultipieceApi->MultipieceShipment");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = multipieceShipmentRequest;

            localVarRequestOptions.Operation = "MultipieceApi.MultipieceShipment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MultipieceShipment200Response>("/api/v1/multipiece/shipments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MultipieceShipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Multipiece Shipment This operation is used to cancel the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelShipment</returns>
        public CancelShipment MultipieceShipmentCancel(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<CancelShipment> localVarResponse = MultipieceShipmentCancelWithHttpInfo(shipmentId, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Multipiece Shipment This operation is used to cancel the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelShipment</returns>
        public com.pitneybowes.api360.Client.ApiResponse<CancelShipment> MultipieceShipmentCancelWithHttpInfo(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling MultipieceApi->MultipieceShipmentCancel");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "MultipieceApi.MultipieceShipmentCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CancelShipment>("/api/v1/multipiece/shipments/{shipmentId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MultipieceShipmentCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Multipiece Shipment This operation is used to cancel the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelShipment</returns>
        public async System.Threading.Tasks.Task<CancelShipment> MultipieceShipmentCancelAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<CancelShipment> localVarResponse = await MultipieceShipmentCancelWithHttpInfoAsync(shipmentId, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Multipiece Shipment This operation is used to cancel the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelShipment)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<CancelShipment>> MultipieceShipmentCancelWithHttpInfoAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling MultipieceApi->MultipieceShipmentCancel");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "MultipieceApi.MultipieceShipmentCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CancelShipment>("/api/v1/multipiece/shipments/{shipmentId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MultipieceShipmentCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reprint Multipiece Shipment This operation is used to reprint the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MultipieceDomesticShipmentResponse</returns>
        public MultipieceDomesticShipmentResponse MultipieceShipmentReprint(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<MultipieceDomesticShipmentResponse> localVarResponse = MultipieceShipmentReprintWithHttpInfo(shipmentId, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reprint Multipiece Shipment This operation is used to reprint the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MultipieceDomesticShipmentResponse</returns>
        public com.pitneybowes.api360.Client.ApiResponse<MultipieceDomesticShipmentResponse> MultipieceShipmentReprintWithHttpInfo(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling MultipieceApi->MultipieceShipmentReprint");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "MultipieceApi.MultipieceShipmentReprint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MultipieceDomesticShipmentResponse>("/api/v1/multipiece/shipments/{shipmentId}/reprint", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MultipieceShipmentReprint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reprint Multipiece Shipment This operation is used to reprint the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MultipieceDomesticShipmentResponse</returns>
        public async System.Threading.Tasks.Task<MultipieceDomesticShipmentResponse> MultipieceShipmentReprintAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<MultipieceDomesticShipmentResponse> localVarResponse = await MultipieceShipmentReprintWithHttpInfoAsync(shipmentId, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reprint Multipiece Shipment This operation is used to reprint the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Develover Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MultipieceDomesticShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<MultipieceDomesticShipmentResponse>> MultipieceShipmentReprintWithHttpInfoAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling MultipieceApi->MultipieceShipmentReprint");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "MultipieceApi.MultipieceShipmentReprint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MultipieceDomesticShipmentResponse>("/api/v1/multipiece/shipments/{shipmentId}/reprint", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MultipieceShipmentReprint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
