// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using com.pitneybowes.api360.Client;
using com.pitneybowes.api360.Model;
using System.Diagnostics.CodeAnalysis;

namespace com.pitneybowes.api360.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IMultipieceShipmentApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        MultipieceShipmentApiEvents Events { get; }

        /// <summary>
        /// Multipiece Rates
        /// </summary>
        /// <remarks>
        /// The operation is used for rateshop and to get specific rate based on serviceId for Multipiece.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="includeDeliveryCommitment">When set to true (default), the response includes delivery commitment information. Set to false to exclude delivery commitment details from the response. (optional, default to &quot;true&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceRatesApiResponse"/>&gt;</returns>
        Task<IMultipieceRatesApiResponse> MultipieceRatesAsync(MultipieceRatesRequest multipieceRatesRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> includeDeliveryCommitment = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Multipiece Rates
        /// </summary>
        /// <remarks>
        /// The operation is used for rateshop and to get specific rate based on serviceId for Multipiece.
        /// </remarks>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="includeDeliveryCommitment">When set to true (default), the response includes delivery commitment information. Set to false to exclude delivery commitment details from the response. (optional, default to &quot;true&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceRatesApiResponse"/>?&gt;</returns>
        Task<IMultipieceRatesApiResponse?> MultipieceRatesOrDefaultAsync(MultipieceRatesRequest multipieceRatesRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> includeDeliveryCommitment = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// The operation creates Multipiece Shipments. Shipments with multiple parcels sent to the same destination can be grouped together in a multipiece shipment.   - UPS, FedEx, DHL Express, Suprmsys, Purolator and Apple Express are supported for Multipiece Shipments.   - Maximum Parcels Allowed per Carrier:     - DHL: 75     - FedEx: 40     - UPS: 50     - Purolator: 100     - Apple Express: 75      - For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  - For FedEx Multipiece, all parcels must be of same packaging type while creating multipiece shipment  - USPS does not support multi-piece parcels in a single shipment at this time. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="includeDeliveryCommitment">When set to true (default), the response includes delivery commitment information. Set to false to exclude delivery commitment details from the response. (optional, default to &quot;true&quot;)</param>
        /// <param name="splitContent">Include this parameter only if you want to generate separate labels for each parcel in a multi-piece shipment. As of now, individual parcel labels supported for carriers FedEx and UPS. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceShipmentApiResponse"/>&gt;</returns>
        Task<IMultipieceShipmentApiResponse> MultipieceShipmentAsync(MultipieceShipmentRequest multipieceShipmentRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> includeDeliveryCommitment = default, Option<bool> splitContent = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// The operation creates Multipiece Shipments. Shipments with multiple parcels sent to the same destination can be grouped together in a multipiece shipment.   - UPS, FedEx, DHL Express, Suprmsys, Purolator and Apple Express are supported for Multipiece Shipments.   - Maximum Parcels Allowed per Carrier:     - DHL: 75     - FedEx: 40     - UPS: 50     - Purolator: 100     - Apple Express: 75      - For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  - For FedEx Multipiece, all parcels must be of same packaging type while creating multipiece shipment  - USPS does not support multi-piece parcels in a single shipment at this time. 
        /// </remarks>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="includeDeliveryCommitment">When set to true (default), the response includes delivery commitment information. Set to false to exclude delivery commitment details from the response. (optional, default to &quot;true&quot;)</param>
        /// <param name="splitContent">Include this parameter only if you want to generate separate labels for each parcel in a multi-piece shipment. As of now, individual parcel labels supported for carriers FedEx and UPS. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceShipmentApiResponse"/>?&gt;</returns>
        Task<IMultipieceShipmentApiResponse?> MultipieceShipmentOrDefaultAsync(MultipieceShipmentRequest multipieceShipmentRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> includeDeliveryCommitment = default, Option<bool> splitContent = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// The operation is used to cancel the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceShipmentCancelApiResponse"/>&gt;</returns>
        Task<IMultipieceShipmentCancelApiResponse> MultipieceShipmentCancelAsync(string shipmentId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// The operation is used to cancel the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </remarks>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceShipmentCancelApiResponse"/>?&gt;</returns>
        Task<IMultipieceShipmentCancelApiResponse?> MultipieceShipmentCancelOrDefaultAsync(string shipmentId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reprint Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// The operation is used to reprint the multipiece label. It takes the shipmentId of the multipiece shipment done. All supported carriers (UPS, FedEx, DHL Express, Suprmsys, Purolator, and Apple Express) allow up to 8 reprint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceShipmentReprintApiResponse"/>&gt;</returns>
        Task<IMultipieceShipmentReprintApiResponse> MultipieceShipmentReprintAsync(string shipmentId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reprint Multipiece Shipment
        /// </summary>
        /// <remarks>
        /// The operation is used to reprint the multipiece label. It takes the shipmentId of the multipiece shipment done. All supported carriers (UPS, FedEx, DHL Express, Suprmsys, Purolator, and Apple Express) allow up to 8 reprint.
        /// </remarks>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceShipmentReprintApiResponse"/>?&gt;</returns>
        Task<IMultipieceShipmentReprintApiResponse?> MultipieceShipmentReprintOrDefaultAsync(string shipmentId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IMultipieceRatesApiResponse"/>
    /// </summary>
    public interface IMultipieceRatesApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.MultipieceRates200Response?>, IBadRequest<List<InvalidErrorsInner>?>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>, IInternalServerError<com.pitneybowes.api360.Model.ServerError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IMultipieceShipmentApiResponse"/>
    /// </summary>
    public interface IMultipieceShipmentApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.MultipieceShipment200Response?>, IBadRequest<List<InvalidErrorsInner>?>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>, IInternalServerError<com.pitneybowes.api360.Model.ServerError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IMultipieceShipmentCancelApiResponse"/>
    /// </summary>
    public interface IMultipieceShipmentCancelApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.CancelShipment?>, IBadRequest<List<InvalidErrorsInner>?>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>, IInternalServerError<com.pitneybowes.api360.Model.ServerError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IMultipieceShipmentReprintApiResponse"/>
    /// </summary>
    public interface IMultipieceShipmentReprintApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.ReprintMultipieceShipmentResponse?>, IBadRequest<List<InvalidErrorsInner>?>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>, IInternalServerError<com.pitneybowes.api360.Model.ServerError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class MultipieceShipmentApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnMultipieceRates;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMultipieceRates;

        internal void ExecuteOnMultipieceRates(MultipieceShipmentApi.MultipieceRatesApiResponse apiResponse)
        {
            OnMultipieceRates?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorMultipieceRates(Exception exception)
        {
            OnErrorMultipieceRates?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnMultipieceShipment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMultipieceShipment;

        internal void ExecuteOnMultipieceShipment(MultipieceShipmentApi.MultipieceShipmentApiResponse apiResponse)
        {
            OnMultipieceShipment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorMultipieceShipment(Exception exception)
        {
            OnErrorMultipieceShipment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnMultipieceShipmentCancel;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMultipieceShipmentCancel;

        internal void ExecuteOnMultipieceShipmentCancel(MultipieceShipmentApi.MultipieceShipmentCancelApiResponse apiResponse)
        {
            OnMultipieceShipmentCancel?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorMultipieceShipmentCancel(Exception exception)
        {
            OnErrorMultipieceShipmentCancel?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnMultipieceShipmentReprint;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMultipieceShipmentReprint;

        internal void ExecuteOnMultipieceShipmentReprint(MultipieceShipmentApi.MultipieceShipmentReprintApiResponse apiResponse)
        {
            OnMultipieceShipmentReprint?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorMultipieceShipmentReprint(Exception exception)
        {
            OnErrorMultipieceShipmentReprint?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class MultipieceShipmentApi : IMultipieceShipmentApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<MultipieceShipmentApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public MultipieceShipmentApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultipieceShipmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MultipieceShipmentApi(ILogger<MultipieceShipmentApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, MultipieceShipmentApiEvents multipieceShipmentApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<MultipieceShipmentApi>();
            HttpClient = httpClient;
            Events = multipieceShipmentApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            BasicTokenProvider = basicTokenProvider;
        }

        partial void FormatMultipieceRates(MultipieceRatesRequest multipieceRatesRequest, ref Option<string> xPBDeveloperPartnerId, ref Option<string> includeDeliveryCommitment);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="includeDeliveryCommitment"></param>
        /// <returns></returns>
        private void ValidateMultipieceRates(MultipieceRatesRequest multipieceRatesRequest, Option<string> xPBDeveloperPartnerId, Option<string> includeDeliveryCommitment)
        {
            if (multipieceRatesRequest == null)
                throw new ArgumentNullException(nameof(multipieceRatesRequest));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (includeDeliveryCommitment.IsSet && includeDeliveryCommitment.Value == null)
                throw new ArgumentNullException(nameof(includeDeliveryCommitment));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="includeDeliveryCommitment"></param>
        private void AfterMultipieceRatesDefaultImplementation(IMultipieceRatesApiResponse apiResponseLocalVar, MultipieceRatesRequest multipieceRatesRequest, Option<string> xPBDeveloperPartnerId, Option<string> includeDeliveryCommitment)
        {
            bool suppressDefaultLog = false;
            AfterMultipieceRates(ref suppressDefaultLog, apiResponseLocalVar, multipieceRatesRequest, xPBDeveloperPartnerId, includeDeliveryCommitment);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="includeDeliveryCommitment"></param>
        partial void AfterMultipieceRates(ref bool suppressDefaultLog, IMultipieceRatesApiResponse apiResponseLocalVar, MultipieceRatesRequest multipieceRatesRequest, Option<string> xPBDeveloperPartnerId, Option<string> includeDeliveryCommitment);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="includeDeliveryCommitment"></param>
        private void OnErrorMultipieceRatesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MultipieceRatesRequest multipieceRatesRequest, Option<string> xPBDeveloperPartnerId, Option<string> includeDeliveryCommitment)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorMultipieceRates(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, multipieceRatesRequest, xPBDeveloperPartnerId, includeDeliveryCommitment);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="includeDeliveryCommitment"></param>
        partial void OnErrorMultipieceRates(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MultipieceRatesRequest multipieceRatesRequest, Option<string> xPBDeveloperPartnerId, Option<string> includeDeliveryCommitment);

        /// <summary>
        /// Multipiece Rates The operation is used for rateshop and to get specific rate based on serviceId for Multipiece.
        /// </summary>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="includeDeliveryCommitment">When set to true (default), the response includes delivery commitment information. Set to false to exclude delivery commitment details from the response. (optional, default to &quot;true&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceRatesApiResponse"/>&gt;</returns>
        public async Task<IMultipieceRatesApiResponse?> MultipieceRatesOrDefaultAsync(MultipieceRatesRequest multipieceRatesRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> includeDeliveryCommitment = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MultipieceRatesAsync(multipieceRatesRequest, xPBDeveloperPartnerId, includeDeliveryCommitment, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Multipiece Rates The operation is used for rateshop and to get specific rate based on serviceId for Multipiece.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="includeDeliveryCommitment">When set to true (default), the response includes delivery commitment information. Set to false to exclude delivery commitment details from the response. (optional, default to &quot;true&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceRatesApiResponse"/>&gt;</returns>
        public async Task<IMultipieceRatesApiResponse> MultipieceRatesAsync(MultipieceRatesRequest multipieceRatesRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> includeDeliveryCommitment = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateMultipieceRates(multipieceRatesRequest, xPBDeveloperPartnerId, includeDeliveryCommitment);

                FormatMultipieceRates(multipieceRatesRequest, ref xPBDeveloperPartnerId, ref includeDeliveryCommitment);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/multipiece/rates"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/multipiece/rates");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (includeDeliveryCommitment.IsSet)
                        parseQueryStringLocalVar["includeDeliveryCommitment"] = ClientUtils.ParameterToString(includeDeliveryCommitment.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    httpRequestMessageLocalVar.Content = (multipieceRatesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(multipieceRatesRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<MultipieceRatesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<MultipieceRatesApiResponse>();

                        MultipieceRatesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/multipiece/rates", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterMultipieceRatesDefaultImplementation(apiResponseLocalVar, multipieceRatesRequest, xPBDeveloperPartnerId, includeDeliveryCommitment);

                        Events.ExecuteOnMultipieceRates(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMultipieceRatesDefaultImplementation(e, "/api/v1/multipiece/rates", uriBuilderLocalVar.Path, multipieceRatesRequest, xPBDeveloperPartnerId, includeDeliveryCommitment);
                Events.ExecuteOnErrorMultipieceRates(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="MultipieceRatesApiResponse"/>
        /// </summary>
        public partial class MultipieceRatesApiResponse : com.pitneybowes.api360.Client.ApiResponse, IMultipieceRatesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<MultipieceRatesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="MultipieceRatesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MultipieceRatesApiResponse(ILogger<MultipieceRatesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.MultipieceRates200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.MultipieceRates200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out com.pitneybowes.api360.Model.MultipieceRates200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner>? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out List<InvalidErrorsInner>? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out com.pitneybowes.api360.Model.ServerError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatMultipieceShipment(MultipieceShipmentRequest multipieceShipmentRequest, ref Option<string> xPBDeveloperPartnerId, ref Option<string> includeDeliveryCommitment, ref Option<bool> splitContent);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="includeDeliveryCommitment"></param>
        /// <returns></returns>
        private void ValidateMultipieceShipment(MultipieceShipmentRequest multipieceShipmentRequest, Option<string> xPBDeveloperPartnerId, Option<string> includeDeliveryCommitment)
        {
            if (multipieceShipmentRequest == null)
                throw new ArgumentNullException(nameof(multipieceShipmentRequest));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (includeDeliveryCommitment.IsSet && includeDeliveryCommitment.Value == null)
                throw new ArgumentNullException(nameof(includeDeliveryCommitment));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="includeDeliveryCommitment"></param>
        /// <param name="splitContent"></param>
        private void AfterMultipieceShipmentDefaultImplementation(IMultipieceShipmentApiResponse apiResponseLocalVar, MultipieceShipmentRequest multipieceShipmentRequest, Option<string> xPBDeveloperPartnerId, Option<string> includeDeliveryCommitment, Option<bool> splitContent)
        {
            bool suppressDefaultLog = false;
            AfterMultipieceShipment(ref suppressDefaultLog, apiResponseLocalVar, multipieceShipmentRequest, xPBDeveloperPartnerId, includeDeliveryCommitment, splitContent);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="includeDeliveryCommitment"></param>
        /// <param name="splitContent"></param>
        partial void AfterMultipieceShipment(ref bool suppressDefaultLog, IMultipieceShipmentApiResponse apiResponseLocalVar, MultipieceShipmentRequest multipieceShipmentRequest, Option<string> xPBDeveloperPartnerId, Option<string> includeDeliveryCommitment, Option<bool> splitContent);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="includeDeliveryCommitment"></param>
        /// <param name="splitContent"></param>
        private void OnErrorMultipieceShipmentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MultipieceShipmentRequest multipieceShipmentRequest, Option<string> xPBDeveloperPartnerId, Option<string> includeDeliveryCommitment, Option<bool> splitContent)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorMultipieceShipment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, multipieceShipmentRequest, xPBDeveloperPartnerId, includeDeliveryCommitment, splitContent);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="includeDeliveryCommitment"></param>
        /// <param name="splitContent"></param>
        partial void OnErrorMultipieceShipment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MultipieceShipmentRequest multipieceShipmentRequest, Option<string> xPBDeveloperPartnerId, Option<string> includeDeliveryCommitment, Option<bool> splitContent);

        /// <summary>
        /// Multipiece Shipment The operation creates Multipiece Shipments. Shipments with multiple parcels sent to the same destination can be grouped together in a multipiece shipment.   - UPS, FedEx, DHL Express, Suprmsys, Purolator and Apple Express are supported for Multipiece Shipments.   - Maximum Parcels Allowed per Carrier:     - DHL: 75     - FedEx: 40     - UPS: 50     - Purolator: 100     - Apple Express: 75      - For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  - For FedEx Multipiece, all parcels must be of same packaging type while creating multipiece shipment  - USPS does not support multi-piece parcels in a single shipment at this time. 
        /// </summary>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="includeDeliveryCommitment">When set to true (default), the response includes delivery commitment information. Set to false to exclude delivery commitment details from the response. (optional, default to &quot;true&quot;)</param>
        /// <param name="splitContent">Include this parameter only if you want to generate separate labels for each parcel in a multi-piece shipment. As of now, individual parcel labels supported for carriers FedEx and UPS. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceShipmentApiResponse"/>&gt;</returns>
        public async Task<IMultipieceShipmentApiResponse?> MultipieceShipmentOrDefaultAsync(MultipieceShipmentRequest multipieceShipmentRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> includeDeliveryCommitment = default, Option<bool> splitContent = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MultipieceShipmentAsync(multipieceShipmentRequest, xPBDeveloperPartnerId, includeDeliveryCommitment, splitContent, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Multipiece Shipment The operation creates Multipiece Shipments. Shipments with multiple parcels sent to the same destination can be grouped together in a multipiece shipment.   - UPS, FedEx, DHL Express, Suprmsys, Purolator and Apple Express are supported for Multipiece Shipments.   - Maximum Parcels Allowed per Carrier:     - DHL: 75     - FedEx: 40     - UPS: 50     - Purolator: 100     - Apple Express: 75      - For UPS- multipiece shipment with Envelopes (having parcel Type as LTR) is not supported.  - For FedEx Multipiece, all parcels must be of same packaging type while creating multipiece shipment  - USPS does not support multi-piece parcels in a single shipment at this time. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="multipieceShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="includeDeliveryCommitment">When set to true (default), the response includes delivery commitment information. Set to false to exclude delivery commitment details from the response. (optional, default to &quot;true&quot;)</param>
        /// <param name="splitContent">Include this parameter only if you want to generate separate labels for each parcel in a multi-piece shipment. As of now, individual parcel labels supported for carriers FedEx and UPS. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceShipmentApiResponse"/>&gt;</returns>
        public async Task<IMultipieceShipmentApiResponse> MultipieceShipmentAsync(MultipieceShipmentRequest multipieceShipmentRequest, Option<string> xPBDeveloperPartnerId = default, Option<string> includeDeliveryCommitment = default, Option<bool> splitContent = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateMultipieceShipment(multipieceShipmentRequest, xPBDeveloperPartnerId, includeDeliveryCommitment);

                FormatMultipieceShipment(multipieceShipmentRequest, ref xPBDeveloperPartnerId, ref includeDeliveryCommitment, ref splitContent);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/multipiece/shipments"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/multipiece/shipments");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (includeDeliveryCommitment.IsSet)
                        parseQueryStringLocalVar["includeDeliveryCommitment"] = ClientUtils.ParameterToString(includeDeliveryCommitment.Value);

                    if (splitContent.IsSet)
                        parseQueryStringLocalVar["splitContent"] = ClientUtils.ParameterToString(splitContent.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    httpRequestMessageLocalVar.Content = (multipieceShipmentRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(multipieceShipmentRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<MultipieceShipmentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<MultipieceShipmentApiResponse>();

                        MultipieceShipmentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/multipiece/shipments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterMultipieceShipmentDefaultImplementation(apiResponseLocalVar, multipieceShipmentRequest, xPBDeveloperPartnerId, includeDeliveryCommitment, splitContent);

                        Events.ExecuteOnMultipieceShipment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMultipieceShipmentDefaultImplementation(e, "/api/v1/multipiece/shipments", uriBuilderLocalVar.Path, multipieceShipmentRequest, xPBDeveloperPartnerId, includeDeliveryCommitment, splitContent);
                Events.ExecuteOnErrorMultipieceShipment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="MultipieceShipmentApiResponse"/>
        /// </summary>
        public partial class MultipieceShipmentApiResponse : com.pitneybowes.api360.Client.ApiResponse, IMultipieceShipmentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<MultipieceShipmentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="MultipieceShipmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MultipieceShipmentApiResponse(ILogger<MultipieceShipmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.MultipieceShipment200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.MultipieceShipment200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out com.pitneybowes.api360.Model.MultipieceShipment200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner>? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out List<InvalidErrorsInner>? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out com.pitneybowes.api360.Model.ServerError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatMultipieceShipmentCancel(ref string shipmentId, ref Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <returns></returns>
        private void ValidateMultipieceShipmentCancel(string shipmentId, Option<string> xPBDeveloperPartnerId)
        {
            if (shipmentId == null)
                throw new ArgumentNullException(nameof(shipmentId));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void AfterMultipieceShipmentCancelDefaultImplementation(IMultipieceShipmentCancelApiResponse apiResponseLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLog = false;
            AfterMultipieceShipmentCancel(ref suppressDefaultLog, apiResponseLocalVar, shipmentId, xPBDeveloperPartnerId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void AfterMultipieceShipmentCancel(ref bool suppressDefaultLog, IMultipieceShipmentCancelApiResponse apiResponseLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void OnErrorMultipieceShipmentCancelDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorMultipieceShipmentCancel(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, shipmentId, xPBDeveloperPartnerId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void OnErrorMultipieceShipmentCancel(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Cancel Multipiece Shipment The operation is used to cancel the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </summary>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceShipmentCancelApiResponse"/>&gt;</returns>
        public async Task<IMultipieceShipmentCancelApiResponse?> MultipieceShipmentCancelOrDefaultAsync(string shipmentId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MultipieceShipmentCancelAsync(shipmentId, xPBDeveloperPartnerId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Cancel Multipiece Shipment The operation is used to cancel the multipiece label. It takes the shipmentId of the multipiece shipment done.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceShipmentCancelApiResponse"/>&gt;</returns>
        public async Task<IMultipieceShipmentCancelApiResponse> MultipieceShipmentCancelAsync(string shipmentId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateMultipieceShipmentCancel(shipmentId, xPBDeveloperPartnerId);

                FormatMultipieceShipmentCancel(ref shipmentId, ref xPBDeveloperPartnerId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/multipiece/shipments/{shipmentId}/cancel"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/multipiece/shipments/{shipmentId}/cancel");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshipmentId%7D", Uri.EscapeDataString(shipmentId.ToString()));

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<MultipieceShipmentCancelApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<MultipieceShipmentCancelApiResponse>();

                        MultipieceShipmentCancelApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/multipiece/shipments/{shipmentId}/cancel", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterMultipieceShipmentCancelDefaultImplementation(apiResponseLocalVar, shipmentId, xPBDeveloperPartnerId);

                        Events.ExecuteOnMultipieceShipmentCancel(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMultipieceShipmentCancelDefaultImplementation(e, "/api/v1/multipiece/shipments/{shipmentId}/cancel", uriBuilderLocalVar.Path, shipmentId, xPBDeveloperPartnerId);
                Events.ExecuteOnErrorMultipieceShipmentCancel(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="MultipieceShipmentCancelApiResponse"/>
        /// </summary>
        public partial class MultipieceShipmentCancelApiResponse : com.pitneybowes.api360.Client.ApiResponse, IMultipieceShipmentCancelApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<MultipieceShipmentCancelApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="MultipieceShipmentCancelApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MultipieceShipmentCancelApiResponse(ILogger<MultipieceShipmentCancelApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.CancelShipment? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.CancelShipment>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out com.pitneybowes.api360.Model.CancelShipment? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner>? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out List<InvalidErrorsInner>? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out com.pitneybowes.api360.Model.ServerError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatMultipieceShipmentReprint(ref string shipmentId, ref Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <returns></returns>
        private void ValidateMultipieceShipmentReprint(string shipmentId, Option<string> xPBDeveloperPartnerId)
        {
            if (shipmentId == null)
                throw new ArgumentNullException(nameof(shipmentId));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void AfterMultipieceShipmentReprintDefaultImplementation(IMultipieceShipmentReprintApiResponse apiResponseLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLog = false;
            AfterMultipieceShipmentReprint(ref suppressDefaultLog, apiResponseLocalVar, shipmentId, xPBDeveloperPartnerId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void AfterMultipieceShipmentReprint(ref bool suppressDefaultLog, IMultipieceShipmentReprintApiResponse apiResponseLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void OnErrorMultipieceShipmentReprintDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorMultipieceShipmentReprint(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, shipmentId, xPBDeveloperPartnerId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void OnErrorMultipieceShipmentReprint(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Reprint Multipiece Shipment The operation is used to reprint the multipiece label. It takes the shipmentId of the multipiece shipment done. All supported carriers (UPS, FedEx, DHL Express, Suprmsys, Purolator, and Apple Express) allow up to 8 reprint.
        /// </summary>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceShipmentReprintApiResponse"/>&gt;</returns>
        public async Task<IMultipieceShipmentReprintApiResponse?> MultipieceShipmentReprintOrDefaultAsync(string shipmentId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MultipieceShipmentReprintAsync(shipmentId, xPBDeveloperPartnerId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reprint Multipiece Shipment The operation is used to reprint the multipiece label. It takes the shipmentId of the multipiece shipment done. All supported carriers (UPS, FedEx, DHL Express, Suprmsys, Purolator, and Apple Express) allow up to 8 reprint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultipieceShipmentReprintApiResponse"/>&gt;</returns>
        public async Task<IMultipieceShipmentReprintApiResponse> MultipieceShipmentReprintAsync(string shipmentId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateMultipieceShipmentReprint(shipmentId, xPBDeveloperPartnerId);

                FormatMultipieceShipmentReprint(ref shipmentId, ref xPBDeveloperPartnerId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/multipiece/shipments/{shipmentId}/reprint"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/multipiece/shipments/{shipmentId}/reprint");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshipmentId%7D", Uri.EscapeDataString(shipmentId.ToString()));

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<MultipieceShipmentReprintApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<MultipieceShipmentReprintApiResponse>();

                        MultipieceShipmentReprintApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/multipiece/shipments/{shipmentId}/reprint", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterMultipieceShipmentReprintDefaultImplementation(apiResponseLocalVar, shipmentId, xPBDeveloperPartnerId);

                        Events.ExecuteOnMultipieceShipmentReprint(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMultipieceShipmentReprintDefaultImplementation(e, "/api/v1/multipiece/shipments/{shipmentId}/reprint", uriBuilderLocalVar.Path, shipmentId, xPBDeveloperPartnerId);
                Events.ExecuteOnErrorMultipieceShipmentReprint(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="MultipieceShipmentReprintApiResponse"/>
        /// </summary>
        public partial class MultipieceShipmentReprintApiResponse : com.pitneybowes.api360.Client.ApiResponse, IMultipieceShipmentReprintApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<MultipieceShipmentReprintApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="MultipieceShipmentReprintApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MultipieceShipmentReprintApiResponse(ILogger<MultipieceShipmentReprintApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ReprintMultipieceShipmentResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ReprintMultipieceShipmentResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out com.pitneybowes.api360.Model.ReprintMultipieceShipmentResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner>? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out List<InvalidErrorsInner>? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out com.pitneybowes.api360.Model.ServerError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
