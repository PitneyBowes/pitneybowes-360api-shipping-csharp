/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.pitneybowes.api360.Client;
using com.pitneybowes.api360.Model;

namespace com.pitneybowes.api360.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPickupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Pickups
        /// </summary>
        /// <remarks>
        /// This operation is used to Cancel the scheduled pickup.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SchedulePickupCancelResponse</returns>
        SchedulePickupCancelResponse CancelPickups(SchedulePickupCancelRequest schedulePickupCancelRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Cancel Pickups
        /// </summary>
        /// <remarks>
        /// This operation is used to Cancel the scheduled pickup.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SchedulePickupCancelResponse</returns>
        ApiResponse<SchedulePickupCancelResponse> CancelPickupsWithHttpInfo(SchedulePickupCancelRequest schedulePickupCancelRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Cancelled Pickup Document
        /// </summary>
        /// <remarks>
        /// This operation is used to get receipt for pickup cancellation. The receipt generated is in PDF format. &lt;br&gt; This operation can create receipt for multiple pickups which are cancelled.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Indicates type of pickup. Supported value is &#x60;cancelled&#x60;.</param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPickupCancelledDocumentResponse</returns>
        GetPickupCancelledDocumentResponse CancelledPickupDocument(string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Cancelled Pickup Document
        /// </summary>
        /// <remarks>
        /// This operation is used to get receipt for pickup cancellation. The receipt generated is in PDF format. &lt;br&gt; This operation can create receipt for multiple pickups which are cancelled.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Indicates type of pickup. Supported value is &#x60;cancelled&#x60;.</param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPickupCancelledDocumentResponse</returns>
        ApiResponse<GetPickupCancelledDocumentResponse> CancelledPickupDocumentWithHttpInfo(string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Pickup Document
        /// </summary>
        /// <remarks>
        /// This operation returns the scheduled pickup or cancellation receipt in PDF format.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pickupId">It specified the pickupId for which PDF receipt is needed.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPickupDocument</returns>
        GetPickupDocument GetPickupDocument(string pickupId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Pickup Document
        /// </summary>
        /// <remarks>
        /// This operation returns the scheduled pickup or cancellation receipt in PDF format.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pickupId">It specified the pickupId for which PDF receipt is needed.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPickupDocument</returns>
        ApiResponse<GetPickupDocument> GetPickupDocumentWithHttpInfo(string pickupId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Pickups
        /// </summary>
        /// <remarks>
        /// This operation is used to view the history of pickups scheduled or cancelled for your packages.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">Indicates CarrierID. If not provided, it would show pickups for all the carriers. (optional)</param>
        /// <param name="startDate">Indicates start date from when you want to see the history. If not provided, it will take today&#39;s date. (optional)</param>
        /// <param name="endDate">Indicates end date till you want to see the pickups history. If not provide, it will take today&#39;s date. (optional)</param>
        /// <param name="status">Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status. (optional)</param>
        /// <param name="page">Indicates page number, if not provided page would be 1. (optional)</param>
        /// <param name="size">Indicates size of records, if not provided size would be 20 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllPickups</returns>
        GetAllPickups GetPickups(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? status = default(string?), decimal? page = default(decimal?), decimal? size = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Get Pickups
        /// </summary>
        /// <remarks>
        /// This operation is used to view the history of pickups scheduled or cancelled for your packages.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">Indicates CarrierID. If not provided, it would show pickups for all the carriers. (optional)</param>
        /// <param name="startDate">Indicates start date from when you want to see the history. If not provided, it will take today&#39;s date. (optional)</param>
        /// <param name="endDate">Indicates end date till you want to see the pickups history. If not provide, it will take today&#39;s date. (optional)</param>
        /// <param name="status">Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status. (optional)</param>
        /// <param name="page">Indicates page number, if not provided page would be 1. (optional)</param>
        /// <param name="size">Indicates size of records, if not provided size would be 20 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllPickups</returns>
        ApiResponse<GetAllPickups> GetPickupsWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? status = default(string?), decimal? page = default(decimal?), decimal? size = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Schedule Pickup
        /// </summary>
        /// <remarks>
        /// This operation allows to schedule Pickups with USPS, UPS, FedEx and DHLExpress for eligible shipments. &lt;br&gt; Below are four possible combinations for scheduling pickup &lt;br&gt;  &lt;br&gt; 1. When request does not specify &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- The system would consider all eligible shipments created in a current day. &lt;br&gt; 2. When request specifies only &#x60;shipmentIds&#x60;- Pickup will be created for the shipmentIds mentioned &lt;br&gt; 3. When request specifies only &#x60;pickupSummary&#x60;- Pickup will be created for the pickup details mentioned in the pickupSummary &lt;br&gt; 4. When request specifies both &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- Pickup will be created including details mentioned in both objects.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SchedulePickup200Response</returns>
        SchedulePickup200Response SchedulePickup(SchedulePickupRequest schedulePickupRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Schedule Pickup
        /// </summary>
        /// <remarks>
        /// This operation allows to schedule Pickups with USPS, UPS, FedEx and DHLExpress for eligible shipments. &lt;br&gt; Below are four possible combinations for scheduling pickup &lt;br&gt;  &lt;br&gt; 1. When request does not specify &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- The system would consider all eligible shipments created in a current day. &lt;br&gt; 2. When request specifies only &#x60;shipmentIds&#x60;- Pickup will be created for the shipmentIds mentioned &lt;br&gt; 3. When request specifies only &#x60;pickupSummary&#x60;- Pickup will be created for the pickup details mentioned in the pickupSummary &lt;br&gt; 4. When request specifies both &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- Pickup will be created including details mentioned in both objects.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SchedulePickup200Response</returns>
        ApiResponse<SchedulePickup200Response> SchedulePickupWithHttpInfo(SchedulePickupRequest schedulePickupRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPickupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Pickups
        /// </summary>
        /// <remarks>
        /// This operation is used to Cancel the scheduled pickup.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchedulePickupCancelResponse</returns>
        System.Threading.Tasks.Task<SchedulePickupCancelResponse> CancelPickupsAsync(SchedulePickupCancelRequest schedulePickupCancelRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Pickups
        /// </summary>
        /// <remarks>
        /// This operation is used to Cancel the scheduled pickup.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchedulePickupCancelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchedulePickupCancelResponse>> CancelPickupsWithHttpInfoAsync(SchedulePickupCancelRequest schedulePickupCancelRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancelled Pickup Document
        /// </summary>
        /// <remarks>
        /// This operation is used to get receipt for pickup cancellation. The receipt generated is in PDF format. &lt;br&gt; This operation can create receipt for multiple pickups which are cancelled.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Indicates type of pickup. Supported value is &#x60;cancelled&#x60;.</param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPickupCancelledDocumentResponse</returns>
        System.Threading.Tasks.Task<GetPickupCancelledDocumentResponse> CancelledPickupDocumentAsync(string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancelled Pickup Document
        /// </summary>
        /// <remarks>
        /// This operation is used to get receipt for pickup cancellation. The receipt generated is in PDF format. &lt;br&gt; This operation can create receipt for multiple pickups which are cancelled.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Indicates type of pickup. Supported value is &#x60;cancelled&#x60;.</param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPickupCancelledDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPickupCancelledDocumentResponse>> CancelledPickupDocumentWithHttpInfoAsync(string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Pickup Document
        /// </summary>
        /// <remarks>
        /// This operation returns the scheduled pickup or cancellation receipt in PDF format.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pickupId">It specified the pickupId for which PDF receipt is needed.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPickupDocument</returns>
        System.Threading.Tasks.Task<GetPickupDocument> GetPickupDocumentAsync(string pickupId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Pickup Document
        /// </summary>
        /// <remarks>
        /// This operation returns the scheduled pickup or cancellation receipt in PDF format.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pickupId">It specified the pickupId for which PDF receipt is needed.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPickupDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPickupDocument>> GetPickupDocumentWithHttpInfoAsync(string pickupId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Pickups
        /// </summary>
        /// <remarks>
        /// This operation is used to view the history of pickups scheduled or cancelled for your packages.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">Indicates CarrierID. If not provided, it would show pickups for all the carriers. (optional)</param>
        /// <param name="startDate">Indicates start date from when you want to see the history. If not provided, it will take today&#39;s date. (optional)</param>
        /// <param name="endDate">Indicates end date till you want to see the pickups history. If not provide, it will take today&#39;s date. (optional)</param>
        /// <param name="status">Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status. (optional)</param>
        /// <param name="page">Indicates page number, if not provided page would be 1. (optional)</param>
        /// <param name="size">Indicates size of records, if not provided size would be 20 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllPickups</returns>
        System.Threading.Tasks.Task<GetAllPickups> GetPickupsAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? status = default(string?), decimal? page = default(decimal?), decimal? size = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Pickups
        /// </summary>
        /// <remarks>
        /// This operation is used to view the history of pickups scheduled or cancelled for your packages.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">Indicates CarrierID. If not provided, it would show pickups for all the carriers. (optional)</param>
        /// <param name="startDate">Indicates start date from when you want to see the history. If not provided, it will take today&#39;s date. (optional)</param>
        /// <param name="endDate">Indicates end date till you want to see the pickups history. If not provide, it will take today&#39;s date. (optional)</param>
        /// <param name="status">Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status. (optional)</param>
        /// <param name="page">Indicates page number, if not provided page would be 1. (optional)</param>
        /// <param name="size">Indicates size of records, if not provided size would be 20 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllPickups)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllPickups>> GetPickupsWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? status = default(string?), decimal? page = default(decimal?), decimal? size = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Schedule Pickup
        /// </summary>
        /// <remarks>
        /// This operation allows to schedule Pickups with USPS, UPS, FedEx and DHLExpress for eligible shipments. &lt;br&gt; Below are four possible combinations for scheduling pickup &lt;br&gt;  &lt;br&gt; 1. When request does not specify &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- The system would consider all eligible shipments created in a current day. &lt;br&gt; 2. When request specifies only &#x60;shipmentIds&#x60;- Pickup will be created for the shipmentIds mentioned &lt;br&gt; 3. When request specifies only &#x60;pickupSummary&#x60;- Pickup will be created for the pickup details mentioned in the pickupSummary &lt;br&gt; 4. When request specifies both &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- Pickup will be created including details mentioned in both objects.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchedulePickup200Response</returns>
        System.Threading.Tasks.Task<SchedulePickup200Response> SchedulePickupAsync(SchedulePickupRequest schedulePickupRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Schedule Pickup
        /// </summary>
        /// <remarks>
        /// This operation allows to schedule Pickups with USPS, UPS, FedEx and DHLExpress for eligible shipments. &lt;br&gt; Below are four possible combinations for scheduling pickup &lt;br&gt;  &lt;br&gt; 1. When request does not specify &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- The system would consider all eligible shipments created in a current day. &lt;br&gt; 2. When request specifies only &#x60;shipmentIds&#x60;- Pickup will be created for the shipmentIds mentioned &lt;br&gt; 3. When request specifies only &#x60;pickupSummary&#x60;- Pickup will be created for the pickup details mentioned in the pickupSummary &lt;br&gt; 4. When request specifies both &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- Pickup will be created including details mentioned in both objects.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchedulePickup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchedulePickup200Response>> SchedulePickupWithHttpInfoAsync(SchedulePickupRequest schedulePickupRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPickupsApi : IPickupsApiSync, IPickupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PickupsApi : IPickupsApi
    {
        private com.pitneybowes.api360.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PickupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PickupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PickupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PickupsApi(string basePath)
        {
            this.Configuration = com.pitneybowes.api360.Client.Configuration.MergeConfigurations(
                com.pitneybowes.api360.Client.GlobalConfiguration.Instance,
                new com.pitneybowes.api360.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PickupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PickupsApi(com.pitneybowes.api360.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.pitneybowes.api360.Client.Configuration.MergeConfigurations(
                com.pitneybowes.api360.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PickupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PickupsApi(com.pitneybowes.api360.Client.ISynchronousClient client, com.pitneybowes.api360.Client.IAsynchronousClient asyncClient, com.pitneybowes.api360.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.pitneybowes.api360.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.pitneybowes.api360.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.pitneybowes.api360.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.pitneybowes.api360.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel Pickups This operation is used to Cancel the scheduled pickup.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SchedulePickupCancelResponse</returns>
        public SchedulePickupCancelResponse CancelPickups(SchedulePickupCancelRequest schedulePickupCancelRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<SchedulePickupCancelResponse> localVarResponse = CancelPickupsWithHttpInfo(schedulePickupCancelRequest, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Pickups This operation is used to Cancel the scheduled pickup.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SchedulePickupCancelResponse</returns>
        public com.pitneybowes.api360.Client.ApiResponse<SchedulePickupCancelResponse> CancelPickupsWithHttpInfo(SchedulePickupCancelRequest schedulePickupCancelRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'schedulePickupCancelRequest' is set
            if (schedulePickupCancelRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'schedulePickupCancelRequest' when calling PickupsApi->CancelPickups");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = schedulePickupCancelRequest;

            localVarRequestOptions.Operation = "PickupsApi.CancelPickups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SchedulePickupCancelResponse>("/api/v1/pickups/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelPickups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Pickups This operation is used to Cancel the scheduled pickup.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchedulePickupCancelResponse</returns>
        public async System.Threading.Tasks.Task<SchedulePickupCancelResponse> CancelPickupsAsync(SchedulePickupCancelRequest schedulePickupCancelRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<SchedulePickupCancelResponse> localVarResponse = await CancelPickupsWithHttpInfoAsync(schedulePickupCancelRequest, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Pickups This operation is used to Cancel the scheduled pickup.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchedulePickupCancelResponse)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<SchedulePickupCancelResponse>> CancelPickupsWithHttpInfoAsync(SchedulePickupCancelRequest schedulePickupCancelRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schedulePickupCancelRequest' is set
            if (schedulePickupCancelRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'schedulePickupCancelRequest' when calling PickupsApi->CancelPickups");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = schedulePickupCancelRequest;

            localVarRequestOptions.Operation = "PickupsApi.CancelPickups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SchedulePickupCancelResponse>("/api/v1/pickups/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelPickups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancelled Pickup Document This operation is used to get receipt for pickup cancellation. The receipt generated is in PDF format. &lt;br&gt; This operation can create receipt for multiple pickups which are cancelled.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Indicates type of pickup. Supported value is &#x60;cancelled&#x60;.</param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPickupCancelledDocumentResponse</returns>
        public GetPickupCancelledDocumentResponse CancelledPickupDocument(string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<GetPickupCancelledDocumentResponse> localVarResponse = CancelledPickupDocumentWithHttpInfo(type, getPickupCancelledDocumentRequest, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancelled Pickup Document This operation is used to get receipt for pickup cancellation. The receipt generated is in PDF format. &lt;br&gt; This operation can create receipt for multiple pickups which are cancelled.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Indicates type of pickup. Supported value is &#x60;cancelled&#x60;.</param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPickupCancelledDocumentResponse</returns>
        public com.pitneybowes.api360.Client.ApiResponse<GetPickupCancelledDocumentResponse> CancelledPickupDocumentWithHttpInfo(string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'type' when calling PickupsApi->CancelledPickupDocument");
            }

            // verify the required parameter 'getPickupCancelledDocumentRequest' is set
            if (getPickupCancelledDocumentRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'getPickupCancelledDocumentRequest' when calling PickupsApi->CancelledPickupDocument");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = getPickupCancelledDocumentRequest;

            localVarRequestOptions.Operation = "PickupsApi.CancelledPickupDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetPickupCancelledDocumentResponse>("/api/v1/pickups/document", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelledPickupDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancelled Pickup Document This operation is used to get receipt for pickup cancellation. The receipt generated is in PDF format. &lt;br&gt; This operation can create receipt for multiple pickups which are cancelled.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Indicates type of pickup. Supported value is &#x60;cancelled&#x60;.</param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPickupCancelledDocumentResponse</returns>
        public async System.Threading.Tasks.Task<GetPickupCancelledDocumentResponse> CancelledPickupDocumentAsync(string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<GetPickupCancelledDocumentResponse> localVarResponse = await CancelledPickupDocumentWithHttpInfoAsync(type, getPickupCancelledDocumentRequest, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancelled Pickup Document This operation is used to get receipt for pickup cancellation. The receipt generated is in PDF format. &lt;br&gt; This operation can create receipt for multiple pickups which are cancelled.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Indicates type of pickup. Supported value is &#x60;cancelled&#x60;.</param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPickupCancelledDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<GetPickupCancelledDocumentResponse>> CancelledPickupDocumentWithHttpInfoAsync(string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'type' when calling PickupsApi->CancelledPickupDocument");
            }

            // verify the required parameter 'getPickupCancelledDocumentRequest' is set
            if (getPickupCancelledDocumentRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'getPickupCancelledDocumentRequest' when calling PickupsApi->CancelledPickupDocument");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = getPickupCancelledDocumentRequest;

            localVarRequestOptions.Operation = "PickupsApi.CancelledPickupDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetPickupCancelledDocumentResponse>("/api/v1/pickups/document", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelledPickupDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pickup Document This operation returns the scheduled pickup or cancellation receipt in PDF format.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pickupId">It specified the pickupId for which PDF receipt is needed.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPickupDocument</returns>
        public GetPickupDocument GetPickupDocument(string pickupId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<GetPickupDocument> localVarResponse = GetPickupDocumentWithHttpInfo(pickupId, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pickup Document This operation returns the scheduled pickup or cancellation receipt in PDF format.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pickupId">It specified the pickupId for which PDF receipt is needed.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPickupDocument</returns>
        public com.pitneybowes.api360.Client.ApiResponse<GetPickupDocument> GetPickupDocumentWithHttpInfo(string pickupId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'pickupId' is set
            if (pickupId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'pickupId' when calling PickupsApi->GetPickupDocument");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pickupId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(pickupId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "PickupsApi.GetPickupDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPickupDocument>("/api/v1/pickups/{pickupId}/document", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPickupDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pickup Document This operation returns the scheduled pickup or cancellation receipt in PDF format.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pickupId">It specified the pickupId for which PDF receipt is needed.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPickupDocument</returns>
        public async System.Threading.Tasks.Task<GetPickupDocument> GetPickupDocumentAsync(string pickupId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<GetPickupDocument> localVarResponse = await GetPickupDocumentWithHttpInfoAsync(pickupId, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pickup Document This operation returns the scheduled pickup or cancellation receipt in PDF format.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pickupId">It specified the pickupId for which PDF receipt is needed.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPickupDocument)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<GetPickupDocument>> GetPickupDocumentWithHttpInfoAsync(string pickupId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pickupId' is set
            if (pickupId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'pickupId' when calling PickupsApi->GetPickupDocument");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pickupId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(pickupId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "PickupsApi.GetPickupDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPickupDocument>("/api/v1/pickups/{pickupId}/document", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPickupDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pickups This operation is used to view the history of pickups scheduled or cancelled for your packages.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">Indicates CarrierID. If not provided, it would show pickups for all the carriers. (optional)</param>
        /// <param name="startDate">Indicates start date from when you want to see the history. If not provided, it will take today&#39;s date. (optional)</param>
        /// <param name="endDate">Indicates end date till you want to see the pickups history. If not provide, it will take today&#39;s date. (optional)</param>
        /// <param name="status">Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status. (optional)</param>
        /// <param name="page">Indicates page number, if not provided page would be 1. (optional)</param>
        /// <param name="size">Indicates size of records, if not provided size would be 20 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllPickups</returns>
        public GetAllPickups GetPickups(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? status = default(string?), decimal? page = default(decimal?), decimal? size = default(decimal?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<GetAllPickups> localVarResponse = GetPickupsWithHttpInfo(xPBDeveloperPartnerID, carrier, startDate, endDate, status, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pickups This operation is used to view the history of pickups scheduled or cancelled for your packages.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">Indicates CarrierID. If not provided, it would show pickups for all the carriers. (optional)</param>
        /// <param name="startDate">Indicates start date from when you want to see the history. If not provided, it will take today&#39;s date. (optional)</param>
        /// <param name="endDate">Indicates end date till you want to see the pickups history. If not provide, it will take today&#39;s date. (optional)</param>
        /// <param name="status">Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status. (optional)</param>
        /// <param name="page">Indicates page number, if not provided page would be 1. (optional)</param>
        /// <param name="size">Indicates size of records, if not provided size would be 20 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllPickups</returns>
        public com.pitneybowes.api360.Client.ApiResponse<GetAllPickups> GetPickupsWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? status = default(string?), decimal? page = default(decimal?), decimal? size = default(decimal?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (carrier != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "carrier", carrier));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "PickupsApi.GetPickups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllPickups>("/api/v1/pickups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPickups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pickups This operation is used to view the history of pickups scheduled or cancelled for your packages.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">Indicates CarrierID. If not provided, it would show pickups for all the carriers. (optional)</param>
        /// <param name="startDate">Indicates start date from when you want to see the history. If not provided, it will take today&#39;s date. (optional)</param>
        /// <param name="endDate">Indicates end date till you want to see the pickups history. If not provide, it will take today&#39;s date. (optional)</param>
        /// <param name="status">Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status. (optional)</param>
        /// <param name="page">Indicates page number, if not provided page would be 1. (optional)</param>
        /// <param name="size">Indicates size of records, if not provided size would be 20 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllPickups</returns>
        public async System.Threading.Tasks.Task<GetAllPickups> GetPickupsAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? status = default(string?), decimal? page = default(decimal?), decimal? size = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<GetAllPickups> localVarResponse = await GetPickupsWithHttpInfoAsync(xPBDeveloperPartnerID, carrier, startDate, endDate, status, page, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pickups This operation is used to view the history of pickups scheduled or cancelled for your packages.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">Indicates CarrierID. If not provided, it would show pickups for all the carriers. (optional)</param>
        /// <param name="startDate">Indicates start date from when you want to see the history. If not provided, it will take today&#39;s date. (optional)</param>
        /// <param name="endDate">Indicates end date till you want to see the pickups history. If not provide, it will take today&#39;s date. (optional)</param>
        /// <param name="status">Indicates status of the pickup(schedule or cancel). If not provided, it will show the response for both status. (optional)</param>
        /// <param name="page">Indicates page number, if not provided page would be 1. (optional)</param>
        /// <param name="size">Indicates size of records, if not provided size would be 20 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllPickups)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<GetAllPickups>> GetPickupsWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? status = default(string?), decimal? page = default(decimal?), decimal? size = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (carrier != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "carrier", carrier));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "PickupsApi.GetPickups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllPickups>("/api/v1/pickups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPickups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Schedule Pickup This operation allows to schedule Pickups with USPS, UPS, FedEx and DHLExpress for eligible shipments. &lt;br&gt; Below are four possible combinations for scheduling pickup &lt;br&gt;  &lt;br&gt; 1. When request does not specify &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- The system would consider all eligible shipments created in a current day. &lt;br&gt; 2. When request specifies only &#x60;shipmentIds&#x60;- Pickup will be created for the shipmentIds mentioned &lt;br&gt; 3. When request specifies only &#x60;pickupSummary&#x60;- Pickup will be created for the pickup details mentioned in the pickupSummary &lt;br&gt; 4. When request specifies both &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- Pickup will be created including details mentioned in both objects.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SchedulePickup200Response</returns>
        public SchedulePickup200Response SchedulePickup(SchedulePickupRequest schedulePickupRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<SchedulePickup200Response> localVarResponse = SchedulePickupWithHttpInfo(schedulePickupRequest, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Schedule Pickup This operation allows to schedule Pickups with USPS, UPS, FedEx and DHLExpress for eligible shipments. &lt;br&gt; Below are four possible combinations for scheduling pickup &lt;br&gt;  &lt;br&gt; 1. When request does not specify &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- The system would consider all eligible shipments created in a current day. &lt;br&gt; 2. When request specifies only &#x60;shipmentIds&#x60;- Pickup will be created for the shipmentIds mentioned &lt;br&gt; 3. When request specifies only &#x60;pickupSummary&#x60;- Pickup will be created for the pickup details mentioned in the pickupSummary &lt;br&gt; 4. When request specifies both &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- Pickup will be created including details mentioned in both objects.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SchedulePickup200Response</returns>
        public com.pitneybowes.api360.Client.ApiResponse<SchedulePickup200Response> SchedulePickupWithHttpInfo(SchedulePickupRequest schedulePickupRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'schedulePickupRequest' is set
            if (schedulePickupRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'schedulePickupRequest' when calling PickupsApi->SchedulePickup");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = schedulePickupRequest;

            localVarRequestOptions.Operation = "PickupsApi.SchedulePickup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SchedulePickup200Response>("/api/v1/pickups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SchedulePickup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Schedule Pickup This operation allows to schedule Pickups with USPS, UPS, FedEx and DHLExpress for eligible shipments. &lt;br&gt; Below are four possible combinations for scheduling pickup &lt;br&gt;  &lt;br&gt; 1. When request does not specify &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- The system would consider all eligible shipments created in a current day. &lt;br&gt; 2. When request specifies only &#x60;shipmentIds&#x60;- Pickup will be created for the shipmentIds mentioned &lt;br&gt; 3. When request specifies only &#x60;pickupSummary&#x60;- Pickup will be created for the pickup details mentioned in the pickupSummary &lt;br&gt; 4. When request specifies both &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- Pickup will be created including details mentioned in both objects.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchedulePickup200Response</returns>
        public async System.Threading.Tasks.Task<SchedulePickup200Response> SchedulePickupAsync(SchedulePickupRequest schedulePickupRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<SchedulePickup200Response> localVarResponse = await SchedulePickupWithHttpInfoAsync(schedulePickupRequest, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Schedule Pickup This operation allows to schedule Pickups with USPS, UPS, FedEx and DHLExpress for eligible shipments. &lt;br&gt; Below are four possible combinations for scheduling pickup &lt;br&gt;  &lt;br&gt; 1. When request does not specify &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- The system would consider all eligible shipments created in a current day. &lt;br&gt; 2. When request specifies only &#x60;shipmentIds&#x60;- Pickup will be created for the shipmentIds mentioned &lt;br&gt; 3. When request specifies only &#x60;pickupSummary&#x60;- Pickup will be created for the pickup details mentioned in the pickupSummary &lt;br&gt; 4. When request specifies both &#x60;pickupSummary&#x60; and &#x60;shipmentIds&#x60;- Pickup will be created including details mentioned in both objects.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchedulePickup200Response)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<SchedulePickup200Response>> SchedulePickupWithHttpInfoAsync(SchedulePickupRequest schedulePickupRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schedulePickupRequest' is set
            if (schedulePickupRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'schedulePickupRequest' when calling PickupsApi->SchedulePickup");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = schedulePickupRequest;

            localVarRequestOptions.Operation = "PickupsApi.SchedulePickup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SchedulePickup200Response>("/api/v1/pickups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SchedulePickup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
