// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using com.pitneybowes.api360.Client;
using com.pitneybowes.api360.Model;
using System.Diagnostics.CodeAnalysis;

namespace com.pitneybowes.api360.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPickupsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PickupsApiEvents Events { get; }

        /// <summary>
        /// Cancel Pickups
        /// </summary>
        /// <remarks>
        /// Cancel Pickups.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelPickupsApiResponse"/>&gt;</returns>
        Task<ICancelPickupsApiResponse> CancelPickupsAsync(SchedulePickupCancelRequest schedulePickupCancelRequest, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel Pickups
        /// </summary>
        /// <remarks>
        /// Cancel Pickups.
        /// </remarks>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelPickupsApiResponse"/>?&gt;</returns>
        Task<ICancelPickupsApiResponse?> CancelPickupsOrDefaultAsync(SchedulePickupCancelRequest schedulePickupCancelRequest, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancelled Pickup Document
        /// </summary>
        /// <remarks>
        /// This operation generates a PDF receipt for pickup cancellations. It supports creating receipts for multiple cancelled pickups.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Specifies the type of document being retrieved. Use &#39;cancelled&#39; to generate a receipt for cancelled pickups.</param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelledPickupDocumentApiResponse"/>&gt;</returns>
        Task<ICancelledPickupDocumentApiResponse> CancelledPickupDocumentAsync(string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancelled Pickup Document
        /// </summary>
        /// <remarks>
        /// This operation generates a PDF receipt for pickup cancellations. It supports creating receipts for multiple cancelled pickups.
        /// </remarks>
        /// <param name="type">Specifies the type of document being retrieved. Use &#39;cancelled&#39; to generate a receipt for cancelled pickups.</param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelledPickupDocumentApiResponse"/>?&gt;</returns>
        Task<ICancelledPickupDocumentApiResponse?> CancelledPickupDocumentOrDefaultAsync(string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pickup Document
        /// </summary>
        /// <remarks>
        /// The API retrieves the document for a scheduled pickup receipt using the pickupId, generated when the pickup is successfully scheduled.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pickupId">Unique identifier for the scheduled pickup.</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPickupDocumentApiResponse"/>&gt;</returns>
        Task<IGetPickupDocumentApiResponse> GetPickupDocumentAsync(string pickupId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pickup Document
        /// </summary>
        /// <remarks>
        /// The API retrieves the document for a scheduled pickup receipt using the pickupId, generated when the pickup is successfully scheduled.
        /// </remarks>
        /// <param name="pickupId">Unique identifier for the scheduled pickup.</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPickupDocumentApiResponse"/>?&gt;</returns>
        Task<IGetPickupDocumentApiResponse?> GetPickupDocumentOrDefaultAsync(string pickupId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pickups
        /// </summary>
        /// <remarks>
        /// Get Pickups
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">Name of the carrier to retrieve pickups for.</param>
        /// <param name="startDate">The start date for filtering pickups. Format: YYYY-MM-DD.</param>
        /// <param name="endDate">The end date for filtering pickups. Format: YYYY-MM-DD.</param>
        /// <param name="status">The status of the pickups to retrieve (scheduled or cancelled).</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPickupsApiResponse"/>&gt;</returns>
        Task<IGetPickupsApiResponse> GetPickupsAsync(string carrier, string startDate, string endDate, string status, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pickups
        /// </summary>
        /// <remarks>
        /// Get Pickups
        /// </remarks>
        /// <param name="carrier">Name of the carrier to retrieve pickups for.</param>
        /// <param name="startDate">The start date for filtering pickups. Format: YYYY-MM-DD.</param>
        /// <param name="endDate">The end date for filtering pickups. Format: YYYY-MM-DD.</param>
        /// <param name="status">The status of the pickups to retrieve (scheduled or cancelled).</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPickupsApiResponse"/>?&gt;</returns>
        Task<IGetPickupsApiResponse?> GetPickupsOrDefaultAsync(string carrier, string startDate, string endDate, string status, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Schedule Pickup
        /// </summary>
        /// <remarks>
        /// Pickups endpoint allows you to schedule pickups with USPS, DHL Express, UPS and FedEx carriers for eligible shipments that you have already created.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISchedulePickupApiResponse"/>&gt;</returns>
        Task<ISchedulePickupApiResponse> SchedulePickupAsync(SchedulePickupRequest schedulePickupRequest, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Schedule Pickup
        /// </summary>
        /// <remarks>
        /// Pickups endpoint allows you to schedule pickups with USPS, DHL Express, UPS and FedEx carriers for eligible shipments that you have already created.
        /// </remarks>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISchedulePickupApiResponse"/>?&gt;</returns>
        Task<ISchedulePickupApiResponse?> SchedulePickupOrDefaultAsync(SchedulePickupRequest schedulePickupRequest, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICancelPickupsApiResponse"/>
    /// </summary>
    public interface ICancelPickupsApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.SchedulePickupCancelResponse?>, IBadRequest<List<InvalidErrorsInner>?>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>, IInternalServerError<com.pitneybowes.api360.Model.ServerError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ICancelledPickupDocumentApiResponse"/>
    /// </summary>
    public interface ICancelledPickupDocumentApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.GetPickupCancelledDocumentResponse?>, IBadRequest<List<InvalidErrorsInner>?>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>, IInternalServerError<com.pitneybowes.api360.Model.ServerError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetPickupDocumentApiResponse"/>
    /// </summary>
    public interface IGetPickupDocumentApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.GetPickupDocument?>, IBadRequest<List<InvalidErrorsInner>?>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>, IInternalServerError<com.pitneybowes.api360.Model.ServerError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetPickupsApiResponse"/>
    /// </summary>
    public interface IGetPickupsApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.GetAllPickups?>, IBadRequest<List<InvalidErrorsInner>?>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>, IInternalServerError<com.pitneybowes.api360.Model.ServerError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ISchedulePickupApiResponse"/>
    /// </summary>
    public interface ISchedulePickupApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.SchedulePickup200Response?>, IBadRequest<List<InvalidErrorsInner>?>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError?>, IInternalServerError<com.pitneybowes.api360.Model.ServerError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PickupsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCancelPickups;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCancelPickups;

        internal void ExecuteOnCancelPickups(PickupsApi.CancelPickupsApiResponse apiResponse)
        {
            OnCancelPickups?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCancelPickups(Exception exception)
        {
            OnErrorCancelPickups?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCancelledPickupDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCancelledPickupDocument;

        internal void ExecuteOnCancelledPickupDocument(PickupsApi.CancelledPickupDocumentApiResponse apiResponse)
        {
            OnCancelledPickupDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCancelledPickupDocument(Exception exception)
        {
            OnErrorCancelledPickupDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPickupDocument;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPickupDocument;

        internal void ExecuteOnGetPickupDocument(PickupsApi.GetPickupDocumentApiResponse apiResponse)
        {
            OnGetPickupDocument?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPickupDocument(Exception exception)
        {
            OnErrorGetPickupDocument?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPickups;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPickups;

        internal void ExecuteOnGetPickups(PickupsApi.GetPickupsApiResponse apiResponse)
        {
            OnGetPickups?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPickups(Exception exception)
        {
            OnErrorGetPickups?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSchedulePickup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSchedulePickup;

        internal void ExecuteOnSchedulePickup(PickupsApi.SchedulePickupApiResponse apiResponse)
        {
            OnSchedulePickup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSchedulePickup(Exception exception)
        {
            OnErrorSchedulePickup?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PickupsApi : IPickupsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PickupsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PickupsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PickupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PickupsApi(ILogger<PickupsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PickupsApiEvents pickupsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PickupsApi>();
            HttpClient = httpClient;
            Events = pickupsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            BasicTokenProvider = basicTokenProvider;
        }

        partial void FormatCancelPickups(SchedulePickupCancelRequest schedulePickupCancelRequest, ref Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <returns></returns>
        private void ValidateCancelPickups(SchedulePickupCancelRequest schedulePickupCancelRequest, Option<string> xPBDeveloperPartnerId)
        {
            if (schedulePickupCancelRequest == null)
                throw new ArgumentNullException(nameof(schedulePickupCancelRequest));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void AfterCancelPickupsDefaultImplementation(ICancelPickupsApiResponse apiResponseLocalVar, SchedulePickupCancelRequest schedulePickupCancelRequest, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLog = false;
            AfterCancelPickups(ref suppressDefaultLog, apiResponseLocalVar, schedulePickupCancelRequest, xPBDeveloperPartnerId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void AfterCancelPickups(ref bool suppressDefaultLog, ICancelPickupsApiResponse apiResponseLocalVar, SchedulePickupCancelRequest schedulePickupCancelRequest, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void OnErrorCancelPickupsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SchedulePickupCancelRequest schedulePickupCancelRequest, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCancelPickups(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, schedulePickupCancelRequest, xPBDeveloperPartnerId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void OnErrorCancelPickups(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SchedulePickupCancelRequest schedulePickupCancelRequest, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Cancel Pickups Cancel Pickups.
        /// </summary>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelPickupsApiResponse"/>&gt;</returns>
        public async Task<ICancelPickupsApiResponse?> CancelPickupsOrDefaultAsync(SchedulePickupCancelRequest schedulePickupCancelRequest, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CancelPickupsAsync(schedulePickupCancelRequest, xPBDeveloperPartnerId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Cancel Pickups Cancel Pickups.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupCancelRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelPickupsApiResponse"/>&gt;</returns>
        public async Task<ICancelPickupsApiResponse> CancelPickupsAsync(SchedulePickupCancelRequest schedulePickupCancelRequest, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCancelPickups(schedulePickupCancelRequest, xPBDeveloperPartnerId);

                FormatCancelPickups(schedulePickupCancelRequest, ref xPBDeveloperPartnerId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/pickups/cancel"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/pickups/cancel");

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    httpRequestMessageLocalVar.Content = (schedulePickupCancelRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(schedulePickupCancelRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CancelPickupsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CancelPickupsApiResponse>();

                        CancelPickupsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/pickups/cancel", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCancelPickupsDefaultImplementation(apiResponseLocalVar, schedulePickupCancelRequest, xPBDeveloperPartnerId);

                        Events.ExecuteOnCancelPickups(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCancelPickupsDefaultImplementation(e, "/api/v1/pickups/cancel", uriBuilderLocalVar.Path, schedulePickupCancelRequest, xPBDeveloperPartnerId);
                Events.ExecuteOnErrorCancelPickups(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CancelPickupsApiResponse"/>
        /// </summary>
        public partial class CancelPickupsApiResponse : com.pitneybowes.api360.Client.ApiResponse, ICancelPickupsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CancelPickupsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CancelPickupsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CancelPickupsApiResponse(ILogger<CancelPickupsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.SchedulePickupCancelResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.SchedulePickupCancelResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out com.pitneybowes.api360.Model.SchedulePickupCancelResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner>? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out List<InvalidErrorsInner>? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out com.pitneybowes.api360.Model.ServerError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCancelledPickupDocument(ref string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, ref Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="type"></param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <returns></returns>
        private void ValidateCancelledPickupDocument(string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, Option<string> xPBDeveloperPartnerId)
        {
            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (getPickupCancelledDocumentRequest == null)
                throw new ArgumentNullException(nameof(getPickupCancelledDocumentRequest));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="type"></param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void AfterCancelledPickupDocumentDefaultImplementation(ICancelledPickupDocumentApiResponse apiResponseLocalVar, string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLog = false;
            AfterCancelledPickupDocument(ref suppressDefaultLog, apiResponseLocalVar, type, getPickupCancelledDocumentRequest, xPBDeveloperPartnerId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="type"></param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void AfterCancelledPickupDocument(ref bool suppressDefaultLog, ICancelledPickupDocumentApiResponse apiResponseLocalVar, string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="type"></param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void OnErrorCancelledPickupDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCancelledPickupDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, type, getPickupCancelledDocumentRequest, xPBDeveloperPartnerId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="type"></param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void OnErrorCancelledPickupDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Cancelled Pickup Document This operation generates a PDF receipt for pickup cancellations. It supports creating receipts for multiple cancelled pickups.
        /// </summary>
        /// <param name="type">Specifies the type of document being retrieved. Use &#39;cancelled&#39; to generate a receipt for cancelled pickups.</param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelledPickupDocumentApiResponse"/>&gt;</returns>
        public async Task<ICancelledPickupDocumentApiResponse?> CancelledPickupDocumentOrDefaultAsync(string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CancelledPickupDocumentAsync(type, getPickupCancelledDocumentRequest, xPBDeveloperPartnerId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Cancelled Pickup Document This operation generates a PDF receipt for pickup cancellations. It supports creating receipts for multiple cancelled pickups.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Specifies the type of document being retrieved. Use &#39;cancelled&#39; to generate a receipt for cancelled pickups.</param>
        /// <param name="getPickupCancelledDocumentRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelledPickupDocumentApiResponse"/>&gt;</returns>
        public async Task<ICancelledPickupDocumentApiResponse> CancelledPickupDocumentAsync(string type, GetPickupCancelledDocumentRequest getPickupCancelledDocumentRequest, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCancelledPickupDocument(type, getPickupCancelledDocumentRequest, xPBDeveloperPartnerId);

                FormatCancelledPickupDocument(ref type, getPickupCancelledDocumentRequest, ref xPBDeveloperPartnerId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/pickups/document/cancelled"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/pickups/document/cancelled");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    httpRequestMessageLocalVar.Content = (getPickupCancelledDocumentRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(getPickupCancelledDocumentRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CancelledPickupDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CancelledPickupDocumentApiResponse>();

                        CancelledPickupDocumentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/pickups/document/cancelled", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCancelledPickupDocumentDefaultImplementation(apiResponseLocalVar, type, getPickupCancelledDocumentRequest, xPBDeveloperPartnerId);

                        Events.ExecuteOnCancelledPickupDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCancelledPickupDocumentDefaultImplementation(e, "/api/v1/pickups/document/cancelled", uriBuilderLocalVar.Path, type, getPickupCancelledDocumentRequest, xPBDeveloperPartnerId);
                Events.ExecuteOnErrorCancelledPickupDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CancelledPickupDocumentApiResponse"/>
        /// </summary>
        public partial class CancelledPickupDocumentApiResponse : com.pitneybowes.api360.Client.ApiResponse, ICancelledPickupDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CancelledPickupDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CancelledPickupDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CancelledPickupDocumentApiResponse(ILogger<CancelledPickupDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.GetPickupCancelledDocumentResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.GetPickupCancelledDocumentResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out com.pitneybowes.api360.Model.GetPickupCancelledDocumentResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner>? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out List<InvalidErrorsInner>? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out com.pitneybowes.api360.Model.ServerError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPickupDocument(ref string pickupId, ref Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pickupId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <returns></returns>
        private void ValidateGetPickupDocument(string pickupId, Option<string> xPBDeveloperPartnerId)
        {
            if (pickupId == null)
                throw new ArgumentNullException(nameof(pickupId));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pickupId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void AfterGetPickupDocumentDefaultImplementation(IGetPickupDocumentApiResponse apiResponseLocalVar, string pickupId, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLog = false;
            AfterGetPickupDocument(ref suppressDefaultLog, apiResponseLocalVar, pickupId, xPBDeveloperPartnerId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pickupId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void AfterGetPickupDocument(ref bool suppressDefaultLog, IGetPickupDocumentApiResponse apiResponseLocalVar, string pickupId, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pickupId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void OnErrorGetPickupDocumentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pickupId, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPickupDocument(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, pickupId, xPBDeveloperPartnerId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pickupId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void OnErrorGetPickupDocument(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pickupId, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Get Pickup Document The API retrieves the document for a scheduled pickup receipt using the pickupId, generated when the pickup is successfully scheduled.
        /// </summary>
        /// <param name="pickupId">Unique identifier for the scheduled pickup.</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPickupDocumentApiResponse"/>&gt;</returns>
        public async Task<IGetPickupDocumentApiResponse?> GetPickupDocumentOrDefaultAsync(string pickupId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPickupDocumentAsync(pickupId, xPBDeveloperPartnerId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Pickup Document The API retrieves the document for a scheduled pickup receipt using the pickupId, generated when the pickup is successfully scheduled.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pickupId">Unique identifier for the scheduled pickup.</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPickupDocumentApiResponse"/>&gt;</returns>
        public async Task<IGetPickupDocumentApiResponse> GetPickupDocumentAsync(string pickupId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPickupDocument(pickupId, xPBDeveloperPartnerId);

                FormatGetPickupDocument(ref pickupId, ref xPBDeveloperPartnerId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/pickups/{pickupId}/document"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/pickups/{pickupId}/document");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpickupId%7D", Uri.EscapeDataString(pickupId.ToString()));

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPickupDocumentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPickupDocumentApiResponse>();

                        GetPickupDocumentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/pickups/{pickupId}/document", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPickupDocumentDefaultImplementation(apiResponseLocalVar, pickupId, xPBDeveloperPartnerId);

                        Events.ExecuteOnGetPickupDocument(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPickupDocumentDefaultImplementation(e, "/api/v1/pickups/{pickupId}/document", uriBuilderLocalVar.Path, pickupId, xPBDeveloperPartnerId);
                Events.ExecuteOnErrorGetPickupDocument(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPickupDocumentApiResponse"/>
        /// </summary>
        public partial class GetPickupDocumentApiResponse : com.pitneybowes.api360.Client.ApiResponse, IGetPickupDocumentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPickupDocumentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPickupDocumentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPickupDocumentApiResponse(ILogger<GetPickupDocumentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.GetPickupDocument? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.GetPickupDocument>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out com.pitneybowes.api360.Model.GetPickupDocument? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner>? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out List<InvalidErrorsInner>? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out com.pitneybowes.api360.Model.ServerError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPickups(ref string carrier, ref string startDate, ref string endDate, ref string status, ref Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="carrier"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="status"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <returns></returns>
        private void ValidateGetPickups(string carrier, string startDate, string endDate, string status, Option<string> xPBDeveloperPartnerId)
        {
            if (carrier == null)
                throw new ArgumentNullException(nameof(carrier));

            if (startDate == null)
                throw new ArgumentNullException(nameof(startDate));

            if (endDate == null)
                throw new ArgumentNullException(nameof(endDate));

            if (status == null)
                throw new ArgumentNullException(nameof(status));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="carrier"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="status"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void AfterGetPickupsDefaultImplementation(IGetPickupsApiResponse apiResponseLocalVar, string carrier, string startDate, string endDate, string status, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLog = false;
            AfterGetPickups(ref suppressDefaultLog, apiResponseLocalVar, carrier, startDate, endDate, status, xPBDeveloperPartnerId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="carrier"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="status"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void AfterGetPickups(ref bool suppressDefaultLog, IGetPickupsApiResponse apiResponseLocalVar, string carrier, string startDate, string endDate, string status, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="carrier"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="status"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void OnErrorGetPickupsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string carrier, string startDate, string endDate, string status, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPickups(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, carrier, startDate, endDate, status, xPBDeveloperPartnerId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="carrier"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="status"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void OnErrorGetPickups(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string carrier, string startDate, string endDate, string status, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Get Pickups Get Pickups
        /// </summary>
        /// <param name="carrier">Name of the carrier to retrieve pickups for.</param>
        /// <param name="startDate">The start date for filtering pickups. Format: YYYY-MM-DD.</param>
        /// <param name="endDate">The end date for filtering pickups. Format: YYYY-MM-DD.</param>
        /// <param name="status">The status of the pickups to retrieve (scheduled or cancelled).</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPickupsApiResponse"/>&gt;</returns>
        public async Task<IGetPickupsApiResponse?> GetPickupsOrDefaultAsync(string carrier, string startDate, string endDate, string status, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPickupsAsync(carrier, startDate, endDate, status, xPBDeveloperPartnerId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Pickups Get Pickups
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">Name of the carrier to retrieve pickups for.</param>
        /// <param name="startDate">The start date for filtering pickups. Format: YYYY-MM-DD.</param>
        /// <param name="endDate">The end date for filtering pickups. Format: YYYY-MM-DD.</param>
        /// <param name="status">The status of the pickups to retrieve (scheduled or cancelled).</param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPickupsApiResponse"/>&gt;</returns>
        public async Task<IGetPickupsApiResponse> GetPickupsAsync(string carrier, string startDate, string endDate, string status, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPickups(carrier, startDate, endDate, status, xPBDeveloperPartnerId);

                FormatGetPickups(ref carrier, ref startDate, ref endDate, ref status, ref xPBDeveloperPartnerId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/pickups"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/pickups");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["carrier"] = ClientUtils.ParameterToString(carrier);
                    parseQueryStringLocalVar["startDate"] = ClientUtils.ParameterToString(startDate);
                    parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate);
                    parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPickupsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPickupsApiResponse>();

                        GetPickupsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/pickups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPickupsDefaultImplementation(apiResponseLocalVar, carrier, startDate, endDate, status, xPBDeveloperPartnerId);

                        Events.ExecuteOnGetPickups(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPickupsDefaultImplementation(e, "/api/v1/pickups", uriBuilderLocalVar.Path, carrier, startDate, endDate, status, xPBDeveloperPartnerId);
                Events.ExecuteOnErrorGetPickups(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPickupsApiResponse"/>
        /// </summary>
        public partial class GetPickupsApiResponse : com.pitneybowes.api360.Client.ApiResponse, IGetPickupsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPickupsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPickupsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPickupsApiResponse(ILogger<GetPickupsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.GetAllPickups? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.GetAllPickups>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out com.pitneybowes.api360.Model.GetAllPickups? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner>? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out List<InvalidErrorsInner>? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out com.pitneybowes.api360.Model.ServerError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSchedulePickup(SchedulePickupRequest schedulePickupRequest, ref Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <returns></returns>
        private void ValidateSchedulePickup(SchedulePickupRequest schedulePickupRequest, Option<string> xPBDeveloperPartnerId)
        {
            if (schedulePickupRequest == null)
                throw new ArgumentNullException(nameof(schedulePickupRequest));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void AfterSchedulePickupDefaultImplementation(ISchedulePickupApiResponse apiResponseLocalVar, SchedulePickupRequest schedulePickupRequest, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLog = false;
            AfterSchedulePickup(ref suppressDefaultLog, apiResponseLocalVar, schedulePickupRequest, xPBDeveloperPartnerId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void AfterSchedulePickup(ref bool suppressDefaultLog, ISchedulePickupApiResponse apiResponseLocalVar, SchedulePickupRequest schedulePickupRequest, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void OnErrorSchedulePickupDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SchedulePickupRequest schedulePickupRequest, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSchedulePickup(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, schedulePickupRequest, xPBDeveloperPartnerId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void OnErrorSchedulePickup(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SchedulePickupRequest schedulePickupRequest, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Schedule Pickup Pickups endpoint allows you to schedule pickups with USPS, DHL Express, UPS and FedEx carriers for eligible shipments that you have already created.
        /// </summary>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISchedulePickupApiResponse"/>&gt;</returns>
        public async Task<ISchedulePickupApiResponse?> SchedulePickupOrDefaultAsync(SchedulePickupRequest schedulePickupRequest, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SchedulePickupAsync(schedulePickupRequest, xPBDeveloperPartnerId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Schedule Pickup Pickups endpoint allows you to schedule pickups with USPS, DHL Express, UPS and FedEx carriers for eligible shipments that you have already created.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedulePickupRequest"></param>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISchedulePickupApiResponse"/>&gt;</returns>
        public async Task<ISchedulePickupApiResponse> SchedulePickupAsync(SchedulePickupRequest schedulePickupRequest, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSchedulePickup(schedulePickupRequest, xPBDeveloperPartnerId);

                FormatSchedulePickup(schedulePickupRequest, ref xPBDeveloperPartnerId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/pickups"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/pickups");

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    httpRequestMessageLocalVar.Content = (schedulePickupRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(schedulePickupRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SchedulePickupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SchedulePickupApiResponse>();

                        SchedulePickupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/pickups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSchedulePickupDefaultImplementation(apiResponseLocalVar, schedulePickupRequest, xPBDeveloperPartnerId);

                        Events.ExecuteOnSchedulePickup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSchedulePickupDefaultImplementation(e, "/api/v1/pickups", uriBuilderLocalVar.Path, schedulePickupRequest, xPBDeveloperPartnerId);
                Events.ExecuteOnErrorSchedulePickup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SchedulePickupApiResponse"/>
        /// </summary>
        public partial class SchedulePickupApiResponse : com.pitneybowes.api360.Client.ApiResponse, ISchedulePickupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SchedulePickupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SchedulePickupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SchedulePickupApiResponse(ILogger<SchedulePickupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.SchedulePickup200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.SchedulePickup200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out com.pitneybowes.api360.Model.SchedulePickup200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner>? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out List<InvalidErrorsInner>? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out com.pitneybowes.api360.Model.UnauthorizedError? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out com.pitneybowes.api360.Model.ServerError? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
