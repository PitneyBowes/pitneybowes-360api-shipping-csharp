// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using com.pitneybowes.api360.Client;
using com.pitneybowes.api360.Model;
using System.Diagnostics.CodeAnalysis;

namespace com.pitneybowes.api360.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IShipmentApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ShipmentApiEvents Events { get; }

        /// <summary>
        /// Cancel Shipment
        /// </summary>
        /// <remarks>
        /// This operation cancels or voids a shipment label that has not been processed by the carrier. When you cancel an unused prepaid shipment label, the API initiates a request for an electronic refund.&lt;br&gt;  **Key Considerations** - Cancelation must occur before the shipment is picked up or processed by the carrier. - Refunds are only applicable for unused labels. Voiding a used label may result in penalties or billing.&lt;br&gt; - **USPS**:    - Cancel unused USPS prepaid labels within 30 days of printing to start the refund process.    - Refund requests are processed within 14 business days from the date the refund was requested, provided the label has not been used.    - Approved refunds are automatically credited to the account you used to pay for the label.    - **Note**: USPS considers it a federal offense to induct a label that has already been refunded.    - **Note**: Refunds are not available for First-Class Mail letters and flats.    - **Note**: Refunds are subject to the policies of the applicable carrier. - For unused post-paid labels, you must void them. Voiding avoids billing for the label and allows the carrier to maintain an accurate count for pickups. - Always destroy voided labels to prevent accidental use. If a voided label is shipped, you will be billed for the label. - Once a refund has been claimed, you cannot use the shipping label for sending packages. It will be rejected. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelShipmentByIdV2ApiResponse"/>&gt;</returns>
        Task<ICancelShipmentByIdV2ApiResponse> CancelShipmentByIdV2Async(ShipmentCancelV2 shipmentCancelV2, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel Shipment
        /// </summary>
        /// <remarks>
        /// This operation cancels or voids a shipment label that has not been processed by the carrier. When you cancel an unused prepaid shipment label, the API initiates a request for an electronic refund.&lt;br&gt;  **Key Considerations** - Cancelation must occur before the shipment is picked up or processed by the carrier. - Refunds are only applicable for unused labels. Voiding a used label may result in penalties or billing.&lt;br&gt; - **USPS**:    - Cancel unused USPS prepaid labels within 30 days of printing to start the refund process.    - Refund requests are processed within 14 business days from the date the refund was requested, provided the label has not been used.    - Approved refunds are automatically credited to the account you used to pay for the label.    - **Note**: USPS considers it a federal offense to induct a label that has already been refunded.    - **Note**: Refunds are not available for First-Class Mail letters and flats.    - **Note**: Refunds are subject to the policies of the applicable carrier. - For unused post-paid labels, you must void them. Voiding avoids billing for the label and allows the carrier to maintain an accurate count for pickups. - Always destroy voided labels to prevent accidental use. If a voided label is shipped, you will be billed for the label. - Once a refund has been claimed, you cannot use the shipping label for sending packages. It will be rejected. 
        /// </remarks>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelShipmentByIdV2ApiResponse"/>&gt;</returns>
        Task<ICancelShipmentByIdV2ApiResponse> CancelShipmentByIdV2OrDefaultAsync(ShipmentCancelV2 shipmentCancelV2, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel Stamps ERR
        /// </summary>
        /// <remarks>
        /// This operation cancels (voids) stamps generated for ERR (Electronic Return Receipt).  - User needs to provide *Stamp IDs* to cancel those specific ERR stamps.  - User can download the *Refund Form* having details of generated Postage.  - At once, maximum 1000 stamps can be requested for cancelation. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelStampsERRApiResponse"/>&gt;</returns>
        Task<ICancelStampsERRApiResponse> CancelStampsERRAsync(CancelStampsRequestERR cancelStampsRequestERR, Option<string> xPBDeveloperPartnerID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel Stamps ERR
        /// </summary>
        /// <remarks>
        /// This operation cancels (voids) stamps generated for ERR (Electronic Return Receipt).  - User needs to provide *Stamp IDs* to cancel those specific ERR stamps.  - User can download the *Refund Form* having details of generated Postage.  - At once, maximum 1000 stamps can be requested for cancelation. 
        /// </remarks>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelStampsERRApiResponse"/>&gt;</returns>
        Task<ICancelStampsERRApiResponse> CancelStampsERROrDefaultAsync(CancelStampsRequestERR cancelStampsRequestERR, Option<string> xPBDeveloperPartnerID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create ERR Single Coversheet
        /// </summary>
        /// <remarks>
        /// This API generates a single coversheet for a parcel, with support for Electronic Return Receipt (ERR) and other special services. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="errCoversheetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateErrCoversheetApiResponse"/>&gt;</returns>
        Task<ICreateErrCoversheetApiResponse> CreateErrCoversheetAsync(ErrCoversheetRequest errCoversheetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create ERR Single Coversheet
        /// </summary>
        /// <remarks>
        /// This API generates a single coversheet for a parcel, with support for Electronic Return Receipt (ERR) and other special services. 
        /// </remarks>
        /// <param name="errCoversheetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateErrCoversheetApiResponse"/>&gt;</returns>
        Task<ICreateErrCoversheetApiResponse> CreateErrCoversheetOrDefaultAsync(ErrCoversheetRequest errCoversheetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Shipment
        /// </summary>
        /// <remarks>
        /// &gt; **Note:** This Request sample includes the full set of supported fields across all carriers. However, not all fields are applicable to every carrier. When making API calls from the doc portal, ensure you include only the parameters supported by the specific carrier you are integrating with. If unsupported fields are included, the request may fail. &lt;br/&gt; To simplify integration and avoid errors, refer to the [Postman Collection](/docs/resources/postman/). &lt;br/&gt; To explore which label types, label formats, label sizes, parcel types, services, and special services are supported by each carrier, see the [Carrier Catalog](/docs/shipping/carriers/carrier-catalog/). Detailed field descriptions are also provided below.  The Create Shipment API is used to create shipments and generate shipment labels. A shipment refers to the process of packing and transporting an item from a source location to a destination location using a carrier service. The API supports both domestic and international shipments.&lt;br&gt;  **Domestic Shipments** &lt;br&gt;    - Both the &#x60;toAddress&#x60; and &#x60;fromAddress&#x60; addresses must be within the same country.   - Requires carrier services and associated special services.  **International Shipments**   - The &#x60;toAddress&#x60; must be in a different country than the &#x60;fromAddress&#x60;.   - Requires international carrier services, special services, and customs information.&lt;br&gt;  The V2 Create Shipment API compares shipping rates, services, and options across multiple carriers. It selects the best shipping solution based on criteria such as cost, delivery speed, or other business rules. This automates decision-making and eliminates the need for manual analysis of carrier data. It supports three RateShop types: &lt;br&gt;  **1. By Carrier:**&lt;br&gt;    - Manually specify the carrier and service for shipment creation.   - Provides more customization than V1 Create Shipment.  **2. By RuleSet**&lt;br&gt;    - Automatically select the best carrier and service based on predefined rules (e.g., cheapest, fastest). For example: &lt;br&gt;   - Shipments weighing up to 3kg use a \&quot;Standard\&quot; service type with carrier A.   - Shipments exceeding 3kg use an \&quot;Over-weight\&quot; service type with carrier B.   - Rules are fully client-defined, allowing for dynamic decision-making based on shipment parameters like weight, dimensions, and destination.  **3. By RateGroup**&lt;br&gt;    - Use predefined rate groups to select a carrier and service dynamically.For example:&lt;br&gt;   - Clients can choose between the fastest delivery or the cheapest service rate among a predefined group of carriers.   - The system automatically determines and selects the best carrier and service, without the need for manual comparisons.    **Notes**&lt;br&gt;    - The &#x60;rateShopBy&#x60; field determines the variant to use (&#x60;carrier&#x60;, &#x60;ruleset&#x60;, or &#x60;rategroup&#x60;).   - Ensure that variant-specific fields are correctly populated:     - **byCarrier:** &#x60;carrierAccountId&#x60;, &#x60;carrier&#x60;, and &#x60;service&#x60;     - **byRuleSet:** &#x60;ruleType&#x60; and &#x60;shipOption&#x60;     - **byRateGroup:** &#x60;ruleType&#x60; and &#x60;rateGroupId&#x60;    - Define special services in one of two ways - by using a &#x60;specialServiceId&#x60; or by specifying  special service objects such as &#x60;deliveryConfirmation&#x60;, &#x60;handling&#x60;, &#x60;insurance&#x60;, or &#x60;returnOptions&#x60;. These two cannot be used together in the same request. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="isReturn">Applies only to carriers UPS and FedEx; For UPS, if &#x60;isReturn&#x60; is passed, you must either include the &#x60;returnOptions&#x60; object (when using individual service objects) or specify the &#x60;serviceId:PRL&#x60; (when using specialService), or an error will occur. For FedEx, If &#x60;isReturn&#x60; is set to &#x60;true&#x60;, the &#x60;returnOptions&#x60; object is optional.</param>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="xPBDefaultID">A unique identifier assigned to the Default while its creation using CreateDefaults API. (optional)</param>
        /// <param name="includeDeliveryCommitment">When set to true (default), the response includes delivery commitment information. Set to false to exclude delivery commitment details from the response. (optional, default to &quot;true&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateShipmentV2ApiResponse"/>&gt;</returns>
        Task<ICreateShipmentV2ApiResponse> CreateShipmentV2Async(bool isReturn, CreateShipmentV2Request createShipmentV2Request, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, Option<string> xPBDefaultID = default, Option<string> includeDeliveryCommitment = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Shipment
        /// </summary>
        /// <remarks>
        /// &gt; **Note:** This Request sample includes the full set of supported fields across all carriers. However, not all fields are applicable to every carrier. When making API calls from the doc portal, ensure you include only the parameters supported by the specific carrier you are integrating with. If unsupported fields are included, the request may fail. &lt;br/&gt; To simplify integration and avoid errors, refer to the [Postman Collection](/docs/resources/postman/). &lt;br/&gt; To explore which label types, label formats, label sizes, parcel types, services, and special services are supported by each carrier, see the [Carrier Catalog](/docs/shipping/carriers/carrier-catalog/). Detailed field descriptions are also provided below.  The Create Shipment API is used to create shipments and generate shipment labels. A shipment refers to the process of packing and transporting an item from a source location to a destination location using a carrier service. The API supports both domestic and international shipments.&lt;br&gt;  **Domestic Shipments** &lt;br&gt;    - Both the &#x60;toAddress&#x60; and &#x60;fromAddress&#x60; addresses must be within the same country.   - Requires carrier services and associated special services.  **International Shipments**   - The &#x60;toAddress&#x60; must be in a different country than the &#x60;fromAddress&#x60;.   - Requires international carrier services, special services, and customs information.&lt;br&gt;  The V2 Create Shipment API compares shipping rates, services, and options across multiple carriers. It selects the best shipping solution based on criteria such as cost, delivery speed, or other business rules. This automates decision-making and eliminates the need for manual analysis of carrier data. It supports three RateShop types: &lt;br&gt;  **1. By Carrier:**&lt;br&gt;    - Manually specify the carrier and service for shipment creation.   - Provides more customization than V1 Create Shipment.  **2. By RuleSet**&lt;br&gt;    - Automatically select the best carrier and service based on predefined rules (e.g., cheapest, fastest). For example: &lt;br&gt;   - Shipments weighing up to 3kg use a \&quot;Standard\&quot; service type with carrier A.   - Shipments exceeding 3kg use an \&quot;Over-weight\&quot; service type with carrier B.   - Rules are fully client-defined, allowing for dynamic decision-making based on shipment parameters like weight, dimensions, and destination.  **3. By RateGroup**&lt;br&gt;    - Use predefined rate groups to select a carrier and service dynamically.For example:&lt;br&gt;   - Clients can choose between the fastest delivery or the cheapest service rate among a predefined group of carriers.   - The system automatically determines and selects the best carrier and service, without the need for manual comparisons.    **Notes**&lt;br&gt;    - The &#x60;rateShopBy&#x60; field determines the variant to use (&#x60;carrier&#x60;, &#x60;ruleset&#x60;, or &#x60;rategroup&#x60;).   - Ensure that variant-specific fields are correctly populated:     - **byCarrier:** &#x60;carrierAccountId&#x60;, &#x60;carrier&#x60;, and &#x60;service&#x60;     - **byRuleSet:** &#x60;ruleType&#x60; and &#x60;shipOption&#x60;     - **byRateGroup:** &#x60;ruleType&#x60; and &#x60;rateGroupId&#x60;    - Define special services in one of two ways - by using a &#x60;specialServiceId&#x60; or by specifying  special service objects such as &#x60;deliveryConfirmation&#x60;, &#x60;handling&#x60;, &#x60;insurance&#x60;, or &#x60;returnOptions&#x60;. These two cannot be used together in the same request. 
        /// </remarks>
        /// <param name="isReturn">Applies only to carriers UPS and FedEx; For UPS, if &#x60;isReturn&#x60; is passed, you must either include the &#x60;returnOptions&#x60; object (when using individual service objects) or specify the &#x60;serviceId:PRL&#x60; (when using specialService), or an error will occur. For FedEx, If &#x60;isReturn&#x60; is set to &#x60;true&#x60;, the &#x60;returnOptions&#x60; object is optional.</param>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="xPBDefaultID">A unique identifier assigned to the Default while its creation using CreateDefaults API. (optional)</param>
        /// <param name="includeDeliveryCommitment">When set to true (default), the response includes delivery commitment information. Set to false to exclude delivery commitment details from the response. (optional, default to &quot;true&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateShipmentV2ApiResponse"/>&gt;</returns>
        Task<ICreateShipmentV2ApiResponse> CreateShipmentV2OrDefaultAsync(bool isReturn, CreateShipmentV2Request createShipmentV2Request, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, Option<string> xPBDefaultID = default, Option<string> includeDeliveryCommitment = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download BPOD Files
        /// </summary>
        /// <remarks>
        /// This API operation is used to download bulk of ERR (*Electronic Return Receipt*) - POD (*Proof of Delivery*) files, which are specific to USPS carrier. &lt;br /&gt;   User can download BPOD (*Bulk Proof of Delivery*) files either using *Shipment IDs* or *Date Range*.    If user wants to check records based on dates and download BPOD files accordingly, then *Start Date* and *End Date* need to be passed in the request body as filter. Else *Shipment IDs* will be used as default value when user does not provide *DateRange* filter. &lt;br /&gt;   User is restricted to download 1000 BPOD files as max limit. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="startDate">The BPOD files to be downloaded from which Date is the startDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="endDate">The BPOD files to be downloaded till which Date is the endDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="body">This is the request body to download BPOD files. Request body supports max of 1000 ShipmentIDs in a request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadBpodFilesApiResponse"/>&gt;</returns>
        Task<IDownloadBpodFilesApiResponse> DownloadBpodFilesAsync(Option<string> xPBDeveloperPartnerID = default, Option<string> startDate = default, Option<string> endDate = default, Option<BPODDownloadRequest> body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download BPOD Files
        /// </summary>
        /// <remarks>
        /// This API operation is used to download bulk of ERR (*Electronic Return Receipt*) - POD (*Proof of Delivery*) files, which are specific to USPS carrier. &lt;br /&gt;   User can download BPOD (*Bulk Proof of Delivery*) files either using *Shipment IDs* or *Date Range*.    If user wants to check records based on dates and download BPOD files accordingly, then *Start Date* and *End Date* need to be passed in the request body as filter. Else *Shipment IDs* will be used as default value when user does not provide *DateRange* filter. &lt;br /&gt;   User is restricted to download 1000 BPOD files as max limit. 
        /// </remarks>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="startDate">The BPOD files to be downloaded from which Date is the startDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="endDate">The BPOD files to be downloaded till which Date is the endDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="body">This is the request body to download BPOD files. Request body supports max of 1000 ShipmentIDs in a request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadBpodFilesApiResponse"/>&gt;</returns>
        Task<IDownloadBpodFilesApiResponse> DownloadBpodFilesOrDefaultAsync(Option<string> xPBDeveloperPartnerID = default, Option<string> startDate = default, Option<string> endDate = default, Option<BPODDownloadRequest> body = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All Shipments
        /// </summary>
        /// <remarks>
        /// The operation fetches all created Shipments. If query parameters are not provided, it will default endDate as current date, page as 1 and size as 10.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="startDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe start date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="endDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe end date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="page">The page of the Shipments search result list. (optional)</param>
        /// <param name="size">The size/count of the searched result list. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllShipmentsApiResponse"/>&gt;</returns>
        Task<IGetAllShipmentsApiResponse> GetAllShipmentsAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> startDate = default, Option<string> endDate = default, Option<string> page = default, Option<string> size = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All Shipments
        /// </summary>
        /// <remarks>
        /// The operation fetches all created Shipments. If query parameters are not provided, it will default endDate as current date, page as 1 and size as 10.
        /// </remarks>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="startDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe start date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="endDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe end date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="page">The page of the Shipments search result list. (optional)</param>
        /// <param name="size">The size/count of the searched result list. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllShipmentsApiResponse"/>&gt;</returns>
        Task<IGetAllShipmentsApiResponse> GetAllShipmentsOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> startDate = default, Option<string> endDate = default, Option<string> page = default, Option<string> size = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Carrier Accounts
        /// </summary>
        /// <remarks>
        /// The operation retrieves onboarded Carriers with their Carrier Account IDs which uniquely identify multiple accounts of same carrier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCarrierAccountApiResponse"/>&gt;</returns>
        Task<IGetCarrierAccountApiResponse> GetCarrierAccountAsync(Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Carrier Accounts
        /// </summary>
        /// <remarks>
        /// The operation retrieves onboarded Carriers with their Carrier Account IDs which uniquely identify multiple accounts of same carrier.
        /// </remarks>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCarrierAccountApiResponse"/>&gt;</returns>
        Task<IGetCarrierAccountApiResponse> GetCarrierAccountOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Carriers
        /// </summary>
        /// <remarks>
        /// The operation fetches all supported carriers. This service is used to get list of supported carriers and their properties.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCarriersApiResponse"/>&gt;</returns>
        Task<IGetCarriersApiResponse> GetCarriersAsync(Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Carriers
        /// </summary>
        /// <remarks>
        /// The operation fetches all supported carriers. This service is used to get list of supported carriers and their properties.
        /// </remarks>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCarriersApiResponse"/>&gt;</returns>
        Task<IGetCarriersApiResponse> GetCarriersOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Countries
        /// </summary>
        /// <remarks>
        /// The operation fetches list of supported destination countries for a provided carrier and origin country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier and &#x60;US&#x60; as origin country.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">The carrierID, a unique identifier given to an individual carrier. (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCountriesApiResponse"/>&gt;</returns>
        Task<IGetCountriesApiResponse> GetCountriesAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> carrier = default, Option<string> originCountryCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Countries
        /// </summary>
        /// <remarks>
        /// The operation fetches list of supported destination countries for a provided carrier and origin country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier and &#x60;US&#x60; as origin country.
        /// </remarks>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">The carrierID, a unique identifier given to an individual carrier. (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCountriesApiResponse"/>&gt;</returns>
        Task<IGetCountriesApiResponse> GetCountriesOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> carrier = default, Option<string> originCountryCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Parcel Types
        /// </summary>
        /// <remarks>
        /// The operation fetches Parcel Types based on the provided carrier, origin county, and the destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">The CarrierID, a unique identifier given to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">The Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetParcelTypesApiResponse"/>&gt;</returns>
        Task<IGetParcelTypesApiResponse> GetParcelTypesAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> carrier = default, Option<string> originCountryCode = default, Option<string> destinationCountryCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Parcel Types
        /// </summary>
        /// <remarks>
        /// The operation fetches Parcel Types based on the provided carrier, origin county, and the destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </remarks>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">The CarrierID, a unique identifier given to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">The Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetParcelTypesApiResponse"/>&gt;</returns>
        Task<IGetParcelTypesApiResponse> GetParcelTypesOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> carrier = default, Option<string> originCountryCode = default, Option<string> destinationCountryCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Services
        /// </summary>
        /// <remarks>
        /// The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">The CarrierID, a unique identifier provided to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">The Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetServicesApiResponse"/>&gt;</returns>
        Task<IGetServicesApiResponse> GetServicesAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> carrier = default, Option<string> originCountryCode = default, Option<string> destinationCountryCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Services
        /// </summary>
        /// <remarks>
        /// The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </remarks>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">The CarrierID, a unique identifier provided to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">The Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetServicesApiResponse"/>&gt;</returns>
        Task<IGetServicesApiResponse> GetServicesOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> carrier = default, Option<string> originCountryCode = default, Option<string> destinationCountryCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Signature Image ERR
        /// </summary>
        /// <remarks>
        /// This API provides a downloadable link containing the signature image for a specific ERR (Electronic Return Receipt) shipment. This signature image serves as Proof of Delivery (POD). &lt;br&gt; **What is Proof of Delivery (POD)?**&lt;br&gt; Proof of Delivery is a document or file that acts as evidence of successful shipment delivery. This file contains a digital copy of the recipient&#39;s signature, provided as a downloadable link or URL.  **Key Considerations:** - It provides the recipient&#39;s signature image captured at the time of delivery as proof that the shipment was successfully delivered. - The API provides the recipient&#39;s signature image as Proof of Delivery (POD) to confirm successful shipment delivery. - A request requires the mandatory &#x60;shipmentId&#x60;. - If a signature is captured by the carrier, the API returns it as a downloadable link of the PDF in the &#x60;signatureFileURL&#x60; field. - The &#x60;signatureFileURL&#x60; provided in the API response expires after 60 minutes. - If no signature is available, the API returns an error. - Signature Image ERR is supported for USPS carrier only. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID is a unique identifier for an individual shipment.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSignatureImageERRApiResponse"/>&gt;</returns>
        Task<IGetSignatureImageERRApiResponse> GetSignatureImageERRAsync(string shipmentId, Option<string> xPBDeveloperPartnerID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Signature Image ERR
        /// </summary>
        /// <remarks>
        /// This API provides a downloadable link containing the signature image for a specific ERR (Electronic Return Receipt) shipment. This signature image serves as Proof of Delivery (POD). &lt;br&gt; **What is Proof of Delivery (POD)?**&lt;br&gt; Proof of Delivery is a document or file that acts as evidence of successful shipment delivery. This file contains a digital copy of the recipient&#39;s signature, provided as a downloadable link or URL.  **Key Considerations:** - It provides the recipient&#39;s signature image captured at the time of delivery as proof that the shipment was successfully delivered. - The API provides the recipient&#39;s signature image as Proof of Delivery (POD) to confirm successful shipment delivery. - A request requires the mandatory &#x60;shipmentId&#x60;. - If a signature is captured by the carrier, the API returns it as a downloadable link of the PDF in the &#x60;signatureFileURL&#x60; field. - The &#x60;signatureFileURL&#x60; provided in the API response expires after 60 minutes. - If no signature is available, the API returns an error. - Signature Image ERR is supported for USPS carrier only. 
        /// </remarks>
        /// <param name="shipmentId">Shipment ID is a unique identifier for an individual shipment.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSignatureImageERRApiResponse"/>&gt;</returns>
        Task<IGetSignatureImageERRApiResponse> GetSignatureImageERROrDefaultAsync(string shipmentId, Option<string> xPBDeveloperPartnerID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Special Services
        /// </summary>
        /// <remarks>
        /// The operation fetches Special Services for a given carrier, service, origin country, and the destination country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin, and destination country and will show for all service and parcel types
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="service">The serviceId. It can be referred from response of &#x60;Get Services&#x60; API (optional)</param>
        /// <param name="parcel">The parcel Id, a unique identifier named to individual package. It can be referred from response of &#x60;Get Parcel Types&#x60; API (optional)</param>
        /// <param name="carrier">The CarrierID, a unique identifier given to an individual carrier. It can be referred from response of &#x60;Get Carriers&#x60; API (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">The Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSpecialServicesApiResponse"/>&gt;</returns>
        Task<IGetSpecialServicesApiResponse> GetSpecialServicesAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> service = default, Option<string> parcel = default, Option<string> carrier = default, Option<string> originCountryCode = default, Option<string> destinationCountryCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Special Services
        /// </summary>
        /// <remarks>
        /// The operation fetches Special Services for a given carrier, service, origin country, and the destination country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin, and destination country and will show for all service and parcel types
        /// </remarks>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="service">The serviceId. It can be referred from response of &#x60;Get Services&#x60; API (optional)</param>
        /// <param name="parcel">The parcel Id, a unique identifier named to individual package. It can be referred from response of &#x60;Get Parcel Types&#x60; API (optional)</param>
        /// <param name="carrier">The CarrierID, a unique identifier given to an individual carrier. It can be referred from response of &#x60;Get Carriers&#x60; API (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">The Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSpecialServicesApiResponse"/>&gt;</returns>
        Task<IGetSpecialServicesApiResponse> GetSpecialServicesOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> service = default, Option<string> parcel = default, Option<string> carrier = default, Option<string> originCountryCode = default, Option<string> destinationCountryCode = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Rate Shipment
        /// </summary>
        /// <remarks>
        /// This operation generates rate Shop for a specified shipment without generating the labels.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="rateShipmentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRateShipmentApiResponse"/>&gt;</returns>
        Task<IRateShipmentApiResponse> RateShipmentAsync(RateShipmentRequest rateShipmentRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Rate Shipment
        /// </summary>
        /// <remarks>
        /// This operation generates rate Shop for a specified shipment without generating the labels.
        /// </remarks>
        /// <param name="rateShipmentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRateShipmentApiResponse"/>&gt;</returns>
        Task<IRateShipmentApiResponse> RateShipmentOrDefaultAsync(RateShipmentRequest rateShipmentRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reprint Shipment
        /// </summary>
        /// <remarks>
        /// This operation retrieves an existing shipping label associated with a shipment. The API uses the shipmentId returned by the original Create Shipment request. Use this API only if the original shipping label has been lost or damaged. &lt;br&gt;  **Key Considerations**:&lt;br&gt;     - This operation is applicable only if the original shipment was successfully created. It cannot be used if the initial Create Shipment request resulted in no response or encountered an error.    - USPS allows only 1 reprint.    - GoFor does not allow reprint.    - RMG allows 3 reprints.    - All other carriers allow up to 8 reprints.    - Reprints are valid for 24 hours from the time the label was first created.    - Reprinting should only be used when necessary. Excessive reprint attempts are restricted and monitored.    - Follow the [Troubleshooting](/docs/support/troubleshooting/) section in case you are facing any issues creating a shipment. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReprintShipmentByIdV2ApiResponse"/>&gt;</returns>
        Task<IReprintShipmentByIdV2ApiResponse> ReprintShipmentByIdV2Async(ShipmentReprintV2 shipmentReprintV2, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reprint Shipment
        /// </summary>
        /// <remarks>
        /// This operation retrieves an existing shipping label associated with a shipment. The API uses the shipmentId returned by the original Create Shipment request. Use this API only if the original shipping label has been lost or damaged. &lt;br&gt;  **Key Considerations**:&lt;br&gt;     - This operation is applicable only if the original shipment was successfully created. It cannot be used if the initial Create Shipment request resulted in no response or encountered an error.    - USPS allows only 1 reprint.    - GoFor does not allow reprint.    - RMG allows 3 reprints.    - All other carriers allow up to 8 reprints.    - Reprints are valid for 24 hours from the time the label was first created.    - Reprinting should only be used when necessary. Excessive reprint attempts are restricted and monitored.    - Follow the [Troubleshooting](/docs/support/troubleshooting/) section in case you are facing any issues creating a shipment. 
        /// </remarks>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReprintShipmentByIdV2ApiResponse"/>&gt;</returns>
        Task<IReprintShipmentByIdV2ApiResponse> ReprintShipmentByIdV2OrDefaultAsync(ShipmentReprintV2 shipmentReprintV2, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Shipment by Id
        /// </summary>
        /// <remarks>
        /// The operation retrieves shipment details using shipmentId.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipmentId, a unique identifier for an individual Shipment.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShipmentByIdApiResponse"/>&gt;</returns>
        Task<IShipmentByIdApiResponse> ShipmentByIdAsync(string shipmentId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Shipment by Id
        /// </summary>
        /// <remarks>
        /// The operation retrieves shipment details using shipmentId.
        /// </remarks>
        /// <param name="shipmentId">The shipmentId, a unique identifier for an individual Shipment.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShipmentByIdApiResponse"/>&gt;</returns>
        Task<IShipmentByIdApiResponse> ShipmentByIdOrDefaultAsync(string shipmentId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICancelShipmentByIdV2ApiResponse"/>
    /// </summary>
    public interface ICancelShipmentByIdV2ApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.CancelShipmentV2>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, INotFound<List<NotFoundErrorsInner>>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ICancelStampsERRApiResponse"/>
    /// </summary>
    public interface ICancelStampsERRApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.CancelStampsResponseERR>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ICreateErrCoversheetApiResponse"/>
    /// </summary>
    public interface ICreateErrCoversheetApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.ErrCoversheetResponse>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ICreateShipmentV2ApiResponse"/>
    /// </summary>
    public interface ICreateShipmentV2ApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.CreateShipmentV2200Response>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDownloadBpodFilesApiResponse"/>
    /// </summary>
    public interface IDownloadBpodFilesApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.BPODDownloadResponse>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllShipmentsApiResponse"/>
    /// </summary>
    public interface IGetAllShipmentsApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.GetAllShipments>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetCarrierAccountApiResponse"/>
    /// </summary>
    public interface IGetCarrierAccountApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.GetCarrierAccount200Response>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetCarriersApiResponse"/>
    /// </summary>
    public interface IGetCarriersApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.Carriers>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetCountriesApiResponse"/>
    /// </summary>
    public interface IGetCountriesApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.Countries>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetParcelTypesApiResponse"/>
    /// </summary>
    public interface IGetParcelTypesApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.ParcelTypes>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetServicesApiResponse"/>
    /// </summary>
    public interface IGetServicesApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.Services>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetSignatureImageERRApiResponse"/>
    /// </summary>
    public interface IGetSignatureImageERRApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.SignatureFileResponse>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetSpecialServicesApiResponse"/>
    /// </summary>
    public interface IGetSpecialServicesApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.SpecialServices>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IRateShipmentApiResponse"/>
    /// </summary>
    public interface IRateShipmentApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.RateShipment200Response>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IReprintShipmentByIdV2ApiResponse"/>
    /// </summary>
    public interface IReprintShipmentByIdV2ApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.ReprintShipmentV2>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, INotFound<List<NotFoundErrorsInner>>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IShipmentByIdApiResponse"/>
    /// </summary>
    public interface IShipmentByIdApiResponse : com.pitneybowes.api360.Client.IApiResponse, IOk<com.pitneybowes.api360.Model.GetSingleShipment>, IBadRequest<List<InvalidErrorsInner>>, IUnauthorized<com.pitneybowes.api360.Model.UnauthorizedError>, INotFound<List<NotFoundErrorsInner>>, IInternalServerError<com.pitneybowes.api360.Model.ServerError>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ShipmentApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCancelShipmentByIdV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCancelShipmentByIdV2;

        internal void ExecuteOnCancelShipmentByIdV2(ShipmentApi.CancelShipmentByIdV2ApiResponse apiResponse)
        {
            OnCancelShipmentByIdV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCancelShipmentByIdV2(Exception exception)
        {
            OnErrorCancelShipmentByIdV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCancelStampsERR;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCancelStampsERR;

        internal void ExecuteOnCancelStampsERR(ShipmentApi.CancelStampsERRApiResponse apiResponse)
        {
            OnCancelStampsERR?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCancelStampsERR(Exception exception)
        {
            OnErrorCancelStampsERR?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateErrCoversheet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateErrCoversheet;

        internal void ExecuteOnCreateErrCoversheet(ShipmentApi.CreateErrCoversheetApiResponse apiResponse)
        {
            OnCreateErrCoversheet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateErrCoversheet(Exception exception)
        {
            OnErrorCreateErrCoversheet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateShipmentV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateShipmentV2;

        internal void ExecuteOnCreateShipmentV2(ShipmentApi.CreateShipmentV2ApiResponse apiResponse)
        {
            OnCreateShipmentV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateShipmentV2(Exception exception)
        {
            OnErrorCreateShipmentV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDownloadBpodFiles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDownloadBpodFiles;

        internal void ExecuteOnDownloadBpodFiles(ShipmentApi.DownloadBpodFilesApiResponse apiResponse)
        {
            OnDownloadBpodFiles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDownloadBpodFiles(Exception exception)
        {
            OnErrorDownloadBpodFiles?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllShipments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllShipments;

        internal void ExecuteOnGetAllShipments(ShipmentApi.GetAllShipmentsApiResponse apiResponse)
        {
            OnGetAllShipments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllShipments(Exception exception)
        {
            OnErrorGetAllShipments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetCarrierAccount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetCarrierAccount;

        internal void ExecuteOnGetCarrierAccount(ShipmentApi.GetCarrierAccountApiResponse apiResponse)
        {
            OnGetCarrierAccount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCarrierAccount(Exception exception)
        {
            OnErrorGetCarrierAccount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetCarriers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetCarriers;

        internal void ExecuteOnGetCarriers(ShipmentApi.GetCarriersApiResponse apiResponse)
        {
            OnGetCarriers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCarriers(Exception exception)
        {
            OnErrorGetCarriers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetCountries;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetCountries;

        internal void ExecuteOnGetCountries(ShipmentApi.GetCountriesApiResponse apiResponse)
        {
            OnGetCountries?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCountries(Exception exception)
        {
            OnErrorGetCountries?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetParcelTypes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetParcelTypes;

        internal void ExecuteOnGetParcelTypes(ShipmentApi.GetParcelTypesApiResponse apiResponse)
        {
            OnGetParcelTypes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetParcelTypes(Exception exception)
        {
            OnErrorGetParcelTypes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetServices;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetServices;

        internal void ExecuteOnGetServices(ShipmentApi.GetServicesApiResponse apiResponse)
        {
            OnGetServices?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetServices(Exception exception)
        {
            OnErrorGetServices?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetSignatureImageERR;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetSignatureImageERR;

        internal void ExecuteOnGetSignatureImageERR(ShipmentApi.GetSignatureImageERRApiResponse apiResponse)
        {
            OnGetSignatureImageERR?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSignatureImageERR(Exception exception)
        {
            OnErrorGetSignatureImageERR?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetSpecialServices;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetSpecialServices;

        internal void ExecuteOnGetSpecialServices(ShipmentApi.GetSpecialServicesApiResponse apiResponse)
        {
            OnGetSpecialServices?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSpecialServices(Exception exception)
        {
            OnErrorGetSpecialServices?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnRateShipment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorRateShipment;

        internal void ExecuteOnRateShipment(ShipmentApi.RateShipmentApiResponse apiResponse)
        {
            OnRateShipment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRateShipment(Exception exception)
        {
            OnErrorRateShipment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnReprintShipmentByIdV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorReprintShipmentByIdV2;

        internal void ExecuteOnReprintShipmentByIdV2(ShipmentApi.ReprintShipmentByIdV2ApiResponse apiResponse)
        {
            OnReprintShipmentByIdV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReprintShipmentByIdV2(Exception exception)
        {
            OnErrorReprintShipmentByIdV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnShipmentById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorShipmentById;

        internal void ExecuteOnShipmentById(ShipmentApi.ShipmentByIdApiResponse apiResponse)
        {
            OnShipmentById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorShipmentById(Exception exception)
        {
            OnErrorShipmentById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ShipmentApi : IShipmentApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ShipmentApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ShipmentApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentApi(ILogger<ShipmentApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ShipmentApiEvents shipmentApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ShipmentApi>();
            HttpClient = httpClient;
            Events = shipmentApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            BasicTokenProvider = basicTokenProvider;
        }

        partial void FormatCancelShipmentByIdV2(ShipmentCancelV2 shipmentCancelV2, ref Option<string> xPBDeveloperPartnerId, ref Option<string> xPBLocationId, ref Option<string> xPBTransactionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        /// <returns></returns>
        private void ValidateCancelShipmentByIdV2(ShipmentCancelV2 shipmentCancelV2, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            if (shipmentCancelV2 == null)
                throw new ArgumentNullException(nameof(shipmentCancelV2));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (xPBLocationId.IsSet && xPBLocationId.Value == null)
                throw new ArgumentNullException(nameof(xPBLocationId));

            if (xPBTransactionId.IsSet && xPBTransactionId.Value == null)
                throw new ArgumentNullException(nameof(xPBTransactionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void AfterCancelShipmentByIdV2DefaultImplementation(ICancelShipmentByIdV2ApiResponse apiResponseLocalVar, ShipmentCancelV2 shipmentCancelV2, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLog = false;
            AfterCancelShipmentByIdV2(ref suppressDefaultLog, apiResponseLocalVar, shipmentCancelV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void AfterCancelShipmentByIdV2(ref bool suppressDefaultLog, ICancelShipmentByIdV2ApiResponse apiResponseLocalVar, ShipmentCancelV2 shipmentCancelV2, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void OnErrorCancelShipmentByIdV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ShipmentCancelV2 shipmentCancelV2, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCancelShipmentByIdV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, shipmentCancelV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void OnErrorCancelShipmentByIdV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ShipmentCancelV2 shipmentCancelV2, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Cancel Shipment This operation cancels or voids a shipment label that has not been processed by the carrier. When you cancel an unused prepaid shipment label, the API initiates a request for an electronic refund.&lt;br&gt;  **Key Considerations** - Cancelation must occur before the shipment is picked up or processed by the carrier. - Refunds are only applicable for unused labels. Voiding a used label may result in penalties or billing.&lt;br&gt; - **USPS**:    - Cancel unused USPS prepaid labels within 30 days of printing to start the refund process.    - Refund requests are processed within 14 business days from the date the refund was requested, provided the label has not been used.    - Approved refunds are automatically credited to the account you used to pay for the label.    - **Note**: USPS considers it a federal offense to induct a label that has already been refunded.    - **Note**: Refunds are not available for First-Class Mail letters and flats.    - **Note**: Refunds are subject to the policies of the applicable carrier. - For unused post-paid labels, you must void them. Voiding avoids billing for the label and allows the carrier to maintain an accurate count for pickups. - Always destroy voided labels to prevent accidental use. If a voided label is shipped, you will be billed for the label. - Once a refund has been claimed, you cannot use the shipping label for sending packages. It will be rejected. 
        /// </summary>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelShipmentByIdV2ApiResponse"/>&gt;</returns>
        public async Task<ICancelShipmentByIdV2ApiResponse> CancelShipmentByIdV2OrDefaultAsync(ShipmentCancelV2 shipmentCancelV2, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CancelShipmentByIdV2Async(shipmentCancelV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Cancel Shipment This operation cancels or voids a shipment label that has not been processed by the carrier. When you cancel an unused prepaid shipment label, the API initiates a request for an electronic refund.&lt;br&gt;  **Key Considerations** - Cancelation must occur before the shipment is picked up or processed by the carrier. - Refunds are only applicable for unused labels. Voiding a used label may result in penalties or billing.&lt;br&gt; - **USPS**:    - Cancel unused USPS prepaid labels within 30 days of printing to start the refund process.    - Refund requests are processed within 14 business days from the date the refund was requested, provided the label has not been used.    - Approved refunds are automatically credited to the account you used to pay for the label.    - **Note**: USPS considers it a federal offense to induct a label that has already been refunded.    - **Note**: Refunds are not available for First-Class Mail letters and flats.    - **Note**: Refunds are subject to the policies of the applicable carrier. - For unused post-paid labels, you must void them. Voiding avoids billing for the label and allows the carrier to maintain an accurate count for pickups. - Always destroy voided labels to prevent accidental use. If a voided label is shipped, you will be billed for the label. - Once a refund has been claimed, you cannot use the shipping label for sending packages. It will be rejected. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentCancelV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelShipmentByIdV2ApiResponse"/>&gt;</returns>
        public async Task<ICancelShipmentByIdV2ApiResponse> CancelShipmentByIdV2Async(ShipmentCancelV2 shipmentCancelV2, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCancelShipmentByIdV2(shipmentCancelV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                FormatCancelShipmentByIdV2(shipmentCancelV2, ref xPBDeveloperPartnerId, ref xPBLocationId, ref xPBTransactionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v2/shipments/cancel"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v2/shipments/cancel");

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    if (xPBLocationId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-LocationId", ClientUtils.ParameterToString(xPBLocationId.Value));

                    if (xPBTransactionId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-TransactionId", ClientUtils.ParameterToString(xPBTransactionId.Value));

                    httpRequestMessageLocalVar.Content = (shipmentCancelV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(shipmentCancelV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CancelShipmentByIdV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CancelShipmentByIdV2ApiResponse>();

                        CancelShipmentByIdV2ApiResponse apiResponseLocalVar = new CancelShipmentByIdV2ApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v2/shipments/cancel", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCancelShipmentByIdV2DefaultImplementation(apiResponseLocalVar, shipmentCancelV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                        Events.ExecuteOnCancelShipmentByIdV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCancelShipmentByIdV2DefaultImplementation(e, "/api/v2/shipments/cancel", uriBuilderLocalVar.Path, shipmentCancelV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
                Events.ExecuteOnErrorCancelShipmentByIdV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CancelShipmentByIdV2ApiResponse"/>
        /// </summary>
        public partial class CancelShipmentByIdV2ApiResponse : com.pitneybowes.api360.Client.ApiResponse, ICancelShipmentByIdV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CancelShipmentByIdV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CancelShipmentByIdV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CancelShipmentByIdV2ApiResponse(ILogger<CancelShipmentByIdV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.CancelShipmentV2 Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.CancelShipmentV2>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.CancelShipmentV2 result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public List<NotFoundErrorsInner> NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<List<NotFoundErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out List<NotFoundErrorsInner> result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCancelStampsERR(CancelStampsRequestERR cancelStampsRequestERR, ref Option<string> xPBDeveloperPartnerID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        /// <returns></returns>
        private void ValidateCancelStampsERR(CancelStampsRequestERR cancelStampsRequestERR, Option<string> xPBDeveloperPartnerID)
        {
            if (cancelStampsRequestERR == null)
                throw new ArgumentNullException(nameof(cancelStampsRequestERR));

            if (xPBDeveloperPartnerID.IsSet && xPBDeveloperPartnerID.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        private void AfterCancelStampsERRDefaultImplementation(ICancelStampsERRApiResponse apiResponseLocalVar, CancelStampsRequestERR cancelStampsRequestERR, Option<string> xPBDeveloperPartnerID)
        {
            bool suppressDefaultLog = false;
            AfterCancelStampsERR(ref suppressDefaultLog, apiResponseLocalVar, cancelStampsRequestERR, xPBDeveloperPartnerID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        partial void AfterCancelStampsERR(ref bool suppressDefaultLog, ICancelStampsERRApiResponse apiResponseLocalVar, CancelStampsRequestERR cancelStampsRequestERR, Option<string> xPBDeveloperPartnerID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        private void OnErrorCancelStampsERRDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CancelStampsRequestERR cancelStampsRequestERR, Option<string> xPBDeveloperPartnerID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCancelStampsERR(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, cancelStampsRequestERR, xPBDeveloperPartnerID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        partial void OnErrorCancelStampsERR(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CancelStampsRequestERR cancelStampsRequestERR, Option<string> xPBDeveloperPartnerID);

        /// <summary>
        /// Cancel Stamps ERR This operation cancels (voids) stamps generated for ERR (Electronic Return Receipt).  - User needs to provide *Stamp IDs* to cancel those specific ERR stamps.  - User can download the *Refund Form* having details of generated Postage.  - At once, maximum 1000 stamps can be requested for cancelation. 
        /// </summary>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelStampsERRApiResponse"/>&gt;</returns>
        public async Task<ICancelStampsERRApiResponse> CancelStampsERROrDefaultAsync(CancelStampsRequestERR cancelStampsRequestERR, Option<string> xPBDeveloperPartnerID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CancelStampsERRAsync(cancelStampsRequestERR, xPBDeveloperPartnerID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Cancel Stamps ERR This operation cancels (voids) stamps generated for ERR (Electronic Return Receipt).  - User needs to provide *Stamp IDs* to cancel those specific ERR stamps.  - User can download the *Refund Form* having details of generated Postage.  - At once, maximum 1000 stamps can be requested for cancelation. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelStampsERRApiResponse"/>&gt;</returns>
        public async Task<ICancelStampsERRApiResponse> CancelStampsERRAsync(CancelStampsRequestERR cancelStampsRequestERR, Option<string> xPBDeveloperPartnerID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCancelStampsERR(cancelStampsRequestERR, xPBDeveloperPartnerID);

                FormatCancelStampsERR(cancelStampsRequestERR, ref xPBDeveloperPartnerID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/err/stamps/void"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/err/stamps/void");

                    if (xPBDeveloperPartnerID.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-ID", ClientUtils.ParameterToString(xPBDeveloperPartnerID.Value));

                    httpRequestMessageLocalVar.Content = (cancelStampsRequestERR as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(cancelStampsRequestERR, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CancelStampsERRApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CancelStampsERRApiResponse>();

                        CancelStampsERRApiResponse apiResponseLocalVar = new CancelStampsERRApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/err/stamps/void", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCancelStampsERRDefaultImplementation(apiResponseLocalVar, cancelStampsRequestERR, xPBDeveloperPartnerID);

                        Events.ExecuteOnCancelStampsERR(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCancelStampsERRDefaultImplementation(e, "/api/v1/err/stamps/void", uriBuilderLocalVar.Path, cancelStampsRequestERR, xPBDeveloperPartnerID);
                Events.ExecuteOnErrorCancelStampsERR(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CancelStampsERRApiResponse"/>
        /// </summary>
        public partial class CancelStampsERRApiResponse : com.pitneybowes.api360.Client.ApiResponse, ICancelStampsERRApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CancelStampsERRApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CancelStampsERRApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CancelStampsERRApiResponse(ILogger<CancelStampsERRApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.CancelStampsResponseERR Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.CancelStampsResponseERR>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.CancelStampsResponseERR result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateErrCoversheet(ErrCoversheetRequest errCoversheetRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="errCoversheetRequest"></param>
        /// <returns></returns>
        private void ValidateCreateErrCoversheet(ErrCoversheetRequest errCoversheetRequest)
        {
            if (errCoversheetRequest == null)
                throw new ArgumentNullException(nameof(errCoversheetRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="errCoversheetRequest"></param>
        private void AfterCreateErrCoversheetDefaultImplementation(ICreateErrCoversheetApiResponse apiResponseLocalVar, ErrCoversheetRequest errCoversheetRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateErrCoversheet(ref suppressDefaultLog, apiResponseLocalVar, errCoversheetRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="errCoversheetRequest"></param>
        partial void AfterCreateErrCoversheet(ref bool suppressDefaultLog, ICreateErrCoversheetApiResponse apiResponseLocalVar, ErrCoversheetRequest errCoversheetRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="errCoversheetRequest"></param>
        private void OnErrorCreateErrCoversheetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ErrCoversheetRequest errCoversheetRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateErrCoversheet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, errCoversheetRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="errCoversheetRequest"></param>
        partial void OnErrorCreateErrCoversheet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ErrCoversheetRequest errCoversheetRequest);

        /// <summary>
        /// Create ERR Single Coversheet This API generates a single coversheet for a parcel, with support for Electronic Return Receipt (ERR) and other special services. 
        /// </summary>
        /// <param name="errCoversheetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateErrCoversheetApiResponse"/>&gt;</returns>
        public async Task<ICreateErrCoversheetApiResponse> CreateErrCoversheetOrDefaultAsync(ErrCoversheetRequest errCoversheetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateErrCoversheetAsync(errCoversheetRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create ERR Single Coversheet This API generates a single coversheet for a parcel, with support for Electronic Return Receipt (ERR) and other special services. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="errCoversheetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateErrCoversheetApiResponse"/>&gt;</returns>
        public async Task<ICreateErrCoversheetApiResponse> CreateErrCoversheetAsync(ErrCoversheetRequest errCoversheetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateErrCoversheet(errCoversheetRequest);

                FormatCreateErrCoversheet(errCoversheetRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/err/coverSheet"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/err/coverSheet");

                    httpRequestMessageLocalVar.Content = (errCoversheetRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(errCoversheetRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateErrCoversheetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateErrCoversheetApiResponse>();

                        CreateErrCoversheetApiResponse apiResponseLocalVar = new CreateErrCoversheetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/err/coverSheet", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateErrCoversheetDefaultImplementation(apiResponseLocalVar, errCoversheetRequest);

                        Events.ExecuteOnCreateErrCoversheet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateErrCoversheetDefaultImplementation(e, "/api/v1/err/coverSheet", uriBuilderLocalVar.Path, errCoversheetRequest);
                Events.ExecuteOnErrorCreateErrCoversheet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateErrCoversheetApiResponse"/>
        /// </summary>
        public partial class CreateErrCoversheetApiResponse : com.pitneybowes.api360.Client.ApiResponse, ICreateErrCoversheetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateErrCoversheetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateErrCoversheetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateErrCoversheetApiResponse(ILogger<CreateErrCoversheetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ErrCoversheetResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ErrCoversheetResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.ErrCoversheetResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateShipmentV2(ref bool isReturn, CreateShipmentV2Request createShipmentV2Request, ref Option<string> xPBDeveloperPartnerId, ref Option<string> xPBLocationId, ref Option<string> xPBTransactionId, ref Option<string> xPBDefaultID, ref Option<string> includeDeliveryCommitment);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        /// <param name="xPBDefaultID"></param>
        /// <param name="includeDeliveryCommitment"></param>
        /// <returns></returns>
        private void ValidateCreateShipmentV2(CreateShipmentV2Request createShipmentV2Request, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId, Option<string> xPBDefaultID, Option<string> includeDeliveryCommitment)
        {
            if (createShipmentV2Request == null)
                throw new ArgumentNullException(nameof(createShipmentV2Request));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (xPBLocationId.IsSet && xPBLocationId.Value == null)
                throw new ArgumentNullException(nameof(xPBLocationId));

            if (xPBTransactionId.IsSet && xPBTransactionId.Value == null)
                throw new ArgumentNullException(nameof(xPBTransactionId));

            if (xPBDefaultID.IsSet && xPBDefaultID.Value == null)
                throw new ArgumentNullException(nameof(xPBDefaultID));

            if (includeDeliveryCommitment.IsSet && includeDeliveryCommitment.Value == null)
                throw new ArgumentNullException(nameof(includeDeliveryCommitment));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="isReturn"></param>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        /// <param name="xPBDefaultID"></param>
        /// <param name="includeDeliveryCommitment"></param>
        private void AfterCreateShipmentV2DefaultImplementation(ICreateShipmentV2ApiResponse apiResponseLocalVar, bool isReturn, CreateShipmentV2Request createShipmentV2Request, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId, Option<string> xPBDefaultID, Option<string> includeDeliveryCommitment)
        {
            bool suppressDefaultLog = false;
            AfterCreateShipmentV2(ref suppressDefaultLog, apiResponseLocalVar, isReturn, createShipmentV2Request, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, xPBDefaultID, includeDeliveryCommitment);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="isReturn"></param>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        /// <param name="xPBDefaultID"></param>
        /// <param name="includeDeliveryCommitment"></param>
        partial void AfterCreateShipmentV2(ref bool suppressDefaultLog, ICreateShipmentV2ApiResponse apiResponseLocalVar, bool isReturn, CreateShipmentV2Request createShipmentV2Request, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId, Option<string> xPBDefaultID, Option<string> includeDeliveryCommitment);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="isReturn"></param>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        /// <param name="xPBDefaultID"></param>
        /// <param name="includeDeliveryCommitment"></param>
        private void OnErrorCreateShipmentV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, bool isReturn, CreateShipmentV2Request createShipmentV2Request, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId, Option<string> xPBDefaultID, Option<string> includeDeliveryCommitment)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateShipmentV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, isReturn, createShipmentV2Request, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, xPBDefaultID, includeDeliveryCommitment);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="isReturn"></param>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        /// <param name="xPBDefaultID"></param>
        /// <param name="includeDeliveryCommitment"></param>
        partial void OnErrorCreateShipmentV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, bool isReturn, CreateShipmentV2Request createShipmentV2Request, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId, Option<string> xPBDefaultID, Option<string> includeDeliveryCommitment);

        /// <summary>
        /// Create Shipment &gt; **Note:** This Request sample includes the full set of supported fields across all carriers. However, not all fields are applicable to every carrier. When making API calls from the doc portal, ensure you include only the parameters supported by the specific carrier you are integrating with. If unsupported fields are included, the request may fail. &lt;br/&gt; To simplify integration and avoid errors, refer to the [Postman Collection](/docs/resources/postman/). &lt;br/&gt; To explore which label types, label formats, label sizes, parcel types, services, and special services are supported by each carrier, see the [Carrier Catalog](/docs/shipping/carriers/carrier-catalog/). Detailed field descriptions are also provided below.  The Create Shipment API is used to create shipments and generate shipment labels. A shipment refers to the process of packing and transporting an item from a source location to a destination location using a carrier service. The API supports both domestic and international shipments.&lt;br&gt;  **Domestic Shipments** &lt;br&gt;    - Both the &#x60;toAddress&#x60; and &#x60;fromAddress&#x60; addresses must be within the same country.   - Requires carrier services and associated special services.  **International Shipments**   - The &#x60;toAddress&#x60; must be in a different country than the &#x60;fromAddress&#x60;.   - Requires international carrier services, special services, and customs information.&lt;br&gt;  The V2 Create Shipment API compares shipping rates, services, and options across multiple carriers. It selects the best shipping solution based on criteria such as cost, delivery speed, or other business rules. This automates decision-making and eliminates the need for manual analysis of carrier data. It supports three RateShop types: &lt;br&gt;  **1. By Carrier:**&lt;br&gt;    - Manually specify the carrier and service for shipment creation.   - Provides more customization than V1 Create Shipment.  **2. By RuleSet**&lt;br&gt;    - Automatically select the best carrier and service based on predefined rules (e.g., cheapest, fastest). For example: &lt;br&gt;   - Shipments weighing up to 3kg use a \&quot;Standard\&quot; service type with carrier A.   - Shipments exceeding 3kg use an \&quot;Over-weight\&quot; service type with carrier B.   - Rules are fully client-defined, allowing for dynamic decision-making based on shipment parameters like weight, dimensions, and destination.  **3. By RateGroup**&lt;br&gt;    - Use predefined rate groups to select a carrier and service dynamically.For example:&lt;br&gt;   - Clients can choose between the fastest delivery or the cheapest service rate among a predefined group of carriers.   - The system automatically determines and selects the best carrier and service, without the need for manual comparisons.    **Notes**&lt;br&gt;    - The &#x60;rateShopBy&#x60; field determines the variant to use (&#x60;carrier&#x60;, &#x60;ruleset&#x60;, or &#x60;rategroup&#x60;).   - Ensure that variant-specific fields are correctly populated:     - **byCarrier:** &#x60;carrierAccountId&#x60;, &#x60;carrier&#x60;, and &#x60;service&#x60;     - **byRuleSet:** &#x60;ruleType&#x60; and &#x60;shipOption&#x60;     - **byRateGroup:** &#x60;ruleType&#x60; and &#x60;rateGroupId&#x60;    - Define special services in one of two ways - by using a &#x60;specialServiceId&#x60; or by specifying  special service objects such as &#x60;deliveryConfirmation&#x60;, &#x60;handling&#x60;, &#x60;insurance&#x60;, or &#x60;returnOptions&#x60;. These two cannot be used together in the same request. 
        /// </summary>
        /// <param name="isReturn">Applies only to carriers UPS and FedEx; For UPS, if &#x60;isReturn&#x60; is passed, you must either include the &#x60;returnOptions&#x60; object (when using individual service objects) or specify the &#x60;serviceId:PRL&#x60; (when using specialService), or an error will occur. For FedEx, If &#x60;isReturn&#x60; is set to &#x60;true&#x60;, the &#x60;returnOptions&#x60; object is optional.</param>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="xPBDefaultID">A unique identifier assigned to the Default while its creation using CreateDefaults API. (optional)</param>
        /// <param name="includeDeliveryCommitment">When set to true (default), the response includes delivery commitment information. Set to false to exclude delivery commitment details from the response. (optional, default to &quot;true&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateShipmentV2ApiResponse"/>&gt;</returns>
        public async Task<ICreateShipmentV2ApiResponse> CreateShipmentV2OrDefaultAsync(bool isReturn, CreateShipmentV2Request createShipmentV2Request, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, Option<string> xPBDefaultID = default, Option<string> includeDeliveryCommitment = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateShipmentV2Async(isReturn, createShipmentV2Request, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, xPBDefaultID, includeDeliveryCommitment, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Shipment &gt; **Note:** This Request sample includes the full set of supported fields across all carriers. However, not all fields are applicable to every carrier. When making API calls from the doc portal, ensure you include only the parameters supported by the specific carrier you are integrating with. If unsupported fields are included, the request may fail. &lt;br/&gt; To simplify integration and avoid errors, refer to the [Postman Collection](/docs/resources/postman/). &lt;br/&gt; To explore which label types, label formats, label sizes, parcel types, services, and special services are supported by each carrier, see the [Carrier Catalog](/docs/shipping/carriers/carrier-catalog/). Detailed field descriptions are also provided below.  The Create Shipment API is used to create shipments and generate shipment labels. A shipment refers to the process of packing and transporting an item from a source location to a destination location using a carrier service. The API supports both domestic and international shipments.&lt;br&gt;  **Domestic Shipments** &lt;br&gt;    - Both the &#x60;toAddress&#x60; and &#x60;fromAddress&#x60; addresses must be within the same country.   - Requires carrier services and associated special services.  **International Shipments**   - The &#x60;toAddress&#x60; must be in a different country than the &#x60;fromAddress&#x60;.   - Requires international carrier services, special services, and customs information.&lt;br&gt;  The V2 Create Shipment API compares shipping rates, services, and options across multiple carriers. It selects the best shipping solution based on criteria such as cost, delivery speed, or other business rules. This automates decision-making and eliminates the need for manual analysis of carrier data. It supports three RateShop types: &lt;br&gt;  **1. By Carrier:**&lt;br&gt;    - Manually specify the carrier and service for shipment creation.   - Provides more customization than V1 Create Shipment.  **2. By RuleSet**&lt;br&gt;    - Automatically select the best carrier and service based on predefined rules (e.g., cheapest, fastest). For example: &lt;br&gt;   - Shipments weighing up to 3kg use a \&quot;Standard\&quot; service type with carrier A.   - Shipments exceeding 3kg use an \&quot;Over-weight\&quot; service type with carrier B.   - Rules are fully client-defined, allowing for dynamic decision-making based on shipment parameters like weight, dimensions, and destination.  **3. By RateGroup**&lt;br&gt;    - Use predefined rate groups to select a carrier and service dynamically.For example:&lt;br&gt;   - Clients can choose between the fastest delivery or the cheapest service rate among a predefined group of carriers.   - The system automatically determines and selects the best carrier and service, without the need for manual comparisons.    **Notes**&lt;br&gt;    - The &#x60;rateShopBy&#x60; field determines the variant to use (&#x60;carrier&#x60;, &#x60;ruleset&#x60;, or &#x60;rategroup&#x60;).   - Ensure that variant-specific fields are correctly populated:     - **byCarrier:** &#x60;carrierAccountId&#x60;, &#x60;carrier&#x60;, and &#x60;service&#x60;     - **byRuleSet:** &#x60;ruleType&#x60; and &#x60;shipOption&#x60;     - **byRateGroup:** &#x60;ruleType&#x60; and &#x60;rateGroupId&#x60;    - Define special services in one of two ways - by using a &#x60;specialServiceId&#x60; or by specifying  special service objects such as &#x60;deliveryConfirmation&#x60;, &#x60;handling&#x60;, &#x60;insurance&#x60;, or &#x60;returnOptions&#x60;. These two cannot be used together in the same request. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="isReturn">Applies only to carriers UPS and FedEx; For UPS, if &#x60;isReturn&#x60; is passed, you must either include the &#x60;returnOptions&#x60; object (when using individual service objects) or specify the &#x60;serviceId:PRL&#x60; (when using specialService), or an error will occur. For FedEx, If &#x60;isReturn&#x60; is set to &#x60;true&#x60;, the &#x60;returnOptions&#x60; object is optional.</param>
        /// <param name="createShipmentV2Request"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique Transaction ID provided by the partner, which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="xPBDefaultID">A unique identifier assigned to the Default while its creation using CreateDefaults API. (optional)</param>
        /// <param name="includeDeliveryCommitment">When set to true (default), the response includes delivery commitment information. Set to false to exclude delivery commitment details from the response. (optional, default to &quot;true&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateShipmentV2ApiResponse"/>&gt;</returns>
        public async Task<ICreateShipmentV2ApiResponse> CreateShipmentV2Async(bool isReturn, CreateShipmentV2Request createShipmentV2Request, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, Option<string> xPBDefaultID = default, Option<string> includeDeliveryCommitment = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateShipmentV2(createShipmentV2Request, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, xPBDefaultID, includeDeliveryCommitment);

                FormatCreateShipmentV2(ref isReturn, createShipmentV2Request, ref xPBDeveloperPartnerId, ref xPBLocationId, ref xPBTransactionId, ref xPBDefaultID, ref includeDeliveryCommitment);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v2/shipments"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v2/shipments");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["isReturn"] = ClientUtils.ParameterToString(isReturn);

                    if (includeDeliveryCommitment.IsSet)
                        parseQueryStringLocalVar["includeDeliveryCommitment"] = ClientUtils.ParameterToString(includeDeliveryCommitment.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    if (xPBLocationId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-LocationId", ClientUtils.ParameterToString(xPBLocationId.Value));

                    if (xPBTransactionId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-TransactionId", ClientUtils.ParameterToString(xPBTransactionId.Value));

                    if (xPBDefaultID.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Default-ID", ClientUtils.ParameterToString(xPBDefaultID.Value));

                    httpRequestMessageLocalVar.Content = (createShipmentV2Request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createShipmentV2Request, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateShipmentV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateShipmentV2ApiResponse>();

                        CreateShipmentV2ApiResponse apiResponseLocalVar = new CreateShipmentV2ApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v2/shipments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateShipmentV2DefaultImplementation(apiResponseLocalVar, isReturn, createShipmentV2Request, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, xPBDefaultID, includeDeliveryCommitment);

                        Events.ExecuteOnCreateShipmentV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateShipmentV2DefaultImplementation(e, "/api/v2/shipments", uriBuilderLocalVar.Path, isReturn, createShipmentV2Request, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, xPBDefaultID, includeDeliveryCommitment);
                Events.ExecuteOnErrorCreateShipmentV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateShipmentV2ApiResponse"/>
        /// </summary>
        public partial class CreateShipmentV2ApiResponse : com.pitneybowes.api360.Client.ApiResponse, ICreateShipmentV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateShipmentV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateShipmentV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateShipmentV2ApiResponse(ILogger<CreateShipmentV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.CreateShipmentV2200Response Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.CreateShipmentV2200Response>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.CreateShipmentV2200Response result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDownloadBpodFiles(ref Option<string> xPBDeveloperPartnerID, ref Option<string> startDate, ref Option<string> endDate, Option<BPODDownloadRequest> body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xPBDeveloperPartnerID"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateDownloadBpodFiles(Option<string> xPBDeveloperPartnerID, Option<string> startDate, Option<string> endDate, Option<BPODDownloadRequest> body)
        {
            if (xPBDeveloperPartnerID.IsSet && xPBDeveloperPartnerID.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerID));

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate));

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate));

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="body"></param>
        private void AfterDownloadBpodFilesDefaultImplementation(IDownloadBpodFilesApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerID, Option<string> startDate, Option<string> endDate, Option<BPODDownloadRequest> body)
        {
            bool suppressDefaultLog = false;
            AfterDownloadBpodFiles(ref suppressDefaultLog, apiResponseLocalVar, xPBDeveloperPartnerID, startDate, endDate, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="body"></param>
        partial void AfterDownloadBpodFiles(ref bool suppressDefaultLog, IDownloadBpodFilesApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerID, Option<string> startDate, Option<string> endDate, Option<BPODDownloadRequest> body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="body"></param>
        private void OnErrorDownloadBpodFilesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerID, Option<string> startDate, Option<string> endDate, Option<BPODDownloadRequest> body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDownloadBpodFiles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xPBDeveloperPartnerID, startDate, endDate, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="body"></param>
        partial void OnErrorDownloadBpodFiles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerID, Option<string> startDate, Option<string> endDate, Option<BPODDownloadRequest> body);

        /// <summary>
        /// Download BPOD Files This API operation is used to download bulk of ERR (*Electronic Return Receipt*) - POD (*Proof of Delivery*) files, which are specific to USPS carrier. &lt;br /&gt;   User can download BPOD (*Bulk Proof of Delivery*) files either using *Shipment IDs* or *Date Range*.    If user wants to check records based on dates and download BPOD files accordingly, then *Start Date* and *End Date* need to be passed in the request body as filter. Else *Shipment IDs* will be used as default value when user does not provide *DateRange* filter. &lt;br /&gt;   User is restricted to download 1000 BPOD files as max limit. 
        /// </summary>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="startDate">The BPOD files to be downloaded from which Date is the startDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="endDate">The BPOD files to be downloaded till which Date is the endDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="body">This is the request body to download BPOD files. Request body supports max of 1000 ShipmentIDs in a request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadBpodFilesApiResponse"/>&gt;</returns>
        public async Task<IDownloadBpodFilesApiResponse> DownloadBpodFilesOrDefaultAsync(Option<string> xPBDeveloperPartnerID = default, Option<string> startDate = default, Option<string> endDate = default, Option<BPODDownloadRequest> body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DownloadBpodFilesAsync(xPBDeveloperPartnerID, startDate, endDate, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Download BPOD Files This API operation is used to download bulk of ERR (*Electronic Return Receipt*) - POD (*Proof of Delivery*) files, which are specific to USPS carrier. &lt;br /&gt;   User can download BPOD (*Bulk Proof of Delivery*) files either using *Shipment IDs* or *Date Range*.    If user wants to check records based on dates and download BPOD files accordingly, then *Start Date* and *End Date* need to be passed in the request body as filter. Else *Shipment IDs* will be used as default value when user does not provide *DateRange* filter. &lt;br /&gt;   User is restricted to download 1000 BPOD files as max limit. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="startDate">The BPOD files to be downloaded from which Date is the startDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="endDate">The BPOD files to be downloaded till which Date is the endDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="body">This is the request body to download BPOD files. Request body supports max of 1000 ShipmentIDs in a request. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadBpodFilesApiResponse"/>&gt;</returns>
        public async Task<IDownloadBpodFilesApiResponse> DownloadBpodFilesAsync(Option<string> xPBDeveloperPartnerID = default, Option<string> startDate = default, Option<string> endDate = default, Option<BPODDownloadRequest> body = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDownloadBpodFiles(xPBDeveloperPartnerID, startDate, endDate, body);

                FormatDownloadBpodFiles(ref xPBDeveloperPartnerID, ref startDate, ref endDate, body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/err/shipments/bpod"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/err/shipments/bpod");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (startDate.IsSet)
                        parseQueryStringLocalVar["startDate"] = ClientUtils.ParameterToString(startDate.Value);

                    if (endDate.IsSet)
                        parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xPBDeveloperPartnerID.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-ID", ClientUtils.ParameterToString(xPBDeveloperPartnerID.Value));

                    if (body.IsSet)
                        httpRequestMessageLocalVar.Content = (body.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DownloadBpodFilesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DownloadBpodFilesApiResponse>();

                        DownloadBpodFilesApiResponse apiResponseLocalVar = new DownloadBpodFilesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/err/shipments/bpod", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDownloadBpodFilesDefaultImplementation(apiResponseLocalVar, xPBDeveloperPartnerID, startDate, endDate, body);

                        Events.ExecuteOnDownloadBpodFiles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDownloadBpodFilesDefaultImplementation(e, "/api/v1/err/shipments/bpod", uriBuilderLocalVar.Path, xPBDeveloperPartnerID, startDate, endDate, body);
                Events.ExecuteOnErrorDownloadBpodFiles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DownloadBpodFilesApiResponse"/>
        /// </summary>
        public partial class DownloadBpodFilesApiResponse : com.pitneybowes.api360.Client.ApiResponse, IDownloadBpodFilesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DownloadBpodFilesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DownloadBpodFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DownloadBpodFilesApiResponse(ILogger<DownloadBpodFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.BPODDownloadResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.BPODDownloadResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.BPODDownloadResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllShipments(ref Option<string> xPBDeveloperPartnerId, ref Option<string> startDate, ref Option<string> endDate, ref Option<string> page, ref Option<string> size);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <returns></returns>
        private void ValidateGetAllShipments(Option<string> xPBDeveloperPartnerId, Option<string> startDate, Option<string> endDate, Option<string> page, Option<string> size)
        {
            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate));

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate));

            if (page.IsSet && page.Value == null)
                throw new ArgumentNullException(nameof(page));

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        private void AfterGetAllShipmentsDefaultImplementation(IGetAllShipmentsApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> startDate, Option<string> endDate, Option<string> page, Option<string> size)
        {
            bool suppressDefaultLog = false;
            AfterGetAllShipments(ref suppressDefaultLog, apiResponseLocalVar, xPBDeveloperPartnerId, startDate, endDate, page, size);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        partial void AfterGetAllShipments(ref bool suppressDefaultLog, IGetAllShipmentsApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> startDate, Option<string> endDate, Option<string> page, Option<string> size);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        private void OnErrorGetAllShipmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> startDate, Option<string> endDate, Option<string> page, Option<string> size)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllShipments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xPBDeveloperPartnerId, startDate, endDate, page, size);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="page"></param>
        /// <param name="size"></param>
        partial void OnErrorGetAllShipments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> startDate, Option<string> endDate, Option<string> page, Option<string> size);

        /// <summary>
        /// Get All Shipments The operation fetches all created Shipments. If query parameters are not provided, it will default endDate as current date, page as 1 and size as 10.
        /// </summary>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="startDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe start date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="endDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe end date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="page">The page of the Shipments search result list. (optional)</param>
        /// <param name="size">The size/count of the searched result list. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllShipmentsApiResponse"/>&gt;</returns>
        public async Task<IGetAllShipmentsApiResponse> GetAllShipmentsOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> startDate = default, Option<string> endDate = default, Option<string> page = default, Option<string> size = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllShipmentsAsync(xPBDeveloperPartnerId, startDate, endDate, page, size, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get All Shipments The operation fetches all created Shipments. If query parameters are not provided, it will default endDate as current date, page as 1 and size as 10.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="startDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe start date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="endDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe end date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="page">The page of the Shipments search result list. (optional)</param>
        /// <param name="size">The size/count of the searched result list. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllShipmentsApiResponse"/>&gt;</returns>
        public async Task<IGetAllShipmentsApiResponse> GetAllShipmentsAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> startDate = default, Option<string> endDate = default, Option<string> page = default, Option<string> size = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAllShipments(xPBDeveloperPartnerId, startDate, endDate, page, size);

                FormatGetAllShipments(ref xPBDeveloperPartnerId, ref startDate, ref endDate, ref page, ref size);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/shipments"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/shipments");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (startDate.IsSet)
                        parseQueryStringLocalVar["startDate"] = ClientUtils.ParameterToString(startDate.Value);

                    if (endDate.IsSet)
                        parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllShipmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllShipmentsApiResponse>();

                        GetAllShipmentsApiResponse apiResponseLocalVar = new GetAllShipmentsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/shipments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllShipmentsDefaultImplementation(apiResponseLocalVar, xPBDeveloperPartnerId, startDate, endDate, page, size);

                        Events.ExecuteOnGetAllShipments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllShipmentsDefaultImplementation(e, "/api/v1/shipments", uriBuilderLocalVar.Path, xPBDeveloperPartnerId, startDate, endDate, page, size);
                Events.ExecuteOnErrorGetAllShipments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllShipmentsApiResponse"/>
        /// </summary>
        public partial class GetAllShipmentsApiResponse : com.pitneybowes.api360.Client.ApiResponse, IGetAllShipmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllShipmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllShipmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllShipmentsApiResponse(ILogger<GetAllShipmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.GetAllShipments Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.GetAllShipments>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.GetAllShipments result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCarrierAccount(ref Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <returns></returns>
        private void ValidateGetCarrierAccount(Option<string> xPBDeveloperPartnerId)
        {
            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void AfterGetCarrierAccountDefaultImplementation(IGetCarrierAccountApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLog = false;
            AfterGetCarrierAccount(ref suppressDefaultLog, apiResponseLocalVar, xPBDeveloperPartnerId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void AfterGetCarrierAccount(ref bool suppressDefaultLog, IGetCarrierAccountApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void OnErrorGetCarrierAccountDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCarrierAccount(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xPBDeveloperPartnerId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void OnErrorGetCarrierAccount(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Get Carrier Accounts The operation retrieves onboarded Carriers with their Carrier Account IDs which uniquely identify multiple accounts of same carrier.
        /// </summary>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCarrierAccountApiResponse"/>&gt;</returns>
        public async Task<IGetCarrierAccountApiResponse> GetCarrierAccountOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCarrierAccountAsync(xPBDeveloperPartnerId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Carrier Accounts The operation retrieves onboarded Carriers with their Carrier Account IDs which uniquely identify multiple accounts of same carrier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCarrierAccountApiResponse"/>&gt;</returns>
        public async Task<IGetCarrierAccountApiResponse> GetCarrierAccountAsync(Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCarrierAccount(xPBDeveloperPartnerId);

                FormatGetCarrierAccount(ref xPBDeveloperPartnerId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/carrierAccounts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/carrierAccounts");

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetCarrierAccountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCarrierAccountApiResponse>();

                        GetCarrierAccountApiResponse apiResponseLocalVar = new GetCarrierAccountApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/carrierAccounts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCarrierAccountDefaultImplementation(apiResponseLocalVar, xPBDeveloperPartnerId);

                        Events.ExecuteOnGetCarrierAccount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCarrierAccountDefaultImplementation(e, "/api/v1/carrierAccounts", uriBuilderLocalVar.Path, xPBDeveloperPartnerId);
                Events.ExecuteOnErrorGetCarrierAccount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCarrierAccountApiResponse"/>
        /// </summary>
        public partial class GetCarrierAccountApiResponse : com.pitneybowes.api360.Client.ApiResponse, IGetCarrierAccountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCarrierAccountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCarrierAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCarrierAccountApiResponse(ILogger<GetCarrierAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.GetCarrierAccount200Response Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.GetCarrierAccount200Response>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.GetCarrierAccount200Response result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCarriers(ref Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <returns></returns>
        private void ValidateGetCarriers(Option<string> xPBDeveloperPartnerId)
        {
            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void AfterGetCarriersDefaultImplementation(IGetCarriersApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLog = false;
            AfterGetCarriers(ref suppressDefaultLog, apiResponseLocalVar, xPBDeveloperPartnerId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void AfterGetCarriers(ref bool suppressDefaultLog, IGetCarriersApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void OnErrorGetCarriersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCarriers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xPBDeveloperPartnerId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void OnErrorGetCarriers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Get Carriers The operation fetches all supported carriers. This service is used to get list of supported carriers and their properties.
        /// </summary>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCarriersApiResponse"/>&gt;</returns>
        public async Task<IGetCarriersApiResponse> GetCarriersOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCarriersAsync(xPBDeveloperPartnerId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Carriers The operation fetches all supported carriers. This service is used to get list of supported carriers and their properties.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCarriersApiResponse"/>&gt;</returns>
        public async Task<IGetCarriersApiResponse> GetCarriersAsync(Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCarriers(xPBDeveloperPartnerId);

                FormatGetCarriers(ref xPBDeveloperPartnerId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/carriers"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/carriers");

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetCarriersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCarriersApiResponse>();

                        GetCarriersApiResponse apiResponseLocalVar = new GetCarriersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/carriers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCarriersDefaultImplementation(apiResponseLocalVar, xPBDeveloperPartnerId);

                        Events.ExecuteOnGetCarriers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCarriersDefaultImplementation(e, "/api/v1/carriers", uriBuilderLocalVar.Path, xPBDeveloperPartnerId);
                Events.ExecuteOnErrorGetCarriers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCarriersApiResponse"/>
        /// </summary>
        public partial class GetCarriersApiResponse : com.pitneybowes.api360.Client.ApiResponse, IGetCarriersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCarriersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCarriersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCarriersApiResponse(ILogger<GetCarriersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.Carriers Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.Carriers>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.Carriers result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCountries(ref Option<string> xPBDeveloperPartnerId, ref Option<string> carrier, ref Option<string> originCountryCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <returns></returns>
        private void ValidateGetCountries(Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode)
        {
            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (carrier.IsSet && carrier.Value == null)
                throw new ArgumentNullException(nameof(carrier));

            if (originCountryCode.IsSet && originCountryCode.Value == null)
                throw new ArgumentNullException(nameof(originCountryCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        private void AfterGetCountriesDefaultImplementation(IGetCountriesApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode)
        {
            bool suppressDefaultLog = false;
            AfterGetCountries(ref suppressDefaultLog, apiResponseLocalVar, xPBDeveloperPartnerId, carrier, originCountryCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        partial void AfterGetCountries(ref bool suppressDefaultLog, IGetCountriesApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        private void OnErrorGetCountriesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCountries(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xPBDeveloperPartnerId, carrier, originCountryCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        partial void OnErrorGetCountries(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode);

        /// <summary>
        /// Get Countries The operation fetches list of supported destination countries for a provided carrier and origin country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier and &#x60;US&#x60; as origin country.
        /// </summary>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">The carrierID, a unique identifier given to an individual carrier. (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCountriesApiResponse"/>&gt;</returns>
        public async Task<IGetCountriesApiResponse> GetCountriesOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> carrier = default, Option<string> originCountryCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCountriesAsync(xPBDeveloperPartnerId, carrier, originCountryCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Countries The operation fetches list of supported destination countries for a provided carrier and origin country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier and &#x60;US&#x60; as origin country.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">The carrierID, a unique identifier given to an individual carrier. (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCountriesApiResponse"/>&gt;</returns>
        public async Task<IGetCountriesApiResponse> GetCountriesAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> carrier = default, Option<string> originCountryCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCountries(xPBDeveloperPartnerId, carrier, originCountryCode);

                FormatGetCountries(ref xPBDeveloperPartnerId, ref carrier, ref originCountryCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/countries"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/countries");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (carrier.IsSet)
                        parseQueryStringLocalVar["carrier"] = ClientUtils.ParameterToString(carrier.Value);

                    if (originCountryCode.IsSet)
                        parseQueryStringLocalVar["originCountryCode"] = ClientUtils.ParameterToString(originCountryCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetCountriesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCountriesApiResponse>();

                        GetCountriesApiResponse apiResponseLocalVar = new GetCountriesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/countries", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCountriesDefaultImplementation(apiResponseLocalVar, xPBDeveloperPartnerId, carrier, originCountryCode);

                        Events.ExecuteOnGetCountries(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCountriesDefaultImplementation(e, "/api/v1/countries", uriBuilderLocalVar.Path, xPBDeveloperPartnerId, carrier, originCountryCode);
                Events.ExecuteOnErrorGetCountries(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCountriesApiResponse"/>
        /// </summary>
        public partial class GetCountriesApiResponse : com.pitneybowes.api360.Client.ApiResponse, IGetCountriesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCountriesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCountriesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCountriesApiResponse(ILogger<GetCountriesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.Countries Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.Countries>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.Countries result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetParcelTypes(ref Option<string> xPBDeveloperPartnerId, ref Option<string> carrier, ref Option<string> originCountryCode, ref Option<string> destinationCountryCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        /// <returns></returns>
        private void ValidateGetParcelTypes(Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode)
        {
            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (carrier.IsSet && carrier.Value == null)
                throw new ArgumentNullException(nameof(carrier));

            if (originCountryCode.IsSet && originCountryCode.Value == null)
                throw new ArgumentNullException(nameof(originCountryCode));

            if (destinationCountryCode.IsSet && destinationCountryCode.Value == null)
                throw new ArgumentNullException(nameof(destinationCountryCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        private void AfterGetParcelTypesDefaultImplementation(IGetParcelTypesApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode)
        {
            bool suppressDefaultLog = false;
            AfterGetParcelTypes(ref suppressDefaultLog, apiResponseLocalVar, xPBDeveloperPartnerId, carrier, originCountryCode, destinationCountryCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        partial void AfterGetParcelTypes(ref bool suppressDefaultLog, IGetParcelTypesApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        private void OnErrorGetParcelTypesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetParcelTypes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xPBDeveloperPartnerId, carrier, originCountryCode, destinationCountryCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        partial void OnErrorGetParcelTypes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode);

        /// <summary>
        /// Get Parcel Types The operation fetches Parcel Types based on the provided carrier, origin county, and the destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </summary>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">The CarrierID, a unique identifier given to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">The Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetParcelTypesApiResponse"/>&gt;</returns>
        public async Task<IGetParcelTypesApiResponse> GetParcelTypesOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> carrier = default, Option<string> originCountryCode = default, Option<string> destinationCountryCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetParcelTypesAsync(xPBDeveloperPartnerId, carrier, originCountryCode, destinationCountryCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Parcel Types The operation fetches Parcel Types based on the provided carrier, origin county, and the destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">The CarrierID, a unique identifier given to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">The Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetParcelTypesApiResponse"/>&gt;</returns>
        public async Task<IGetParcelTypesApiResponse> GetParcelTypesAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> carrier = default, Option<string> originCountryCode = default, Option<string> destinationCountryCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetParcelTypes(xPBDeveloperPartnerId, carrier, originCountryCode, destinationCountryCode);

                FormatGetParcelTypes(ref xPBDeveloperPartnerId, ref carrier, ref originCountryCode, ref destinationCountryCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/parcelTypes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/parcelTypes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (carrier.IsSet)
                        parseQueryStringLocalVar["carrier"] = ClientUtils.ParameterToString(carrier.Value);

                    if (originCountryCode.IsSet)
                        parseQueryStringLocalVar["originCountryCode"] = ClientUtils.ParameterToString(originCountryCode.Value);

                    if (destinationCountryCode.IsSet)
                        parseQueryStringLocalVar["destinationCountryCode"] = ClientUtils.ParameterToString(destinationCountryCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetParcelTypesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetParcelTypesApiResponse>();

                        GetParcelTypesApiResponse apiResponseLocalVar = new GetParcelTypesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/parcelTypes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetParcelTypesDefaultImplementation(apiResponseLocalVar, xPBDeveloperPartnerId, carrier, originCountryCode, destinationCountryCode);

                        Events.ExecuteOnGetParcelTypes(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetParcelTypesDefaultImplementation(e, "/api/v1/parcelTypes", uriBuilderLocalVar.Path, xPBDeveloperPartnerId, carrier, originCountryCode, destinationCountryCode);
                Events.ExecuteOnErrorGetParcelTypes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetParcelTypesApiResponse"/>
        /// </summary>
        public partial class GetParcelTypesApiResponse : com.pitneybowes.api360.Client.ApiResponse, IGetParcelTypesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetParcelTypesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetParcelTypesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetParcelTypesApiResponse(ILogger<GetParcelTypesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ParcelTypes Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ParcelTypes>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.ParcelTypes result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetServices(ref Option<string> xPBDeveloperPartnerId, ref Option<string> carrier, ref Option<string> originCountryCode, ref Option<string> destinationCountryCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        /// <returns></returns>
        private void ValidateGetServices(Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode)
        {
            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (carrier.IsSet && carrier.Value == null)
                throw new ArgumentNullException(nameof(carrier));

            if (originCountryCode.IsSet && originCountryCode.Value == null)
                throw new ArgumentNullException(nameof(originCountryCode));

            if (destinationCountryCode.IsSet && destinationCountryCode.Value == null)
                throw new ArgumentNullException(nameof(destinationCountryCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        private void AfterGetServicesDefaultImplementation(IGetServicesApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode)
        {
            bool suppressDefaultLog = false;
            AfterGetServices(ref suppressDefaultLog, apiResponseLocalVar, xPBDeveloperPartnerId, carrier, originCountryCode, destinationCountryCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        partial void AfterGetServices(ref bool suppressDefaultLog, IGetServicesApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        private void OnErrorGetServicesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetServices(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xPBDeveloperPartnerId, carrier, originCountryCode, destinationCountryCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        partial void OnErrorGetServices(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode);

        /// <summary>
        /// Get Services The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </summary>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">The CarrierID, a unique identifier provided to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">The Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetServicesApiResponse"/>&gt;</returns>
        public async Task<IGetServicesApiResponse> GetServicesOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> carrier = default, Option<string> originCountryCode = default, Option<string> destinationCountryCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetServicesAsync(xPBDeveloperPartnerId, carrier, originCountryCode, destinationCountryCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Services The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">The CarrierID, a unique identifier provided to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">The Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetServicesApiResponse"/>&gt;</returns>
        public async Task<IGetServicesApiResponse> GetServicesAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> carrier = default, Option<string> originCountryCode = default, Option<string> destinationCountryCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetServices(xPBDeveloperPartnerId, carrier, originCountryCode, destinationCountryCode);

                FormatGetServices(ref xPBDeveloperPartnerId, ref carrier, ref originCountryCode, ref destinationCountryCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/services"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/services");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (carrier.IsSet)
                        parseQueryStringLocalVar["carrier"] = ClientUtils.ParameterToString(carrier.Value);

                    if (originCountryCode.IsSet)
                        parseQueryStringLocalVar["originCountryCode"] = ClientUtils.ParameterToString(originCountryCode.Value);

                    if (destinationCountryCode.IsSet)
                        parseQueryStringLocalVar["destinationCountryCode"] = ClientUtils.ParameterToString(destinationCountryCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetServicesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetServicesApiResponse>();

                        GetServicesApiResponse apiResponseLocalVar = new GetServicesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/services", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetServicesDefaultImplementation(apiResponseLocalVar, xPBDeveloperPartnerId, carrier, originCountryCode, destinationCountryCode);

                        Events.ExecuteOnGetServices(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetServicesDefaultImplementation(e, "/api/v1/services", uriBuilderLocalVar.Path, xPBDeveloperPartnerId, carrier, originCountryCode, destinationCountryCode);
                Events.ExecuteOnErrorGetServices(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetServicesApiResponse"/>
        /// </summary>
        public partial class GetServicesApiResponse : com.pitneybowes.api360.Client.ApiResponse, IGetServicesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetServicesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetServicesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetServicesApiResponse(ILogger<GetServicesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.Services Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.Services>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.Services result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSignatureImageERR(ref string shipmentId, ref Option<string> xPBDeveloperPartnerID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        /// <returns></returns>
        private void ValidateGetSignatureImageERR(string shipmentId, Option<string> xPBDeveloperPartnerID)
        {
            if (shipmentId == null)
                throw new ArgumentNullException(nameof(shipmentId));

            if (xPBDeveloperPartnerID.IsSet && xPBDeveloperPartnerID.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        private void AfterGetSignatureImageERRDefaultImplementation(IGetSignatureImageERRApiResponse apiResponseLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerID)
        {
            bool suppressDefaultLog = false;
            AfterGetSignatureImageERR(ref suppressDefaultLog, apiResponseLocalVar, shipmentId, xPBDeveloperPartnerID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        partial void AfterGetSignatureImageERR(ref bool suppressDefaultLog, IGetSignatureImageERRApiResponse apiResponseLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        private void OnErrorGetSignatureImageERRDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSignatureImageERR(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, shipmentId, xPBDeveloperPartnerID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerID"></param>
        partial void OnErrorGetSignatureImageERR(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerID);

        /// <summary>
        /// Signature Image ERR This API provides a downloadable link containing the signature image for a specific ERR (Electronic Return Receipt) shipment. This signature image serves as Proof of Delivery (POD). &lt;br&gt; **What is Proof of Delivery (POD)?**&lt;br&gt; Proof of Delivery is a document or file that acts as evidence of successful shipment delivery. This file contains a digital copy of the recipient&#39;s signature, provided as a downloadable link or URL.  **Key Considerations:** - It provides the recipient&#39;s signature image captured at the time of delivery as proof that the shipment was successfully delivered. - The API provides the recipient&#39;s signature image as Proof of Delivery (POD) to confirm successful shipment delivery. - A request requires the mandatory &#x60;shipmentId&#x60;. - If a signature is captured by the carrier, the API returns it as a downloadable link of the PDF in the &#x60;signatureFileURL&#x60; field. - The &#x60;signatureFileURL&#x60; provided in the API response expires after 60 minutes. - If no signature is available, the API returns an error. - Signature Image ERR is supported for USPS carrier only. 
        /// </summary>
        /// <param name="shipmentId">Shipment ID is a unique identifier for an individual shipment.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSignatureImageERRApiResponse"/>&gt;</returns>
        public async Task<IGetSignatureImageERRApiResponse> GetSignatureImageERROrDefaultAsync(string shipmentId, Option<string> xPBDeveloperPartnerID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSignatureImageERRAsync(shipmentId, xPBDeveloperPartnerID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Signature Image ERR This API provides a downloadable link containing the signature image for a specific ERR (Electronic Return Receipt) shipment. This signature image serves as Proof of Delivery (POD). &lt;br&gt; **What is Proof of Delivery (POD)?**&lt;br&gt; Proof of Delivery is a document or file that acts as evidence of successful shipment delivery. This file contains a digital copy of the recipient&#39;s signature, provided as a downloadable link or URL.  **Key Considerations:** - It provides the recipient&#39;s signature image captured at the time of delivery as proof that the shipment was successfully delivered. - The API provides the recipient&#39;s signature image as Proof of Delivery (POD) to confirm successful shipment delivery. - A request requires the mandatory &#x60;shipmentId&#x60;. - If a signature is captured by the carrier, the API returns it as a downloadable link of the PDF in the &#x60;signatureFileURL&#x60; field. - The &#x60;signatureFileURL&#x60; provided in the API response expires after 60 minutes. - If no signature is available, the API returns an error. - Signature Image ERR is supported for USPS carrier only. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID is a unique identifier for an individual shipment.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSignatureImageERRApiResponse"/>&gt;</returns>
        public async Task<IGetSignatureImageERRApiResponse> GetSignatureImageERRAsync(string shipmentId, Option<string> xPBDeveloperPartnerID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSignatureImageERR(shipmentId, xPBDeveloperPartnerID);

                FormatGetSignatureImageERR(ref shipmentId, ref xPBDeveloperPartnerID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/err/shipments/{shipmentId}/signaturefile"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/err/shipments/{shipmentId}/signaturefile");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshipmentId%7D", Uri.EscapeDataString(shipmentId.ToString()));

                    if (xPBDeveloperPartnerID.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-ID", ClientUtils.ParameterToString(xPBDeveloperPartnerID.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetSignatureImageERRApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSignatureImageERRApiResponse>();

                        GetSignatureImageERRApiResponse apiResponseLocalVar = new GetSignatureImageERRApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/err/shipments/{shipmentId}/signaturefile", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSignatureImageERRDefaultImplementation(apiResponseLocalVar, shipmentId, xPBDeveloperPartnerID);

                        Events.ExecuteOnGetSignatureImageERR(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSignatureImageERRDefaultImplementation(e, "/api/v1/err/shipments/{shipmentId}/signaturefile", uriBuilderLocalVar.Path, shipmentId, xPBDeveloperPartnerID);
                Events.ExecuteOnErrorGetSignatureImageERR(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSignatureImageERRApiResponse"/>
        /// </summary>
        public partial class GetSignatureImageERRApiResponse : com.pitneybowes.api360.Client.ApiResponse, IGetSignatureImageERRApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSignatureImageERRApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSignatureImageERRApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSignatureImageERRApiResponse(ILogger<GetSignatureImageERRApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.SignatureFileResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.SignatureFileResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.SignatureFileResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSpecialServices(ref Option<string> xPBDeveloperPartnerId, ref Option<string> service, ref Option<string> parcel, ref Option<string> carrier, ref Option<string> originCountryCode, ref Option<string> destinationCountryCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="service"></param>
        /// <param name="parcel"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        /// <returns></returns>
        private void ValidateGetSpecialServices(Option<string> xPBDeveloperPartnerId, Option<string> service, Option<string> parcel, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode)
        {
            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (service.IsSet && service.Value == null)
                throw new ArgumentNullException(nameof(service));

            if (parcel.IsSet && parcel.Value == null)
                throw new ArgumentNullException(nameof(parcel));

            if (carrier.IsSet && carrier.Value == null)
                throw new ArgumentNullException(nameof(carrier));

            if (originCountryCode.IsSet && originCountryCode.Value == null)
                throw new ArgumentNullException(nameof(originCountryCode));

            if (destinationCountryCode.IsSet && destinationCountryCode.Value == null)
                throw new ArgumentNullException(nameof(destinationCountryCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="service"></param>
        /// <param name="parcel"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        private void AfterGetSpecialServicesDefaultImplementation(IGetSpecialServicesApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> service, Option<string> parcel, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode)
        {
            bool suppressDefaultLog = false;
            AfterGetSpecialServices(ref suppressDefaultLog, apiResponseLocalVar, xPBDeveloperPartnerId, service, parcel, carrier, originCountryCode, destinationCountryCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="service"></param>
        /// <param name="parcel"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        partial void AfterGetSpecialServices(ref bool suppressDefaultLog, IGetSpecialServicesApiResponse apiResponseLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> service, Option<string> parcel, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="service"></param>
        /// <param name="parcel"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        private void OnErrorGetSpecialServicesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> service, Option<string> parcel, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSpecialServices(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, xPBDeveloperPartnerId, service, parcel, carrier, originCountryCode, destinationCountryCode);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="service"></param>
        /// <param name="parcel"></param>
        /// <param name="carrier"></param>
        /// <param name="originCountryCode"></param>
        /// <param name="destinationCountryCode"></param>
        partial void OnErrorGetSpecialServices(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> xPBDeveloperPartnerId, Option<string> service, Option<string> parcel, Option<string> carrier, Option<string> originCountryCode, Option<string> destinationCountryCode);

        /// <summary>
        /// Get Special Services The operation fetches Special Services for a given carrier, service, origin country, and the destination country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin, and destination country and will show for all service and parcel types
        /// </summary>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="service">The serviceId. It can be referred from response of &#x60;Get Services&#x60; API (optional)</param>
        /// <param name="parcel">The parcel Id, a unique identifier named to individual package. It can be referred from response of &#x60;Get Parcel Types&#x60; API (optional)</param>
        /// <param name="carrier">The CarrierID, a unique identifier given to an individual carrier. It can be referred from response of &#x60;Get Carriers&#x60; API (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">The Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSpecialServicesApiResponse"/>&gt;</returns>
        public async Task<IGetSpecialServicesApiResponse> GetSpecialServicesOrDefaultAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> service = default, Option<string> parcel = default, Option<string> carrier = default, Option<string> originCountryCode = default, Option<string> destinationCountryCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSpecialServicesAsync(xPBDeveloperPartnerId, service, parcel, carrier, originCountryCode, destinationCountryCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Special Services The operation fetches Special Services for a given carrier, service, origin country, and the destination country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin, and destination country and will show for all service and parcel types
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerId">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="service">The serviceId. It can be referred from response of &#x60;Get Services&#x60; API (optional)</param>
        /// <param name="parcel">The parcel Id, a unique identifier named to individual package. It can be referred from response of &#x60;Get Parcel Types&#x60; API (optional)</param>
        /// <param name="carrier">The CarrierID, a unique identifier given to an individual carrier. It can be referred from response of &#x60;Get Carriers&#x60; API (optional)</param>
        /// <param name="originCountryCode">The Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">The Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSpecialServicesApiResponse"/>&gt;</returns>
        public async Task<IGetSpecialServicesApiResponse> GetSpecialServicesAsync(Option<string> xPBDeveloperPartnerId = default, Option<string> service = default, Option<string> parcel = default, Option<string> carrier = default, Option<string> originCountryCode = default, Option<string> destinationCountryCode = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSpecialServices(xPBDeveloperPartnerId, service, parcel, carrier, originCountryCode, destinationCountryCode);

                FormatGetSpecialServices(ref xPBDeveloperPartnerId, ref service, ref parcel, ref carrier, ref originCountryCode, ref destinationCountryCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/specialServices"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/specialServices");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (service.IsSet)
                        parseQueryStringLocalVar["service"] = ClientUtils.ParameterToString(service.Value);

                    if (parcel.IsSet)
                        parseQueryStringLocalVar["parcel"] = ClientUtils.ParameterToString(parcel.Value);

                    if (carrier.IsSet)
                        parseQueryStringLocalVar["carrier"] = ClientUtils.ParameterToString(carrier.Value);

                    if (originCountryCode.IsSet)
                        parseQueryStringLocalVar["originCountryCode"] = ClientUtils.ParameterToString(originCountryCode.Value);

                    if (destinationCountryCode.IsSet)
                        parseQueryStringLocalVar["destinationCountryCode"] = ClientUtils.ParameterToString(destinationCountryCode.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetSpecialServicesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSpecialServicesApiResponse>();

                        GetSpecialServicesApiResponse apiResponseLocalVar = new GetSpecialServicesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/specialServices", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSpecialServicesDefaultImplementation(apiResponseLocalVar, xPBDeveloperPartnerId, service, parcel, carrier, originCountryCode, destinationCountryCode);

                        Events.ExecuteOnGetSpecialServices(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSpecialServicesDefaultImplementation(e, "/api/v1/specialServices", uriBuilderLocalVar.Path, xPBDeveloperPartnerId, service, parcel, carrier, originCountryCode, destinationCountryCode);
                Events.ExecuteOnErrorGetSpecialServices(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSpecialServicesApiResponse"/>
        /// </summary>
        public partial class GetSpecialServicesApiResponse : com.pitneybowes.api360.Client.ApiResponse, IGetSpecialServicesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSpecialServicesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSpecialServicesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSpecialServicesApiResponse(ILogger<GetSpecialServicesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.SpecialServices Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.SpecialServices>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.SpecialServices result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRateShipment(RateShipmentRequest rateShipmentRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="rateShipmentRequest"></param>
        /// <returns></returns>
        private void ValidateRateShipment(RateShipmentRequest rateShipmentRequest)
        {
            if (rateShipmentRequest == null)
                throw new ArgumentNullException(nameof(rateShipmentRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="rateShipmentRequest"></param>
        private void AfterRateShipmentDefaultImplementation(IRateShipmentApiResponse apiResponseLocalVar, RateShipmentRequest rateShipmentRequest)
        {
            bool suppressDefaultLog = false;
            AfterRateShipment(ref suppressDefaultLog, apiResponseLocalVar, rateShipmentRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="rateShipmentRequest"></param>
        partial void AfterRateShipment(ref bool suppressDefaultLog, IRateShipmentApiResponse apiResponseLocalVar, RateShipmentRequest rateShipmentRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="rateShipmentRequest"></param>
        private void OnErrorRateShipmentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, RateShipmentRequest rateShipmentRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRateShipment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, rateShipmentRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="rateShipmentRequest"></param>
        partial void OnErrorRateShipment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, RateShipmentRequest rateShipmentRequest);

        /// <summary>
        /// Rate Shipment This operation generates rate Shop for a specified shipment without generating the labels.
        /// </summary>
        /// <param name="rateShipmentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRateShipmentApiResponse"/>&gt;</returns>
        public async Task<IRateShipmentApiResponse> RateShipmentOrDefaultAsync(RateShipmentRequest rateShipmentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RateShipmentAsync(rateShipmentRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Rate Shipment This operation generates rate Shop for a specified shipment without generating the labels.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="rateShipmentRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRateShipmentApiResponse"/>&gt;</returns>
        public async Task<IRateShipmentApiResponse> RateShipmentAsync(RateShipmentRequest rateShipmentRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRateShipment(rateShipmentRequest);

                FormatRateShipment(rateShipmentRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v2/rates"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v2/rates");

                    httpRequestMessageLocalVar.Content = (rateShipmentRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(rateShipmentRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<RateShipmentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RateShipmentApiResponse>();

                        RateShipmentApiResponse apiResponseLocalVar = new RateShipmentApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v2/rates", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRateShipmentDefaultImplementation(apiResponseLocalVar, rateShipmentRequest);

                        Events.ExecuteOnRateShipment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRateShipmentDefaultImplementation(e, "/api/v2/rates", uriBuilderLocalVar.Path, rateShipmentRequest);
                Events.ExecuteOnErrorRateShipment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RateShipmentApiResponse"/>
        /// </summary>
        public partial class RateShipmentApiResponse : com.pitneybowes.api360.Client.ApiResponse, IRateShipmentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RateShipmentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RateShipmentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RateShipmentApiResponse(ILogger<RateShipmentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.RateShipment200Response Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.RateShipment200Response>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.RateShipment200Response result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReprintShipmentByIdV2(ShipmentReprintV2 shipmentReprintV2, ref Option<string> xPBDeveloperPartnerId, ref Option<string> xPBLocationId, ref Option<string> xPBTransactionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        /// <returns></returns>
        private void ValidateReprintShipmentByIdV2(ShipmentReprintV2 shipmentReprintV2, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            if (shipmentReprintV2 == null)
                throw new ArgumentNullException(nameof(shipmentReprintV2));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));

            if (xPBLocationId.IsSet && xPBLocationId.Value == null)
                throw new ArgumentNullException(nameof(xPBLocationId));

            if (xPBTransactionId.IsSet && xPBTransactionId.Value == null)
                throw new ArgumentNullException(nameof(xPBTransactionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void AfterReprintShipmentByIdV2DefaultImplementation(IReprintShipmentByIdV2ApiResponse apiResponseLocalVar, ShipmentReprintV2 shipmentReprintV2, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLog = false;
            AfterReprintShipmentByIdV2(ref suppressDefaultLog, apiResponseLocalVar, shipmentReprintV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void AfterReprintShipmentByIdV2(ref bool suppressDefaultLog, IReprintShipmentByIdV2ApiResponse apiResponseLocalVar, ShipmentReprintV2 shipmentReprintV2, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        private void OnErrorReprintShipmentByIdV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ShipmentReprintV2 shipmentReprintV2, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReprintShipmentByIdV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, shipmentReprintV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <param name="xPBLocationId"></param>
        /// <param name="xPBTransactionId"></param>
        partial void OnErrorReprintShipmentByIdV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ShipmentReprintV2 shipmentReprintV2, Option<string> xPBDeveloperPartnerId, Option<string> xPBLocationId, Option<string> xPBTransactionId);

        /// <summary>
        /// Reprint Shipment This operation retrieves an existing shipping label associated with a shipment. The API uses the shipmentId returned by the original Create Shipment request. Use this API only if the original shipping label has been lost or damaged. &lt;br&gt;  **Key Considerations**:&lt;br&gt;     - This operation is applicable only if the original shipment was successfully created. It cannot be used if the initial Create Shipment request resulted in no response or encountered an error.    - USPS allows only 1 reprint.    - GoFor does not allow reprint.    - RMG allows 3 reprints.    - All other carriers allow up to 8 reprints.    - Reprints are valid for 24 hours from the time the label was first created.    - Reprinting should only be used when necessary. Excessive reprint attempts are restricted and monitored.    - Follow the [Troubleshooting](/docs/support/troubleshooting/) section in case you are facing any issues creating a shipment. 
        /// </summary>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReprintShipmentByIdV2ApiResponse"/>&gt;</returns>
        public async Task<IReprintShipmentByIdV2ApiResponse> ReprintShipmentByIdV2OrDefaultAsync(ShipmentReprintV2 shipmentReprintV2, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReprintShipmentByIdV2Async(shipmentReprintV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reprint Shipment This operation retrieves an existing shipping label associated with a shipment. The API uses the shipmentId returned by the original Create Shipment request. Use this API only if the original shipping label has been lost or damaged. &lt;br&gt;  **Key Considerations**:&lt;br&gt;     - This operation is applicable only if the original shipment was successfully created. It cannot be used if the initial Create Shipment request resulted in no response or encountered an error.    - USPS allows only 1 reprint.    - GoFor does not allow reprint.    - RMG allows 3 reprints.    - All other carriers allow up to 8 reprints.    - Reprints are valid for 24 hours from the time the label was first created.    - Reprinting should only be used when necessary. Excessive reprint attempts are restricted and monitored.    - Follow the [Troubleshooting](/docs/support/troubleshooting/) section in case you are facing any issues creating a shipment. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentReprintV2"></param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="xPBLocationId">This is the Location ID assigned as per the Developer&#39;s and Partner&#39;s parsed locations, to which all transactions will be billed. &lt;br /&gt; Partner&#39;s location will be used for billing if it is configured, however, in case Partner&#39;s location is not given, then the Developer&#39;s location will be taken. Developer&#39;s location will be the default value. &lt;br /&gt; Additionally, Developers and Partners can use carriers belong to this location only. (optional)</param>
        /// <param name="xPBTransactionId">A unique transaction Id provided by the partner which is used to enable debugging and linking between the client&#39;s transaction and the system. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReprintShipmentByIdV2ApiResponse"/>&gt;</returns>
        public async Task<IReprintShipmentByIdV2ApiResponse> ReprintShipmentByIdV2Async(ShipmentReprintV2 shipmentReprintV2, Option<string> xPBDeveloperPartnerId = default, Option<string> xPBLocationId = default, Option<string> xPBTransactionId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReprintShipmentByIdV2(shipmentReprintV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                FormatReprintShipmentByIdV2(shipmentReprintV2, ref xPBDeveloperPartnerId, ref xPBLocationId, ref xPBTransactionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v2/shipments/reprint"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v2/shipments/reprint");

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    if (xPBLocationId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-LocationId", ClientUtils.ParameterToString(xPBLocationId.Value));

                    if (xPBTransactionId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-TransactionId", ClientUtils.ParameterToString(xPBTransactionId.Value));

                    httpRequestMessageLocalVar.Content = (shipmentReprintV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(shipmentReprintV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ReprintShipmentByIdV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReprintShipmentByIdV2ApiResponse>();

                        ReprintShipmentByIdV2ApiResponse apiResponseLocalVar = new ReprintShipmentByIdV2ApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v2/shipments/reprint", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterReprintShipmentByIdV2DefaultImplementation(apiResponseLocalVar, shipmentReprintV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);

                        Events.ExecuteOnReprintShipmentByIdV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReprintShipmentByIdV2DefaultImplementation(e, "/api/v2/shipments/reprint", uriBuilderLocalVar.Path, shipmentReprintV2, xPBDeveloperPartnerId, xPBLocationId, xPBTransactionId);
                Events.ExecuteOnErrorReprintShipmentByIdV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReprintShipmentByIdV2ApiResponse"/>
        /// </summary>
        public partial class ReprintShipmentByIdV2ApiResponse : com.pitneybowes.api360.Client.ApiResponse, IReprintShipmentByIdV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReprintShipmentByIdV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReprintShipmentByIdV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReprintShipmentByIdV2ApiResponse(ILogger<ReprintShipmentByIdV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ReprintShipmentV2 Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ReprintShipmentV2>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.ReprintShipmentV2 result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public List<NotFoundErrorsInner> NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<List<NotFoundErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out List<NotFoundErrorsInner> result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatShipmentById(ref string shipmentId, ref Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        /// <returns></returns>
        private void ValidateShipmentById(string shipmentId, Option<string> xPBDeveloperPartnerId)
        {
            if (shipmentId == null)
                throw new ArgumentNullException(nameof(shipmentId));

            if (xPBDeveloperPartnerId.IsSet && xPBDeveloperPartnerId.Value == null)
                throw new ArgumentNullException(nameof(xPBDeveloperPartnerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void AfterShipmentByIdDefaultImplementation(IShipmentByIdApiResponse apiResponseLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLog = false;
            AfterShipmentById(ref suppressDefaultLog, apiResponseLocalVar, shipmentId, xPBDeveloperPartnerId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void AfterShipmentById(ref bool suppressDefaultLog, IShipmentByIdApiResponse apiResponseLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        private void OnErrorShipmentByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorShipmentById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, shipmentId, xPBDeveloperPartnerId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shipmentId"></param>
        /// <param name="xPBDeveloperPartnerId"></param>
        partial void OnErrorShipmentById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string shipmentId, Option<string> xPBDeveloperPartnerId);

        /// <summary>
        /// Get Shipment by Id The operation retrieves shipment details using shipmentId.
        /// </summary>
        /// <param name="shipmentId">The shipmentId, a unique identifier for an individual Shipment.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShipmentByIdApiResponse"/>&gt;</returns>
        public async Task<IShipmentByIdApiResponse> ShipmentByIdOrDefaultAsync(string shipmentId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ShipmentByIdAsync(shipmentId, xPBDeveloperPartnerId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Shipment by Id The operation retrieves shipment details using shipmentId.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">The shipmentId, a unique identifier for an individual Shipment.</param>
        /// <param name="xPBDeveloperPartnerId">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field isn&#39;t required. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShipmentByIdApiResponse"/>&gt;</returns>
        public async Task<IShipmentByIdApiResponse> ShipmentByIdAsync(string shipmentId, Option<string> xPBDeveloperPartnerId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateShipmentById(shipmentId, xPBDeveloperPartnerId);

                FormatShipmentById(ref shipmentId, ref xPBDeveloperPartnerId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/shipments/{shipmentId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/shipments/{shipmentId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BshipmentId%7D", Uri.EscapeDataString(shipmentId.ToString()));

                    if (xPBDeveloperPartnerId.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-PB-Developer-Partner-Id", ClientUtils.ParameterToString(xPBDeveloperPartnerId.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ShipmentByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ShipmentByIdApiResponse>();

                        ShipmentByIdApiResponse apiResponseLocalVar = new ShipmentByIdApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/shipments/{shipmentId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterShipmentByIdDefaultImplementation(apiResponseLocalVar, shipmentId, xPBDeveloperPartnerId);

                        Events.ExecuteOnShipmentById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorShipmentByIdDefaultImplementation(e, "/api/v1/shipments/{shipmentId}", uriBuilderLocalVar.Path, shipmentId, xPBDeveloperPartnerId);
                Events.ExecuteOnErrorShipmentById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ShipmentByIdApiResponse"/>
        /// </summary>
        public partial class ShipmentByIdApiResponse : com.pitneybowes.api360.Client.ApiResponse, IShipmentByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ShipmentByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ShipmentByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ShipmentByIdApiResponse(ILogger<ShipmentByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.GetSingleShipment Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.GetSingleShipment>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out com.pitneybowes.api360.Model.GetSingleShipment result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public List<InvalidErrorsInner> BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvalidErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out List<InvalidErrorsInner> result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.UnauthorizedError Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.UnauthorizedError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized(out com.pitneybowes.api360.Model.UnauthorizedError result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public List<NotFoundErrorsInner> NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<List<NotFoundErrorsInner>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out List<NotFoundErrorsInner> result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public com.pitneybowes.api360.Model.ServerError InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<com.pitneybowes.api360.Model.ServerError>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out com.pitneybowes.api360.Model.ServerError result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
