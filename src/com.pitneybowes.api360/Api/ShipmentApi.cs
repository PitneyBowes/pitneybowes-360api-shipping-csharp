/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.pitneybowes.api360.Client;
using com.pitneybowes.api360.Model;

namespace com.pitneybowes.api360.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Shipment
        /// </summary>
        /// <remarks>
        /// This operation cancel/void shipment.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned for the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelShipment</returns>
        CancelShipment CancelShipmentById(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Cancel Shipment
        /// </summary>
        /// <remarks>
        /// This operation cancel/void shipment.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned for the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelShipment</returns>
        ApiResponse<CancelShipment> CancelShipmentByIdWithHttpInfo(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Cancel Stamps ERR
        /// </summary>
        /// <remarks>
        /// This operation cancels (voids) stamps generated for ERR (Electronic Return Receipt).  - User needs to provide *Stamp IDs* to cancel those specific ERR stamps.  - User can download the *Refund Form* having details of generated Postage.  - At once, maximum 1000 stamps can be requested for cancelation. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelStampsResponseERR</returns>
        CancelStampsResponseERR CancelStampsERR(CancelStampsRequestERR cancelStampsRequestERR, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Cancel Stamps ERR
        /// </summary>
        /// <remarks>
        /// This operation cancels (voids) stamps generated for ERR (Electronic Return Receipt).  - User needs to provide *Stamp IDs* to cancel those specific ERR stamps.  - User can download the *Refund Form* having details of generated Postage.  - At once, maximum 1000 stamps can be requested for cancelation. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelStampsResponseERR</returns>
        ApiResponse<CancelStampsResponseERR> CancelStampsERRWithHttpInfo(CancelStampsRequestERR cancelStampsRequestERR, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create Return label shipment
        /// </summary>
        /// <remarks>
        /// This operation creates a return label based on a previous shipment. &lt;br&gt; The return label can be created in two ways:  &lt;br&gt; 1. User need not to provide any details of package, address and service. The API would take all details from the shipmentId mentioned in the path parameter and would swap the address and create return label. However for UPS &#x60;specialServices&#x60; object is required as carrier mandates to provide package description with PRL special service. &lt;br&gt; 2. User can customize the request by passing &#x60;fromAddress&#x60;, &#x60;toAddress&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; in the request itself. &lt;br&gt; Please Note that for UPS it is required to pass &#x60;specialServices&#x60; object with &#x60;PRL&#x60; service id and  input parameters with name as &#x60;RETURN_PKG_DESCRIPTION&#x60;. &lt;br&gt; For FedEx &#x60;specialServices&#x60; object is not required and PRL is added by default while creating return.  If user wishes to provide RMA number, it can be passed in &#x60;specialServices&#x60; object in the request body. &lt;br&gt; Please Note If user provides any information in this request it overrides the information in onward shipment which was created &lt;br&gt; For example if user provides toAddress in the request the return label will get created with recipient as mentioned in toAddress and  if user provides fromAddress in the request, the return label will be created with sender as mentioned in fromAddress
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="returnLabel"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReturnLabelResponse</returns>
        ReturnLabelResponse CreateReturnLabel(string shipmentId, ReturnLabel returnLabel, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create Return label shipment
        /// </summary>
        /// <remarks>
        /// This operation creates a return label based on a previous shipment. &lt;br&gt; The return label can be created in two ways:  &lt;br&gt; 1. User need not to provide any details of package, address and service. The API would take all details from the shipmentId mentioned in the path parameter and would swap the address and create return label. However for UPS &#x60;specialServices&#x60; object is required as carrier mandates to provide package description with PRL special service. &lt;br&gt; 2. User can customize the request by passing &#x60;fromAddress&#x60;, &#x60;toAddress&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; in the request itself. &lt;br&gt; Please Note that for UPS it is required to pass &#x60;specialServices&#x60; object with &#x60;PRL&#x60; service id and  input parameters with name as &#x60;RETURN_PKG_DESCRIPTION&#x60;. &lt;br&gt; For FedEx &#x60;specialServices&#x60; object is not required and PRL is added by default while creating return.  If user wishes to provide RMA number, it can be passed in &#x60;specialServices&#x60; object in the request body. &lt;br&gt; Please Note If user provides any information in this request it overrides the information in onward shipment which was created &lt;br&gt; For example if user provides toAddress in the request the return label will get created with recipient as mentioned in toAddress and  if user provides fromAddress in the request, the return label will be created with sender as mentioned in fromAddress
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="returnLabel"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReturnLabelResponse</returns>
        ApiResponse<ReturnLabelResponse> CreateReturnLabelWithHttpInfo(string shipmentId, ReturnLabel returnLabel, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create Shipment
        /// </summary>
        /// <remarks>
        /// This operation creates a new Shipment or Shipment Label. This is for both Domestic and International.&lt;br&gt; For domestic, Create a shipment requires domestic addresses (within same country)- ToAddress and FromAddress, and  carrier service and special service.&lt;br&gt; While for International, Create a shipment requires international delivery, that is ToAddress must be the different country (and not the same country mentioned in From Address), selected services, special services, and customs information. &lt;br&gt; &lt;br&gt; Note- To create Return shipment using this API- If PRL (return special service) is used, user need to provide sender address (from where return shipment is to be created) in &#x60;fromAddress&#x60; object and recipient address (to where return is to be created) in &#x60;toAddress&#x60; object. System will not swap the address for return in this API. If you want to create return for the already created shipment, you may use &#x60;Create Return Label Shipment&#x60; API. &lt;br&gt; &lt;br&gt; Note: Currently Shipment created from below API gets assigned to the Default location of the subscription.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateShipment200Response</returns>
        CreateShipment200Response CreateShipment(CreateShipmentRequest createShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create Shipment
        /// </summary>
        /// <remarks>
        /// This operation creates a new Shipment or Shipment Label. This is for both Domestic and International.&lt;br&gt; For domestic, Create a shipment requires domestic addresses (within same country)- ToAddress and FromAddress, and  carrier service and special service.&lt;br&gt; While for International, Create a shipment requires international delivery, that is ToAddress must be the different country (and not the same country mentioned in From Address), selected services, special services, and customs information. &lt;br&gt; &lt;br&gt; Note- To create Return shipment using this API- If PRL (return special service) is used, user need to provide sender address (from where return shipment is to be created) in &#x60;fromAddress&#x60; object and recipient address (to where return is to be created) in &#x60;toAddress&#x60; object. System will not swap the address for return in this API. If you want to create return for the already created shipment, you may use &#x60;Create Return Label Shipment&#x60; API. &lt;br&gt; &lt;br&gt; Note: Currently Shipment created from below API gets assigned to the Default location of the subscription.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateShipment200Response</returns>
        ApiResponse<CreateShipment200Response> CreateShipmentWithHttpInfo(CreateShipmentRequest createShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Download BPOD Files
        /// </summary>
        /// <remarks>
        /// This API operation is used to download bulk of ERR (*Electronic Return Receipt*) - POD (*Proof of Delivery*) files, which are specific to USPS carrier. &lt;br /&gt;   User can download BPOD (*Bulk Proof of Delivery*) files either using *Shipment IDs* or *Date Range*.    If user wants to check records based on dates and download BPOD files accordingly, then *Start Date* and *End Date* need to be passed in the request body as filter. Else *Shipment IDs* will be used as default value when user does not provide *DateRange* filter. &lt;br /&gt;   User is restricted to download 1000 BPOD files as max limit. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="startDate">The BPOD files to be downloaded from which Date is the startDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="endDate">The BPOD files to be downloaded till which Date is the endDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="body">This is the request body to download BPOD files. Request body supports max of 1000 ShipmentIDs in a request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BPODDownloadResponse</returns>
        BPODDownloadResponse DownloadBpodFiles(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), BPODDownloadRequest? body = default(BPODDownloadRequest?), int operationIndex = 0);

        /// <summary>
        /// Download BPOD Files
        /// </summary>
        /// <remarks>
        /// This API operation is used to download bulk of ERR (*Electronic Return Receipt*) - POD (*Proof of Delivery*) files, which are specific to USPS carrier. &lt;br /&gt;   User can download BPOD (*Bulk Proof of Delivery*) files either using *Shipment IDs* or *Date Range*.    If user wants to check records based on dates and download BPOD files accordingly, then *Start Date* and *End Date* need to be passed in the request body as filter. Else *Shipment IDs* will be used as default value when user does not provide *DateRange* filter. &lt;br /&gt;   User is restricted to download 1000 BPOD files as max limit. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="startDate">The BPOD files to be downloaded from which Date is the startDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="endDate">The BPOD files to be downloaded till which Date is the endDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="body">This is the request body to download BPOD files. Request body supports max of 1000 ShipmentIDs in a request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BPODDownloadResponse</returns>
        ApiResponse<BPODDownloadResponse> DownloadBpodFilesWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), BPODDownloadRequest? body = default(BPODDownloadRequest?), int operationIndex = 0);
        /// <summary>
        /// Get All Shipments
        /// </summary>
        /// <remarks>
        /// This operation fetches all created Shipments. If query parameters are not provided, it will default endDate as current date, page as 1 and size as 10.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="startDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe start date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="endDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe end date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="page">This indicates the page of the Shipments search result list. (optional)</param>
        /// <param name="size">This indicates the size/count of the searched result list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllShipments</returns>
        GetAllShipments GetAllShipments(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? page = default(string?), string? size = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get All Shipments
        /// </summary>
        /// <remarks>
        /// This operation fetches all created Shipments. If query parameters are not provided, it will default endDate as current date, page as 1 and size as 10.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="startDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe start date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="endDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe end date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="page">This indicates the page of the Shipments search result list. (optional)</param>
        /// <param name="size">This indicates the size/count of the searched result list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllShipments</returns>
        ApiResponse<GetAllShipments> GetAllShipmentsWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? page = default(string?), string? size = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Carrier Accounts
        /// </summary>
        /// <remarks>
        /// This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCarrierAccounts200Response</returns>
        GetCarrierAccounts200Response GetCarrierAccounts(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Carrier Accounts
        /// </summary>
        /// <remarks>
        /// This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCarrierAccounts200Response</returns>
        ApiResponse<GetCarrierAccounts200Response> GetCarrierAccountsWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Carriers
        /// </summary>
        /// <remarks>
        /// This operation fetches all supported carriers. This service is used to get list of supported carriers and their properties.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Carriers</returns>
        Carriers GetCarriers(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Carriers
        /// </summary>
        /// <remarks>
        /// This operation fetches all supported carriers. This service is used to get list of supported carriers and their properties.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Carriers</returns>
        ApiResponse<Carriers> GetCarriersWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Countries
        /// </summary>
        /// <remarks>
        /// This operation fetches list of supported destination countries for a provided carrier and origin country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier and &#x60;US&#x60; as origin country.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the carrierID, a unique identifier given to  an individual carrier. (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CountriesInner&gt;</returns>
        List<CountriesInner> GetCountries(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Countries
        /// </summary>
        /// <remarks>
        /// This operation fetches list of supported destination countries for a provided carrier and origin country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier and &#x60;US&#x60; as origin country.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the carrierID, a unique identifier given to  an individual carrier. (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CountriesInner&gt;</returns>
        ApiResponse<List<CountriesInner>> GetCountriesWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Parcel Types
        /// </summary>
        /// <remarks>
        /// This operation fetches Parcel Types based on the provided carrier, origin county, and the destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ParcelTypesInner&gt;</returns>
        List<ParcelTypesInner> GetParcelTypes(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Parcel Types
        /// </summary>
        /// <remarks>
        /// This operation fetches Parcel Types based on the provided carrier, origin county, and the destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ParcelTypesInner&gt;</returns>
        ApiResponse<List<ParcelTypesInner>> GetParcelTypesWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0);
        /// <summary>
        /// Rate Shop and Get Single Rate
        /// </summary>
        /// <remarks>
        /// This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. If parcelType is not provided, it will default to &#x60;PKG&#x60;. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return rates object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRates200Response</returns>
        GetRates200Response GetRates(GetRatesRequest getRatesRequest, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Rate Shop and Get Single Rate
        /// </summary>
        /// <remarks>
        /// This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. If parcelType is not provided, it will default to &#x60;PKG&#x60;. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return rates object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRates200Response</returns>
        ApiResponse<GetRates200Response> GetRatesWithHttpInfo(GetRatesRequest getRatesRequest, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Services
        /// </summary>
        /// <remarks>
        /// This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier provided to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ServicesInner&gt;</returns>
        List<ServicesInner> GetServices(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Services
        /// </summary>
        /// <remarks>
        /// This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier provided to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ServicesInner&gt;</returns>
        ApiResponse<List<ServicesInner>> GetServicesWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0);
        /// <summary>
        /// Signature Image ERR
        /// </summary>
        /// <remarks>
        /// This operation provides a downloadable link which consists of a signature image for specific ERR (Electronic Return Receipt) shipment, and this is known as POD. &lt;br /&gt; Proof of Delivery (POD) is a document or file that shows an evidence of shipment delivery. This file contains the digital copy of recipient&#39;s signature, i.e., the signature image, in the form of downloadable link or URL.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID is a unique identifier for an individual shipment.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SignatureFileResponse</returns>
        SignatureFileResponse GetSignatureImageERR(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Signature Image ERR
        /// </summary>
        /// <remarks>
        /// This operation provides a downloadable link which consists of a signature image for specific ERR (Electronic Return Receipt) shipment, and this is known as POD. &lt;br /&gt; Proof of Delivery (POD) is a document or file that shows an evidence of shipment delivery. This file contains the digital copy of recipient&#39;s signature, i.e., the signature image, in the form of downloadable link or URL.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID is a unique identifier for an individual shipment.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SignatureFileResponse</returns>
        ApiResponse<SignatureFileResponse> GetSignatureImageERRWithHttpInfo(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Special Services
        /// </summary>
        /// <remarks>
        /// This operation fetches Special Services for a given carrier, service, origin country, and the destination country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier,&#x60;US&#x60; as both origin and destination country and would show for all service and parcel types
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="service">This indicates the serviceId. It can be referred from response of &#x60;Get Services&#x60; API (optional)</param>
        /// <param name="parcel">This indicates the parcel Id, a unique identifier named to individual package. It can be referred from response of &#x60;Get Parcel Types&#x60; API (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to  an individual carrier. It can be referred from response of &#x60;Get Carriers&#x60; API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpecialServices</returns>
        SpecialServices GetSpecialServices(string? xPBDeveloperPartnerID = default(string?), string? service = default(string?), string? parcel = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Special Services
        /// </summary>
        /// <remarks>
        /// This operation fetches Special Services for a given carrier, service, origin country, and the destination country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier,&#x60;US&#x60; as both origin and destination country and would show for all service and parcel types
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="service">This indicates the serviceId. It can be referred from response of &#x60;Get Services&#x60; API (optional)</param>
        /// <param name="parcel">This indicates the parcel Id, a unique identifier named to individual package. It can be referred from response of &#x60;Get Parcel Types&#x60; API (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to  an individual carrier. It can be referred from response of &#x60;Get Carriers&#x60; API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpecialServices</returns>
        ApiResponse<SpecialServices> GetSpecialServicesWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? service = default(string?), string? parcel = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0);
        /// <summary>
        /// Reprint Shipment
        /// </summary>
        /// <remarks>
        /// This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned to the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return label layout details and parcel tracking number object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReprintShipment</returns>
        ReprintShipment ReprintShipmentById(string shipmentId, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Reprint Shipment
        /// </summary>
        /// <remarks>
        /// This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned to the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return label layout details and parcel tracking number object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReprintShipment</returns>
        ApiResponse<ReprintShipment> ReprintShipmentByIdWithHttpInfo(string shipmentId, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Shipment by Id
        /// </summary>
        /// <remarks>
        /// This operation retrieves shipment details using shipmentId.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier for an individual Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSingleShipment</returns>
        GetSingleShipment ShipmentById(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Shipment by Id
        /// </summary>
        /// <remarks>
        /// This operation retrieves shipment details using shipmentId.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier for an individual Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSingleShipment</returns>
        ApiResponse<GetSingleShipment> ShipmentByIdWithHttpInfo(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Shipment
        /// </summary>
        /// <remarks>
        /// This operation cancel/void shipment.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned for the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelShipment</returns>
        System.Threading.Tasks.Task<CancelShipment> CancelShipmentByIdAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Shipment
        /// </summary>
        /// <remarks>
        /// This operation cancel/void shipment.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned for the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelShipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelShipment>> CancelShipmentByIdWithHttpInfoAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel Stamps ERR
        /// </summary>
        /// <remarks>
        /// This operation cancels (voids) stamps generated for ERR (Electronic Return Receipt).  - User needs to provide *Stamp IDs* to cancel those specific ERR stamps.  - User can download the *Refund Form* having details of generated Postage.  - At once, maximum 1000 stamps can be requested for cancelation. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelStampsResponseERR</returns>
        System.Threading.Tasks.Task<CancelStampsResponseERR> CancelStampsERRAsync(CancelStampsRequestERR cancelStampsRequestERR, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Stamps ERR
        /// </summary>
        /// <remarks>
        /// This operation cancels (voids) stamps generated for ERR (Electronic Return Receipt).  - User needs to provide *Stamp IDs* to cancel those specific ERR stamps.  - User can download the *Refund Form* having details of generated Postage.  - At once, maximum 1000 stamps can be requested for cancelation. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelStampsResponseERR)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelStampsResponseERR>> CancelStampsERRWithHttpInfoAsync(CancelStampsRequestERR cancelStampsRequestERR, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Return label shipment
        /// </summary>
        /// <remarks>
        /// This operation creates a return label based on a previous shipment. &lt;br&gt; The return label can be created in two ways:  &lt;br&gt; 1. User need not to provide any details of package, address and service. The API would take all details from the shipmentId mentioned in the path parameter and would swap the address and create return label. However for UPS &#x60;specialServices&#x60; object is required as carrier mandates to provide package description with PRL special service. &lt;br&gt; 2. User can customize the request by passing &#x60;fromAddress&#x60;, &#x60;toAddress&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; in the request itself. &lt;br&gt; Please Note that for UPS it is required to pass &#x60;specialServices&#x60; object with &#x60;PRL&#x60; service id and  input parameters with name as &#x60;RETURN_PKG_DESCRIPTION&#x60;. &lt;br&gt; For FedEx &#x60;specialServices&#x60; object is not required and PRL is added by default while creating return.  If user wishes to provide RMA number, it can be passed in &#x60;specialServices&#x60; object in the request body. &lt;br&gt; Please Note If user provides any information in this request it overrides the information in onward shipment which was created &lt;br&gt; For example if user provides toAddress in the request the return label will get created with recipient as mentioned in toAddress and  if user provides fromAddress in the request, the return label will be created with sender as mentioned in fromAddress
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="returnLabel"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReturnLabelResponse</returns>
        System.Threading.Tasks.Task<ReturnLabelResponse> CreateReturnLabelAsync(string shipmentId, ReturnLabel returnLabel, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Return label shipment
        /// </summary>
        /// <remarks>
        /// This operation creates a return label based on a previous shipment. &lt;br&gt; The return label can be created in two ways:  &lt;br&gt; 1. User need not to provide any details of package, address and service. The API would take all details from the shipmentId mentioned in the path parameter and would swap the address and create return label. However for UPS &#x60;specialServices&#x60; object is required as carrier mandates to provide package description with PRL special service. &lt;br&gt; 2. User can customize the request by passing &#x60;fromAddress&#x60;, &#x60;toAddress&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; in the request itself. &lt;br&gt; Please Note that for UPS it is required to pass &#x60;specialServices&#x60; object with &#x60;PRL&#x60; service id and  input parameters with name as &#x60;RETURN_PKG_DESCRIPTION&#x60;. &lt;br&gt; For FedEx &#x60;specialServices&#x60; object is not required and PRL is added by default while creating return.  If user wishes to provide RMA number, it can be passed in &#x60;specialServices&#x60; object in the request body. &lt;br&gt; Please Note If user provides any information in this request it overrides the information in onward shipment which was created &lt;br&gt; For example if user provides toAddress in the request the return label will get created with recipient as mentioned in toAddress and  if user provides fromAddress in the request, the return label will be created with sender as mentioned in fromAddress
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="returnLabel"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReturnLabelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReturnLabelResponse>> CreateReturnLabelWithHttpInfoAsync(string shipmentId, ReturnLabel returnLabel, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Shipment
        /// </summary>
        /// <remarks>
        /// This operation creates a new Shipment or Shipment Label. This is for both Domestic and International.&lt;br&gt; For domestic, Create a shipment requires domestic addresses (within same country)- ToAddress and FromAddress, and  carrier service and special service.&lt;br&gt; While for International, Create a shipment requires international delivery, that is ToAddress must be the different country (and not the same country mentioned in From Address), selected services, special services, and customs information. &lt;br&gt; &lt;br&gt; Note- To create Return shipment using this API- If PRL (return special service) is used, user need to provide sender address (from where return shipment is to be created) in &#x60;fromAddress&#x60; object and recipient address (to where return is to be created) in &#x60;toAddress&#x60; object. System will not swap the address for return in this API. If you want to create return for the already created shipment, you may use &#x60;Create Return Label Shipment&#x60; API. &lt;br&gt; &lt;br&gt; Note: Currently Shipment created from below API gets assigned to the Default location of the subscription.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateShipment200Response</returns>
        System.Threading.Tasks.Task<CreateShipment200Response> CreateShipmentAsync(CreateShipmentRequest createShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Shipment
        /// </summary>
        /// <remarks>
        /// This operation creates a new Shipment or Shipment Label. This is for both Domestic and International.&lt;br&gt; For domestic, Create a shipment requires domestic addresses (within same country)- ToAddress and FromAddress, and  carrier service and special service.&lt;br&gt; While for International, Create a shipment requires international delivery, that is ToAddress must be the different country (and not the same country mentioned in From Address), selected services, special services, and customs information. &lt;br&gt; &lt;br&gt; Note- To create Return shipment using this API- If PRL (return special service) is used, user need to provide sender address (from where return shipment is to be created) in &#x60;fromAddress&#x60; object and recipient address (to where return is to be created) in &#x60;toAddress&#x60; object. System will not swap the address for return in this API. If you want to create return for the already created shipment, you may use &#x60;Create Return Label Shipment&#x60; API. &lt;br&gt; &lt;br&gt; Note: Currently Shipment created from below API gets assigned to the Default location of the subscription.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateShipment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateShipment200Response>> CreateShipmentWithHttpInfoAsync(CreateShipmentRequest createShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download BPOD Files
        /// </summary>
        /// <remarks>
        /// This API operation is used to download bulk of ERR (*Electronic Return Receipt*) - POD (*Proof of Delivery*) files, which are specific to USPS carrier. &lt;br /&gt;   User can download BPOD (*Bulk Proof of Delivery*) files either using *Shipment IDs* or *Date Range*.    If user wants to check records based on dates and download BPOD files accordingly, then *Start Date* and *End Date* need to be passed in the request body as filter. Else *Shipment IDs* will be used as default value when user does not provide *DateRange* filter. &lt;br /&gt;   User is restricted to download 1000 BPOD files as max limit. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="startDate">The BPOD files to be downloaded from which Date is the startDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="endDate">The BPOD files to be downloaded till which Date is the endDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="body">This is the request body to download BPOD files. Request body supports max of 1000 ShipmentIDs in a request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BPODDownloadResponse</returns>
        System.Threading.Tasks.Task<BPODDownloadResponse> DownloadBpodFilesAsync(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), BPODDownloadRequest? body = default(BPODDownloadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download BPOD Files
        /// </summary>
        /// <remarks>
        /// This API operation is used to download bulk of ERR (*Electronic Return Receipt*) - POD (*Proof of Delivery*) files, which are specific to USPS carrier. &lt;br /&gt;   User can download BPOD (*Bulk Proof of Delivery*) files either using *Shipment IDs* or *Date Range*.    If user wants to check records based on dates and download BPOD files accordingly, then *Start Date* and *End Date* need to be passed in the request body as filter. Else *Shipment IDs* will be used as default value when user does not provide *DateRange* filter. &lt;br /&gt;   User is restricted to download 1000 BPOD files as max limit. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="startDate">The BPOD files to be downloaded from which Date is the startDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="endDate">The BPOD files to be downloaded till which Date is the endDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="body">This is the request body to download BPOD files. Request body supports max of 1000 ShipmentIDs in a request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BPODDownloadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BPODDownloadResponse>> DownloadBpodFilesWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), BPODDownloadRequest? body = default(BPODDownloadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get All Shipments
        /// </summary>
        /// <remarks>
        /// This operation fetches all created Shipments. If query parameters are not provided, it will default endDate as current date, page as 1 and size as 10.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="startDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe start date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="endDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe end date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="page">This indicates the page of the Shipments search result list. (optional)</param>
        /// <param name="size">This indicates the size/count of the searched result list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllShipments</returns>
        System.Threading.Tasks.Task<GetAllShipments> GetAllShipmentsAsync(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? page = default(string?), string? size = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get All Shipments
        /// </summary>
        /// <remarks>
        /// This operation fetches all created Shipments. If query parameters are not provided, it will default endDate as current date, page as 1 and size as 10.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="startDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe start date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="endDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe end date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="page">This indicates the page of the Shipments search result list. (optional)</param>
        /// <param name="size">This indicates the size/count of the searched result list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllShipments)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllShipments>> GetAllShipmentsWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? page = default(string?), string? size = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Carrier Accounts
        /// </summary>
        /// <remarks>
        /// This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCarrierAccounts200Response</returns>
        System.Threading.Tasks.Task<GetCarrierAccounts200Response> GetCarrierAccountsAsync(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Carrier Accounts
        /// </summary>
        /// <remarks>
        /// This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCarrierAccounts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCarrierAccounts200Response>> GetCarrierAccountsWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Carriers
        /// </summary>
        /// <remarks>
        /// This operation fetches all supported carriers. This service is used to get list of supported carriers and their properties.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Carriers</returns>
        System.Threading.Tasks.Task<Carriers> GetCarriersAsync(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Carriers
        /// </summary>
        /// <remarks>
        /// This operation fetches all supported carriers. This service is used to get list of supported carriers and their properties.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Carriers)</returns>
        System.Threading.Tasks.Task<ApiResponse<Carriers>> GetCarriersWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Countries
        /// </summary>
        /// <remarks>
        /// This operation fetches list of supported destination countries for a provided carrier and origin country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier and &#x60;US&#x60; as origin country.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the carrierID, a unique identifier given to  an individual carrier. (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CountriesInner&gt;</returns>
        System.Threading.Tasks.Task<List<CountriesInner>> GetCountriesAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Countries
        /// </summary>
        /// <remarks>
        /// This operation fetches list of supported destination countries for a provided carrier and origin country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier and &#x60;US&#x60; as origin country.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the carrierID, a unique identifier given to  an individual carrier. (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CountriesInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CountriesInner>>> GetCountriesWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Parcel Types
        /// </summary>
        /// <remarks>
        /// This operation fetches Parcel Types based on the provided carrier, origin county, and the destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParcelTypesInner&gt;</returns>
        System.Threading.Tasks.Task<List<ParcelTypesInner>> GetParcelTypesAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Parcel Types
        /// </summary>
        /// <remarks>
        /// This operation fetches Parcel Types based on the provided carrier, origin county, and the destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParcelTypesInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ParcelTypesInner>>> GetParcelTypesWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rate Shop and Get Single Rate
        /// </summary>
        /// <remarks>
        /// This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. If parcelType is not provided, it will default to &#x60;PKG&#x60;. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return rates object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRates200Response</returns>
        System.Threading.Tasks.Task<GetRates200Response> GetRatesAsync(GetRatesRequest getRatesRequest, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rate Shop and Get Single Rate
        /// </summary>
        /// <remarks>
        /// This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. If parcelType is not provided, it will default to &#x60;PKG&#x60;. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return rates object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRates200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRates200Response>> GetRatesWithHttpInfoAsync(GetRatesRequest getRatesRequest, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Services
        /// </summary>
        /// <remarks>
        /// This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier provided to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServicesInner&gt;</returns>
        System.Threading.Tasks.Task<List<ServicesInner>> GetServicesAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Services
        /// </summary>
        /// <remarks>
        /// This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier provided to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServicesInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServicesInner>>> GetServicesWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Signature Image ERR
        /// </summary>
        /// <remarks>
        /// This operation provides a downloadable link which consists of a signature image for specific ERR (Electronic Return Receipt) shipment, and this is known as POD. &lt;br /&gt; Proof of Delivery (POD) is a document or file that shows an evidence of shipment delivery. This file contains the digital copy of recipient&#39;s signature, i.e., the signature image, in the form of downloadable link or URL.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID is a unique identifier for an individual shipment.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignatureFileResponse</returns>
        System.Threading.Tasks.Task<SignatureFileResponse> GetSignatureImageERRAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Signature Image ERR
        /// </summary>
        /// <remarks>
        /// This operation provides a downloadable link which consists of a signature image for specific ERR (Electronic Return Receipt) shipment, and this is known as POD. &lt;br /&gt; Proof of Delivery (POD) is a document or file that shows an evidence of shipment delivery. This file contains the digital copy of recipient&#39;s signature, i.e., the signature image, in the form of downloadable link or URL.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID is a unique identifier for an individual shipment.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignatureFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignatureFileResponse>> GetSignatureImageERRWithHttpInfoAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Special Services
        /// </summary>
        /// <remarks>
        /// This operation fetches Special Services for a given carrier, service, origin country, and the destination country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier,&#x60;US&#x60; as both origin and destination country and would show for all service and parcel types
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="service">This indicates the serviceId. It can be referred from response of &#x60;Get Services&#x60; API (optional)</param>
        /// <param name="parcel">This indicates the parcel Id, a unique identifier named to individual package. It can be referred from response of &#x60;Get Parcel Types&#x60; API (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to  an individual carrier. It can be referred from response of &#x60;Get Carriers&#x60; API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpecialServices</returns>
        System.Threading.Tasks.Task<SpecialServices> GetSpecialServicesAsync(string? xPBDeveloperPartnerID = default(string?), string? service = default(string?), string? parcel = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Special Services
        /// </summary>
        /// <remarks>
        /// This operation fetches Special Services for a given carrier, service, origin country, and the destination country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier,&#x60;US&#x60; as both origin and destination country and would show for all service and parcel types
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="service">This indicates the serviceId. It can be referred from response of &#x60;Get Services&#x60; API (optional)</param>
        /// <param name="parcel">This indicates the parcel Id, a unique identifier named to individual package. It can be referred from response of &#x60;Get Parcel Types&#x60; API (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to  an individual carrier. It can be referred from response of &#x60;Get Carriers&#x60; API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpecialServices)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpecialServices>> GetSpecialServicesWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? service = default(string?), string? parcel = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reprint Shipment
        /// </summary>
        /// <remarks>
        /// This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned to the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return label layout details and parcel tracking number object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReprintShipment</returns>
        System.Threading.Tasks.Task<ReprintShipment> ReprintShipmentByIdAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reprint Shipment
        /// </summary>
        /// <remarks>
        /// This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned to the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return label layout details and parcel tracking number object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReprintShipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReprintShipment>> ReprintShipmentByIdWithHttpInfoAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Shipment by Id
        /// </summary>
        /// <remarks>
        /// This operation retrieves shipment details using shipmentId.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier for an individual Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSingleShipment</returns>
        System.Threading.Tasks.Task<GetSingleShipment> ShipmentByIdAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Shipment by Id
        /// </summary>
        /// <remarks>
        /// This operation retrieves shipment details using shipmentId.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier for an individual Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSingleShipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSingleShipment>> ShipmentByIdWithHttpInfoAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentApi : IShipmentApiSync, IShipmentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShipmentApi : IShipmentApi
    {
        private com.pitneybowes.api360.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentApi(string basePath)
        {
            this.Configuration = com.pitneybowes.api360.Client.Configuration.MergeConfigurations(
                com.pitneybowes.api360.Client.GlobalConfiguration.Instance,
                new com.pitneybowes.api360.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShipmentApi(com.pitneybowes.api360.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.pitneybowes.api360.Client.Configuration.MergeConfigurations(
                com.pitneybowes.api360.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ShipmentApi(com.pitneybowes.api360.Client.ISynchronousClient client, com.pitneybowes.api360.Client.IAsynchronousClient asyncClient, com.pitneybowes.api360.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.pitneybowes.api360.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.pitneybowes.api360.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.pitneybowes.api360.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.pitneybowes.api360.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel Shipment This operation cancel/void shipment.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned for the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelShipment</returns>
        public CancelShipment CancelShipmentById(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<CancelShipment> localVarResponse = CancelShipmentByIdWithHttpInfo(shipmentId, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Shipment This operation cancel/void shipment.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned for the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelShipment</returns>
        public com.pitneybowes.api360.Client.ApiResponse<CancelShipment> CancelShipmentByIdWithHttpInfo(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentApi->CancelShipmentById");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.CancelShipmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CancelShipment>("/api/v1/shipments/{shipmentId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelShipmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Shipment This operation cancel/void shipment.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned for the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelShipment</returns>
        public async System.Threading.Tasks.Task<CancelShipment> CancelShipmentByIdAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<CancelShipment> localVarResponse = await CancelShipmentByIdWithHttpInfoAsync(shipmentId, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Shipment This operation cancel/void shipment.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned for the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelShipment)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<CancelShipment>> CancelShipmentByIdWithHttpInfoAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentApi->CancelShipmentById");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.CancelShipmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CancelShipment>("/api/v1/shipments/{shipmentId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelShipmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Stamps ERR This operation cancels (voids) stamps generated for ERR (Electronic Return Receipt).  - User needs to provide *Stamp IDs* to cancel those specific ERR stamps.  - User can download the *Refund Form* having details of generated Postage.  - At once, maximum 1000 stamps can be requested for cancelation. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelStampsResponseERR</returns>
        public CancelStampsResponseERR CancelStampsERR(CancelStampsRequestERR cancelStampsRequestERR, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<CancelStampsResponseERR> localVarResponse = CancelStampsERRWithHttpInfo(cancelStampsRequestERR, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Stamps ERR This operation cancels (voids) stamps generated for ERR (Electronic Return Receipt).  - User needs to provide *Stamp IDs* to cancel those specific ERR stamps.  - User can download the *Refund Form* having details of generated Postage.  - At once, maximum 1000 stamps can be requested for cancelation. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelStampsResponseERR</returns>
        public com.pitneybowes.api360.Client.ApiResponse<CancelStampsResponseERR> CancelStampsERRWithHttpInfo(CancelStampsRequestERR cancelStampsRequestERR, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'cancelStampsRequestERR' is set
            if (cancelStampsRequestERR == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'cancelStampsRequestERR' when calling ShipmentApi->CancelStampsERR");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = cancelStampsRequestERR;

            localVarRequestOptions.Operation = "ShipmentApi.CancelStampsERR";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CancelStampsResponseERR>("/api/v1/err/stamps/void", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelStampsERR", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Stamps ERR This operation cancels (voids) stamps generated for ERR (Electronic Return Receipt).  - User needs to provide *Stamp IDs* to cancel those specific ERR stamps.  - User can download the *Refund Form* having details of generated Postage.  - At once, maximum 1000 stamps can be requested for cancelation. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelStampsResponseERR</returns>
        public async System.Threading.Tasks.Task<CancelStampsResponseERR> CancelStampsERRAsync(CancelStampsRequestERR cancelStampsRequestERR, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<CancelStampsResponseERR> localVarResponse = await CancelStampsERRWithHttpInfoAsync(cancelStampsRequestERR, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Stamps ERR This operation cancels (voids) stamps generated for ERR (Electronic Return Receipt).  - User needs to provide *Stamp IDs* to cancel those specific ERR stamps.  - User can download the *Refund Form* having details of generated Postage.  - At once, maximum 1000 stamps can be requested for cancelation. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelStampsRequestERR"></param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelStampsResponseERR)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<CancelStampsResponseERR>> CancelStampsERRWithHttpInfoAsync(CancelStampsRequestERR cancelStampsRequestERR, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cancelStampsRequestERR' is set
            if (cancelStampsRequestERR == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'cancelStampsRequestERR' when calling ShipmentApi->CancelStampsERR");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = cancelStampsRequestERR;

            localVarRequestOptions.Operation = "ShipmentApi.CancelStampsERR";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CancelStampsResponseERR>("/api/v1/err/stamps/void", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelStampsERR", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Return label shipment This operation creates a return label based on a previous shipment. &lt;br&gt; The return label can be created in two ways:  &lt;br&gt; 1. User need not to provide any details of package, address and service. The API would take all details from the shipmentId mentioned in the path parameter and would swap the address and create return label. However for UPS &#x60;specialServices&#x60; object is required as carrier mandates to provide package description with PRL special service. &lt;br&gt; 2. User can customize the request by passing &#x60;fromAddress&#x60;, &#x60;toAddress&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; in the request itself. &lt;br&gt; Please Note that for UPS it is required to pass &#x60;specialServices&#x60; object with &#x60;PRL&#x60; service id and  input parameters with name as &#x60;RETURN_PKG_DESCRIPTION&#x60;. &lt;br&gt; For FedEx &#x60;specialServices&#x60; object is not required and PRL is added by default while creating return.  If user wishes to provide RMA number, it can be passed in &#x60;specialServices&#x60; object in the request body. &lt;br&gt; Please Note If user provides any information in this request it overrides the information in onward shipment which was created &lt;br&gt; For example if user provides toAddress in the request the return label will get created with recipient as mentioned in toAddress and  if user provides fromAddress in the request, the return label will be created with sender as mentioned in fromAddress
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="returnLabel"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReturnLabelResponse</returns>
        public ReturnLabelResponse CreateReturnLabel(string shipmentId, ReturnLabel returnLabel, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<ReturnLabelResponse> localVarResponse = CreateReturnLabelWithHttpInfo(shipmentId, returnLabel, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Return label shipment This operation creates a return label based on a previous shipment. &lt;br&gt; The return label can be created in two ways:  &lt;br&gt; 1. User need not to provide any details of package, address and service. The API would take all details from the shipmentId mentioned in the path parameter and would swap the address and create return label. However for UPS &#x60;specialServices&#x60; object is required as carrier mandates to provide package description with PRL special service. &lt;br&gt; 2. User can customize the request by passing &#x60;fromAddress&#x60;, &#x60;toAddress&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; in the request itself. &lt;br&gt; Please Note that for UPS it is required to pass &#x60;specialServices&#x60; object with &#x60;PRL&#x60; service id and  input parameters with name as &#x60;RETURN_PKG_DESCRIPTION&#x60;. &lt;br&gt; For FedEx &#x60;specialServices&#x60; object is not required and PRL is added by default while creating return.  If user wishes to provide RMA number, it can be passed in &#x60;specialServices&#x60; object in the request body. &lt;br&gt; Please Note If user provides any information in this request it overrides the information in onward shipment which was created &lt;br&gt; For example if user provides toAddress in the request the return label will get created with recipient as mentioned in toAddress and  if user provides fromAddress in the request, the return label will be created with sender as mentioned in fromAddress
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="returnLabel"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReturnLabelResponse</returns>
        public com.pitneybowes.api360.Client.ApiResponse<ReturnLabelResponse> CreateReturnLabelWithHttpInfo(string shipmentId, ReturnLabel returnLabel, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentApi->CreateReturnLabel");
            }

            // verify the required parameter 'returnLabel' is set
            if (returnLabel == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'returnLabel' when calling ShipmentApi->CreateReturnLabel");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = returnLabel;

            localVarRequestOptions.Operation = "ShipmentApi.CreateReturnLabel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReturnLabelResponse>("/api/v1/shipments/{shipmentId}/return", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReturnLabel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Return label shipment This operation creates a return label based on a previous shipment. &lt;br&gt; The return label can be created in two ways:  &lt;br&gt; 1. User need not to provide any details of package, address and service. The API would take all details from the shipmentId mentioned in the path parameter and would swap the address and create return label. However for UPS &#x60;specialServices&#x60; object is required as carrier mandates to provide package description with PRL special service. &lt;br&gt; 2. User can customize the request by passing &#x60;fromAddress&#x60;, &#x60;toAddress&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; in the request itself. &lt;br&gt; Please Note that for UPS it is required to pass &#x60;specialServices&#x60; object with &#x60;PRL&#x60; service id and  input parameters with name as &#x60;RETURN_PKG_DESCRIPTION&#x60;. &lt;br&gt; For FedEx &#x60;specialServices&#x60; object is not required and PRL is added by default while creating return.  If user wishes to provide RMA number, it can be passed in &#x60;specialServices&#x60; object in the request body. &lt;br&gt; Please Note If user provides any information in this request it overrides the information in onward shipment which was created &lt;br&gt; For example if user provides toAddress in the request the return label will get created with recipient as mentioned in toAddress and  if user provides fromAddress in the request, the return label will be created with sender as mentioned in fromAddress
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="returnLabel"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReturnLabelResponse</returns>
        public async System.Threading.Tasks.Task<ReturnLabelResponse> CreateReturnLabelAsync(string shipmentId, ReturnLabel returnLabel, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<ReturnLabelResponse> localVarResponse = await CreateReturnLabelWithHttpInfoAsync(shipmentId, returnLabel, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Return label shipment This operation creates a return label based on a previous shipment. &lt;br&gt; The return label can be created in two ways:  &lt;br&gt; 1. User need not to provide any details of package, address and service. The API would take all details from the shipmentId mentioned in the path parameter and would swap the address and create return label. However for UPS &#x60;specialServices&#x60; object is required as carrier mandates to provide package description with PRL special service. &lt;br&gt; 2. User can customize the request by passing &#x60;fromAddress&#x60;, &#x60;toAddress&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; in the request itself. &lt;br&gt; Please Note that for UPS it is required to pass &#x60;specialServices&#x60; object with &#x60;PRL&#x60; service id and  input parameters with name as &#x60;RETURN_PKG_DESCRIPTION&#x60;. &lt;br&gt; For FedEx &#x60;specialServices&#x60; object is not required and PRL is added by default while creating return.  If user wishes to provide RMA number, it can be passed in &#x60;specialServices&#x60; object in the request body. &lt;br&gt; Please Note If user provides any information in this request it overrides the information in onward shipment which was created &lt;br&gt; For example if user provides toAddress in the request the return label will get created with recipient as mentioned in toAddress and  if user provides fromAddress in the request, the return label will be created with sender as mentioned in fromAddress
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">It specifies the shipmentId of onward shipment against which return label has to be created.</param>
        /// <param name="returnLabel"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReturnLabelResponse)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<ReturnLabelResponse>> CreateReturnLabelWithHttpInfoAsync(string shipmentId, ReturnLabel returnLabel, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentApi->CreateReturnLabel");
            }

            // verify the required parameter 'returnLabel' is set
            if (returnLabel == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'returnLabel' when calling ShipmentApi->CreateReturnLabel");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = returnLabel;

            localVarRequestOptions.Operation = "ShipmentApi.CreateReturnLabel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReturnLabelResponse>("/api/v1/shipments/{shipmentId}/return", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReturnLabel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Shipment This operation creates a new Shipment or Shipment Label. This is for both Domestic and International.&lt;br&gt; For domestic, Create a shipment requires domestic addresses (within same country)- ToAddress and FromAddress, and  carrier service and special service.&lt;br&gt; While for International, Create a shipment requires international delivery, that is ToAddress must be the different country (and not the same country mentioned in From Address), selected services, special services, and customs information. &lt;br&gt; &lt;br&gt; Note- To create Return shipment using this API- If PRL (return special service) is used, user need to provide sender address (from where return shipment is to be created) in &#x60;fromAddress&#x60; object and recipient address (to where return is to be created) in &#x60;toAddress&#x60; object. System will not swap the address for return in this API. If you want to create return for the already created shipment, you may use &#x60;Create Return Label Shipment&#x60; API. &lt;br&gt; &lt;br&gt; Note: Currently Shipment created from below API gets assigned to the Default location of the subscription.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateShipment200Response</returns>
        public CreateShipment200Response CreateShipment(CreateShipmentRequest createShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<CreateShipment200Response> localVarResponse = CreateShipmentWithHttpInfo(createShipmentRequest, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Shipment This operation creates a new Shipment or Shipment Label. This is for both Domestic and International.&lt;br&gt; For domestic, Create a shipment requires domestic addresses (within same country)- ToAddress and FromAddress, and  carrier service and special service.&lt;br&gt; While for International, Create a shipment requires international delivery, that is ToAddress must be the different country (and not the same country mentioned in From Address), selected services, special services, and customs information. &lt;br&gt; &lt;br&gt; Note- To create Return shipment using this API- If PRL (return special service) is used, user need to provide sender address (from where return shipment is to be created) in &#x60;fromAddress&#x60; object and recipient address (to where return is to be created) in &#x60;toAddress&#x60; object. System will not swap the address for return in this API. If you want to create return for the already created shipment, you may use &#x60;Create Return Label Shipment&#x60; API. &lt;br&gt; &lt;br&gt; Note: Currently Shipment created from below API gets assigned to the Default location of the subscription.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateShipment200Response</returns>
        public com.pitneybowes.api360.Client.ApiResponse<CreateShipment200Response> CreateShipmentWithHttpInfo(CreateShipmentRequest createShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'createShipmentRequest' is set
            if (createShipmentRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'createShipmentRequest' when calling ShipmentApi->CreateShipment");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = createShipmentRequest;

            localVarRequestOptions.Operation = "ShipmentApi.CreateShipment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateShipment200Response>("/api/v1/shipments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Shipment This operation creates a new Shipment or Shipment Label. This is for both Domestic and International.&lt;br&gt; For domestic, Create a shipment requires domestic addresses (within same country)- ToAddress and FromAddress, and  carrier service and special service.&lt;br&gt; While for International, Create a shipment requires international delivery, that is ToAddress must be the different country (and not the same country mentioned in From Address), selected services, special services, and customs information. &lt;br&gt; &lt;br&gt; Note- To create Return shipment using this API- If PRL (return special service) is used, user need to provide sender address (from where return shipment is to be created) in &#x60;fromAddress&#x60; object and recipient address (to where return is to be created) in &#x60;toAddress&#x60; object. System will not swap the address for return in this API. If you want to create return for the already created shipment, you may use &#x60;Create Return Label Shipment&#x60; API. &lt;br&gt; &lt;br&gt; Note: Currently Shipment created from below API gets assigned to the Default location of the subscription.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateShipment200Response</returns>
        public async System.Threading.Tasks.Task<CreateShipment200Response> CreateShipmentAsync(CreateShipmentRequest createShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<CreateShipment200Response> localVarResponse = await CreateShipmentWithHttpInfoAsync(createShipmentRequest, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Shipment This operation creates a new Shipment or Shipment Label. This is for both Domestic and International.&lt;br&gt; For domestic, Create a shipment requires domestic addresses (within same country)- ToAddress and FromAddress, and  carrier service and special service.&lt;br&gt; While for International, Create a shipment requires international delivery, that is ToAddress must be the different country (and not the same country mentioned in From Address), selected services, special services, and customs information. &lt;br&gt; &lt;br&gt; Note- To create Return shipment using this API- If PRL (return special service) is used, user need to provide sender address (from where return shipment is to be created) in &#x60;fromAddress&#x60; object and recipient address (to where return is to be created) in &#x60;toAddress&#x60; object. System will not swap the address for return in this API. If you want to create return for the already created shipment, you may use &#x60;Create Return Label Shipment&#x60; API. &lt;br&gt; &lt;br&gt; Note: Currently Shipment created from below API gets assigned to the Default location of the subscription.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShipmentRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateShipment200Response)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<CreateShipment200Response>> CreateShipmentWithHttpInfoAsync(CreateShipmentRequest createShipmentRequest, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createShipmentRequest' is set
            if (createShipmentRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'createShipmentRequest' when calling ShipmentApi->CreateShipment");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = createShipmentRequest;

            localVarRequestOptions.Operation = "ShipmentApi.CreateShipment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateShipment200Response>("/api/v1/shipments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download BPOD Files This API operation is used to download bulk of ERR (*Electronic Return Receipt*) - POD (*Proof of Delivery*) files, which are specific to USPS carrier. &lt;br /&gt;   User can download BPOD (*Bulk Proof of Delivery*) files either using *Shipment IDs* or *Date Range*.    If user wants to check records based on dates and download BPOD files accordingly, then *Start Date* and *End Date* need to be passed in the request body as filter. Else *Shipment IDs* will be used as default value when user does not provide *DateRange* filter. &lt;br /&gt;   User is restricted to download 1000 BPOD files as max limit. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="startDate">The BPOD files to be downloaded from which Date is the startDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="endDate">The BPOD files to be downloaded till which Date is the endDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="body">This is the request body to download BPOD files. Request body supports max of 1000 ShipmentIDs in a request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BPODDownloadResponse</returns>
        public BPODDownloadResponse DownloadBpodFiles(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), BPODDownloadRequest? body = default(BPODDownloadRequest?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<BPODDownloadResponse> localVarResponse = DownloadBpodFilesWithHttpInfo(xPBDeveloperPartnerID, startDate, endDate, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download BPOD Files This API operation is used to download bulk of ERR (*Electronic Return Receipt*) - POD (*Proof of Delivery*) files, which are specific to USPS carrier. &lt;br /&gt;   User can download BPOD (*Bulk Proof of Delivery*) files either using *Shipment IDs* or *Date Range*.    If user wants to check records based on dates and download BPOD files accordingly, then *Start Date* and *End Date* need to be passed in the request body as filter. Else *Shipment IDs* will be used as default value when user does not provide *DateRange* filter. &lt;br /&gt;   User is restricted to download 1000 BPOD files as max limit. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="startDate">The BPOD files to be downloaded from which Date is the startDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="endDate">The BPOD files to be downloaded till which Date is the endDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="body">This is the request body to download BPOD files. Request body supports max of 1000 ShipmentIDs in a request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BPODDownloadResponse</returns>
        public com.pitneybowes.api360.Client.ApiResponse<BPODDownloadResponse> DownloadBpodFilesWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), BPODDownloadRequest? body = default(BPODDownloadRequest?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ShipmentApi.DownloadBpodFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BPODDownloadResponse>("/api/v1/err/shipments/bpod", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadBpodFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download BPOD Files This API operation is used to download bulk of ERR (*Electronic Return Receipt*) - POD (*Proof of Delivery*) files, which are specific to USPS carrier. &lt;br /&gt;   User can download BPOD (*Bulk Proof of Delivery*) files either using *Shipment IDs* or *Date Range*.    If user wants to check records based on dates and download BPOD files accordingly, then *Start Date* and *End Date* need to be passed in the request body as filter. Else *Shipment IDs* will be used as default value when user does not provide *DateRange* filter. &lt;br /&gt;   User is restricted to download 1000 BPOD files as max limit. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="startDate">The BPOD files to be downloaded from which Date is the startDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="endDate">The BPOD files to be downloaded till which Date is the endDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="body">This is the request body to download BPOD files. Request body supports max of 1000 ShipmentIDs in a request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BPODDownloadResponse</returns>
        public async System.Threading.Tasks.Task<BPODDownloadResponse> DownloadBpodFilesAsync(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), BPODDownloadRequest? body = default(BPODDownloadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<BPODDownloadResponse> localVarResponse = await DownloadBpodFilesWithHttpInfoAsync(xPBDeveloperPartnerID, startDate, endDate, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download BPOD Files This API operation is used to download bulk of ERR (*Electronic Return Receipt*) - POD (*Proof of Delivery*) files, which are specific to USPS carrier. &lt;br /&gt;   User can download BPOD (*Bulk Proof of Delivery*) files either using *Shipment IDs* or *Date Range*.    If user wants to check records based on dates and download BPOD files accordingly, then *Start Date* and *End Date* need to be passed in the request body as filter. Else *Shipment IDs* will be used as default value when user does not provide *DateRange* filter. &lt;br /&gt;   User is restricted to download 1000 BPOD files as max limit. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="startDate">The BPOD files to be downloaded from which Date is the startDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="endDate">The BPOD files to be downloaded till which Date is the endDate in the Date Range filter. This field is not required if the Shipment IDs provided in the request body. (optional)</param>
        /// <param name="body">This is the request body to download BPOD files. Request body supports max of 1000 ShipmentIDs in a request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BPODDownloadResponse)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<BPODDownloadResponse>> DownloadBpodFilesWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), BPODDownloadRequest? body = default(BPODDownloadRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ShipmentApi.DownloadBpodFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BPODDownloadResponse>("/api/v1/err/shipments/bpod", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadBpodFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Shipments This operation fetches all created Shipments. If query parameters are not provided, it will default endDate as current date, page as 1 and size as 10.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="startDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe start date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="endDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe end date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="page">This indicates the page of the Shipments search result list. (optional)</param>
        /// <param name="size">This indicates the size/count of the searched result list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllShipments</returns>
        public GetAllShipments GetAllShipments(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? page = default(string?), string? size = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<GetAllShipments> localVarResponse = GetAllShipmentsWithHttpInfo(xPBDeveloperPartnerID, startDate, endDate, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Shipments This operation fetches all created Shipments. If query parameters are not provided, it will default endDate as current date, page as 1 and size as 10.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="startDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe start date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="endDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe end date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="page">This indicates the page of the Shipments search result list. (optional)</param>
        /// <param name="size">This indicates the size/count of the searched result list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllShipments</returns>
        public com.pitneybowes.api360.Client.ApiResponse<GetAllShipments> GetAllShipmentsWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? page = default(string?), string? size = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetAllShipments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllShipments>("/api/v1/shipments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllShipments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Shipments This operation fetches all created Shipments. If query parameters are not provided, it will default endDate as current date, page as 1 and size as 10.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="startDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe start date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="endDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe end date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="page">This indicates the page of the Shipments search result list. (optional)</param>
        /// <param name="size">This indicates the size/count of the searched result list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllShipments</returns>
        public async System.Threading.Tasks.Task<GetAllShipments> GetAllShipmentsAsync(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? page = default(string?), string? size = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<GetAllShipments> localVarResponse = await GetAllShipmentsWithHttpInfoAsync(xPBDeveloperPartnerID, startDate, endDate, page, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Shipments This operation fetches all created Shipments. If query parameters are not provided, it will default endDate as current date, page as 1 and size as 10.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="startDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe start date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="endDate">While searching shipments, user set a date range to get all created shipments. This indicatesthe end date of the set date range under shipment search criteria. The date format must be: YYYY-MM-DD. (optional)</param>
        /// <param name="page">This indicates the page of the Shipments search result list. (optional)</param>
        /// <param name="size">This indicates the size/count of the searched result list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllShipments)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<GetAllShipments>> GetAllShipmentsWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? startDate = default(string?), string? endDate = default(string?), string? page = default(string?), string? size = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetAllShipments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllShipments>("/api/v1/shipments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllShipments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Carrier Accounts This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCarrierAccounts200Response</returns>
        public GetCarrierAccounts200Response GetCarrierAccounts(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<GetCarrierAccounts200Response> localVarResponse = GetCarrierAccountsWithHttpInfo(xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Carrier Accounts This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCarrierAccounts200Response</returns>
        public com.pitneybowes.api360.Client.ApiResponse<GetCarrierAccounts200Response> GetCarrierAccountsWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetCarrierAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCarrierAccounts200Response>("/api/v1/carrierAccounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCarrierAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Carrier Accounts This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCarrierAccounts200Response</returns>
        public async System.Threading.Tasks.Task<GetCarrierAccounts200Response> GetCarrierAccountsAsync(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<GetCarrierAccounts200Response> localVarResponse = await GetCarrierAccountsWithHttpInfoAsync(xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Carrier Accounts This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCarrierAccounts200Response)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<GetCarrierAccounts200Response>> GetCarrierAccountsWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetCarrierAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCarrierAccounts200Response>("/api/v1/carrierAccounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCarrierAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Carriers This operation fetches all supported carriers. This service is used to get list of supported carriers and their properties.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Carriers</returns>
        public Carriers GetCarriers(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<Carriers> localVarResponse = GetCarriersWithHttpInfo(xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Carriers This operation fetches all supported carriers. This service is used to get list of supported carriers and their properties.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Carriers</returns>
        public com.pitneybowes.api360.Client.ApiResponse<Carriers> GetCarriersWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetCarriers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Carriers>("/api/v1/carriers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCarriers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Carriers This operation fetches all supported carriers. This service is used to get list of supported carriers and their properties.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Carriers</returns>
        public async System.Threading.Tasks.Task<Carriers> GetCarriersAsync(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<Carriers> localVarResponse = await GetCarriersWithHttpInfoAsync(xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Carriers This operation fetches all supported carriers. This service is used to get list of supported carriers and their properties.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Carriers)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<Carriers>> GetCarriersWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetCarriers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Carriers>("/api/v1/carriers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCarriers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Countries This operation fetches list of supported destination countries for a provided carrier and origin country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier and &#x60;US&#x60; as origin country.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the carrierID, a unique identifier given to  an individual carrier. (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CountriesInner&gt;</returns>
        public List<CountriesInner> GetCountries(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<List<CountriesInner>> localVarResponse = GetCountriesWithHttpInfo(xPBDeveloperPartnerID, carrier, originCountryCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Countries This operation fetches list of supported destination countries for a provided carrier and origin country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier and &#x60;US&#x60; as origin country.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the carrierID, a unique identifier given to  an individual carrier. (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CountriesInner&gt;</returns>
        public com.pitneybowes.api360.Client.ApiResponse<List<CountriesInner>> GetCountriesWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (carrier != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "carrier", carrier));
            }
            if (originCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "originCountryCode", originCountryCode));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetCountries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CountriesInner>>("/api/v1/countries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Countries This operation fetches list of supported destination countries for a provided carrier and origin country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier and &#x60;US&#x60; as origin country.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the carrierID, a unique identifier given to  an individual carrier. (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CountriesInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<CountriesInner>> GetCountriesAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<List<CountriesInner>> localVarResponse = await GetCountriesWithHttpInfoAsync(xPBDeveloperPartnerID, carrier, originCountryCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Countries This operation fetches list of supported destination countries for a provided carrier and origin country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier and &#x60;US&#x60; as origin country.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the carrierID, a unique identifier given to  an individual carrier. (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CountriesInner&gt;)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<List<CountriesInner>>> GetCountriesWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (carrier != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "carrier", carrier));
            }
            if (originCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "originCountryCode", originCountryCode));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetCountries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CountriesInner>>("/api/v1/countries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCountries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Parcel Types This operation fetches Parcel Types based on the provided carrier, origin county, and the destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ParcelTypesInner&gt;</returns>
        public List<ParcelTypesInner> GetParcelTypes(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<List<ParcelTypesInner>> localVarResponse = GetParcelTypesWithHttpInfo(xPBDeveloperPartnerID, carrier, originCountryCode, destinationCountryCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Parcel Types This operation fetches Parcel Types based on the provided carrier, origin county, and the destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ParcelTypesInner&gt;</returns>
        public com.pitneybowes.api360.Client.ApiResponse<List<ParcelTypesInner>> GetParcelTypesWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (carrier != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "carrier", carrier));
            }
            if (originCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "originCountryCode", originCountryCode));
            }
            if (destinationCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "destinationCountryCode", destinationCountryCode));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetParcelTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ParcelTypesInner>>("/api/v1/parcelTypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParcelTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Parcel Types This operation fetches Parcel Types based on the provided carrier, origin county, and the destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParcelTypesInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<ParcelTypesInner>> GetParcelTypesAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<List<ParcelTypesInner>> localVarResponse = await GetParcelTypesWithHttpInfoAsync(xPBDeveloperPartnerID, carrier, originCountryCode, destinationCountryCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Parcel Types This operation fetches Parcel Types based on the provided carrier, origin county, and the destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParcelTypesInner&gt;)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<List<ParcelTypesInner>>> GetParcelTypesWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (carrier != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "carrier", carrier));
            }
            if (originCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "originCountryCode", originCountryCode));
            }
            if (destinationCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "destinationCountryCode", destinationCountryCode));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetParcelTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ParcelTypesInner>>("/api/v1/parcelTypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParcelTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rate Shop and Get Single Rate This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. If parcelType is not provided, it will default to &#x60;PKG&#x60;. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return rates object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRates200Response</returns>
        public GetRates200Response GetRates(GetRatesRequest getRatesRequest, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<GetRates200Response> localVarResponse = GetRatesWithHttpInfo(getRatesRequest, xPBDeveloperPartnerID, compactResponse);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rate Shop and Get Single Rate This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. If parcelType is not provided, it will default to &#x60;PKG&#x60;. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return rates object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRates200Response</returns>
        public com.pitneybowes.api360.Client.ApiResponse<GetRates200Response> GetRatesWithHttpInfo(GetRatesRequest getRatesRequest, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'getRatesRequest' is set
            if (getRatesRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'getRatesRequest' when calling ShipmentApi->GetRates");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            if (compactResponse != null)
            {
                localVarRequestOptions.HeaderParameters.Add("compactResponse", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(compactResponse)); // header parameter
            }
            localVarRequestOptions.Data = getRatesRequest;

            localVarRequestOptions.Operation = "ShipmentApi.GetRates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetRates200Response>("/api/v1/rates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rate Shop and Get Single Rate This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. If parcelType is not provided, it will default to &#x60;PKG&#x60;. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return rates object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRates200Response</returns>
        public async System.Threading.Tasks.Task<GetRates200Response> GetRatesAsync(GetRatesRequest getRatesRequest, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<GetRates200Response> localVarResponse = await GetRatesWithHttpInfoAsync(getRatesRequest, xPBDeveloperPartnerID, compactResponse, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rate Shop and Get Single Rate This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. If parcelType is not provided, it will default to &#x60;PKG&#x60;. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRatesRequest"></param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return rates object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRates200Response)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<GetRates200Response>> GetRatesWithHttpInfoAsync(GetRatesRequest getRatesRequest, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getRatesRequest' is set
            if (getRatesRequest == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'getRatesRequest' when calling ShipmentApi->GetRates");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            if (compactResponse != null)
            {
                localVarRequestOptions.HeaderParameters.Add("compactResponse", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(compactResponse)); // header parameter
            }
            localVarRequestOptions.Data = getRatesRequest;

            localVarRequestOptions.Operation = "ShipmentApi.GetRates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetRates200Response>("/api/v1/rates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Services This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier provided to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ServicesInner&gt;</returns>
        public List<ServicesInner> GetServices(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<List<ServicesInner>> localVarResponse = GetServicesWithHttpInfo(xPBDeveloperPartnerID, carrier, originCountryCode, destinationCountryCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Services This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier provided to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ServicesInner&gt;</returns>
        public com.pitneybowes.api360.Client.ApiResponse<List<ServicesInner>> GetServicesWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (carrier != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "carrier", carrier));
            }
            if (originCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "originCountryCode", originCountryCode));
            }
            if (destinationCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "destinationCountryCode", destinationCountryCode));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetServices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ServicesInner>>("/api/v1/services", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Services This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier provided to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServicesInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServicesInner>> GetServicesAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<List<ServicesInner>> localVarResponse = await GetServicesWithHttpInfoAsync(xPBDeveloperPartnerID, carrier, originCountryCode, destinationCountryCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Services This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. If query parameters are not provided, this will default to &#x60;USPS&#x60; as carrier, &#x60;US&#x60; as both origin and destination country code.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier provided to an individual carrier. It can be referred from the response of Get Carriers API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServicesInner&gt;)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<List<ServicesInner>>> GetServicesWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (carrier != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "carrier", carrier));
            }
            if (originCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "originCountryCode", originCountryCode));
            }
            if (destinationCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "destinationCountryCode", destinationCountryCode));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetServices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ServicesInner>>("/api/v1/services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Signature Image ERR This operation provides a downloadable link which consists of a signature image for specific ERR (Electronic Return Receipt) shipment, and this is known as POD. &lt;br /&gt; Proof of Delivery (POD) is a document or file that shows an evidence of shipment delivery. This file contains the digital copy of recipient&#39;s signature, i.e., the signature image, in the form of downloadable link or URL.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID is a unique identifier for an individual shipment.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SignatureFileResponse</returns>
        public SignatureFileResponse GetSignatureImageERR(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<SignatureFileResponse> localVarResponse = GetSignatureImageERRWithHttpInfo(shipmentId, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Signature Image ERR This operation provides a downloadable link which consists of a signature image for specific ERR (Electronic Return Receipt) shipment, and this is known as POD. &lt;br /&gt; Proof of Delivery (POD) is a document or file that shows an evidence of shipment delivery. This file contains the digital copy of recipient&#39;s signature, i.e., the signature image, in the form of downloadable link or URL.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID is a unique identifier for an individual shipment.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SignatureFileResponse</returns>
        public com.pitneybowes.api360.Client.ApiResponse<SignatureFileResponse> GetSignatureImageERRWithHttpInfo(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentApi->GetSignatureImageERR");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetSignatureImageERR";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SignatureFileResponse>("/api/v1/err/shipments/{shipmentId}/signaturefile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignatureImageERR", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Signature Image ERR This operation provides a downloadable link which consists of a signature image for specific ERR (Electronic Return Receipt) shipment, and this is known as POD. &lt;br /&gt; Proof of Delivery (POD) is a document or file that shows an evidence of shipment delivery. This file contains the digital copy of recipient&#39;s signature, i.e., the signature image, in the form of downloadable link or URL.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID is a unique identifier for an individual shipment.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignatureFileResponse</returns>
        public async System.Threading.Tasks.Task<SignatureFileResponse> GetSignatureImageERRAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<SignatureFileResponse> localVarResponse = await GetSignatureImageERRWithHttpInfoAsync(shipmentId, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Signature Image ERR This operation provides a downloadable link which consists of a signature image for specific ERR (Electronic Return Receipt) shipment, and this is known as POD. &lt;br /&gt; Proof of Delivery (POD) is a document or file that shows an evidence of shipment delivery. This file contains the digital copy of recipient&#39;s signature, i.e., the signature image, in the form of downloadable link or URL.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">Shipment ID is a unique identifier for an individual shipment.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer Partner ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignatureFileResponse)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<SignatureFileResponse>> GetSignatureImageERRWithHttpInfoAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentApi->GetSignatureImageERR");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetSignatureImageERR";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SignatureFileResponse>("/api/v1/err/shipments/{shipmentId}/signaturefile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignatureImageERR", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Special Services This operation fetches Special Services for a given carrier, service, origin country, and the destination country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier,&#x60;US&#x60; as both origin and destination country and would show for all service and parcel types
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="service">This indicates the serviceId. It can be referred from response of &#x60;Get Services&#x60; API (optional)</param>
        /// <param name="parcel">This indicates the parcel Id, a unique identifier named to individual package. It can be referred from response of &#x60;Get Parcel Types&#x60; API (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to  an individual carrier. It can be referred from response of &#x60;Get Carriers&#x60; API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpecialServices</returns>
        public SpecialServices GetSpecialServices(string? xPBDeveloperPartnerID = default(string?), string? service = default(string?), string? parcel = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<SpecialServices> localVarResponse = GetSpecialServicesWithHttpInfo(xPBDeveloperPartnerID, service, parcel, carrier, originCountryCode, destinationCountryCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Special Services This operation fetches Special Services for a given carrier, service, origin country, and the destination country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier,&#x60;US&#x60; as both origin and destination country and would show for all service and parcel types
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="service">This indicates the serviceId. It can be referred from response of &#x60;Get Services&#x60; API (optional)</param>
        /// <param name="parcel">This indicates the parcel Id, a unique identifier named to individual package. It can be referred from response of &#x60;Get Parcel Types&#x60; API (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to  an individual carrier. It can be referred from response of &#x60;Get Carriers&#x60; API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpecialServices</returns>
        public com.pitneybowes.api360.Client.ApiResponse<SpecialServices> GetSpecialServicesWithHttpInfo(string? xPBDeveloperPartnerID = default(string?), string? service = default(string?), string? parcel = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (service != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "service", service));
            }
            if (parcel != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "parcel", parcel));
            }
            if (carrier != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "carrier", carrier));
            }
            if (originCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "originCountryCode", originCountryCode));
            }
            if (destinationCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "destinationCountryCode", destinationCountryCode));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetSpecialServices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SpecialServices>("/api/v1/specialServices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpecialServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Special Services This operation fetches Special Services for a given carrier, service, origin country, and the destination country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier,&#x60;US&#x60; as both origin and destination country and would show for all service and parcel types
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="service">This indicates the serviceId. It can be referred from response of &#x60;Get Services&#x60; API (optional)</param>
        /// <param name="parcel">This indicates the parcel Id, a unique identifier named to individual package. It can be referred from response of &#x60;Get Parcel Types&#x60; API (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to  an individual carrier. It can be referred from response of &#x60;Get Carriers&#x60; API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpecialServices</returns>
        public async System.Threading.Tasks.Task<SpecialServices> GetSpecialServicesAsync(string? xPBDeveloperPartnerID = default(string?), string? service = default(string?), string? parcel = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<SpecialServices> localVarResponse = await GetSpecialServicesWithHttpInfoAsync(xPBDeveloperPartnerID, service, parcel, carrier, originCountryCode, destinationCountryCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Special Services This operation fetches Special Services for a given carrier, service, origin country, and the destination country. If query parameters are not provided, it will default to &#x60;USPS&#x60; as carrier,&#x60;US&#x60; as both origin and destination country and would show for all service and parcel types
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="service">This indicates the serviceId. It can be referred from response of &#x60;Get Services&#x60; API (optional)</param>
        /// <param name="parcel">This indicates the parcel Id, a unique identifier named to individual package. It can be referred from response of &#x60;Get Parcel Types&#x60; API (optional)</param>
        /// <param name="carrier">This indicates the CarrierID, a unique identifier given to  an individual carrier. It can be referred from response of &#x60;Get Carriers&#x60; API (optional)</param>
        /// <param name="originCountryCode">This indicates the Source Country. The two-character ISO country code for the country where the Shipment originates. (optional)</param>
        /// <param name="destinationCountryCode">This indicates the Destination Country for the Shipment. The two-character ISO country code for the country where the shipment is to be delivered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpecialServices)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<SpecialServices>> GetSpecialServicesWithHttpInfoAsync(string? xPBDeveloperPartnerID = default(string?), string? service = default(string?), string? parcel = default(string?), string? carrier = default(string?), string? originCountryCode = default(string?), string? destinationCountryCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (service != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "service", service));
            }
            if (parcel != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "parcel", parcel));
            }
            if (carrier != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "carrier", carrier));
            }
            if (originCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "originCountryCode", originCountryCode));
            }
            if (destinationCountryCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "destinationCountryCode", destinationCountryCode));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.GetSpecialServices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SpecialServices>("/api/v1/specialServices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpecialServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reprint Shipment This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned to the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return label layout details and parcel tracking number object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReprintShipment</returns>
        public ReprintShipment ReprintShipmentById(string shipmentId, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<ReprintShipment> localVarResponse = ReprintShipmentByIdWithHttpInfo(shipmentId, xPBDeveloperPartnerID, compactResponse);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reprint Shipment This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned to the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return label layout details and parcel tracking number object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReprintShipment</returns>
        public com.pitneybowes.api360.Client.ApiResponse<ReprintShipment> ReprintShipmentByIdWithHttpInfo(string shipmentId, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentApi->ReprintShipmentById");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            if (compactResponse != null)
            {
                localVarRequestOptions.HeaderParameters.Add("compactResponse", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(compactResponse)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.ReprintShipmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReprintShipment>("/api/v1/shipments/{shipmentId}/reprint", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReprintShipmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reprint Shipment This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned to the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return label layout details and parcel tracking number object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReprintShipment</returns>
        public async System.Threading.Tasks.Task<ReprintShipment> ReprintShipmentByIdAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<ReprintShipment> localVarResponse = await ReprintShipmentByIdWithHttpInfoAsync(shipmentId, xPBDeveloperPartnerID, compactResponse, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reprint Shipment This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier assigned to the Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="compactResponse">This header defines if the response required is detailed or compact. When value is set to true, it will only return label layout details and parcel tracking number object in response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReprintShipment)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<ReprintShipment>> ReprintShipmentByIdWithHttpInfoAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), bool? compactResponse = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentApi->ReprintShipmentById");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            if (compactResponse != null)
            {
                localVarRequestOptions.HeaderParameters.Add("compactResponse", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(compactResponse)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.ReprintShipmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReprintShipment>("/api/v1/shipments/{shipmentId}/reprint", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReprintShipmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shipment by Id This operation retrieves shipment details using shipmentId.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier for an individual Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSingleShipment</returns>
        public GetSingleShipment ShipmentById(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<GetSingleShipment> localVarResponse = ShipmentByIdWithHttpInfo(shipmentId, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipment by Id This operation retrieves shipment details using shipmentId.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier for an individual Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSingleShipment</returns>
        public com.pitneybowes.api360.Client.ApiResponse<GetSingleShipment> ShipmentByIdWithHttpInfo(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentApi->ShipmentById");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.ShipmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSingleShipment>("/api/v1/shipments/{shipmentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shipment by Id This operation retrieves shipment details using shipmentId.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier for an individual Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSingleShipment</returns>
        public async System.Threading.Tasks.Task<GetSingleShipment> ShipmentByIdAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<GetSingleShipment> localVarResponse = await ShipmentByIdWithHttpInfoAsync(shipmentId, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipment by Id This operation retrieves shipment details using shipmentId.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">This indicates the shipmentId, a unique identifier for an individual Shipment.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSingleShipment)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<GetSingleShipment>> ShipmentByIdWithHttpInfoAsync(string shipmentId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'shipmentId' when calling ShipmentApi->ShipmentById");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipmentId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "ShipmentApi.ShipmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSingleShipment>("/api/v1/shipments/{shipmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
