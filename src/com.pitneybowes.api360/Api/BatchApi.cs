/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.pitneybowes.api360.Client;
using com.pitneybowes.api360.Model;

namespace com.pitneybowes.api360.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bulk Import Shipments
        /// </summary>
        /// <remarks>
        /// This operation imports the .CSV file, which includes all the required fields to create shipments in bulk. The payload contains information about the shipments you want to import, such as &#x60;carrier account&#x60;, &#x60;label layout&#x60;, &#x60;service&#x60;, and any &#x60;special services&#x60; required for the shipments. After batch is submitted, user needs to upload csv file of shipment transactions to the uploadURL returned in response.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the Request body to bulk import shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShipmentBatch</returns>
        ShipmentBatch BulkImportAPI(CreateBatchRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Bulk Import Shipments
        /// </summary>
        /// <remarks>
        /// This operation imports the .CSV file, which includes all the required fields to create shipments in bulk. The payload contains information about the shipments you want to import, such as &#x60;carrier account&#x60;, &#x60;label layout&#x60;, &#x60;service&#x60;, and any &#x60;special services&#x60; required for the shipments. After batch is submitted, user needs to upload csv file of shipment transactions to the uploadURL returned in response.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the Request body to bulk import shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShipmentBatch</returns>
        ApiResponse<ShipmentBatch> BulkImportAPIWithHttpInfo(CreateBatchRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Bulk Import Shipments ERR
        /// </summary>
        /// <remarks>
        /// This operation imports the .CSV file which includes fields required for creating ERR (Electronic Return Receipt) Bulk Shipments.    The payload, which is used for shipment transactions, contains the following essential information in .CSV file:   - Carrier Account   - Output format: Shipping Label and Coversheet    - Services, and   - Special Services     The above-mentioned information are stored in AWS-S3 which in turn provides URL to users. When Batch is submitted, S3 returned URL along with .CSV file are uploaded, which generates BatchID.    The same BatchID is used to track the status of BulkImport. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the request body to import ERR Bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">The PB-Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShipmentBatchResponseERR</returns>
        ShipmentBatchResponseERR BulkImportAPIERR(CreateBatchRequestERR body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Bulk Import Shipments ERR
        /// </summary>
        /// <remarks>
        /// This operation imports the .CSV file which includes fields required for creating ERR (Electronic Return Receipt) Bulk Shipments.    The payload, which is used for shipment transactions, contains the following essential information in .CSV file:   - Carrier Account   - Output format: Shipping Label and Coversheet    - Services, and   - Special Services     The above-mentioned information are stored in AWS-S3 which in turn provides URL to users. When Batch is submitted, S3 returned URL along with .CSV file are uploaded, which generates BatchID.    The same BatchID is used to track the status of BulkImport. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the request body to import ERR Bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">The PB-Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShipmentBatchResponseERR</returns>
        ApiResponse<ShipmentBatchResponseERR> BulkImportAPIERRWithHttpInfo(CreateBatchRequestERR body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create Bulk Shipments
        /// </summary>
        /// <remarks>
        /// This operation creates a batch of bulk (larger quantities) shipments for single or multiple recipients. The shipments can be addressed to a single or multiple recipients with different combination of carrier, service special services and parcel type. &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; are used as default when user do not wish to provide at shipment level. If user choose to provide these at Shipment level then it overrides the values provided at root level. At shipment level either you can wish to provide all of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; or not provide all of them if wants to use default ones from root level. If user do not provide any one out of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60; and &#x60;serviceId&#x60; at shipment level it would result in validation error
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the Request body to create bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BulkShipmentResponse</returns>
        BulkShipmentResponse CreateBulkShipmentsAPI(CreateBulkShipmentsAPIRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create Bulk Shipments
        /// </summary>
        /// <remarks>
        /// This operation creates a batch of bulk (larger quantities) shipments for single or multiple recipients. The shipments can be addressed to a single or multiple recipients with different combination of carrier, service special services and parcel type. &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; are used as default when user do not wish to provide at shipment level. If user choose to provide these at Shipment level then it overrides the values provided at root level. At shipment level either you can wish to provide all of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; or not provide all of them if wants to use default ones from root level. If user do not provide any one out of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60; and &#x60;serviceId&#x60; at shipment level it would result in validation error
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the Request body to create bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BulkShipmentResponse</returns>
        ApiResponse<BulkShipmentResponse> CreateBulkShipmentsAPIWithHttpInfo(CreateBulkShipmentsAPIRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create Bulk Shipments ERR
        /// </summary>
        /// <remarks>
        /// ERR (Electronic Return Receipt) is an official United States Postal Service® (USPS) document designed to be equivalent to the hardcopy &#39;green card&#39; Return Receipt. &lt;br /&gt;    It provides the following information:   - Name of the Recipient     - Time when article is delivered   - Signature (image) of the Recipient     - Address where the item is delivered, and    - Date when the article gets delivered.      ERR is combined with certain classes and categories of mails, which are as follow:   - First-Class Mail®    - Priority Mail®     ERR Batch supports two types of Shipment Document format:    - Shipping Label    - Coversheet       This API \&quot;Create Bulk Shipments with ERR\&quot; operation requires the following information:   - Recipient (Single or Multiple)   - Carrier - USPS   - Service   - Parcel Type, and   - Special Service.    The ERR API works at two levels: Shipment level and Root level. Root level is marked as Default, where multiple shipments are processed and entities are common for all shipments. While at Shipment level, entities might differ. &lt;br /&gt;   User can either define values for *CarrierAccountID*, *ParcelType*, *ServiceID*, and *SpecialService* respectively at the Root level for all shipments, or mention the values at Shipment level, i.e., for individual shipment(s).     If user does not provide values for the above-mentioned fields combinedly at Shipment level, then the default values for these fields provided at Root level will be considered. While, if user provides these values combinedly at Shipment Level for individual shipment(s), it will override the values defined at Root level. &lt;br /&gt;   &lt;br /&gt;   *Condition: The fields *CarrierAccountID*, *ParcelType*, *ServiceID* are treated as a combination, and values against each field must be provided if user selects Shipment level. In case any of these field(s) out of the mentioned combination is/are missing, it will return validation error.*    
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the request body to create Bulk Shipment for ERR.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BulkShipmentResponseERR</returns>
        BulkShipmentResponseERR CreateBulkShipmentsAPIERR(CreateBulkShipmentsAPIERRRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create Bulk Shipments ERR
        /// </summary>
        /// <remarks>
        /// ERR (Electronic Return Receipt) is an official United States Postal Service® (USPS) document designed to be equivalent to the hardcopy &#39;green card&#39; Return Receipt. &lt;br /&gt;    It provides the following information:   - Name of the Recipient     - Time when article is delivered   - Signature (image) of the Recipient     - Address where the item is delivered, and    - Date when the article gets delivered.      ERR is combined with certain classes and categories of mails, which are as follow:   - First-Class Mail®    - Priority Mail®     ERR Batch supports two types of Shipment Document format:    - Shipping Label    - Coversheet       This API \&quot;Create Bulk Shipments with ERR\&quot; operation requires the following information:   - Recipient (Single or Multiple)   - Carrier - USPS   - Service   - Parcel Type, and   - Special Service.    The ERR API works at two levels: Shipment level and Root level. Root level is marked as Default, where multiple shipments are processed and entities are common for all shipments. While at Shipment level, entities might differ. &lt;br /&gt;   User can either define values for *CarrierAccountID*, *ParcelType*, *ServiceID*, and *SpecialService* respectively at the Root level for all shipments, or mention the values at Shipment level, i.e., for individual shipment(s).     If user does not provide values for the above-mentioned fields combinedly at Shipment level, then the default values for these fields provided at Root level will be considered. While, if user provides these values combinedly at Shipment Level for individual shipment(s), it will override the values defined at Root level. &lt;br /&gt;   &lt;br /&gt;   *Condition: The fields *CarrierAccountID*, *ParcelType*, *ServiceID* are treated as a combination, and values against each field must be provided if user selects Shipment level. In case any of these field(s) out of the mentioned combination is/are missing, it will return validation error.*    
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the request body to create Bulk Shipment for ERR.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BulkShipmentResponseERR</returns>
        ApiResponse<BulkShipmentResponseERR> CreateBulkShipmentsAPIERRWithHttpInfo(CreateBulkShipmentsAPIERRRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Batch Status
        /// </summary>
        /// <remarks>
        /// This operation retrieves the status of an existing Batch using *Batch ID*. Once the Job status is completed, the URL received from Response can be used to download the shipping label in PDF format.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetStatusDetailedResponse</returns>
        GetStatusDetailedResponse GetBatchStatusAPI(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Batch Status
        /// </summary>
        /// <remarks>
        /// This operation retrieves the status of an existing Batch using *Batch ID*. Once the Job status is completed, the URL received from Response can be used to download the shipping label in PDF format.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetStatusDetailedResponse</returns>
        ApiResponse<GetStatusDetailedResponse> GetBatchStatusAPIWithHttpInfo(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Batch Shipment Details
        /// </summary>
        /// <remarks>
        /// \&quot;This API operation provides the shipment details for those shipments which are SUCCESS or FAILED during batch processing at the following levels: - addressValidation - rating - labelGeneration, and - voidLabel  Based on fields/data mentioned in Query Parameter, user can check shipment details for particular status at any levels. &lt;br /&gt; If no values are provided in the fields mentioned in Query Parameter, the default for each will be: - Page: 1  - Size: 20 - Status: SUCCESS/FAILED. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="page">It returns detailed information for shipments status and it can cover in one or more pages. The default value for page number is 1. (optional)</param>
        /// <param name="size">Indicates the number of records per page. The default value for records is 20. (optional)</param>
        /// <param name="status">The status of the shipment. Values can be Failed or Success. (optional)</param>
        /// <param name="step">Indicates various stages of the batch processing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetShipmentsForBatch</returns>
        GetShipmentsForBatch GetShipmentDetailsForBatchAPI(string batchId, string? xPBDeveloperPartnerID = default(string?), int? page = default(int?), int? size = default(int?), string? status = default(string?), string? step = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Batch Shipment Details
        /// </summary>
        /// <remarks>
        /// \&quot;This API operation provides the shipment details for those shipments which are SUCCESS or FAILED during batch processing at the following levels: - addressValidation - rating - labelGeneration, and - voidLabel  Based on fields/data mentioned in Query Parameter, user can check shipment details for particular status at any levels. &lt;br /&gt; If no values are provided in the fields mentioned in Query Parameter, the default for each will be: - Page: 1  - Size: 20 - Status: SUCCESS/FAILED. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="page">It returns detailed information for shipments status and it can cover in one or more pages. The default value for page number is 1. (optional)</param>
        /// <param name="size">Indicates the number of records per page. The default value for records is 20. (optional)</param>
        /// <param name="status">The status of the shipment. Values can be Failed or Success. (optional)</param>
        /// <param name="step">Indicates various stages of the batch processing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetShipmentsForBatch</returns>
        ApiResponse<GetShipmentsForBatch> GetShipmentDetailsForBatchAPIWithHttpInfo(string batchId, string? xPBDeveloperPartnerID = default(string?), int? page = default(int?), int? size = default(int?), string? status = default(string?), string? step = default(string?), int operationIndex = 0);
        /// <summary>
        /// Process Batch
        /// </summary>
        /// <remarks>
        /// This operation processes (executes) the existing Batch. The payload for this endpoint needs only an empty JSON object and no additional data is required in the request body. The BatchID parameter located in the endpoint specifies which batch of shipments to process.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessShipmentResponse</returns>
        ProcessShipmentResponse ProcessBatchAPI(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Process Batch
        /// </summary>
        /// <remarks>
        /// This operation processes (executes) the existing Batch. The payload for this endpoint needs only an empty JSON object and no additional data is required in the request body. The BatchID parameter located in the endpoint specifies which batch of shipments to process.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessShipmentResponse</returns>
        ApiResponse<ProcessShipmentResponse> ProcessBatchAPIWithHttpInfo(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Void Batch Shipping Labels
        /// </summary>
        /// <remarks>
        /// This operation cancels (voids) shipments which are created using the Batch API operation &#x60;createBulkShipments&#x60;. &lt;br /&gt; If user wants to cancel specific shipment(s) of the Batch, then s/he needs to pass the *Shipment ID* for the selected shipments in the &#x60;shipmentIDs&#x60; array. While if user wants to cancel all shipments of the Batch, then s/he does not need to provide any *Shipment ID* in the array under request body.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="voidBatchRequest"> This is the request body for cancelling the selected shipments or entire Batch of shipments*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VoidBatchResponse</returns>
        VoidBatchResponse VoidShippingLabel(string batchId, string? xPBDeveloperPartnerID = default(string?), VoidBatchRequest? voidBatchRequest = default(VoidBatchRequest?), int operationIndex = 0);

        /// <summary>
        /// Void Batch Shipping Labels
        /// </summary>
        /// <remarks>
        /// This operation cancels (voids) shipments which are created using the Batch API operation &#x60;createBulkShipments&#x60;. &lt;br /&gt; If user wants to cancel specific shipment(s) of the Batch, then s/he needs to pass the *Shipment ID* for the selected shipments in the &#x60;shipmentIDs&#x60; array. While if user wants to cancel all shipments of the Batch, then s/he does not need to provide any *Shipment ID* in the array under request body.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="voidBatchRequest"> This is the request body for cancelling the selected shipments or entire Batch of shipments*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VoidBatchResponse</returns>
        ApiResponse<VoidBatchResponse> VoidShippingLabelWithHttpInfo(string batchId, string? xPBDeveloperPartnerID = default(string?), VoidBatchRequest? voidBatchRequest = default(VoidBatchRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Bulk Import Shipments
        /// </summary>
        /// <remarks>
        /// This operation imports the .CSV file, which includes all the required fields to create shipments in bulk. The payload contains information about the shipments you want to import, such as &#x60;carrier account&#x60;, &#x60;label layout&#x60;, &#x60;service&#x60;, and any &#x60;special services&#x60; required for the shipments. After batch is submitted, user needs to upload csv file of shipment transactions to the uploadURL returned in response.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the Request body to bulk import shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentBatch</returns>
        System.Threading.Tasks.Task<ShipmentBatch> BulkImportAPIAsync(CreateBatchRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Bulk Import Shipments
        /// </summary>
        /// <remarks>
        /// This operation imports the .CSV file, which includes all the required fields to create shipments in bulk. The payload contains information about the shipments you want to import, such as &#x60;carrier account&#x60;, &#x60;label layout&#x60;, &#x60;service&#x60;, and any &#x60;special services&#x60; required for the shipments. After batch is submitted, user needs to upload csv file of shipment transactions to the uploadURL returned in response.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the Request body to bulk import shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentBatch>> BulkImportAPIWithHttpInfoAsync(CreateBatchRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Bulk Import Shipments ERR
        /// </summary>
        /// <remarks>
        /// This operation imports the .CSV file which includes fields required for creating ERR (Electronic Return Receipt) Bulk Shipments.    The payload, which is used for shipment transactions, contains the following essential information in .CSV file:   - Carrier Account   - Output format: Shipping Label and Coversheet    - Services, and   - Special Services     The above-mentioned information are stored in AWS-S3 which in turn provides URL to users. When Batch is submitted, S3 returned URL along with .CSV file are uploaded, which generates BatchID.    The same BatchID is used to track the status of BulkImport. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the request body to import ERR Bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">The PB-Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentBatchResponseERR</returns>
        System.Threading.Tasks.Task<ShipmentBatchResponseERR> BulkImportAPIERRAsync(CreateBatchRequestERR body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Bulk Import Shipments ERR
        /// </summary>
        /// <remarks>
        /// This operation imports the .CSV file which includes fields required for creating ERR (Electronic Return Receipt) Bulk Shipments.    The payload, which is used for shipment transactions, contains the following essential information in .CSV file:   - Carrier Account   - Output format: Shipping Label and Coversheet    - Services, and   - Special Services     The above-mentioned information are stored in AWS-S3 which in turn provides URL to users. When Batch is submitted, S3 returned URL along with .CSV file are uploaded, which generates BatchID.    The same BatchID is used to track the status of BulkImport. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the request body to import ERR Bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">The PB-Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentBatchResponseERR)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentBatchResponseERR>> BulkImportAPIERRWithHttpInfoAsync(CreateBatchRequestERR body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Bulk Shipments
        /// </summary>
        /// <remarks>
        /// This operation creates a batch of bulk (larger quantities) shipments for single or multiple recipients. The shipments can be addressed to a single or multiple recipients with different combination of carrier, service special services and parcel type. &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; are used as default when user do not wish to provide at shipment level. If user choose to provide these at Shipment level then it overrides the values provided at root level. At shipment level either you can wish to provide all of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; or not provide all of them if wants to use default ones from root level. If user do not provide any one out of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60; and &#x60;serviceId&#x60; at shipment level it would result in validation error
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the Request body to create bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BulkShipmentResponse</returns>
        System.Threading.Tasks.Task<BulkShipmentResponse> CreateBulkShipmentsAPIAsync(CreateBulkShipmentsAPIRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Bulk Shipments
        /// </summary>
        /// <remarks>
        /// This operation creates a batch of bulk (larger quantities) shipments for single or multiple recipients. The shipments can be addressed to a single or multiple recipients with different combination of carrier, service special services and parcel type. &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; are used as default when user do not wish to provide at shipment level. If user choose to provide these at Shipment level then it overrides the values provided at root level. At shipment level either you can wish to provide all of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; or not provide all of them if wants to use default ones from root level. If user do not provide any one out of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60; and &#x60;serviceId&#x60; at shipment level it would result in validation error
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the Request body to create bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BulkShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkShipmentResponse>> CreateBulkShipmentsAPIWithHttpInfoAsync(CreateBulkShipmentsAPIRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Bulk Shipments ERR
        /// </summary>
        /// <remarks>
        /// ERR (Electronic Return Receipt) is an official United States Postal Service® (USPS) document designed to be equivalent to the hardcopy &#39;green card&#39; Return Receipt. &lt;br /&gt;    It provides the following information:   - Name of the Recipient     - Time when article is delivered   - Signature (image) of the Recipient     - Address where the item is delivered, and    - Date when the article gets delivered.      ERR is combined with certain classes and categories of mails, which are as follow:   - First-Class Mail®    - Priority Mail®     ERR Batch supports two types of Shipment Document format:    - Shipping Label    - Coversheet       This API \&quot;Create Bulk Shipments with ERR\&quot; operation requires the following information:   - Recipient (Single or Multiple)   - Carrier - USPS   - Service   - Parcel Type, and   - Special Service.    The ERR API works at two levels: Shipment level and Root level. Root level is marked as Default, where multiple shipments are processed and entities are common for all shipments. While at Shipment level, entities might differ. &lt;br /&gt;   User can either define values for *CarrierAccountID*, *ParcelType*, *ServiceID*, and *SpecialService* respectively at the Root level for all shipments, or mention the values at Shipment level, i.e., for individual shipment(s).     If user does not provide values for the above-mentioned fields combinedly at Shipment level, then the default values for these fields provided at Root level will be considered. While, if user provides these values combinedly at Shipment Level for individual shipment(s), it will override the values defined at Root level. &lt;br /&gt;   &lt;br /&gt;   *Condition: The fields *CarrierAccountID*, *ParcelType*, *ServiceID* are treated as a combination, and values against each field must be provided if user selects Shipment level. In case any of these field(s) out of the mentioned combination is/are missing, it will return validation error.*    
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the request body to create Bulk Shipment for ERR.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BulkShipmentResponseERR</returns>
        System.Threading.Tasks.Task<BulkShipmentResponseERR> CreateBulkShipmentsAPIERRAsync(CreateBulkShipmentsAPIERRRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Bulk Shipments ERR
        /// </summary>
        /// <remarks>
        /// ERR (Electronic Return Receipt) is an official United States Postal Service® (USPS) document designed to be equivalent to the hardcopy &#39;green card&#39; Return Receipt. &lt;br /&gt;    It provides the following information:   - Name of the Recipient     - Time when article is delivered   - Signature (image) of the Recipient     - Address where the item is delivered, and    - Date when the article gets delivered.      ERR is combined with certain classes and categories of mails, which are as follow:   - First-Class Mail®    - Priority Mail®     ERR Batch supports two types of Shipment Document format:    - Shipping Label    - Coversheet       This API \&quot;Create Bulk Shipments with ERR\&quot; operation requires the following information:   - Recipient (Single or Multiple)   - Carrier - USPS   - Service   - Parcel Type, and   - Special Service.    The ERR API works at two levels: Shipment level and Root level. Root level is marked as Default, where multiple shipments are processed and entities are common for all shipments. While at Shipment level, entities might differ. &lt;br /&gt;   User can either define values for *CarrierAccountID*, *ParcelType*, *ServiceID*, and *SpecialService* respectively at the Root level for all shipments, or mention the values at Shipment level, i.e., for individual shipment(s).     If user does not provide values for the above-mentioned fields combinedly at Shipment level, then the default values for these fields provided at Root level will be considered. While, if user provides these values combinedly at Shipment Level for individual shipment(s), it will override the values defined at Root level. &lt;br /&gt;   &lt;br /&gt;   *Condition: The fields *CarrierAccountID*, *ParcelType*, *ServiceID* are treated as a combination, and values against each field must be provided if user selects Shipment level. In case any of these field(s) out of the mentioned combination is/are missing, it will return validation error.*    
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the request body to create Bulk Shipment for ERR.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BulkShipmentResponseERR)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkShipmentResponseERR>> CreateBulkShipmentsAPIERRWithHttpInfoAsync(CreateBulkShipmentsAPIERRRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Batch Status
        /// </summary>
        /// <remarks>
        /// This operation retrieves the status of an existing Batch using *Batch ID*. Once the Job status is completed, the URL received from Response can be used to download the shipping label in PDF format.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetStatusDetailedResponse</returns>
        System.Threading.Tasks.Task<GetStatusDetailedResponse> GetBatchStatusAPIAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Batch Status
        /// </summary>
        /// <remarks>
        /// This operation retrieves the status of an existing Batch using *Batch ID*. Once the Job status is completed, the URL received from Response can be used to download the shipping label in PDF format.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetStatusDetailedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStatusDetailedResponse>> GetBatchStatusAPIWithHttpInfoAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Batch Shipment Details
        /// </summary>
        /// <remarks>
        /// \&quot;This API operation provides the shipment details for those shipments which are SUCCESS or FAILED during batch processing at the following levels: - addressValidation - rating - labelGeneration, and - voidLabel  Based on fields/data mentioned in Query Parameter, user can check shipment details for particular status at any levels. &lt;br /&gt; If no values are provided in the fields mentioned in Query Parameter, the default for each will be: - Page: 1  - Size: 20 - Status: SUCCESS/FAILED. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="page">It returns detailed information for shipments status and it can cover in one or more pages. The default value for page number is 1. (optional)</param>
        /// <param name="size">Indicates the number of records per page. The default value for records is 20. (optional)</param>
        /// <param name="status">The status of the shipment. Values can be Failed or Success. (optional)</param>
        /// <param name="step">Indicates various stages of the batch processing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetShipmentsForBatch</returns>
        System.Threading.Tasks.Task<GetShipmentsForBatch> GetShipmentDetailsForBatchAPIAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), int? page = default(int?), int? size = default(int?), string? status = default(string?), string? step = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Batch Shipment Details
        /// </summary>
        /// <remarks>
        /// \&quot;This API operation provides the shipment details for those shipments which are SUCCESS or FAILED during batch processing at the following levels: - addressValidation - rating - labelGeneration, and - voidLabel  Based on fields/data mentioned in Query Parameter, user can check shipment details for particular status at any levels. &lt;br /&gt; If no values are provided in the fields mentioned in Query Parameter, the default for each will be: - Page: 1  - Size: 20 - Status: SUCCESS/FAILED. 
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="page">It returns detailed information for shipments status and it can cover in one or more pages. The default value for page number is 1. (optional)</param>
        /// <param name="size">Indicates the number of records per page. The default value for records is 20. (optional)</param>
        /// <param name="status">The status of the shipment. Values can be Failed or Success. (optional)</param>
        /// <param name="step">Indicates various stages of the batch processing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetShipmentsForBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShipmentsForBatch>> GetShipmentDetailsForBatchAPIWithHttpInfoAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), int? page = default(int?), int? size = default(int?), string? status = default(string?), string? step = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Process Batch
        /// </summary>
        /// <remarks>
        /// This operation processes (executes) the existing Batch. The payload for this endpoint needs only an empty JSON object and no additional data is required in the request body. The BatchID parameter located in the endpoint specifies which batch of shipments to process.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessShipmentResponse</returns>
        System.Threading.Tasks.Task<ProcessShipmentResponse> ProcessBatchAPIAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Process Batch
        /// </summary>
        /// <remarks>
        /// This operation processes (executes) the existing Batch. The payload for this endpoint needs only an empty JSON object and no additional data is required in the request body. The BatchID parameter located in the endpoint specifies which batch of shipments to process.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessShipmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessShipmentResponse>> ProcessBatchAPIWithHttpInfoAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Void Batch Shipping Labels
        /// </summary>
        /// <remarks>
        /// This operation cancels (voids) shipments which are created using the Batch API operation &#x60;createBulkShipments&#x60;. &lt;br /&gt; If user wants to cancel specific shipment(s) of the Batch, then s/he needs to pass the *Shipment ID* for the selected shipments in the &#x60;shipmentIDs&#x60; array. While if user wants to cancel all shipments of the Batch, then s/he does not need to provide any *Shipment ID* in the array under request body.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="voidBatchRequest"> This is the request body for cancelling the selected shipments or entire Batch of shipments*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VoidBatchResponse</returns>
        System.Threading.Tasks.Task<VoidBatchResponse> VoidShippingLabelAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), VoidBatchRequest? voidBatchRequest = default(VoidBatchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Void Batch Shipping Labels
        /// </summary>
        /// <remarks>
        /// This operation cancels (voids) shipments which are created using the Batch API operation &#x60;createBulkShipments&#x60;. &lt;br /&gt; If user wants to cancel specific shipment(s) of the Batch, then s/he needs to pass the *Shipment ID* for the selected shipments in the &#x60;shipmentIDs&#x60; array. While if user wants to cancel all shipments of the Batch, then s/he does not need to provide any *Shipment ID* in the array under request body.
        /// </remarks>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="voidBatchRequest"> This is the request body for cancelling the selected shipments or entire Batch of shipments*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VoidBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VoidBatchResponse>> VoidShippingLabelWithHttpInfoAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), VoidBatchRequest? voidBatchRequest = default(VoidBatchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApi : IBatchApiSync, IBatchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BatchApi : IBatchApi
    {
        private com.pitneybowes.api360.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchApi(string basePath)
        {
            this.Configuration = com.pitneybowes.api360.Client.Configuration.MergeConfigurations(
                com.pitneybowes.api360.Client.GlobalConfiguration.Instance,
                new com.pitneybowes.api360.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BatchApi(com.pitneybowes.api360.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.pitneybowes.api360.Client.Configuration.MergeConfigurations(
                com.pitneybowes.api360.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.pitneybowes.api360.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BatchApi(com.pitneybowes.api360.Client.ISynchronousClient client, com.pitneybowes.api360.Client.IAsynchronousClient asyncClient, com.pitneybowes.api360.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.pitneybowes.api360.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.pitneybowes.api360.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.pitneybowes.api360.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.pitneybowes.api360.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.pitneybowes.api360.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Bulk Import Shipments This operation imports the .CSV file, which includes all the required fields to create shipments in bulk. The payload contains information about the shipments you want to import, such as &#x60;carrier account&#x60;, &#x60;label layout&#x60;, &#x60;service&#x60;, and any &#x60;special services&#x60; required for the shipments. After batch is submitted, user needs to upload csv file of shipment transactions to the uploadURL returned in response.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the Request body to bulk import shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShipmentBatch</returns>
        public ShipmentBatch BulkImportAPI(CreateBatchRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<ShipmentBatch> localVarResponse = BulkImportAPIWithHttpInfo(body, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Import Shipments This operation imports the .CSV file, which includes all the required fields to create shipments in bulk. The payload contains information about the shipments you want to import, such as &#x60;carrier account&#x60;, &#x60;label layout&#x60;, &#x60;service&#x60;, and any &#x60;special services&#x60; required for the shipments. After batch is submitted, user needs to upload csv file of shipment transactions to the uploadURL returned in response.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the Request body to bulk import shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShipmentBatch</returns>
        public com.pitneybowes.api360.Client.ApiResponse<ShipmentBatch> BulkImportAPIWithHttpInfo(CreateBatchRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'body' when calling BatchApi->BulkImportAPI");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BatchApi.BulkImportAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ShipmentBatch>("/api/v1/shipments/importUrl", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkImportAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk Import Shipments This operation imports the .CSV file, which includes all the required fields to create shipments in bulk. The payload contains information about the shipments you want to import, such as &#x60;carrier account&#x60;, &#x60;label layout&#x60;, &#x60;service&#x60;, and any &#x60;special services&#x60; required for the shipments. After batch is submitted, user needs to upload csv file of shipment transactions to the uploadURL returned in response.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the Request body to bulk import shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentBatch</returns>
        public async System.Threading.Tasks.Task<ShipmentBatch> BulkImportAPIAsync(CreateBatchRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<ShipmentBatch> localVarResponse = await BulkImportAPIWithHttpInfoAsync(body, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Import Shipments This operation imports the .CSV file, which includes all the required fields to create shipments in bulk. The payload contains information about the shipments you want to import, such as &#x60;carrier account&#x60;, &#x60;label layout&#x60;, &#x60;service&#x60;, and any &#x60;special services&#x60; required for the shipments. After batch is submitted, user needs to upload csv file of shipment transactions to the uploadURL returned in response.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the Request body to bulk import shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentBatch)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<ShipmentBatch>> BulkImportAPIWithHttpInfoAsync(CreateBatchRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'body' when calling BatchApi->BulkImportAPI");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BatchApi.BulkImportAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ShipmentBatch>("/api/v1/shipments/importUrl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkImportAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk Import Shipments ERR This operation imports the .CSV file which includes fields required for creating ERR (Electronic Return Receipt) Bulk Shipments.    The payload, which is used for shipment transactions, contains the following essential information in .CSV file:   - Carrier Account   - Output format: Shipping Label and Coversheet    - Services, and   - Special Services     The above-mentioned information are stored in AWS-S3 which in turn provides URL to users. When Batch is submitted, S3 returned URL along with .CSV file are uploaded, which generates BatchID.    The same BatchID is used to track the status of BulkImport. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the request body to import ERR Bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">The PB-Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShipmentBatchResponseERR</returns>
        public ShipmentBatchResponseERR BulkImportAPIERR(CreateBatchRequestERR body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<ShipmentBatchResponseERR> localVarResponse = BulkImportAPIERRWithHttpInfo(body, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Import Shipments ERR This operation imports the .CSV file which includes fields required for creating ERR (Electronic Return Receipt) Bulk Shipments.    The payload, which is used for shipment transactions, contains the following essential information in .CSV file:   - Carrier Account   - Output format: Shipping Label and Coversheet    - Services, and   - Special Services     The above-mentioned information are stored in AWS-S3 which in turn provides URL to users. When Batch is submitted, S3 returned URL along with .CSV file are uploaded, which generates BatchID.    The same BatchID is used to track the status of BulkImport. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the request body to import ERR Bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">The PB-Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShipmentBatchResponseERR</returns>
        public com.pitneybowes.api360.Client.ApiResponse<ShipmentBatchResponseERR> BulkImportAPIERRWithHttpInfo(CreateBatchRequestERR body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'body' when calling BatchApi->BulkImportAPIERR");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BatchApi.BulkImportAPIERR";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ShipmentBatchResponseERR>("/api/v1/err/shipments/importUrl", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkImportAPIERR", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk Import Shipments ERR This operation imports the .CSV file which includes fields required for creating ERR (Electronic Return Receipt) Bulk Shipments.    The payload, which is used for shipment transactions, contains the following essential information in .CSV file:   - Carrier Account   - Output format: Shipping Label and Coversheet    - Services, and   - Special Services     The above-mentioned information are stored in AWS-S3 which in turn provides URL to users. When Batch is submitted, S3 returned URL along with .CSV file are uploaded, which generates BatchID.    The same BatchID is used to track the status of BulkImport. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the request body to import ERR Bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">The PB-Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentBatchResponseERR</returns>
        public async System.Threading.Tasks.Task<ShipmentBatchResponseERR> BulkImportAPIERRAsync(CreateBatchRequestERR body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<ShipmentBatchResponseERR> localVarResponse = await BulkImportAPIERRWithHttpInfoAsync(body, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Import Shipments ERR This operation imports the .CSV file which includes fields required for creating ERR (Electronic Return Receipt) Bulk Shipments.    The payload, which is used for shipment transactions, contains the following essential information in .CSV file:   - Carrier Account   - Output format: Shipping Label and Coversheet    - Services, and   - Special Services     The above-mentioned information are stored in AWS-S3 which in turn provides URL to users. When Batch is submitted, S3 returned URL along with .CSV file are uploaded, which generates BatchID.    The same BatchID is used to track the status of BulkImport. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> This is the request body to import ERR Bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">The PB-Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentBatchResponseERR)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<ShipmentBatchResponseERR>> BulkImportAPIERRWithHttpInfoAsync(CreateBatchRequestERR body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'body' when calling BatchApi->BulkImportAPIERR");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BatchApi.BulkImportAPIERR";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ShipmentBatchResponseERR>("/api/v1/err/shipments/importUrl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkImportAPIERR", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Bulk Shipments This operation creates a batch of bulk (larger quantities) shipments for single or multiple recipients. The shipments can be addressed to a single or multiple recipients with different combination of carrier, service special services and parcel type. &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; are used as default when user do not wish to provide at shipment level. If user choose to provide these at Shipment level then it overrides the values provided at root level. At shipment level either you can wish to provide all of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; or not provide all of them if wants to use default ones from root level. If user do not provide any one out of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60; and &#x60;serviceId&#x60; at shipment level it would result in validation error
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the Request body to create bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BulkShipmentResponse</returns>
        public BulkShipmentResponse CreateBulkShipmentsAPI(CreateBulkShipmentsAPIRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<BulkShipmentResponse> localVarResponse = CreateBulkShipmentsAPIWithHttpInfo(body, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Bulk Shipments This operation creates a batch of bulk (larger quantities) shipments for single or multiple recipients. The shipments can be addressed to a single or multiple recipients with different combination of carrier, service special services and parcel type. &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; are used as default when user do not wish to provide at shipment level. If user choose to provide these at Shipment level then it overrides the values provided at root level. At shipment level either you can wish to provide all of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; or not provide all of them if wants to use default ones from root level. If user do not provide any one out of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60; and &#x60;serviceId&#x60; at shipment level it would result in validation error
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the Request body to create bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BulkShipmentResponse</returns>
        public com.pitneybowes.api360.Client.ApiResponse<BulkShipmentResponse> CreateBulkShipmentsAPIWithHttpInfo(CreateBulkShipmentsAPIRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'body' when calling BatchApi->CreateBulkShipmentsAPI");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BatchApi.CreateBulkShipmentsAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BulkShipmentResponse>("/api/v1/bulkShipments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBulkShipmentsAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Bulk Shipments This operation creates a batch of bulk (larger quantities) shipments for single or multiple recipients. The shipments can be addressed to a single or multiple recipients with different combination of carrier, service special services and parcel type. &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; are used as default when user do not wish to provide at shipment level. If user choose to provide these at Shipment level then it overrides the values provided at root level. At shipment level either you can wish to provide all of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; or not provide all of them if wants to use default ones from root level. If user do not provide any one out of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60; and &#x60;serviceId&#x60; at shipment level it would result in validation error
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the Request body to create bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BulkShipmentResponse</returns>
        public async System.Threading.Tasks.Task<BulkShipmentResponse> CreateBulkShipmentsAPIAsync(CreateBulkShipmentsAPIRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<BulkShipmentResponse> localVarResponse = await CreateBulkShipmentsAPIWithHttpInfoAsync(body, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Bulk Shipments This operation creates a batch of bulk (larger quantities) shipments for single or multiple recipients. The shipments can be addressed to a single or multiple recipients with different combination of carrier, service special services and parcel type. &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; are used as default when user do not wish to provide at shipment level. If user choose to provide these at Shipment level then it overrides the values provided at root level. At shipment level either you can wish to provide all of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60;, &#x60;serviceId&#x60; and &#x60;specialServices&#x60; or not provide all of them if wants to use default ones from root level. If user do not provide any one out of &#x60;carrierAccountId&#x60;, &#x60;parcelType&#x60; and &#x60;serviceId&#x60; at shipment level it would result in validation error
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the Request body to create bulk shipments.</param>
        /// <param name="xPBDeveloperPartnerID">This is the Developer Partner ID. When the developer is the only partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BulkShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<BulkShipmentResponse>> CreateBulkShipmentsAPIWithHttpInfoAsync(CreateBulkShipmentsAPIRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'body' when calling BatchApi->CreateBulkShipmentsAPI");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BatchApi.CreateBulkShipmentsAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BulkShipmentResponse>("/api/v1/bulkShipments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBulkShipmentsAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Bulk Shipments ERR ERR (Electronic Return Receipt) is an official United States Postal Service® (USPS) document designed to be equivalent to the hardcopy &#39;green card&#39; Return Receipt. &lt;br /&gt;    It provides the following information:   - Name of the Recipient     - Time when article is delivered   - Signature (image) of the Recipient     - Address where the item is delivered, and    - Date when the article gets delivered.      ERR is combined with certain classes and categories of mails, which are as follow:   - First-Class Mail®    - Priority Mail®     ERR Batch supports two types of Shipment Document format:    - Shipping Label    - Coversheet       This API \&quot;Create Bulk Shipments with ERR\&quot; operation requires the following information:   - Recipient (Single or Multiple)   - Carrier - USPS   - Service   - Parcel Type, and   - Special Service.    The ERR API works at two levels: Shipment level and Root level. Root level is marked as Default, where multiple shipments are processed and entities are common for all shipments. While at Shipment level, entities might differ. &lt;br /&gt;   User can either define values for *CarrierAccountID*, *ParcelType*, *ServiceID*, and *SpecialService* respectively at the Root level for all shipments, or mention the values at Shipment level, i.e., for individual shipment(s).     If user does not provide values for the above-mentioned fields combinedly at Shipment level, then the default values for these fields provided at Root level will be considered. While, if user provides these values combinedly at Shipment Level for individual shipment(s), it will override the values defined at Root level. &lt;br /&gt;   &lt;br /&gt;   *Condition: The fields *CarrierAccountID*, *ParcelType*, *ServiceID* are treated as a combination, and values against each field must be provided if user selects Shipment level. In case any of these field(s) out of the mentioned combination is/are missing, it will return validation error.*    
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the request body to create Bulk Shipment for ERR.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BulkShipmentResponseERR</returns>
        public BulkShipmentResponseERR CreateBulkShipmentsAPIERR(CreateBulkShipmentsAPIERRRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<BulkShipmentResponseERR> localVarResponse = CreateBulkShipmentsAPIERRWithHttpInfo(body, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Bulk Shipments ERR ERR (Electronic Return Receipt) is an official United States Postal Service® (USPS) document designed to be equivalent to the hardcopy &#39;green card&#39; Return Receipt. &lt;br /&gt;    It provides the following information:   - Name of the Recipient     - Time when article is delivered   - Signature (image) of the Recipient     - Address where the item is delivered, and    - Date when the article gets delivered.      ERR is combined with certain classes and categories of mails, which are as follow:   - First-Class Mail®    - Priority Mail®     ERR Batch supports two types of Shipment Document format:    - Shipping Label    - Coversheet       This API \&quot;Create Bulk Shipments with ERR\&quot; operation requires the following information:   - Recipient (Single or Multiple)   - Carrier - USPS   - Service   - Parcel Type, and   - Special Service.    The ERR API works at two levels: Shipment level and Root level. Root level is marked as Default, where multiple shipments are processed and entities are common for all shipments. While at Shipment level, entities might differ. &lt;br /&gt;   User can either define values for *CarrierAccountID*, *ParcelType*, *ServiceID*, and *SpecialService* respectively at the Root level for all shipments, or mention the values at Shipment level, i.e., for individual shipment(s).     If user does not provide values for the above-mentioned fields combinedly at Shipment level, then the default values for these fields provided at Root level will be considered. While, if user provides these values combinedly at Shipment Level for individual shipment(s), it will override the values defined at Root level. &lt;br /&gt;   &lt;br /&gt;   *Condition: The fields *CarrierAccountID*, *ParcelType*, *ServiceID* are treated as a combination, and values against each field must be provided if user selects Shipment level. In case any of these field(s) out of the mentioned combination is/are missing, it will return validation error.*    
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the request body to create Bulk Shipment for ERR.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BulkShipmentResponseERR</returns>
        public com.pitneybowes.api360.Client.ApiResponse<BulkShipmentResponseERR> CreateBulkShipmentsAPIERRWithHttpInfo(CreateBulkShipmentsAPIERRRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'body' when calling BatchApi->CreateBulkShipmentsAPIERR");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BatchApi.CreateBulkShipmentsAPIERR";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BulkShipmentResponseERR>("/api/v1/err/bulkShipments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBulkShipmentsAPIERR", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Bulk Shipments ERR ERR (Electronic Return Receipt) is an official United States Postal Service® (USPS) document designed to be equivalent to the hardcopy &#39;green card&#39; Return Receipt. &lt;br /&gt;    It provides the following information:   - Name of the Recipient     - Time when article is delivered   - Signature (image) of the Recipient     - Address where the item is delivered, and    - Date when the article gets delivered.      ERR is combined with certain classes and categories of mails, which are as follow:   - First-Class Mail®    - Priority Mail®     ERR Batch supports two types of Shipment Document format:    - Shipping Label    - Coversheet       This API \&quot;Create Bulk Shipments with ERR\&quot; operation requires the following information:   - Recipient (Single or Multiple)   - Carrier - USPS   - Service   - Parcel Type, and   - Special Service.    The ERR API works at two levels: Shipment level and Root level. Root level is marked as Default, where multiple shipments are processed and entities are common for all shipments. While at Shipment level, entities might differ. &lt;br /&gt;   User can either define values for *CarrierAccountID*, *ParcelType*, *ServiceID*, and *SpecialService* respectively at the Root level for all shipments, or mention the values at Shipment level, i.e., for individual shipment(s).     If user does not provide values for the above-mentioned fields combinedly at Shipment level, then the default values for these fields provided at Root level will be considered. While, if user provides these values combinedly at Shipment Level for individual shipment(s), it will override the values defined at Root level. &lt;br /&gt;   &lt;br /&gt;   *Condition: The fields *CarrierAccountID*, *ParcelType*, *ServiceID* are treated as a combination, and values against each field must be provided if user selects Shipment level. In case any of these field(s) out of the mentioned combination is/are missing, it will return validation error.*    
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the request body to create Bulk Shipment for ERR.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BulkShipmentResponseERR</returns>
        public async System.Threading.Tasks.Task<BulkShipmentResponseERR> CreateBulkShipmentsAPIERRAsync(CreateBulkShipmentsAPIERRRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<BulkShipmentResponseERR> localVarResponse = await CreateBulkShipmentsAPIERRWithHttpInfoAsync(body, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Bulk Shipments ERR ERR (Electronic Return Receipt) is an official United States Postal Service® (USPS) document designed to be equivalent to the hardcopy &#39;green card&#39; Return Receipt. &lt;br /&gt;    It provides the following information:   - Name of the Recipient     - Time when article is delivered   - Signature (image) of the Recipient     - Address where the item is delivered, and    - Date when the article gets delivered.      ERR is combined with certain classes and categories of mails, which are as follow:   - First-Class Mail®    - Priority Mail®     ERR Batch supports two types of Shipment Document format:    - Shipping Label    - Coversheet       This API \&quot;Create Bulk Shipments with ERR\&quot; operation requires the following information:   - Recipient (Single or Multiple)   - Carrier - USPS   - Service   - Parcel Type, and   - Special Service.    The ERR API works at two levels: Shipment level and Root level. Root level is marked as Default, where multiple shipments are processed and entities are common for all shipments. While at Shipment level, entities might differ. &lt;br /&gt;   User can either define values for *CarrierAccountID*, *ParcelType*, *ServiceID*, and *SpecialService* respectively at the Root level for all shipments, or mention the values at Shipment level, i.e., for individual shipment(s).     If user does not provide values for the above-mentioned fields combinedly at Shipment level, then the default values for these fields provided at Root level will be considered. While, if user provides these values combinedly at Shipment Level for individual shipment(s), it will override the values defined at Root level. &lt;br /&gt;   &lt;br /&gt;   *Condition: The fields *CarrierAccountID*, *ParcelType*, *ServiceID* are treated as a combination, and values against each field must be provided if user selects Shipment level. In case any of these field(s) out of the mentioned combination is/are missing, it will return validation error.*    
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">This is the request body to create Bulk Shipment for ERR.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BulkShipmentResponseERR)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<BulkShipmentResponseERR>> CreateBulkShipmentsAPIERRWithHttpInfoAsync(CreateBulkShipmentsAPIERRRequest body, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'body' when calling BatchApi->CreateBulkShipmentsAPIERR");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BatchApi.CreateBulkShipmentsAPIERR";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BulkShipmentResponseERR>("/api/v1/err/bulkShipments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBulkShipmentsAPIERR", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Batch Status This operation retrieves the status of an existing Batch using *Batch ID*. Once the Job status is completed, the URL received from Response can be used to download the shipping label in PDF format.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetStatusDetailedResponse</returns>
        public GetStatusDetailedResponse GetBatchStatusAPI(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<GetStatusDetailedResponse> localVarResponse = GetBatchStatusAPIWithHttpInfo(batchId, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Batch Status This operation retrieves the status of an existing Batch using *Batch ID*. Once the Job status is completed, the URL received from Response can be used to download the shipping label in PDF format.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetStatusDetailedResponse</returns>
        public com.pitneybowes.api360.Client.ApiResponse<GetStatusDetailedResponse> GetBatchStatusAPIWithHttpInfo(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'batchId' when calling BatchApi->GetBatchStatusAPI");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("batchId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "BatchApi.GetBatchStatusAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetStatusDetailedResponse>("/api/v1/shipments/batch/{batchId}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchStatusAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Batch Status This operation retrieves the status of an existing Batch using *Batch ID*. Once the Job status is completed, the URL received from Response can be used to download the shipping label in PDF format.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetStatusDetailedResponse</returns>
        public async System.Threading.Tasks.Task<GetStatusDetailedResponse> GetBatchStatusAPIAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<GetStatusDetailedResponse> localVarResponse = await GetBatchStatusAPIWithHttpInfoAsync(batchId, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Batch Status This operation retrieves the status of an existing Batch using *Batch ID*. Once the Job status is completed, the URL received from Response can be used to download the shipping label in PDF format.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetStatusDetailedResponse)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<GetStatusDetailedResponse>> GetBatchStatusAPIWithHttpInfoAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'batchId' when calling BatchApi->GetBatchStatusAPI");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("batchId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "BatchApi.GetBatchStatusAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetStatusDetailedResponse>("/api/v1/shipments/batch/{batchId}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchStatusAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Batch Shipment Details \&quot;This API operation provides the shipment details for those shipments which are SUCCESS or FAILED during batch processing at the following levels: - addressValidation - rating - labelGeneration, and - voidLabel  Based on fields/data mentioned in Query Parameter, user can check shipment details for particular status at any levels. &lt;br /&gt; If no values are provided in the fields mentioned in Query Parameter, the default for each will be: - Page: 1  - Size: 20 - Status: SUCCESS/FAILED. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="page">It returns detailed information for shipments status and it can cover in one or more pages. The default value for page number is 1. (optional)</param>
        /// <param name="size">Indicates the number of records per page. The default value for records is 20. (optional)</param>
        /// <param name="status">The status of the shipment. Values can be Failed or Success. (optional)</param>
        /// <param name="step">Indicates various stages of the batch processing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetShipmentsForBatch</returns>
        public GetShipmentsForBatch GetShipmentDetailsForBatchAPI(string batchId, string? xPBDeveloperPartnerID = default(string?), int? page = default(int?), int? size = default(int?), string? status = default(string?), string? step = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<GetShipmentsForBatch> localVarResponse = GetShipmentDetailsForBatchAPIWithHttpInfo(batchId, xPBDeveloperPartnerID, page, size, status, step);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Batch Shipment Details \&quot;This API operation provides the shipment details for those shipments which are SUCCESS or FAILED during batch processing at the following levels: - addressValidation - rating - labelGeneration, and - voidLabel  Based on fields/data mentioned in Query Parameter, user can check shipment details for particular status at any levels. &lt;br /&gt; If no values are provided in the fields mentioned in Query Parameter, the default for each will be: - Page: 1  - Size: 20 - Status: SUCCESS/FAILED. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="page">It returns detailed information for shipments status and it can cover in one or more pages. The default value for page number is 1. (optional)</param>
        /// <param name="size">Indicates the number of records per page. The default value for records is 20. (optional)</param>
        /// <param name="status">The status of the shipment. Values can be Failed or Success. (optional)</param>
        /// <param name="step">Indicates various stages of the batch processing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetShipmentsForBatch</returns>
        public com.pitneybowes.api360.Client.ApiResponse<GetShipmentsForBatch> GetShipmentDetailsForBatchAPIWithHttpInfo(string batchId, string? xPBDeveloperPartnerID = default(string?), int? page = default(int?), int? size = default(int?), string? status = default(string?), string? step = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'batchId' when calling BatchApi->GetShipmentDetailsForBatchAPI");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("batchId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (step != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "step", step));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "BatchApi.GetShipmentDetailsForBatchAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetShipmentsForBatch>("/api/v1/shipments/batch/{batchId}/shipments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentDetailsForBatchAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Batch Shipment Details \&quot;This API operation provides the shipment details for those shipments which are SUCCESS or FAILED during batch processing at the following levels: - addressValidation - rating - labelGeneration, and - voidLabel  Based on fields/data mentioned in Query Parameter, user can check shipment details for particular status at any levels. &lt;br /&gt; If no values are provided in the fields mentioned in Query Parameter, the default for each will be: - Page: 1  - Size: 20 - Status: SUCCESS/FAILED. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="page">It returns detailed information for shipments status and it can cover in one or more pages. The default value for page number is 1. (optional)</param>
        /// <param name="size">Indicates the number of records per page. The default value for records is 20. (optional)</param>
        /// <param name="status">The status of the shipment. Values can be Failed or Success. (optional)</param>
        /// <param name="step">Indicates various stages of the batch processing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetShipmentsForBatch</returns>
        public async System.Threading.Tasks.Task<GetShipmentsForBatch> GetShipmentDetailsForBatchAPIAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), int? page = default(int?), int? size = default(int?), string? status = default(string?), string? step = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<GetShipmentsForBatch> localVarResponse = await GetShipmentDetailsForBatchAPIWithHttpInfoAsync(batchId, xPBDeveloperPartnerID, page, size, status, step, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Batch Shipment Details \&quot;This API operation provides the shipment details for those shipments which are SUCCESS or FAILED during batch processing at the following levels: - addressValidation - rating - labelGeneration, and - voidLabel  Based on fields/data mentioned in Query Parameter, user can check shipment details for particular status at any levels. &lt;br /&gt; If no values are provided in the fields mentioned in Query Parameter, the default for each will be: - Page: 1  - Size: 20 - Status: SUCCESS/FAILED. 
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner- ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="page">It returns detailed information for shipments status and it can cover in one or more pages. The default value for page number is 1. (optional)</param>
        /// <param name="size">Indicates the number of records per page. The default value for records is 20. (optional)</param>
        /// <param name="status">The status of the shipment. Values can be Failed or Success. (optional)</param>
        /// <param name="step">Indicates various stages of the batch processing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetShipmentsForBatch)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<GetShipmentsForBatch>> GetShipmentDetailsForBatchAPIWithHttpInfoAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), int? page = default(int?), int? size = default(int?), string? status = default(string?), string? step = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'batchId' when calling BatchApi->GetShipmentDetailsForBatchAPI");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("batchId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (step != null)
            {
                localVarRequestOptions.QueryParameters.Add(com.pitneybowes.api360.Client.ClientUtils.ParameterToMultiMap("", "step", step));
            }
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "BatchApi.GetShipmentDetailsForBatchAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetShipmentsForBatch>("/api/v1/shipments/batch/{batchId}/shipments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentDetailsForBatchAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process Batch This operation processes (executes) the existing Batch. The payload for this endpoint needs only an empty JSON object and no additional data is required in the request body. The BatchID parameter located in the endpoint specifies which batch of shipments to process.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProcessShipmentResponse</returns>
        public ProcessShipmentResponse ProcessBatchAPI(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<ProcessShipmentResponse> localVarResponse = ProcessBatchAPIWithHttpInfo(batchId, xPBDeveloperPartnerID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process Batch This operation processes (executes) the existing Batch. The payload for this endpoint needs only an empty JSON object and no additional data is required in the request body. The BatchID parameter located in the endpoint specifies which batch of shipments to process.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProcessShipmentResponse</returns>
        public com.pitneybowes.api360.Client.ApiResponse<ProcessShipmentResponse> ProcessBatchAPIWithHttpInfo(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'batchId' when calling BatchApi->ProcessBatchAPI");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("batchId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "BatchApi.ProcessBatchAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProcessShipmentResponse>("/api/v1/shipments/batch/{batchId}/process", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessBatchAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process Batch This operation processes (executes) the existing Batch. The payload for this endpoint needs only an empty JSON object and no additional data is required in the request body. The BatchID parameter located in the endpoint specifies which batch of shipments to process.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProcessShipmentResponse</returns>
        public async System.Threading.Tasks.Task<ProcessShipmentResponse> ProcessBatchAPIAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<ProcessShipmentResponse> localVarResponse = await ProcessBatchAPIWithHttpInfoAsync(batchId, xPBDeveloperPartnerID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process Batch This operation processes (executes) the existing Batch. The payload for this endpoint needs only an empty JSON object and no additional data is required in the request body. The BatchID parameter located in the endpoint specifies which batch of shipments to process.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProcessShipmentResponse)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<ProcessShipmentResponse>> ProcessBatchAPIWithHttpInfoAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'batchId' when calling BatchApi->ProcessBatchAPI");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("batchId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }

            localVarRequestOptions.Operation = "BatchApi.ProcessBatchAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProcessShipmentResponse>("/api/v1/shipments/batch/{batchId}/process", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessBatchAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Void Batch Shipping Labels This operation cancels (voids) shipments which are created using the Batch API operation &#x60;createBulkShipments&#x60;. &lt;br /&gt; If user wants to cancel specific shipment(s) of the Batch, then s/he needs to pass the *Shipment ID* for the selected shipments in the &#x60;shipmentIDs&#x60; array. While if user wants to cancel all shipments of the Batch, then s/he does not need to provide any *Shipment ID* in the array under request body.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="voidBatchRequest"> This is the request body for cancelling the selected shipments or entire Batch of shipments*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VoidBatchResponse</returns>
        public VoidBatchResponse VoidShippingLabel(string batchId, string? xPBDeveloperPartnerID = default(string?), VoidBatchRequest? voidBatchRequest = default(VoidBatchRequest?), int operationIndex = 0)
        {
            com.pitneybowes.api360.Client.ApiResponse<VoidBatchResponse> localVarResponse = VoidShippingLabelWithHttpInfo(batchId, xPBDeveloperPartnerID, voidBatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Void Batch Shipping Labels This operation cancels (voids) shipments which are created using the Batch API operation &#x60;createBulkShipments&#x60;. &lt;br /&gt; If user wants to cancel specific shipment(s) of the Batch, then s/he needs to pass the *Shipment ID* for the selected shipments in the &#x60;shipmentIDs&#x60; array. While if user wants to cancel all shipments of the Batch, then s/he does not need to provide any *Shipment ID* in the array under request body.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="voidBatchRequest"> This is the request body for cancelling the selected shipments or entire Batch of shipments*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VoidBatchResponse</returns>
        public com.pitneybowes.api360.Client.ApiResponse<VoidBatchResponse> VoidShippingLabelWithHttpInfo(string batchId, string? xPBDeveloperPartnerID = default(string?), VoidBatchRequest? voidBatchRequest = default(VoidBatchRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'batchId' when calling BatchApi->VoidShippingLabel");
            }

            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("batchId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = voidBatchRequest;

            localVarRequestOptions.Operation = "BatchApi.VoidShippingLabel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<VoidBatchResponse>("/api/v1/shipments/batch/{batchId}/void", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VoidShippingLabel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Void Batch Shipping Labels This operation cancels (voids) shipments which are created using the Batch API operation &#x60;createBulkShipments&#x60;. &lt;br /&gt; If user wants to cancel specific shipment(s) of the Batch, then s/he needs to pass the *Shipment ID* for the selected shipments in the &#x60;shipmentIDs&#x60; array. While if user wants to cancel all shipments of the Batch, then s/he does not need to provide any *Shipment ID* in the array under request body.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="voidBatchRequest"> This is the request body for cancelling the selected shipments or entire Batch of shipments*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VoidBatchResponse</returns>
        public async System.Threading.Tasks.Task<VoidBatchResponse> VoidShippingLabelAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), VoidBatchRequest? voidBatchRequest = default(VoidBatchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.pitneybowes.api360.Client.ApiResponse<VoidBatchResponse> localVarResponse = await VoidShippingLabelWithHttpInfoAsync(batchId, xPBDeveloperPartnerID, voidBatchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Void Batch Shipping Labels This operation cancels (voids) shipments which are created using the Batch API operation &#x60;createBulkShipments&#x60;. &lt;br /&gt; If user wants to cancel specific shipment(s) of the Batch, then s/he needs to pass the *Shipment ID* for the selected shipments in the &#x60;shipmentIDs&#x60; array. While if user wants to cancel all shipments of the Batch, then s/he does not need to provide any *Shipment ID* in the array under request body.
        /// </summary>
        /// <exception cref="com.pitneybowes.api360.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">This is a system-generated unique identifier assigned to the Batch while it is processed.</param>
        /// <param name="xPBDeveloperPartnerID">The Developer-Partner-ID is assigned by PB to uniquely identify a Developer&#39;s strategic business partners. If the developer is the sole business partner, this field is not required. (optional)</param>
        /// <param name="voidBatchRequest"> This is the request body for cancelling the selected shipments or entire Batch of shipments*. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VoidBatchResponse)</returns>
        public async System.Threading.Tasks.Task<com.pitneybowes.api360.Client.ApiResponse<VoidBatchResponse>> VoidShippingLabelWithHttpInfoAsync(string batchId, string? xPBDeveloperPartnerID = default(string?), VoidBatchRequest? voidBatchRequest = default(VoidBatchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
            {
                throw new com.pitneybowes.api360.Client.ApiException(400, "Missing required parameter 'batchId' when calling BatchApi->VoidShippingLabel");
            }


            com.pitneybowes.api360.Client.RequestOptions localVarRequestOptions = new com.pitneybowes.api360.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.pitneybowes.api360.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("batchId", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(batchId)); // path parameter
            if (xPBDeveloperPartnerID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-PB-Developer-Partner-ID", com.pitneybowes.api360.Client.ClientUtils.ParameterToString(xPBDeveloperPartnerID)); // header parameter
            }
            localVarRequestOptions.Data = voidBatchRequest;

            localVarRequestOptions.Operation = "BatchApi.VoidShippingLabel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VoidBatchResponse>("/api/v1/shipments/batch/{batchId}/void", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VoidShippingLabel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
