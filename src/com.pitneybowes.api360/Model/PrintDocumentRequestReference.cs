// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// - Contains key value map for passing references. Max references allowed is 6. &lt;br /&gt; - References are tags or information that is printed on Shipping Label based on the customer&#39;s requirement.&lt;br /&gt; - Reference Fields can have values/indication like department name, invoice no., package description, purchase order no., carrier note, cost account no., transportation no., or PO No., etc. &lt;br /&gt; - Each of the reference field can have only one indication/value. 
    /// </summary>
    public partial class PrintDocumentRequestReference : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintDocumentRequestReference" /> class.
        /// </summary>
        /// <param name="reference1">Reference 1 can have one of the above-indicated values/information, which is printed on Label, e.g., Cost Account No. (if any) or Invoice Number. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</param>
        /// <param name="reference2">Reference 2 can have other details as indicated in the list above. This is also printed on Label, e.g., Package Description . &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</param>
        /// <param name="reference3">Reference 3 can have the information which were not fulfilled in Ref1 and Ref2, e.g., Order No. or Purchase Order ID. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</param>
        /// <param name="reference4">Reference 4 can have more information which were not provided in Ref1, Ref2, or Ref3 e.g., Carrier Note. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</param>
        [JsonConstructor]
        public PrintDocumentRequestReference(Option<string> reference1 = default, Option<string> reference2 = default, Option<string> reference3 = default, Option<string> reference4 = default)
        {
            Reference1Option = reference1;
            Reference2Option = reference2;
            Reference3Option = reference3;
            Reference4Option = reference4;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Reference1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> Reference1Option { get; private set; }

        /// <summary>
        /// Reference 1 can have one of the above-indicated values/information, which is printed on Label, e.g., Cost Account No. (if any) or Invoice Number. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>Reference 1 can have one of the above-indicated values/information, which is printed on Label, e.g., Cost Account No. (if any) or Invoice Number. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /* <example>123456</example> */
        [JsonPropertyName("reference1")]
        public string Reference1 { get { return this.Reference1Option; } set { this.Reference1Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Reference2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> Reference2Option { get; private set; }

        /// <summary>
        /// Reference 2 can have other details as indicated in the list above. This is also printed on Label, e.g., Package Description . &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>Reference 2 can have other details as indicated in the list above. This is also printed on Label, e.g., Package Description . &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /* <example>SendTech</example> */
        [JsonPropertyName("reference2")]
        public string Reference2 { get { return this.Reference2Option; } set { this.Reference2Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Reference3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> Reference3Option { get; private set; }

        /// <summary>
        /// Reference 3 can have the information which were not fulfilled in Ref1 and Ref2, e.g., Order No. or Purchase Order ID. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>Reference 3 can have the information which were not fulfilled in Ref1 and Ref2, e.g., Order No. or Purchase Order ID. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /* <example>65439</example> */
        [JsonPropertyName("reference3")]
        public string Reference3 { get { return this.Reference3Option; } set { this.Reference3Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Reference4
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> Reference4Option { get; private set; }

        /// <summary>
        /// Reference 4 can have more information which were not provided in Ref1, Ref2, or Ref3 e.g., Carrier Note. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>Reference 4 can have more information which were not provided in Ref1, Ref2, or Ref3 e.g., Carrier Note. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /* <example>FedEx First Overnight</example> */
        [JsonPropertyName("reference4")]
        public string Reference4 { get { return this.Reference4Option; } set { this.Reference4Option = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrintDocumentRequestReference {\n");
            sb.Append("  Reference1: ").Append(Reference1).Append("\n");
            sb.Append("  Reference2: ").Append(Reference2).Append("\n");
            sb.Append("  Reference3: ").Append(Reference3).Append("\n");
            sb.Append("  Reference4: ").Append(Reference4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PrintDocumentRequestReference" />
    /// </summary>
    public class PrintDocumentRequestReferenceJsonConverter : JsonConverter<PrintDocumentRequestReference>
    {
        /// <summary>
        /// Deserializes json to <see cref="PrintDocumentRequestReference" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PrintDocumentRequestReference Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> reference1 = default;
            Option<string> reference2 = default;
            Option<string> reference3 = default;
            Option<string> reference4 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "reference1":
                            reference1 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reference2":
                            reference2 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reference3":
                            reference3 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reference4":
                            reference4 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (reference1.IsSet && reference1.Value == null)
                throw new ArgumentNullException(nameof(reference1), "Property is not nullable for class PrintDocumentRequestReference.");

            if (reference2.IsSet && reference2.Value == null)
                throw new ArgumentNullException(nameof(reference2), "Property is not nullable for class PrintDocumentRequestReference.");

            if (reference3.IsSet && reference3.Value == null)
                throw new ArgumentNullException(nameof(reference3), "Property is not nullable for class PrintDocumentRequestReference.");

            if (reference4.IsSet && reference4.Value == null)
                throw new ArgumentNullException(nameof(reference4), "Property is not nullable for class PrintDocumentRequestReference.");

            return new PrintDocumentRequestReference(reference1, reference2, reference3, reference4);
        }

        /// <summary>
        /// Serializes a <see cref="PrintDocumentRequestReference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="printDocumentRequestReference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PrintDocumentRequestReference printDocumentRequestReference, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, printDocumentRequestReference, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PrintDocumentRequestReference" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="printDocumentRequestReference"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PrintDocumentRequestReference printDocumentRequestReference, JsonSerializerOptions jsonSerializerOptions)
        {
            if (printDocumentRequestReference.Reference1Option.IsSet && printDocumentRequestReference.Reference1 == null)
                throw new ArgumentNullException(nameof(printDocumentRequestReference.Reference1), "Property is required for class PrintDocumentRequestReference.");

            if (printDocumentRequestReference.Reference2Option.IsSet && printDocumentRequestReference.Reference2 == null)
                throw new ArgumentNullException(nameof(printDocumentRequestReference.Reference2), "Property is required for class PrintDocumentRequestReference.");

            if (printDocumentRequestReference.Reference3Option.IsSet && printDocumentRequestReference.Reference3 == null)
                throw new ArgumentNullException(nameof(printDocumentRequestReference.Reference3), "Property is required for class PrintDocumentRequestReference.");

            if (printDocumentRequestReference.Reference4Option.IsSet && printDocumentRequestReference.Reference4 == null)
                throw new ArgumentNullException(nameof(printDocumentRequestReference.Reference4), "Property is required for class PrintDocumentRequestReference.");

            if (printDocumentRequestReference.Reference1Option.IsSet)
                writer.WriteString("reference1", printDocumentRequestReference.Reference1);

            if (printDocumentRequestReference.Reference2Option.IsSet)
                writer.WriteString("reference2", printDocumentRequestReference.Reference2);

            if (printDocumentRequestReference.Reference3Option.IsSet)
                writer.WriteString("reference3", printDocumentRequestReference.Reference3);

            if (printDocumentRequestReference.Reference4Option.IsSet)
                writer.WriteString("reference4", printDocumentRequestReference.Reference4);
        }
    }
}
