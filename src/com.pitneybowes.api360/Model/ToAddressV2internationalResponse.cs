// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// The complete address of the Sender.
    /// </summary>
    public partial class ToAddressV2internationalResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToAddressV2internationalResponse" /> class.
        /// </summary>
        /// <param name="name">The name of the Sender to which this address points.</param>
        /// <param name="addressLine1">The addressLine1 contains the Flat number, Building or Apartment Name/number (if any) or company name (if not residential) of the Sender. </param>
        /// <param name="cityTown">The name of the city or town the Sender&#39;s address belongs to. </param>
        /// <param name="stateProvince">The name of the State or Province the Sender belongs to. It is the &#x60;2-letter&#x60; State or Province Code for US or Canadian address(es). &lt;br /&gt; Below is the hyperlink for CA country that will navigate to its Province/State Codes page. Similarly, respective country users can check for their country- State/Province codes. &lt;br /&gt; Please switch to the &#x60;Search&#x60; tab, select &#x60;Country codes&#x60; radio button, enter the required country name or country code, and then click &#x60;SEARCH&#x60; button. </param>
        /// <param name="postalCode">The Postal Code or ZIP Code of the address. &lt;br /&gt; For CA addresses, use a &#x60;six-character&#x60; alphanumeric string Postal Code in this format: &#39;A1A 1A1&#39;. &lt;br /&gt; While for US addresses, use either the &#x60;5-digit&#x60; or &#x60;9-digit&#x60; ZIP Code in one of the following formats: &#39;12345&#39; or &#39;12345-6789&#39;. </param>
        /// <param name="countryCode">The country in which the sender&#39;s address is located. The value will be the two-character ISO Code of the country from the ISO country list. &lt;br /&gt; Use ISO 3166-1 Alpha-2 standard values. For best results this should be included, especially if the country name does not appear in any of the unparsedAddressLines.&lt;br /&gt; Below is the hyperlink, please select &#x60;Country codes&#x60; and then click &#x60;SEARCH&#x60; button. </param>
        /// <param name="company">The name of the company, in case if the recipient address is not residential. Recipient company is required for RMG b2b shipment.</param>
        /// <param name="phone">This is Recipient&#39;s phone number. Enter the digits with or without spaces or hyphens. &lt;br /&gt; &#x60;Max length &#x3D; 15&#x60;.</param>
        /// <param name="email">This must be recipient&#39;s valid email. Email is required if the customer is using GoFor Carrier. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; </param>
        /// <param name="residential">The specified address can be Residential or Official. In case if the address is Residential, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.</param>
        /// <param name="isPOBox">Checks if the specified address has the PO Box. In case if Yes, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.</param>
        /// <param name="taxId">The Tax Identification Number (TIN). TIN Number is supported for FedEx as of now.&lt;br /&gt; &#x60;Max character length &#x3D; 18&#x60;.  - &#x60;EIN&#x60;, &#x60;VAT&#x60;, &#x60;GST&#x60;, and &#x60;IOSS&#x60; are mapped to &#x60;BUSINESS_NATIONAL&#x60;. - &#x60;EORI&#x60; is mapped to &#x60;BUSINESS_UNION&#x60;. - &#x60;RFC&#x60; with a length of 12 characters is mapped to &#x60;BUSINESS_NATIONAL&#x60;. - &#x60;RFC&#x60; with a length of 13 characters is mapped to &#x60;PERSONAL_NATIONAL&#x60;. </param>
        /// <param name="taxIdType">Specifies the type of tax identification being provided.</param>
        [JsonConstructor]
        public ToAddressV2internationalResponse(Option<string> name = default, Option<string> addressLine1 = default, Option<string> cityTown = default, Option<string> stateProvince = default, Option<string> postalCode = default, Option<string> countryCode = default, Option<string> company = default, Option<string> phone = default, Option<string> email = default, Option<bool?> residential = default, Option<bool?> isPOBox = default, Option<string> taxId = default, Option<TaxIdTypeEnum?> taxIdType = default)
        {
            NameOption = name;
            AddressLine1Option = addressLine1;
            CityTownOption = cityTown;
            StateProvinceOption = stateProvince;
            PostalCodeOption = postalCode;
            CountryCodeOption = countryCode;
            CompanyOption = company;
            PhoneOption = phone;
            EmailOption = email;
            ResidentialOption = residential;
            IsPOBoxOption = isPOBox;
            TaxIdOption = taxId;
            TaxIdTypeOption = taxIdType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Specifies the type of tax identification being provided.
        /// </summary>
        /// <value>Specifies the type of tax identification being provided.</value>
        public enum TaxIdTypeEnum
        {
            /// <summary>
            /// Enum EIN for value: EIN
            /// </summary>
            EIN = 1,

            /// <summary>
            /// Enum GST for value: GST
            /// </summary>
            GST = 2,

            /// <summary>
            /// Enum VAT for value: VAT
            /// </summary>
            VAT = 3,

            /// <summary>
            /// Enum IOSS for value: IOSS
            /// </summary>
            IOSS = 4,

            /// <summary>
            /// Enum RFC for value: RFC
            /// </summary>
            RFC = 5,

            /// <summary>
            /// Enum EORI for value: EORI
            /// </summary>
            EORI = 6
        }

        /// <summary>
        /// Returns a <see cref="TaxIdTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TaxIdTypeEnum TaxIdTypeEnumFromString(string value)
        {
            if (value.Equals("EIN"))
                return TaxIdTypeEnum.EIN;

            if (value.Equals("GST"))
                return TaxIdTypeEnum.GST;

            if (value.Equals("VAT"))
                return TaxIdTypeEnum.VAT;

            if (value.Equals("IOSS"))
                return TaxIdTypeEnum.IOSS;

            if (value.Equals("RFC"))
                return TaxIdTypeEnum.RFC;

            if (value.Equals("EORI"))
                return TaxIdTypeEnum.EORI;

            throw new NotImplementedException($"Could not convert value to type TaxIdTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TaxIdTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TaxIdTypeEnum? TaxIdTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("EIN"))
                return TaxIdTypeEnum.EIN;

            if (value.Equals("GST"))
                return TaxIdTypeEnum.GST;

            if (value.Equals("VAT"))
                return TaxIdTypeEnum.VAT;

            if (value.Equals("IOSS"))
                return TaxIdTypeEnum.IOSS;

            if (value.Equals("RFC"))
                return TaxIdTypeEnum.RFC;

            if (value.Equals("EORI"))
                return TaxIdTypeEnum.EORI;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TaxIdTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TaxIdTypeEnumToJsonValue(TaxIdTypeEnum? value)
        {
            if (value == TaxIdTypeEnum.EIN)
                return "EIN";

            if (value == TaxIdTypeEnum.GST)
                return "GST";

            if (value == TaxIdTypeEnum.VAT)
                return "VAT";

            if (value == TaxIdTypeEnum.IOSS)
                return "IOSS";

            if (value == TaxIdTypeEnum.RFC)
                return "RFC";

            if (value == TaxIdTypeEnum.EORI)
                return "EORI";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of TaxIdType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TaxIdTypeEnum?> TaxIdTypeOption { get; private set; }

        /// <summary>
        /// Specifies the type of tax identification being provided.
        /// </summary>
        /// <value>Specifies the type of tax identification being provided.</value>
        [JsonPropertyName("taxIdType")]
        public TaxIdTypeEnum? TaxIdType { get { return this.TaxIdTypeOption; } set { this.TaxIdTypeOption = new Option<TaxIdTypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// The name of the Sender to which this address points.
        /// </summary>
        /// <value>The name of the Sender to which this address points.</value>
        /* <example>Recipient Name</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressLine1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressLine1Option { get; private set; }

        /// <summary>
        /// The addressLine1 contains the Flat number, Building or Apartment Name/number (if any) or company name (if not residential) of the Sender. 
        /// </summary>
        /// <value>The addressLine1 contains the Flat number, Building or Apartment Name/number (if any) or company name (if not residential) of the Sender. </value>
        /* <example>771 Atlantic Ave</example> */
        [JsonPropertyName("addressLine1")]
        public string AddressLine1 { get { return this.AddressLine1Option; } set { this.AddressLine1Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CityTown
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CityTownOption { get; private set; }

        /// <summary>
        /// The name of the city or town the Sender&#39;s address belongs to. 
        /// </summary>
        /// <value>The name of the city or town the Sender&#39;s address belongs to. </value>
        /* <example>BRAMPTON</example> */
        [JsonPropertyName("cityTown")]
        public string CityTown { get { return this.CityTownOption; } set { this.CityTownOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StateProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StateProvinceOption { get; private set; }

        /// <summary>
        /// The name of the State or Province the Sender belongs to. It is the &#x60;2-letter&#x60; State or Province Code for US or Canadian address(es). &lt;br /&gt; Below is the hyperlink for CA country that will navigate to its Province/State Codes page. Similarly, respective country users can check for their country- State/Province codes. &lt;br /&gt; Please switch to the &#x60;Search&#x60; tab, select &#x60;Country codes&#x60; radio button, enter the required country name or country code, and then click &#x60;SEARCH&#x60; button. 
        /// </summary>
        /// <value>The name of the State or Province the Sender belongs to. It is the &#x60;2-letter&#x60; State or Province Code for US or Canadian address(es). &lt;br /&gt; Below is the hyperlink for CA country that will navigate to its Province/State Codes page. Similarly, respective country users can check for their country- State/Province codes. &lt;br /&gt; Please switch to the &#x60;Search&#x60; tab, select &#x60;Country codes&#x60; radio button, enter the required country name or country code, and then click &#x60;SEARCH&#x60; button. </value>
        /* <example>ON</example> */
        [JsonPropertyName("stateProvince")]
        public string StateProvince { get { return this.StateProvinceOption; } set { this.StateProvinceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PostalCodeOption { get; private set; }

        /// <summary>
        /// The Postal Code or ZIP Code of the address. &lt;br /&gt; For CA addresses, use a &#x60;six-character&#x60; alphanumeric string Postal Code in this format: &#39;A1A 1A1&#39;. &lt;br /&gt; While for US addresses, use either the &#x60;5-digit&#x60; or &#x60;9-digit&#x60; ZIP Code in one of the following formats: &#39;12345&#39; or &#39;12345-6789&#39;. 
        /// </summary>
        /// <value>The Postal Code or ZIP Code of the address. &lt;br /&gt; For CA addresses, use a &#x60;six-character&#x60; alphanumeric string Postal Code in this format: &#39;A1A 1A1&#39;. &lt;br /&gt; While for US addresses, use either the &#x60;5-digit&#x60; or &#x60;9-digit&#x60; ZIP Code in one of the following formats: &#39;12345&#39; or &#39;12345-6789&#39;. </value>
        /* <example>L6Y 2N4</example> */
        [JsonPropertyName("postalCode")]
        public string PostalCode { get { return this.PostalCodeOption; } set { this.PostalCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryCodeOption { get; private set; }

        /// <summary>
        /// The country in which the sender&#39;s address is located. The value will be the two-character ISO Code of the country from the ISO country list. &lt;br /&gt; Use ISO 3166-1 Alpha-2 standard values. For best results this should be included, especially if the country name does not appear in any of the unparsedAddressLines.&lt;br /&gt; Below is the hyperlink, please select &#x60;Country codes&#x60; and then click &#x60;SEARCH&#x60; button. 
        /// </summary>
        /// <value>The country in which the sender&#39;s address is located. The value will be the two-character ISO Code of the country from the ISO country list. &lt;br /&gt; Use ISO 3166-1 Alpha-2 standard values. For best results this should be included, especially if the country name does not appear in any of the unparsedAddressLines.&lt;br /&gt; Below is the hyperlink, please select &#x60;Country codes&#x60; and then click &#x60;SEARCH&#x60; button. </value>
        /* <example>CA</example> */
        [JsonPropertyName("countryCode")]
        public string CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CompanyOption { get; private set; }

        /// <summary>
        /// The name of the company, in case if the recipient address is not residential. Recipient company is required for RMG b2b shipment.
        /// </summary>
        /// <value>The name of the company, in case if the recipient address is not residential. Recipient company is required for RMG b2b shipment.</value>
        /* <example>PB</example> */
        [JsonPropertyName("company")]
        public string Company { get { return this.CompanyOption; } set { this.CompanyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PhoneOption { get; private set; }

        /// <summary>
        /// This is Recipient&#39;s phone number. Enter the digits with or without spaces or hyphens. &lt;br /&gt; &#x60;Max length &#x3D; 15&#x60;.
        /// </summary>
        /// <value>This is Recipient&#39;s phone number. Enter the digits with or without spaces or hyphens. &lt;br /&gt; &#x60;Max length &#x3D; 15&#x60;.</value>
        /* <example>332 555-1212</example> */
        [JsonPropertyName("phone")]
        public string Phone { get { return this.PhoneOption; } set { this.PhoneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailOption { get; private set; }

        /// <summary>
        /// This must be recipient&#39;s valid email. Email is required if the customer is using GoFor Carrier. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; 
        /// </summary>
        /// <value>This must be recipient&#39;s valid email. Email is required if the customer is using GoFor Carrier. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; </value>
        /* <example>recipient@gmail.com</example> */
        [JsonPropertyName("email")]
        public string Email { get { return this.EmailOption; } set { this.EmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Residential
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ResidentialOption { get; private set; }

        /// <summary>
        /// The specified address can be Residential or Official. In case if the address is Residential, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.
        /// </summary>
        /// <value>The specified address can be Residential or Official. In case if the address is Residential, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.</value>
        /* <example>true</example> */
        [JsonPropertyName("residential")]
        public bool? Residential { get { return this.ResidentialOption; } set { this.ResidentialOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsPOBox
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPOBoxOption { get; private set; }

        /// <summary>
        /// Checks if the specified address has the PO Box. In case if Yes, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.
        /// </summary>
        /// <value>Checks if the specified address has the PO Box. In case if Yes, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.</value>
        /* <example>true</example> */
        [JsonPropertyName("isPOBox")]
        public bool? IsPOBox { get { return this.IsPOBoxOption; } set { this.IsPOBoxOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TaxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TaxIdOption { get; private set; }

        /// <summary>
        /// The Tax Identification Number (TIN). TIN Number is supported for FedEx as of now.&lt;br /&gt; &#x60;Max character length &#x3D; 18&#x60;.  - &#x60;EIN&#x60;, &#x60;VAT&#x60;, &#x60;GST&#x60;, and &#x60;IOSS&#x60; are mapped to &#x60;BUSINESS_NATIONAL&#x60;. - &#x60;EORI&#x60; is mapped to &#x60;BUSINESS_UNION&#x60;. - &#x60;RFC&#x60; with a length of 12 characters is mapped to &#x60;BUSINESS_NATIONAL&#x60;. - &#x60;RFC&#x60; with a length of 13 characters is mapped to &#x60;PERSONAL_NATIONAL&#x60;. 
        /// </summary>
        /// <value>The Tax Identification Number (TIN). TIN Number is supported for FedEx as of now.&lt;br /&gt; &#x60;Max character length &#x3D; 18&#x60;.  - &#x60;EIN&#x60;, &#x60;VAT&#x60;, &#x60;GST&#x60;, and &#x60;IOSS&#x60; are mapped to &#x60;BUSINESS_NATIONAL&#x60;. - &#x60;EORI&#x60; is mapped to &#x60;BUSINESS_UNION&#x60;. - &#x60;RFC&#x60; with a length of 12 characters is mapped to &#x60;BUSINESS_NATIONAL&#x60;. - &#x60;RFC&#x60; with a length of 13 characters is mapped to &#x60;PERSONAL_NATIONAL&#x60;. </value>
        [JsonPropertyName("taxId")]
        public string TaxId { get { return this.TaxIdOption; } set { this.TaxIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToAddressV2internationalResponse {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  CityTown: ").Append(CityTown).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Residential: ").Append(Residential).Append("\n");
            sb.Append("  IsPOBox: ").Append(IsPOBox).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("  TaxIdType: ").Append(TaxIdType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ToAddressV2internationalResponse" />
    /// </summary>
    public class ToAddressV2internationalResponseJsonConverter : JsonConverter<ToAddressV2internationalResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ToAddressV2internationalResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ToAddressV2internationalResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<string> addressLine1 = default;
            Option<string> cityTown = default;
            Option<string> stateProvince = default;
            Option<string> postalCode = default;
            Option<string> countryCode = default;
            Option<string> company = default;
            Option<string> phone = default;
            Option<string> email = default;
            Option<bool?> residential = default;
            Option<bool?> isPOBox = default;
            Option<string> taxId = default;
            Option<ToAddressV2internationalResponse.TaxIdTypeEnum?> taxIdType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "addressLine1":
                            addressLine1 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cityTown":
                            cityTown = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "stateProvince":
                            stateProvince = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "postalCode":
                            postalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "countryCode":
                            countryCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "company":
                            company = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phone":
                            phone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "residential":
                            residential = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isPOBox":
                            isPOBox = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "taxId":
                            taxId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "taxIdType":
                            string taxIdTypeRawValue = utf8JsonReader.GetString();
                            if (taxIdTypeRawValue != null)
                                taxIdType = new Option<ToAddressV2internationalResponse.TaxIdTypeEnum?>(ToAddressV2internationalResponse.TaxIdTypeEnumFromStringOrDefault(taxIdTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ToAddressV2internationalResponse.");

            if (addressLine1.IsSet && addressLine1.Value == null)
                throw new ArgumentNullException(nameof(addressLine1), "Property is not nullable for class ToAddressV2internationalResponse.");

            if (cityTown.IsSet && cityTown.Value == null)
                throw new ArgumentNullException(nameof(cityTown), "Property is not nullable for class ToAddressV2internationalResponse.");

            if (stateProvince.IsSet && stateProvince.Value == null)
                throw new ArgumentNullException(nameof(stateProvince), "Property is not nullable for class ToAddressV2internationalResponse.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class ToAddressV2internationalResponse.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class ToAddressV2internationalResponse.");

            if (company.IsSet && company.Value == null)
                throw new ArgumentNullException(nameof(company), "Property is not nullable for class ToAddressV2internationalResponse.");

            if (phone.IsSet && phone.Value == null)
                throw new ArgumentNullException(nameof(phone), "Property is not nullable for class ToAddressV2internationalResponse.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class ToAddressV2internationalResponse.");

            if (residential.IsSet && residential.Value == null)
                throw new ArgumentNullException(nameof(residential), "Property is not nullable for class ToAddressV2internationalResponse.");

            if (isPOBox.IsSet && isPOBox.Value == null)
                throw new ArgumentNullException(nameof(isPOBox), "Property is not nullable for class ToAddressV2internationalResponse.");

            if (taxId.IsSet && taxId.Value == null)
                throw new ArgumentNullException(nameof(taxId), "Property is not nullable for class ToAddressV2internationalResponse.");

            if (taxIdType.IsSet && taxIdType.Value == null)
                throw new ArgumentNullException(nameof(taxIdType), "Property is not nullable for class ToAddressV2internationalResponse.");

            return new ToAddressV2internationalResponse(name, addressLine1, cityTown, stateProvince, postalCode, countryCode, company, phone, email, residential, isPOBox, taxId, taxIdType);
        }

        /// <summary>
        /// Serializes a <see cref="ToAddressV2internationalResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="toAddressV2internationalResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ToAddressV2internationalResponse toAddressV2internationalResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, toAddressV2internationalResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ToAddressV2internationalResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="toAddressV2internationalResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ToAddressV2internationalResponse toAddressV2internationalResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (toAddressV2internationalResponse.NameOption.IsSet && toAddressV2internationalResponse.Name == null)
                throw new ArgumentNullException(nameof(toAddressV2internationalResponse.Name), "Property is required for class ToAddressV2internationalResponse.");

            if (toAddressV2internationalResponse.AddressLine1Option.IsSet && toAddressV2internationalResponse.AddressLine1 == null)
                throw new ArgumentNullException(nameof(toAddressV2internationalResponse.AddressLine1), "Property is required for class ToAddressV2internationalResponse.");

            if (toAddressV2internationalResponse.CityTownOption.IsSet && toAddressV2internationalResponse.CityTown == null)
                throw new ArgumentNullException(nameof(toAddressV2internationalResponse.CityTown), "Property is required for class ToAddressV2internationalResponse.");

            if (toAddressV2internationalResponse.StateProvinceOption.IsSet && toAddressV2internationalResponse.StateProvince == null)
                throw new ArgumentNullException(nameof(toAddressV2internationalResponse.StateProvince), "Property is required for class ToAddressV2internationalResponse.");

            if (toAddressV2internationalResponse.PostalCodeOption.IsSet && toAddressV2internationalResponse.PostalCode == null)
                throw new ArgumentNullException(nameof(toAddressV2internationalResponse.PostalCode), "Property is required for class ToAddressV2internationalResponse.");

            if (toAddressV2internationalResponse.CountryCodeOption.IsSet && toAddressV2internationalResponse.CountryCode == null)
                throw new ArgumentNullException(nameof(toAddressV2internationalResponse.CountryCode), "Property is required for class ToAddressV2internationalResponse.");

            if (toAddressV2internationalResponse.CompanyOption.IsSet && toAddressV2internationalResponse.Company == null)
                throw new ArgumentNullException(nameof(toAddressV2internationalResponse.Company), "Property is required for class ToAddressV2internationalResponse.");

            if (toAddressV2internationalResponse.PhoneOption.IsSet && toAddressV2internationalResponse.Phone == null)
                throw new ArgumentNullException(nameof(toAddressV2internationalResponse.Phone), "Property is required for class ToAddressV2internationalResponse.");

            if (toAddressV2internationalResponse.EmailOption.IsSet && toAddressV2internationalResponse.Email == null)
                throw new ArgumentNullException(nameof(toAddressV2internationalResponse.Email), "Property is required for class ToAddressV2internationalResponse.");

            if (toAddressV2internationalResponse.TaxIdOption.IsSet && toAddressV2internationalResponse.TaxId == null)
                throw new ArgumentNullException(nameof(toAddressV2internationalResponse.TaxId), "Property is required for class ToAddressV2internationalResponse.");

            if (toAddressV2internationalResponse.NameOption.IsSet)
                writer.WriteString("name", toAddressV2internationalResponse.Name);

            if (toAddressV2internationalResponse.AddressLine1Option.IsSet)
                writer.WriteString("addressLine1", toAddressV2internationalResponse.AddressLine1);

            if (toAddressV2internationalResponse.CityTownOption.IsSet)
                writer.WriteString("cityTown", toAddressV2internationalResponse.CityTown);

            if (toAddressV2internationalResponse.StateProvinceOption.IsSet)
                writer.WriteString("stateProvince", toAddressV2internationalResponse.StateProvince);

            if (toAddressV2internationalResponse.PostalCodeOption.IsSet)
                writer.WriteString("postalCode", toAddressV2internationalResponse.PostalCode);

            if (toAddressV2internationalResponse.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", toAddressV2internationalResponse.CountryCode);

            if (toAddressV2internationalResponse.CompanyOption.IsSet)
                writer.WriteString("company", toAddressV2internationalResponse.Company);

            if (toAddressV2internationalResponse.PhoneOption.IsSet)
                writer.WriteString("phone", toAddressV2internationalResponse.Phone);

            if (toAddressV2internationalResponse.EmailOption.IsSet)
                writer.WriteString("email", toAddressV2internationalResponse.Email);

            if (toAddressV2internationalResponse.ResidentialOption.IsSet)
                writer.WriteBoolean("residential", toAddressV2internationalResponse.ResidentialOption.Value.Value);

            if (toAddressV2internationalResponse.IsPOBoxOption.IsSet)
                writer.WriteBoolean("isPOBox", toAddressV2internationalResponse.IsPOBoxOption.Value.Value);

            if (toAddressV2internationalResponse.TaxIdOption.IsSet)
                writer.WriteString("taxId", toAddressV2internationalResponse.TaxId);

            var taxIdTypeRawValue = ToAddressV2internationalResponse.TaxIdTypeEnumToJsonValue(toAddressV2internationalResponse.TaxIdTypeOption.Value.Value);
            writer.WriteString("taxIdType", taxIdTypeRawValue);
        }
    }
}
