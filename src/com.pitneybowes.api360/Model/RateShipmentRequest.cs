// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// RateShipmentRequest
    /// </summary>
    public partial class RateShipmentRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RateShipmentRequest" /> class.
        /// </summary>
        /// <param name="rateShopbyCarrier"></param>
        public RateShipmentRequest(RateShopbyCarrier rateShopbyCarrier)
        {
            RateShopbyCarrier = rateShopbyCarrier;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RateShipmentRequest" /> class.
        /// </summary>
        /// <param name="rateShopbyRategroup"></param>
        public RateShipmentRequest(RateShopbyRategroup rateShopbyRategroup)
        {
            RateShopbyRategroup = rateShopbyRategroup;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RateShipmentRequest" /> class.
        /// </summary>
        /// <param name="rateShopbyRuleset"></param>
        public RateShipmentRequest(RateShopbyRuleset rateShopbyRuleset)
        {
            RateShopbyRuleset = rateShopbyRuleset;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// RateShop, which is attached to an Enterprise or Location, is done through three approaches: by Carrier, by RateGroup, and by Ruleset.  &lt;br /&gt;  Through Carrier, customers can choose the carriers as per requirement, based on which services, parcel types, and special services can be selected, and RateShop is done. &lt;br /&gt; Through RateGroup, customers can select the RateGroup, which has been divided into two categories: Cheapest (w.r.t. price) and Fastest (w.r.t. delivery hours).  &lt;br /&gt; Through Ruleset, customers can define the Condition/rule for selecting carriers and their services, so they do not need to worry for Rate Shopping every time they create Shipment. For example, For a particular location, they can set one definite carrier, or apply RateGroup - Cheapest/Fastest.   Similarly, for a particular amount like below $1000 Dollars, they can select a definite carrier service, based on RateGroup.
        /// </summary>
        /// <value>RateShop, which is attached to an Enterprise or Location, is done through three approaches: by Carrier, by RateGroup, and by Ruleset.  &lt;br /&gt;  Through Carrier, customers can choose the carriers as per requirement, based on which services, parcel types, and special services can be selected, and RateShop is done. &lt;br /&gt; Through RateGroup, customers can select the RateGroup, which has been divided into two categories: Cheapest (w.r.t. price) and Fastest (w.r.t. delivery hours).  &lt;br /&gt; Through Ruleset, customers can define the Condition/rule for selecting carriers and their services, so they do not need to worry for Rate Shopping every time they create Shipment. For example, For a particular location, they can set one definite carrier, or apply RateGroup - Cheapest/Fastest.   Similarly, for a particular amount like below $1000 Dollars, they can select a definite carrier service, based on RateGroup.</value>
        public enum RateShopByEnum
        {
            /// <summary>
            /// Enum Carrier for value: carrier
            /// </summary>
            Carrier = 1,

            /// <summary>
            /// Enum Rategroup for value: rategroup
            /// </summary>
            Rategroup = 2,

            /// <summary>
            /// Enum Ruleset for value: ruleset
            /// </summary>
            Ruleset = 3
        }

        /// <summary>
        /// Returns a <see cref="RateShopByEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RateShopByEnum RateShopByEnumFromString(string value)
        {
            if (value.Equals("carrier"))
                return RateShopByEnum.Carrier;

            if (value.Equals("rategroup"))
                return RateShopByEnum.Rategroup;

            if (value.Equals("ruleset"))
                return RateShopByEnum.Ruleset;

            throw new NotImplementedException($"Could not convert value to type RateShopByEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RateShopByEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RateShopByEnum? RateShopByEnumFromStringOrDefault(string value)
        {
            if (value.Equals("carrier"))
                return RateShopByEnum.Carrier;

            if (value.Equals("rategroup"))
                return RateShopByEnum.Rategroup;

            if (value.Equals("ruleset"))
                return RateShopByEnum.Ruleset;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RateShopByEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RateShopByEnumToJsonValue(RateShopByEnum value)
        {
            if (value == RateShopByEnum.Carrier)
                return "carrier";

            if (value == RateShopByEnum.Rategroup)
                return "rategroup";

            if (value == RateShopByEnum.Ruleset)
                return "ruleset";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets RateShopbyCarrier
        /// </summary>
        public RateShopbyCarrier RateShopbyCarrier { get; set; }

        /// <summary>
        /// Gets or Sets RateShopbyRategroup
        /// </summary>
        public RateShopbyRategroup RateShopbyRategroup { get; set; }

        /// <summary>
        /// Gets or Sets RateShopbyRuleset
        /// </summary>
        public RateShopbyRuleset RateShopbyRuleset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RateShipmentRequest {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RateShipmentRequest" />
    /// </summary>
    public class RateShipmentRequestJsonConverter : JsonConverter<RateShipmentRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="RateShipmentRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RateShipmentRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RateShipmentRequest.RateShopByEnum?> rateShopBy = default;

            RateShopbyCarrier rateShopbyCarrier = null;
            RateShopbyRategroup rateShopbyRategroup = null;
            RateShopbyRuleset rateShopbyRuleset = null;

            Utf8JsonReader utf8JsonReaderDiscriminator = utf8JsonReader;
            while (utf8JsonReaderDiscriminator.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (utf8JsonReaderDiscriminator.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReaderDiscriminator.GetString();
                    utf8JsonReaderDiscriminator.Read();
                    if (localVarJsonPropertyName.Equals("rateShopBy"))
                    {
                        string discriminator = utf8JsonReaderDiscriminator.GetString();
                        if (discriminator.Equals("RateShopbyCarrier"))
                        {
                            Utf8JsonReader utf8JsonReaderRateShopbyCarrier = utf8JsonReader;
                            rateShopbyCarrier = JsonSerializer.Deserialize<RateShopbyCarrier>(ref utf8JsonReaderRateShopbyCarrier, jsonSerializerOptions);
                        }
                        if (discriminator.Equals("RateShopbyRategroup"))
                        {
                            Utf8JsonReader utf8JsonReaderRateShopbyRategroup = utf8JsonReader;
                            rateShopbyRategroup = JsonSerializer.Deserialize<RateShopbyRategroup>(ref utf8JsonReaderRateShopbyRategroup, jsonSerializerOptions);
                        }
                        if (discriminator.Equals("RateShopbyRuleset"))
                        {
                            Utf8JsonReader utf8JsonReaderRateShopbyRuleset = utf8JsonReader;
                            rateShopbyRuleset = JsonSerializer.Deserialize<RateShopbyRuleset>(ref utf8JsonReaderRateShopbyRuleset, jsonSerializerOptions);
                        }
                    }
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "rateShopBy":
                            string rateShopByRawValue = utf8JsonReader.GetString();
                            if (rateShopByRawValue != null)
                                rateShopBy = new Option<RateShipmentRequest.RateShopByEnum?>(RateShipmentRequest.RateShopByEnumFromStringOrDefault(rateShopByRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!rateShopBy.IsSet)
                throw new ArgumentException("Property is required for class RateShipmentRequest.", nameof(rateShopBy));

            if (rateShopBy.IsSet && rateShopBy.Value == null)
                throw new ArgumentNullException(nameof(rateShopBy), "Property is not nullable for class RateShipmentRequest.");

            if (rateShopbyCarrier != null)
                return new RateShipmentRequest(rateShopbyCarrier);

            if (rateShopbyRategroup != null)
                return new RateShipmentRequest(rateShopbyRategroup);

            if (rateShopbyRuleset != null)
                return new RateShipmentRequest(rateShopbyRuleset);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="RateShipmentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rateShipmentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RateShipmentRequest rateShipmentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (rateShipmentRequest.RateShopbyCarrier != null)
            {
                RateShopbyCarrierJsonConverter rateShopbyCarrierJsonConverter = (RateShopbyCarrierJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(rateShipmentRequest.RateShopbyCarrier.GetType()));
                rateShopbyCarrierJsonConverter.WriteProperties(writer, rateShipmentRequest.RateShopbyCarrier, jsonSerializerOptions);
            }

            if (rateShipmentRequest.RateShopbyRategroup != null)
            {
                RateShopbyRategroupJsonConverter rateShopbyRategroupJsonConverter = (RateShopbyRategroupJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(rateShipmentRequest.RateShopbyRategroup.GetType()));
                rateShopbyRategroupJsonConverter.WriteProperties(writer, rateShipmentRequest.RateShopbyRategroup, jsonSerializerOptions);
            }

            if (rateShipmentRequest.RateShopbyRuleset != null)
            {
                RateShopbyRulesetJsonConverter rateShopbyRulesetJsonConverter = (RateShopbyRulesetJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(rateShipmentRequest.RateShopbyRuleset.GetType()));
                rateShopbyRulesetJsonConverter.WriteProperties(writer, rateShipmentRequest.RateShopbyRuleset, jsonSerializerOptions);
            }

            WriteProperties(writer, rateShipmentRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RateShipmentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rateShipmentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RateShipmentRequest rateShipmentRequest, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
