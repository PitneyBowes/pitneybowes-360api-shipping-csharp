// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// SpecialServicesServicesInner
    /// </summary>
    public partial class SpecialServicesServicesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecialServicesServicesInner" /> class.
        /// </summary>
        /// <param name="serviceId">The unique identifier given to the carrier specific service.</param>
        /// <param name="brandedName">The branded name of the service</param>
        /// <param name="parcelTypeRules">It displays special services for specific parcel type</param>
        [JsonConstructor]
        public SpecialServicesServicesInner(Option<string?> serviceId = default, Option<string?> brandedName = default, Option<List<SpecialServicesServicesInnerParcelTypeRulesInner>?> parcelTypeRules = default)
        {
            ServiceIdOption = serviceId;
            BrandedNameOption = brandedName;
            ParcelTypeRulesOption = parcelTypeRules;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ServiceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ServiceIdOption { get; private set; }

        /// <summary>
        /// The unique identifier given to the carrier specific service.
        /// </summary>
        /// <value>The unique identifier given to the carrier specific service.</value>
        /* <example>LIB</example> */
        [JsonPropertyName("serviceId")]
        public string? ServiceId { get { return this.ServiceIdOption; } set { this.ServiceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BrandedName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BrandedNameOption { get; private set; }

        /// <summary>
        /// The branded name of the service
        /// </summary>
        /// <value>The branded name of the service</value>
        /* <example>Library Mail®</example> */
        [JsonPropertyName("brandedName")]
        public string? BrandedName { get { return this.BrandedNameOption; } set { this.BrandedNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParcelTypeRules
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SpecialServicesServicesInnerParcelTypeRulesInner>?> ParcelTypeRulesOption { get; private set; }

        /// <summary>
        /// It displays special services for specific parcel type
        /// </summary>
        /// <value>It displays special services for specific parcel type</value>
        [JsonPropertyName("parcelTypeRules")]
        public List<SpecialServicesServicesInnerParcelTypeRulesInner>? ParcelTypeRules { get { return this.ParcelTypeRulesOption; } set { this.ParcelTypeRulesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpecialServicesServicesInner {\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  BrandedName: ").Append(BrandedName).Append("\n");
            sb.Append("  ParcelTypeRules: ").Append(ParcelTypeRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SpecialServicesServicesInner" />
    /// </summary>
    public class SpecialServicesServicesInnerJsonConverter : JsonConverter<SpecialServicesServicesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="SpecialServicesServicesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SpecialServicesServicesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> serviceId = default;
            Option<string?> brandedName = default;
            Option<List<SpecialServicesServicesInnerParcelTypeRulesInner>?> parcelTypeRules = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "serviceId":
                            serviceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "brandedName":
                            brandedName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parcelTypeRules":
                            parcelTypeRules = new Option<List<SpecialServicesServicesInnerParcelTypeRulesInner>?>(JsonSerializer.Deserialize<List<SpecialServicesServicesInnerParcelTypeRulesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (serviceId.IsSet && serviceId.Value == null)
                throw new ArgumentNullException(nameof(serviceId), "Property is not nullable for class SpecialServicesServicesInner.");

            if (brandedName.IsSet && brandedName.Value == null)
                throw new ArgumentNullException(nameof(brandedName), "Property is not nullable for class SpecialServicesServicesInner.");

            if (parcelTypeRules.IsSet && parcelTypeRules.Value == null)
                throw new ArgumentNullException(nameof(parcelTypeRules), "Property is not nullable for class SpecialServicesServicesInner.");

            return new SpecialServicesServicesInner(serviceId, brandedName, parcelTypeRules);
        }

        /// <summary>
        /// Serializes a <see cref="SpecialServicesServicesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="specialServicesServicesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SpecialServicesServicesInner specialServicesServicesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, specialServicesServicesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SpecialServicesServicesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="specialServicesServicesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SpecialServicesServicesInner specialServicesServicesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (specialServicesServicesInner.ServiceIdOption.IsSet && specialServicesServicesInner.ServiceId == null)
                throw new ArgumentNullException(nameof(specialServicesServicesInner.ServiceId), "Property is required for class SpecialServicesServicesInner.");

            if (specialServicesServicesInner.BrandedNameOption.IsSet && specialServicesServicesInner.BrandedName == null)
                throw new ArgumentNullException(nameof(specialServicesServicesInner.BrandedName), "Property is required for class SpecialServicesServicesInner.");

            if (specialServicesServicesInner.ParcelTypeRulesOption.IsSet && specialServicesServicesInner.ParcelTypeRules == null)
                throw new ArgumentNullException(nameof(specialServicesServicesInner.ParcelTypeRules), "Property is required for class SpecialServicesServicesInner.");

            if (specialServicesServicesInner.ServiceIdOption.IsSet)
                writer.WriteString("serviceId", specialServicesServicesInner.ServiceId);

            if (specialServicesServicesInner.BrandedNameOption.IsSet)
                writer.WriteString("brandedName", specialServicesServicesInner.BrandedName);

            if (specialServicesServicesInner.ParcelTypeRulesOption.IsSet)
            {
                writer.WritePropertyName("parcelTypeRules");
                JsonSerializer.Serialize(writer, specialServicesServicesInner.ParcelTypeRules, jsonSerializerOptions);
            }
        }
    }
}
