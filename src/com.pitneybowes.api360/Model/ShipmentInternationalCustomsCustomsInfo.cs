/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.pitneybowes.api360.Client.OpenAPIDateConverter;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// This is additional customs information required along with item details.
    /// </summary>
    [DataContract(Name = "ShipmentInternational_customs_customsInfo")]
    public partial class ShipmentInternationalCustomsCustomsInfo : IValidatableObject
    {
        /// <summary>
        /// The reason the commodity is being exported. Valid values are
        /// </summary>
        /// <value>The reason the commodity is being exported. Valid values are</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonForExportEnum
        {
            /// <summary>
            /// Enum GIFT for value: GIFT
            /// </summary>
            [EnumMember(Value = "GIFT")]
            GIFT = 1,

            /// <summary>
            /// Enum COMMERCIALSAMPLE for value: COMMERCIAL_SAMPLE
            /// </summary>
            [EnumMember(Value = "COMMERCIAL_SAMPLE")]
            COMMERCIALSAMPLE = 2,

            /// <summary>
            /// Enum MERCHANDISE for value: MERCHANDISE
            /// </summary>
            [EnumMember(Value = "MERCHANDISE")]
            MERCHANDISE = 3,

            /// <summary>
            /// Enum DOCUMENTS for value: DOCUMENTS
            /// </summary>
            [EnumMember(Value = "DOCUMENTS")]
            DOCUMENTS = 4,

            /// <summary>
            /// Enum RETURNEDGOODS for value: RETURNED_GOODS
            /// </summary>
            [EnumMember(Value = "RETURNED_GOODS")]
            RETURNEDGOODS = 5,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 6
        }


        /// <summary>
        /// The reason the commodity is being exported. Valid values are
        /// </summary>
        /// <value>The reason the commodity is being exported. Valid values are</value>
        [DataMember(Name = "reasonForExport", IsRequired = true, EmitDefaultValue = true)]
        public ReasonForExportEnum ReasonForExport { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentInternationalCustomsCustomsInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipmentInternationalCustomsCustomsInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentInternationalCustomsCustomsInfo" /> class.
        /// </summary>
        /// <param name="reasonForExport">The reason the commodity is being exported. Valid values are (required).</param>
        /// <param name="customsDeclaredValue">Item value in mentioned currencyCode (required).</param>
        /// <param name="currencyCode">The currency used for declared value. Use three uppercase letters, per ISO 4217 (required).</param>
        /// <param name="eELPFC">A number provided by the Automated Export System (AES). This is required if the item is valued at more than $2,500 USD per Schedule B export codes..</param>
        /// <param name="certificateNumber">The certificate number associated with the commodity..</param>
        /// <param name="comments">Free-form comments regarding the exported shipment..</param>
        /// <param name="fromCustomsReference">Free-form reference information provided by the requestor of the shipment. Depending on the carrier this information may or may not be rendered on the customs documents..</param>
        /// <param name="importerCustomsReference">A reference number used by the importer, such as a VAT number, PO number, or insured number..</param>
        /// <param name="invoiceNumber">The commercial invoice number assigned by the exporter..</param>
        /// <param name="licenseNumber">The export license number associated with the commodity..</param>
        /// <param name="sdrValue">When an international parcel is insured, the insured value must be expressed in Special Drawing Rights values.</param>
        public ShipmentInternationalCustomsCustomsInfo(ReasonForExportEnum reasonForExport = default(ReasonForExportEnum), decimal customsDeclaredValue = default(decimal), string currencyCode = default(string), string eELPFC = default(string), string certificateNumber = default(string), string comments = default(string), string fromCustomsReference = default(string), string importerCustomsReference = default(string), string invoiceNumber = default(string), string licenseNumber = default(string), decimal sdrValue = default(decimal))
        {
            this.ReasonForExport = reasonForExport;
            this.CustomsDeclaredValue = customsDeclaredValue;
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new ArgumentNullException("currencyCode is a required property for ShipmentInternationalCustomsCustomsInfo and cannot be null");
            }
            this.CurrencyCode = currencyCode;
            this.EELPFC = eELPFC;
            this.CertificateNumber = certificateNumber;
            this.Comments = comments;
            this.FromCustomsReference = fromCustomsReference;
            this.ImporterCustomsReference = importerCustomsReference;
            this.InvoiceNumber = invoiceNumber;
            this.LicenseNumber = licenseNumber;
            this.SdrValue = sdrValue;
        }

        /// <summary>
        /// Item value in mentioned currencyCode
        /// </summary>
        /// <value>Item value in mentioned currencyCode</value>
        [DataMember(Name = "customsDeclaredValue", IsRequired = true, EmitDefaultValue = true)]
        public decimal CustomsDeclaredValue { get; set; }

        /// <summary>
        /// The currency used for declared value. Use three uppercase letters, per ISO 4217
        /// </summary>
        /// <value>The currency used for declared value. Use three uppercase letters, per ISO 4217</value>
        /// <example>USD</example>
        [DataMember(Name = "currencyCode", IsRequired = true, EmitDefaultValue = true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// A number provided by the Automated Export System (AES). This is required if the item is valued at more than $2,500 USD per Schedule B export codes.
        /// </summary>
        /// <value>A number provided by the Automated Export System (AES). This is required if the item is valued at more than $2,500 USD per Schedule B export codes.</value>
        /// <example>NOEEI 30.2D2</example>
        [DataMember(Name = "EELPFC", EmitDefaultValue = false)]
        public string EELPFC { get; set; }

        /// <summary>
        /// The certificate number associated with the commodity.
        /// </summary>
        /// <value>The certificate number associated with the commodity.</value>
        /// <example>988</example>
        [DataMember(Name = "certificateNumber", EmitDefaultValue = false)]
        public string CertificateNumber { get; set; }

        /// <summary>
        /// Free-form comments regarding the exported shipment.
        /// </summary>
        /// <value>Free-form comments regarding the exported shipment.</value>
        /// <example>test comment</example>
        [DataMember(Name = "comments", EmitDefaultValue = false)]
        public string Comments { get; set; }

        /// <summary>
        /// Free-form reference information provided by the requestor of the shipment. Depending on the carrier this information may or may not be rendered on the customs documents.
        /// </summary>
        /// <value>Free-form reference information provided by the requestor of the shipment. Depending on the carrier this information may or may not be rendered on the customs documents.</value>
        /// <example>111</example>
        [DataMember(Name = "fromCustomsReference", EmitDefaultValue = false)]
        public string FromCustomsReference { get; set; }

        /// <summary>
        /// A reference number used by the importer, such as a VAT number, PO number, or insured number.
        /// </summary>
        /// <value>A reference number used by the importer, such as a VAT number, PO number, or insured number.</value>
        /// <example>2322</example>
        [DataMember(Name = "importerCustomsReference", EmitDefaultValue = false)]
        public string ImporterCustomsReference { get; set; }

        /// <summary>
        /// The commercial invoice number assigned by the exporter.
        /// </summary>
        /// <value>The commercial invoice number assigned by the exporter.</value>
        /// <example>01112920</example>
        [DataMember(Name = "invoiceNumber", EmitDefaultValue = false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// The export license number associated with the commodity.
        /// </summary>
        /// <value>The export license number associated with the commodity.</value>
        /// <example>456ABC123</example>
        [DataMember(Name = "licenseNumber", EmitDefaultValue = false)]
        public string LicenseNumber { get; set; }

        /// <summary>
        /// When an international parcel is insured, the insured value must be expressed in Special Drawing Rights values
        /// </summary>
        /// <value>When an international parcel is insured, the insured value must be expressed in Special Drawing Rights values</value>
        /// <example>23.32</example>
        [DataMember(Name = "sdrValue", EmitDefaultValue = false)]
        public decimal SdrValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentInternationalCustomsCustomsInfo {\n");
            sb.Append("  ReasonForExport: ").Append(ReasonForExport).Append("\n");
            sb.Append("  CustomsDeclaredValue: ").Append(CustomsDeclaredValue).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  EELPFC: ").Append(EELPFC).Append("\n");
            sb.Append("  CertificateNumber: ").Append(CertificateNumber).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  FromCustomsReference: ").Append(FromCustomsReference).Append("\n");
            sb.Append("  ImporterCustomsReference: ").Append(ImporterCustomsReference).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  LicenseNumber: ").Append(LicenseNumber).Append("\n");
            sb.Append("  SdrValue: ").Append(SdrValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
