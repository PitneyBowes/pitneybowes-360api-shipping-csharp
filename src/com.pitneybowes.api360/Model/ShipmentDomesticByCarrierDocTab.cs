// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// This option is used to provide additional information into the label&#39;s additional space. It is supported only for doc size &#x60;4x6_75&#x60;.
    /// </summary>
    public partial class ShipmentDomesticByCarrierDocTab : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDomesticByCarrierDocTab" /> class.
        /// </summary>
        /// <param name="templateName">This is an optional field and will be used when the client has multiple doctab options.</param>
        /// <param name="toAddressName">toAddressName</param>
        /// <param name="parcelTrackingNumber">parcelTrackingNumber</param>
        /// <param name="carrier">carrier</param>
        /// <param name="serviceId">serviceId</param>
        /// <param name="dateOfShipment">dateOfShipment</param>
        /// <param name="pieceNumber">pieceNumber</param>
        /// <param name="packageTotalCarrierCharge">packageTotalCarrierCharge</param>
        /// <param name="totalCarrierCharge">totalCarrierCharge</param>
        /// <param name="packageWeight">packageWeight</param>
        /// <param name="totalWeight">totalWeight</param>
        /// <param name="customField1">customField1</param>
        /// <param name="customField2">customField2</param>
        /// <param name="customField3">customField3</param>
        /// <param name="customField4">customField4</param>
        [JsonConstructor]
        public ShipmentDomesticByCarrierDocTab(Option<string?> templateName = default, Option<DocTabItem?> toAddressName = default, Option<DocTabItem?> parcelTrackingNumber = default, Option<DocTabItem?> carrier = default, Option<DocTabItem?> serviceId = default, Option<DocTabItem?> dateOfShipment = default, Option<DocTabItem?> pieceNumber = default, Option<DocTabItem?> packageTotalCarrierCharge = default, Option<DocTabItem?> totalCarrierCharge = default, Option<DocTabItem?> packageWeight = default, Option<DocTabItem?> totalWeight = default, Option<DocTabItem?> customField1 = default, Option<DocTabItem?> customField2 = default, Option<DocTabItem?> customField3 = default, Option<DocTabItem?> customField4 = default)
        {
            TemplateNameOption = templateName;
            ToAddressNameOption = toAddressName;
            ParcelTrackingNumberOption = parcelTrackingNumber;
            CarrierOption = carrier;
            ServiceIdOption = serviceId;
            DateOfShipmentOption = dateOfShipment;
            PieceNumberOption = pieceNumber;
            PackageTotalCarrierChargeOption = packageTotalCarrierCharge;
            TotalCarrierChargeOption = totalCarrierCharge;
            PackageWeightOption = packageWeight;
            TotalWeightOption = totalWeight;
            CustomField1Option = customField1;
            CustomField2Option = customField2;
            CustomField3Option = customField3;
            CustomField4Option = customField4;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TemplateName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TemplateNameOption { get; private set; }

        /// <summary>
        /// This is an optional field and will be used when the client has multiple doctab options.
        /// </summary>
        /// <value>This is an optional field and will be used when the client has multiple doctab options.</value>
        /* <example>1</example> */
        [JsonPropertyName("templateName")]
        public string? TemplateName { get { return this.TemplateNameOption; } set { this.TemplateNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ToAddressName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> ToAddressNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ToAddressName
        /// </summary>
        [JsonPropertyName("toAddressName")]
        public DocTabItem? ToAddressName { get { return this.ToAddressNameOption; } set { this.ToAddressNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParcelTrackingNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> ParcelTrackingNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParcelTrackingNumber
        /// </summary>
        [JsonPropertyName("parcelTrackingNumber")]
        public DocTabItem? ParcelTrackingNumber { get { return this.ParcelTrackingNumberOption; } set { this.ParcelTrackingNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Carrier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> CarrierOption { get; private set; }

        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [JsonPropertyName("carrier")]
        public DocTabItem? Carrier { get { return this.CarrierOption; } set { this.CarrierOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServiceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> ServiceIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ServiceId
        /// </summary>
        [JsonPropertyName("serviceId")]
        public DocTabItem? ServiceId { get { return this.ServiceIdOption; } set { this.ServiceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateOfShipment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> DateOfShipmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets DateOfShipment
        /// </summary>
        [JsonPropertyName("dateOfShipment")]
        public DocTabItem? DateOfShipment { get { return this.DateOfShipmentOption; } set { this.DateOfShipmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of PieceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> PieceNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets PieceNumber
        /// </summary>
        [JsonPropertyName("pieceNumber")]
        public DocTabItem? PieceNumber { get { return this.PieceNumberOption; } set { this.PieceNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of PackageTotalCarrierCharge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> PackageTotalCarrierChargeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PackageTotalCarrierCharge
        /// </summary>
        [JsonPropertyName("packageTotalCarrierCharge")]
        public DocTabItem? PackageTotalCarrierCharge { get { return this.PackageTotalCarrierChargeOption; } set { this.PackageTotalCarrierChargeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalCarrierCharge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> TotalCarrierChargeOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalCarrierCharge
        /// </summary>
        [JsonPropertyName("totalCarrierCharge")]
        public DocTabItem? TotalCarrierCharge { get { return this.TotalCarrierChargeOption; } set { this.TotalCarrierChargeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PackageWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> PackageWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets PackageWeight
        /// </summary>
        [JsonPropertyName("packageWeight")]
        public DocTabItem? PackageWeight { get { return this.PackageWeightOption; } set { this.PackageWeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> TotalWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalWeight
        /// </summary>
        [JsonPropertyName("totalWeight")]
        public DocTabItem? TotalWeight { get { return this.TotalWeightOption; } set { this.TotalWeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomField1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> CustomField1Option { get; private set; }

        /// <summary>
        /// Gets or Sets CustomField1
        /// </summary>
        [JsonPropertyName("customField1")]
        public DocTabItem? CustomField1 { get { return this.CustomField1Option; } set { this.CustomField1Option = new(value); } }

        /// <summary>
        /// Used to track the state of CustomField2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> CustomField2Option { get; private set; }

        /// <summary>
        /// Gets or Sets CustomField2
        /// </summary>
        [JsonPropertyName("customField2")]
        public DocTabItem? CustomField2 { get { return this.CustomField2Option; } set { this.CustomField2Option = new(value); } }

        /// <summary>
        /// Used to track the state of CustomField3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> CustomField3Option { get; private set; }

        /// <summary>
        /// Gets or Sets CustomField3
        /// </summary>
        [JsonPropertyName("customField3")]
        public DocTabItem? CustomField3 { get { return this.CustomField3Option; } set { this.CustomField3Option = new(value); } }

        /// <summary>
        /// Used to track the state of CustomField4
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DocTabItem?> CustomField4Option { get; private set; }

        /// <summary>
        /// Gets or Sets CustomField4
        /// </summary>
        [JsonPropertyName("customField4")]
        public DocTabItem? CustomField4 { get { return this.CustomField4Option; } set { this.CustomField4Option = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentDomesticByCarrierDocTab {\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  ToAddressName: ").Append(ToAddressName).Append("\n");
            sb.Append("  ParcelTrackingNumber: ").Append(ParcelTrackingNumber).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  DateOfShipment: ").Append(DateOfShipment).Append("\n");
            sb.Append("  PieceNumber: ").Append(PieceNumber).Append("\n");
            sb.Append("  PackageTotalCarrierCharge: ").Append(PackageTotalCarrierCharge).Append("\n");
            sb.Append("  TotalCarrierCharge: ").Append(TotalCarrierCharge).Append("\n");
            sb.Append("  PackageWeight: ").Append(PackageWeight).Append("\n");
            sb.Append("  TotalWeight: ").Append(TotalWeight).Append("\n");
            sb.Append("  CustomField1: ").Append(CustomField1).Append("\n");
            sb.Append("  CustomField2: ").Append(CustomField2).Append("\n");
            sb.Append("  CustomField3: ").Append(CustomField3).Append("\n");
            sb.Append("  CustomField4: ").Append(CustomField4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentDomesticByCarrierDocTab" />
    /// </summary>
    public class ShipmentDomesticByCarrierDocTabJsonConverter : JsonConverter<ShipmentDomesticByCarrierDocTab>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShipmentDomesticByCarrierDocTab" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentDomesticByCarrierDocTab Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> templateName = default;
            Option<DocTabItem?> toAddressName = default;
            Option<DocTabItem?> parcelTrackingNumber = default;
            Option<DocTabItem?> carrier = default;
            Option<DocTabItem?> serviceId = default;
            Option<DocTabItem?> dateOfShipment = default;
            Option<DocTabItem?> pieceNumber = default;
            Option<DocTabItem?> packageTotalCarrierCharge = default;
            Option<DocTabItem?> totalCarrierCharge = default;
            Option<DocTabItem?> packageWeight = default;
            Option<DocTabItem?> totalWeight = default;
            Option<DocTabItem?> customField1 = default;
            Option<DocTabItem?> customField2 = default;
            Option<DocTabItem?> customField3 = default;
            Option<DocTabItem?> customField4 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "templateName":
                            templateName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "toAddressName":
                            toAddressName = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "parcelTrackingNumber":
                            parcelTrackingNumber = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "carrier":
                            carrier = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "serviceId":
                            serviceId = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dateOfShipment":
                            dateOfShipment = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pieceNumber":
                            pieceNumber = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "packageTotalCarrierCharge":
                            packageTotalCarrierCharge = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "totalCarrierCharge":
                            totalCarrierCharge = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "packageWeight":
                            packageWeight = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "totalWeight":
                            totalWeight = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "customField1":
                            customField1 = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "customField2":
                            customField2 = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "customField3":
                            customField3 = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "customField4":
                            customField4 = new Option<DocTabItem?>(JsonSerializer.Deserialize<DocTabItem>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (templateName.IsSet && templateName.Value == null)
                throw new ArgumentNullException(nameof(templateName), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (toAddressName.IsSet && toAddressName.Value == null)
                throw new ArgumentNullException(nameof(toAddressName), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (parcelTrackingNumber.IsSet && parcelTrackingNumber.Value == null)
                throw new ArgumentNullException(nameof(parcelTrackingNumber), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (carrier.IsSet && carrier.Value == null)
                throw new ArgumentNullException(nameof(carrier), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (serviceId.IsSet && serviceId.Value == null)
                throw new ArgumentNullException(nameof(serviceId), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (dateOfShipment.IsSet && dateOfShipment.Value == null)
                throw new ArgumentNullException(nameof(dateOfShipment), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (pieceNumber.IsSet && pieceNumber.Value == null)
                throw new ArgumentNullException(nameof(pieceNumber), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (packageTotalCarrierCharge.IsSet && packageTotalCarrierCharge.Value == null)
                throw new ArgumentNullException(nameof(packageTotalCarrierCharge), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (totalCarrierCharge.IsSet && totalCarrierCharge.Value == null)
                throw new ArgumentNullException(nameof(totalCarrierCharge), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (packageWeight.IsSet && packageWeight.Value == null)
                throw new ArgumentNullException(nameof(packageWeight), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (totalWeight.IsSet && totalWeight.Value == null)
                throw new ArgumentNullException(nameof(totalWeight), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (customField1.IsSet && customField1.Value == null)
                throw new ArgumentNullException(nameof(customField1), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (customField2.IsSet && customField2.Value == null)
                throw new ArgumentNullException(nameof(customField2), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (customField3.IsSet && customField3.Value == null)
                throw new ArgumentNullException(nameof(customField3), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            if (customField4.IsSet && customField4.Value == null)
                throw new ArgumentNullException(nameof(customField4), "Property is not nullable for class ShipmentDomesticByCarrierDocTab.");

            return new ShipmentDomesticByCarrierDocTab(templateName, toAddressName, parcelTrackingNumber, carrier, serviceId, dateOfShipment, pieceNumber, packageTotalCarrierCharge, totalCarrierCharge, packageWeight, totalWeight, customField1, customField2, customField3, customField4);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentDomesticByCarrierDocTab" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticByCarrierDocTab"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentDomesticByCarrierDocTab shipmentDomesticByCarrierDocTab, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, shipmentDomesticByCarrierDocTab, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentDomesticByCarrierDocTab" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticByCarrierDocTab"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ShipmentDomesticByCarrierDocTab shipmentDomesticByCarrierDocTab, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentDomesticByCarrierDocTab.TemplateNameOption.IsSet && shipmentDomesticByCarrierDocTab.TemplateName == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.TemplateName), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.ToAddressNameOption.IsSet && shipmentDomesticByCarrierDocTab.ToAddressName == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.ToAddressName), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.ParcelTrackingNumberOption.IsSet && shipmentDomesticByCarrierDocTab.ParcelTrackingNumber == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.ParcelTrackingNumber), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.CarrierOption.IsSet && shipmentDomesticByCarrierDocTab.Carrier == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.Carrier), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.ServiceIdOption.IsSet && shipmentDomesticByCarrierDocTab.ServiceId == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.ServiceId), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.DateOfShipmentOption.IsSet && shipmentDomesticByCarrierDocTab.DateOfShipment == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.DateOfShipment), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.PieceNumberOption.IsSet && shipmentDomesticByCarrierDocTab.PieceNumber == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.PieceNumber), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.PackageTotalCarrierChargeOption.IsSet && shipmentDomesticByCarrierDocTab.PackageTotalCarrierCharge == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.PackageTotalCarrierCharge), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.TotalCarrierChargeOption.IsSet && shipmentDomesticByCarrierDocTab.TotalCarrierCharge == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.TotalCarrierCharge), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.PackageWeightOption.IsSet && shipmentDomesticByCarrierDocTab.PackageWeight == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.PackageWeight), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.TotalWeightOption.IsSet && shipmentDomesticByCarrierDocTab.TotalWeight == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.TotalWeight), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.CustomField1Option.IsSet && shipmentDomesticByCarrierDocTab.CustomField1 == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.CustomField1), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.CustomField2Option.IsSet && shipmentDomesticByCarrierDocTab.CustomField2 == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.CustomField2), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.CustomField3Option.IsSet && shipmentDomesticByCarrierDocTab.CustomField3 == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.CustomField3), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.CustomField4Option.IsSet && shipmentDomesticByCarrierDocTab.CustomField4 == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierDocTab.CustomField4), "Property is required for class ShipmentDomesticByCarrierDocTab.");

            if (shipmentDomesticByCarrierDocTab.TemplateNameOption.IsSet)
                writer.WriteString("templateName", shipmentDomesticByCarrierDocTab.TemplateName);

            if (shipmentDomesticByCarrierDocTab.ToAddressNameOption.IsSet)
            {
                writer.WritePropertyName("toAddressName");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.ToAddressName, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrierDocTab.ParcelTrackingNumberOption.IsSet)
            {
                writer.WritePropertyName("parcelTrackingNumber");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.ParcelTrackingNumber, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrierDocTab.CarrierOption.IsSet)
            {
                writer.WritePropertyName("carrier");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.Carrier, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrierDocTab.ServiceIdOption.IsSet)
            {
                writer.WritePropertyName("serviceId");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.ServiceId, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrierDocTab.DateOfShipmentOption.IsSet)
            {
                writer.WritePropertyName("dateOfShipment");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.DateOfShipment, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrierDocTab.PieceNumberOption.IsSet)
            {
                writer.WritePropertyName("pieceNumber");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.PieceNumber, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrierDocTab.PackageTotalCarrierChargeOption.IsSet)
            {
                writer.WritePropertyName("packageTotalCarrierCharge");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.PackageTotalCarrierCharge, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrierDocTab.TotalCarrierChargeOption.IsSet)
            {
                writer.WritePropertyName("totalCarrierCharge");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.TotalCarrierCharge, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrierDocTab.PackageWeightOption.IsSet)
            {
                writer.WritePropertyName("packageWeight");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.PackageWeight, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrierDocTab.TotalWeightOption.IsSet)
            {
                writer.WritePropertyName("totalWeight");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.TotalWeight, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrierDocTab.CustomField1Option.IsSet)
            {
                writer.WritePropertyName("customField1");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.CustomField1, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrierDocTab.CustomField2Option.IsSet)
            {
                writer.WritePropertyName("customField2");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.CustomField2, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrierDocTab.CustomField3Option.IsSet)
            {
                writer.WritePropertyName("customField3");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.CustomField3, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrierDocTab.CustomField4Option.IsSet)
            {
                writer.WritePropertyName("customField4");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrierDocTab.CustomField4, jsonSerializerOptions);
            }
        }
    }
}
