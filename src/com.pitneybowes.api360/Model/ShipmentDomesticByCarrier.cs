// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// ShipmentDomesticByCarrier
    /// </summary>
    public partial class ShipmentDomesticByCarrier : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDomesticByCarrier" /> class.
        /// </summary>
        /// <param name="fromAddress">fromAddress</param>
        /// <param name="toAddress">toAddress</param>
        /// <param name="parcelType">Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.&lt;br /&gt; ParcelType can have categories like Package, Envelopes, Paks, Boxes, Tube, etc. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; </param>
        /// <param name="rateShopBy">RateShop, which is attached to an Enterprise or Location, is done through three approaches: by Carrier, by RateGroup, and by Ruleset. &lt;br /&gt;  Through Carrier, customers can choose the carriers as per requirement, based on which services, parcel types, and special services can be selected, and RateShop is done. &lt;br /&gt; Through RateGroup, customers can select the RateGroup, which has been divided into two categories: Cheapest (w.r.t. price) and Fastest (w.r.t. delivery hours). &lt;br /&gt; Through Ruleset, customers can define the Condition/rule for selecting carriers and their services, so they do not need to worry for Rate Shopping every time they create Shipment. For example, For a particular location, they can set one definite carrier, or apply RateGroup - Cheapest/Fastest. Similarly, for a particular amount like below $1000 Dollars, they can select a definite carrier service, based on RateGroup.</param>
        /// <param name="labelSize">Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size. &lt;br /&gt; &#x60;Max length &#x3D; 10&#x60;</param>
        /// <param name="labelType">Defines the type of the Shipment. QR_CODE supported for carrier USPS only as of now. &lt;br /&gt; &#x60;Max length &#x3D; 14&#x60;</param>
        /// <param name="labelFormat">\&quot;Defines the file/format in which the label is printed.&lt;br /&gt; For ZPL2, DOC_4X6 will be supported, while for PDF, both the sizes are supported. QR_CODE can be generated only in GIF format. &#x60;Max length &#x3D; 14&#x60;\&quot; </param>
        /// <param name="soldToAddress">soldToAddress</param>
        /// <param name="additionalAddresses">A list of additional addresses associated with the shipment.  - Each object includes an address and its designated type, such as BROKER or other parties involved in customs or shipping processes.  - Additional address could be domestic or International both.  </param>
        /// <param name="altReturnAddress">altReturnAddress</param>
        /// <param name="parcel">parcel</param>
        /// <param name="byCarrier">byCarrier</param>
        /// <param name="shipmentOptions">shipmentOptions</param>
        /// <param name="carrierPayments">Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. </param>
        /// <param name="docTab">docTab</param>
        /// <param name="specialServices">It provides a carrier based special or extra service, which also varies as per selected service and parcel type. User can override this value by defining it at shipment level.&lt;br/&gt;  &gt; Provide either the specialserviceId or the specialservice objects such as deliveryConfirmation, handling, insurance and returnOptions, but not both. </param>
        /// <param name="deliveryConfirmation">deliveryConfirmation</param>
        /// <param name="handling">handling</param>
        /// <param name="insurance">insurance</param>
        /// <param name="references">references</param>
        /// <param name="metadata">Additional metadata that needs to be stored for this shipment can be added here.&lt;br /&gt; For now, &#39;Cost Account Name&#39; is supported.</param>
        /// <param name="contentType">Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; and &#x60;GIF&#x60;. &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;, &#x60;PNG&#x60;, and &#x60;GIF&#x60;. </param>
        /// <param name="printerAliasName">Refers to a printer connected (directly or via network) to a computer. &#x60;Max length &#x3D; 60&#x60;</param>
        /// <param name="dateOfShipment">The date when shipment is created/shipped. The format of the Date is YYYY-MM-DD.</param>
        /// <param name="deliveryOption">deliveryOption</param>
        /// <param name="returnOptions">returnOptions</param>
        /// <param name="customs">customs</param>
        [JsonConstructor]
        public ShipmentDomesticByCarrier(FromAddressV2 fromAddress, ToAddressV2 toAddress, string parcelType, RateShopByEnum rateShopBy, LabelSizeEnum labelSize, LabelTypeEnum labelType, LabelFormatEnum labelFormat, Option<SoldToAddressV2> soldToAddress = default, Option<List<AdditionalAddressesInner>> additionalAddresses = default, Option<ShipmentDomesticByCarrierAltReturnAddress> altReturnAddress = default, Option<ParcelV2> parcel = default, Option<ByCarrierV2> byCarrier = default, Option<ShipmentDomesticByCarrierShipmentOptions> shipmentOptions = default, Option<List<CarrierPaymentsInner>> carrierPayments = default, Option<ShipmentDomesticByCarrierDocTab> docTab = default, Option<List<SpecialService>> specialServices = default, Option<ShipmentDomesticByCarrierDeliveryConfirmation> deliveryConfirmation = default, Option<ShipmentDomesticByCarrierHandling> handling = default, Option<ShipmentDomesticByCarrierInsurance> insurance = default, Option<ReferenceV2> references = default, Option<List<MilitaryMailShipmentsRequestV2MetadataInner>> metadata = default, Option<ContentTypeEnum?> contentType = default, Option<string> printerAliasName = default, Option<DateTime?> dateOfShipment = default, Option<MilitaryMailShipmentsRequestV2DeliveryOption> deliveryOption = default, Option<ShipmentDomesticByCarrierReturnOptions> returnOptions = default, Option<ShipmentDomesticByCarrierCustoms> customs = default)
        {
            FromAddress = fromAddress;
            ToAddress = toAddress;
            ParcelType = parcelType;
            RateShopBy = rateShopBy;
            LabelSize = labelSize;
            LabelType = labelType;
            LabelFormat = labelFormat;
            SoldToAddressOption = soldToAddress;
            AdditionalAddressesOption = additionalAddresses;
            AltReturnAddressOption = altReturnAddress;
            ParcelOption = parcel;
            ByCarrierOption = byCarrier;
            ShipmentOptionsOption = shipmentOptions;
            CarrierPaymentsOption = carrierPayments;
            DocTabOption = docTab;
            SpecialServicesOption = specialServices;
            DeliveryConfirmationOption = deliveryConfirmation;
            HandlingOption = handling;
            InsuranceOption = insurance;
            ReferencesOption = references;
            MetadataOption = metadata;
            ContentTypeOption = contentType;
            PrinterAliasNameOption = printerAliasName;
            DateOfShipmentOption = dateOfShipment;
            DeliveryOptionOption = deliveryOption;
            ReturnOptionsOption = returnOptions;
            CustomsOption = customs;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// RateShop, which is attached to an Enterprise or Location, is done through three approaches: by Carrier, by RateGroup, and by Ruleset. &lt;br /&gt;  Through Carrier, customers can choose the carriers as per requirement, based on which services, parcel types, and special services can be selected, and RateShop is done. &lt;br /&gt; Through RateGroup, customers can select the RateGroup, which has been divided into two categories: Cheapest (w.r.t. price) and Fastest (w.r.t. delivery hours). &lt;br /&gt; Through Ruleset, customers can define the Condition/rule for selecting carriers and their services, so they do not need to worry for Rate Shopping every time they create Shipment. For example, For a particular location, they can set one definite carrier, or apply RateGroup - Cheapest/Fastest. Similarly, for a particular amount like below $1000 Dollars, they can select a definite carrier service, based on RateGroup.
        /// </summary>
        /// <value>RateShop, which is attached to an Enterprise or Location, is done through three approaches: by Carrier, by RateGroup, and by Ruleset. &lt;br /&gt;  Through Carrier, customers can choose the carriers as per requirement, based on which services, parcel types, and special services can be selected, and RateShop is done. &lt;br /&gt; Through RateGroup, customers can select the RateGroup, which has been divided into two categories: Cheapest (w.r.t. price) and Fastest (w.r.t. delivery hours). &lt;br /&gt; Through Ruleset, customers can define the Condition/rule for selecting carriers and their services, so they do not need to worry for Rate Shopping every time they create Shipment. For example, For a particular location, they can set one definite carrier, or apply RateGroup - Cheapest/Fastest. Similarly, for a particular amount like below $1000 Dollars, they can select a definite carrier service, based on RateGroup.</value>
        public enum RateShopByEnum
        {
            /// <summary>
            /// Enum Carrier for value: carrier
            /// </summary>
            Carrier = 1,

            /// <summary>
            /// Enum RateGroup for value: rateGroup
            /// </summary>
            RateGroup = 2,

            /// <summary>
            /// Enum Ruleset for value: ruleset
            /// </summary>
            Ruleset = 3
        }

        /// <summary>
        /// Returns a <see cref="RateShopByEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RateShopByEnum RateShopByEnumFromString(string value)
        {
            if (value.Equals("carrier"))
                return RateShopByEnum.Carrier;

            if (value.Equals("rateGroup"))
                return RateShopByEnum.RateGroup;

            if (value.Equals("ruleset"))
                return RateShopByEnum.Ruleset;

            throw new NotImplementedException($"Could not convert value to type RateShopByEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RateShopByEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RateShopByEnum? RateShopByEnumFromStringOrDefault(string value)
        {
            if (value.Equals("carrier"))
                return RateShopByEnum.Carrier;

            if (value.Equals("rateGroup"))
                return RateShopByEnum.RateGroup;

            if (value.Equals("ruleset"))
                return RateShopByEnum.Ruleset;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RateShopByEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RateShopByEnumToJsonValue(RateShopByEnum value)
        {
            if (value == RateShopByEnum.Carrier)
                return "carrier";

            if (value == RateShopByEnum.RateGroup)
                return "rateGroup";

            if (value == RateShopByEnum.Ruleset)
                return "ruleset";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// RateShop, which is attached to an Enterprise or Location, is done through three approaches: by Carrier, by RateGroup, and by Ruleset. &lt;br /&gt;  Through Carrier, customers can choose the carriers as per requirement, based on which services, parcel types, and special services can be selected, and RateShop is done. &lt;br /&gt; Through RateGroup, customers can select the RateGroup, which has been divided into two categories: Cheapest (w.r.t. price) and Fastest (w.r.t. delivery hours). &lt;br /&gt; Through Ruleset, customers can define the Condition/rule for selecting carriers and their services, so they do not need to worry for Rate Shopping every time they create Shipment. For example, For a particular location, they can set one definite carrier, or apply RateGroup - Cheapest/Fastest. Similarly, for a particular amount like below $1000 Dollars, they can select a definite carrier service, based on RateGroup.
        /// </summary>
        /// <value>RateShop, which is attached to an Enterprise or Location, is done through three approaches: by Carrier, by RateGroup, and by Ruleset. &lt;br /&gt;  Through Carrier, customers can choose the carriers as per requirement, based on which services, parcel types, and special services can be selected, and RateShop is done. &lt;br /&gt; Through RateGroup, customers can select the RateGroup, which has been divided into two categories: Cheapest (w.r.t. price) and Fastest (w.r.t. delivery hours). &lt;br /&gt; Through Ruleset, customers can define the Condition/rule for selecting carriers and their services, so they do not need to worry for Rate Shopping every time they create Shipment. For example, For a particular location, they can set one definite carrier, or apply RateGroup - Cheapest/Fastest. Similarly, for a particular amount like below $1000 Dollars, they can select a definite carrier service, based on RateGroup.</value>
        /* <example>carrier</example> */
        [JsonPropertyName("rateShopBy")]
        public RateShopByEnum RateShopBy { get; set; }

        /// <summary>
        /// Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size. &lt;br /&gt; &#x60;Max length &#x3D; 10&#x60;
        /// </summary>
        /// <value>Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size. &lt;br /&gt; &#x60;Max length &#x3D; 10&#x60;</value>
        public enum LabelSizeEnum
        {
            /// <summary>
            /// Enum DOC8X11 for value: DOC_8X11
            /// </summary>
            DOC8X11 = 1,

            /// <summary>
            /// Enum DOC4X8 for value: DOC_4X8
            /// </summary>
            DOC4X8 = 2,

            /// <summary>
            /// Enum DOC4X6 for value: DOC_4X6
            /// </summary>
            DOC4X6 = 3
        }

        /// <summary>
        /// Returns a <see cref="LabelSizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static LabelSizeEnum LabelSizeEnumFromString(string value)
        {
            if (value.Equals("DOC_8X11"))
                return LabelSizeEnum.DOC8X11;

            if (value.Equals("DOC_4X8"))
                return LabelSizeEnum.DOC4X8;

            if (value.Equals("DOC_4X6"))
                return LabelSizeEnum.DOC4X6;

            throw new NotImplementedException($"Could not convert value to type LabelSizeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="LabelSizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LabelSizeEnum? LabelSizeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("DOC_8X11"))
                return LabelSizeEnum.DOC8X11;

            if (value.Equals("DOC_4X8"))
                return LabelSizeEnum.DOC4X8;

            if (value.Equals("DOC_4X6"))
                return LabelSizeEnum.DOC4X6;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LabelSizeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string LabelSizeEnumToJsonValue(LabelSizeEnum value)
        {
            if (value == LabelSizeEnum.DOC8X11)
                return "DOC_8X11";

            if (value == LabelSizeEnum.DOC4X8)
                return "DOC_4X8";

            if (value == LabelSizeEnum.DOC4X6)
                return "DOC_4X6";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size. &lt;br /&gt; &#x60;Max length &#x3D; 10&#x60;
        /// </summary>
        /// <value>Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size. &lt;br /&gt; &#x60;Max length &#x3D; 10&#x60;</value>
        /* <example>DOC_4X6</example> */
        [JsonPropertyName("labelSize")]
        public LabelSizeEnum LabelSize { get; set; }

        /// <summary>
        /// Defines the type of the Shipment. QR_CODE supported for carrier USPS only as of now. &lt;br /&gt; &#x60;Max length &#x3D; 14&#x60;
        /// </summary>
        /// <value>Defines the type of the Shipment. QR_CODE supported for carrier USPS only as of now. &lt;br /&gt; &#x60;Max length &#x3D; 14&#x60;</value>
        public enum LabelTypeEnum
        {
            /// <summary>
            /// Enum SHIPPINGLABEL for value: SHIPPING_LABEL
            /// </summary>
            SHIPPINGLABEL = 1,

            /// <summary>
            /// Enum QRCODE for value: QR_CODE
            /// </summary>
            QRCODE = 2
        }

        /// <summary>
        /// Returns a <see cref="LabelTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static LabelTypeEnum LabelTypeEnumFromString(string value)
        {
            if (value.Equals("SHIPPING_LABEL"))
                return LabelTypeEnum.SHIPPINGLABEL;

            if (value.Equals("QR_CODE"))
                return LabelTypeEnum.QRCODE;

            throw new NotImplementedException($"Could not convert value to type LabelTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="LabelTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LabelTypeEnum? LabelTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SHIPPING_LABEL"))
                return LabelTypeEnum.SHIPPINGLABEL;

            if (value.Equals("QR_CODE"))
                return LabelTypeEnum.QRCODE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LabelTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string LabelTypeEnumToJsonValue(LabelTypeEnum value)
        {
            if (value == LabelTypeEnum.SHIPPINGLABEL)
                return "SHIPPING_LABEL";

            if (value == LabelTypeEnum.QRCODE)
                return "QR_CODE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Defines the type of the Shipment. QR_CODE supported for carrier USPS only as of now. &lt;br /&gt; &#x60;Max length &#x3D; 14&#x60;
        /// </summary>
        /// <value>Defines the type of the Shipment. QR_CODE supported for carrier USPS only as of now. &lt;br /&gt; &#x60;Max length &#x3D; 14&#x60;</value>
        /* <example>SHIPPING_LABEL</example> */
        [JsonPropertyName("labelType")]
        public LabelTypeEnum LabelType { get; set; }

        /// <summary>
        /// \&quot;Defines the file/format in which the label is printed.&lt;br /&gt; For ZPL2, DOC_4X6 will be supported, while for PDF, both the sizes are supported. QR_CODE can be generated only in GIF format. &#x60;Max length &#x3D; 14&#x60;\&quot; 
        /// </summary>
        /// <value>\&quot;Defines the file/format in which the label is printed.&lt;br /&gt; For ZPL2, DOC_4X6 will be supported, while for PDF, both the sizes are supported. QR_CODE can be generated only in GIF format. &#x60;Max length &#x3D; 14&#x60;\&quot; </value>
        public enum LabelFormatEnum
        {
            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            PDF = 1,

            /// <summary>
            /// Enum ZPL2 for value: ZPL2
            /// </summary>
            ZPL2 = 2,

            /// <summary>
            /// Enum PNG for value: PNG
            /// </summary>
            PNG = 3,

            /// <summary>
            /// Enum GIF for value: GIF
            /// </summary>
            GIF = 4
        }

        /// <summary>
        /// Returns a <see cref="LabelFormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static LabelFormatEnum LabelFormatEnumFromString(string value)
        {
            if (value.Equals("PDF"))
                return LabelFormatEnum.PDF;

            if (value.Equals("ZPL2"))
                return LabelFormatEnum.ZPL2;

            if (value.Equals("PNG"))
                return LabelFormatEnum.PNG;

            if (value.Equals("GIF"))
                return LabelFormatEnum.GIF;

            throw new NotImplementedException($"Could not convert value to type LabelFormatEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="LabelFormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LabelFormatEnum? LabelFormatEnumFromStringOrDefault(string value)
        {
            if (value.Equals("PDF"))
                return LabelFormatEnum.PDF;

            if (value.Equals("ZPL2"))
                return LabelFormatEnum.ZPL2;

            if (value.Equals("PNG"))
                return LabelFormatEnum.PNG;

            if (value.Equals("GIF"))
                return LabelFormatEnum.GIF;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LabelFormatEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string LabelFormatEnumToJsonValue(LabelFormatEnum value)
        {
            if (value == LabelFormatEnum.PDF)
                return "PDF";

            if (value == LabelFormatEnum.ZPL2)
                return "ZPL2";

            if (value == LabelFormatEnum.PNG)
                return "PNG";

            if (value == LabelFormatEnum.GIF)
                return "GIF";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// \&quot;Defines the file/format in which the label is printed.&lt;br /&gt; For ZPL2, DOC_4X6 will be supported, while for PDF, both the sizes are supported. QR_CODE can be generated only in GIF format. &#x60;Max length &#x3D; 14&#x60;\&quot; 
        /// </summary>
        /// <value>\&quot;Defines the file/format in which the label is printed.&lt;br /&gt; For ZPL2, DOC_4X6 will be supported, while for PDF, both the sizes are supported. QR_CODE can be generated only in GIF format. &#x60;Max length &#x3D; 14&#x60;\&quot; </value>
        /* <example>ZPL2</example> */
        [JsonPropertyName("labelFormat")]
        public LabelFormatEnum LabelFormat { get; set; }

        /// <summary>
        /// Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; and &#x60;GIF&#x60;. &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;, &#x60;PNG&#x60;, and &#x60;GIF&#x60;. 
        /// </summary>
        /// <value>Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; and &#x60;GIF&#x60;. &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;, &#x60;PNG&#x60;, and &#x60;GIF&#x60;. </value>
        public enum ContentTypeEnum
        {
            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            URL = 1,

            /// <summary>
            /// Enum BASE64 for value: BASE64
            /// </summary>
            BASE64 = 2
        }

        /// <summary>
        /// Returns a <see cref="ContentTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ContentTypeEnum ContentTypeEnumFromString(string value)
        {
            if (value.Equals("URL"))
                return ContentTypeEnum.URL;

            if (value.Equals("BASE64"))
                return ContentTypeEnum.BASE64;

            throw new NotImplementedException($"Could not convert value to type ContentTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ContentTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ContentTypeEnum? ContentTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("URL"))
                return ContentTypeEnum.URL;

            if (value.Equals("BASE64"))
                return ContentTypeEnum.BASE64;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ContentTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ContentTypeEnumToJsonValue(ContentTypeEnum? value)
        {
            if (value == ContentTypeEnum.URL)
                return "URL";

            if (value == ContentTypeEnum.BASE64)
                return "BASE64";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ContentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ContentTypeEnum?> ContentTypeOption { get; private set; }

        /// <summary>
        /// Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; and &#x60;GIF&#x60;. &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;, &#x60;PNG&#x60;, and &#x60;GIF&#x60;. 
        /// </summary>
        /// <value>Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; and &#x60;GIF&#x60;. &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;, &#x60;PNG&#x60;, and &#x60;GIF&#x60;. </value>
        /* <example>BASE64</example> */
        [JsonPropertyName("contentType")]
        public ContentTypeEnum? ContentType { get { return this.ContentTypeOption; } set { this.ContentTypeOption = new Option<ContentTypeEnum?>(value); } }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [JsonPropertyName("fromAddress")]
        public FromAddressV2 FromAddress { get; set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [JsonPropertyName("toAddress")]
        public ToAddressV2 ToAddress { get; set; }

        /// <summary>
        /// Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.&lt;br /&gt; ParcelType can have categories like Package, Envelopes, Paks, Boxes, Tube, etc. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; 
        /// </summary>
        /// <value>Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.&lt;br /&gt; ParcelType can have categories like Package, Envelopes, Paks, Boxes, Tube, etc. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; </value>
        /* <example>PKG</example> */
        [JsonPropertyName("parcelType")]
        public string ParcelType { get; set; }

        /// <summary>
        /// Used to track the state of SoldToAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SoldToAddressV2> SoldToAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets SoldToAddress
        /// </summary>
        [JsonPropertyName("soldToAddress")]
        public SoldToAddressV2 SoldToAddress { get { return this.SoldToAddressOption; } set { this.SoldToAddressOption = new Option<SoldToAddressV2>(value); } }

        /// <summary>
        /// Used to track the state of AdditionalAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<AdditionalAddressesInner>> AdditionalAddressesOption { get; private set; }

        /// <summary>
        /// A list of additional addresses associated with the shipment.  - Each object includes an address and its designated type, such as BROKER or other parties involved in customs or shipping processes.  - Additional address could be domestic or International both.  
        /// </summary>
        /// <value>A list of additional addresses associated with the shipment.  - Each object includes an address and its designated type, such as BROKER or other parties involved in customs or shipping processes.  - Additional address could be domestic or International both.  </value>
        [JsonPropertyName("additionalAddresses")]
        public List<AdditionalAddressesInner> AdditionalAddresses { get { return this.AdditionalAddressesOption; } set { this.AdditionalAddressesOption = new Option<List<AdditionalAddressesInner>>(value); } }

        /// <summary>
        /// Used to track the state of AltReturnAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipmentDomesticByCarrierAltReturnAddress> AltReturnAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets AltReturnAddress
        /// </summary>
        [JsonPropertyName("altReturnAddress")]
        public ShipmentDomesticByCarrierAltReturnAddress AltReturnAddress { get { return this.AltReturnAddressOption; } set { this.AltReturnAddressOption = new Option<ShipmentDomesticByCarrierAltReturnAddress>(value); } }

        /// <summary>
        /// Used to track the state of Parcel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ParcelV2> ParcelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [JsonPropertyName("parcel")]
        public ParcelV2 Parcel { get { return this.ParcelOption; } set { this.ParcelOption = new Option<ParcelV2>(value); } }

        /// <summary>
        /// Used to track the state of ByCarrier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ByCarrierV2> ByCarrierOption { get; private set; }

        /// <summary>
        /// Gets or Sets ByCarrier
        /// </summary>
        [JsonPropertyName("byCarrier")]
        public ByCarrierV2 ByCarrier { get { return this.ByCarrierOption; } set { this.ByCarrierOption = new Option<ByCarrierV2>(value); } }

        /// <summary>
        /// Used to track the state of ShipmentOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipmentDomesticByCarrierShipmentOptions> ShipmentOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShipmentOptions
        /// </summary>
        [JsonPropertyName("shipmentOptions")]
        public ShipmentDomesticByCarrierShipmentOptions ShipmentOptions { get { return this.ShipmentOptionsOption; } set { this.ShipmentOptionsOption = new Option<ShipmentDomesticByCarrierShipmentOptions>(value); } }

        /// <summary>
        /// Used to track the state of CarrierPayments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CarrierPaymentsInner>> CarrierPaymentsOption { get; private set; }

        /// <summary>
        /// Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. 
        /// </summary>
        /// <value>Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. </value>
        [JsonPropertyName("carrierPayments")]
        public List<CarrierPaymentsInner> CarrierPayments { get { return this.CarrierPaymentsOption; } set { this.CarrierPaymentsOption = new Option<List<CarrierPaymentsInner>>(value); } }

        /// <summary>
        /// Used to track the state of DocTab
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipmentDomesticByCarrierDocTab> DocTabOption { get; private set; }

        /// <summary>
        /// Gets or Sets DocTab
        /// </summary>
        [JsonPropertyName("docTab")]
        public ShipmentDomesticByCarrierDocTab DocTab { get { return this.DocTabOption; } set { this.DocTabOption = new Option<ShipmentDomesticByCarrierDocTab>(value); } }

        /// <summary>
        /// Used to track the state of SpecialServices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SpecialService>> SpecialServicesOption { get; private set; }

        /// <summary>
        /// It provides a carrier based special or extra service, which also varies as per selected service and parcel type. User can override this value by defining it at shipment level.&lt;br/&gt;  &gt; Provide either the specialserviceId or the specialservice objects such as deliveryConfirmation, handling, insurance and returnOptions, but not both. 
        /// </summary>
        /// <value>It provides a carrier based special or extra service, which also varies as per selected service and parcel type. User can override this value by defining it at shipment level.&lt;br/&gt;  &gt; Provide either the specialserviceId or the specialservice objects such as deliveryConfirmation, handling, insurance and returnOptions, but not both. </value>
        [JsonPropertyName("specialServices")]
        public List<SpecialService> SpecialServices { get { return this.SpecialServicesOption; } set { this.SpecialServicesOption = new Option<List<SpecialService>>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryConfirmation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipmentDomesticByCarrierDeliveryConfirmation> DeliveryConfirmationOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryConfirmation
        /// </summary>
        [JsonPropertyName("deliveryConfirmation")]
        public ShipmentDomesticByCarrierDeliveryConfirmation DeliveryConfirmation { get { return this.DeliveryConfirmationOption; } set { this.DeliveryConfirmationOption = new Option<ShipmentDomesticByCarrierDeliveryConfirmation>(value); } }

        /// <summary>
        /// Used to track the state of Handling
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipmentDomesticByCarrierHandling> HandlingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Handling
        /// </summary>
        [JsonPropertyName("handling")]
        public ShipmentDomesticByCarrierHandling Handling { get { return this.HandlingOption; } set { this.HandlingOption = new Option<ShipmentDomesticByCarrierHandling>(value); } }

        /// <summary>
        /// Used to track the state of Insurance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipmentDomesticByCarrierInsurance> InsuranceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Insurance
        /// </summary>
        [JsonPropertyName("insurance")]
        public ShipmentDomesticByCarrierInsurance Insurance { get { return this.InsuranceOption; } set { this.InsuranceOption = new Option<ShipmentDomesticByCarrierInsurance>(value); } }

        /// <summary>
        /// Used to track the state of References
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReferenceV2> ReferencesOption { get; private set; }

        /// <summary>
        /// Gets or Sets References
        /// </summary>
        [JsonPropertyName("references")]
        public ReferenceV2 References { get { return this.ReferencesOption; } set { this.ReferencesOption = new Option<ReferenceV2>(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<MilitaryMailShipmentsRequestV2MetadataInner>> MetadataOption { get; private set; }

        /// <summary>
        /// Additional metadata that needs to be stored for this shipment can be added here.&lt;br /&gt; For now, &#39;Cost Account Name&#39; is supported.
        /// </summary>
        /// <value>Additional metadata that needs to be stored for this shipment can be added here.&lt;br /&gt; For now, &#39;Cost Account Name&#39; is supported.</value>
        [JsonPropertyName("metadata")]
        public List<MilitaryMailShipmentsRequestV2MetadataInner> Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new Option<List<MilitaryMailShipmentsRequestV2MetadataInner>>(value); } }

        /// <summary>
        /// Used to track the state of PrinterAliasName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PrinterAliasNameOption { get; private set; }

        /// <summary>
        /// Refers to a printer connected (directly or via network) to a computer. &#x60;Max length &#x3D; 60&#x60;
        /// </summary>
        /// <value>Refers to a printer connected (directly or via network) to a computer. &#x60;Max length &#x3D; 60&#x60;</value>
        /* <example>test</example> */
        [JsonPropertyName("printerAliasName")]
        public string PrinterAliasName { get { return this.PrinterAliasNameOption; } set { this.PrinterAliasNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DateOfShipment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateOfShipmentOption { get; private set; }

        /// <summary>
        /// The date when shipment is created/shipped. The format of the Date is YYYY-MM-DD.
        /// </summary>
        /// <value>The date when shipment is created/shipped. The format of the Date is YYYY-MM-DD.</value>
        /* <example>Wed Mar 20 05:30:00 IST 2024</example> */
        [JsonPropertyName("dateOfShipment")]
        public DateTime? DateOfShipment { get { return this.DateOfShipmentOption; } set { this.DateOfShipmentOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryOption
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MilitaryMailShipmentsRequestV2DeliveryOption> DeliveryOptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryOption
        /// </summary>
        [JsonPropertyName("deliveryOption")]
        public MilitaryMailShipmentsRequestV2DeliveryOption DeliveryOption { get { return this.DeliveryOptionOption; } set { this.DeliveryOptionOption = new Option<MilitaryMailShipmentsRequestV2DeliveryOption>(value); } }

        /// <summary>
        /// Used to track the state of ReturnOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipmentDomesticByCarrierReturnOptions> ReturnOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReturnOptions
        /// </summary>
        [JsonPropertyName("returnOptions")]
        public ShipmentDomesticByCarrierReturnOptions ReturnOptions { get { return this.ReturnOptionsOption; } set { this.ReturnOptionsOption = new Option<ShipmentDomesticByCarrierReturnOptions>(value); } }

        /// <summary>
        /// Used to track the state of Customs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipmentDomesticByCarrierCustoms> CustomsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Customs
        /// </summary>
        [JsonPropertyName("customs")]
        public ShipmentDomesticByCarrierCustoms Customs { get { return this.CustomsOption; } set { this.CustomsOption = new Option<ShipmentDomesticByCarrierCustoms>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentDomesticByCarrier {\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  RateShopBy: ").Append(RateShopBy).Append("\n");
            sb.Append("  LabelSize: ").Append(LabelSize).Append("\n");
            sb.Append("  LabelType: ").Append(LabelType).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  SoldToAddress: ").Append(SoldToAddress).Append("\n");
            sb.Append("  AdditionalAddresses: ").Append(AdditionalAddresses).Append("\n");
            sb.Append("  AltReturnAddress: ").Append(AltReturnAddress).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  ByCarrier: ").Append(ByCarrier).Append("\n");
            sb.Append("  ShipmentOptions: ").Append(ShipmentOptions).Append("\n");
            sb.Append("  CarrierPayments: ").Append(CarrierPayments).Append("\n");
            sb.Append("  DocTab: ").Append(DocTab).Append("\n");
            sb.Append("  SpecialServices: ").Append(SpecialServices).Append("\n");
            sb.Append("  DeliveryConfirmation: ").Append(DeliveryConfirmation).Append("\n");
            sb.Append("  Handling: ").Append(Handling).Append("\n");
            sb.Append("  Insurance: ").Append(Insurance).Append("\n");
            sb.Append("  References: ").Append(References).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  PrinterAliasName: ").Append(PrinterAliasName).Append("\n");
            sb.Append("  DateOfShipment: ").Append(DateOfShipment).Append("\n");
            sb.Append("  DeliveryOption: ").Append(DeliveryOption).Append("\n");
            sb.Append("  ReturnOptions: ").Append(ReturnOptions).Append("\n");
            sb.Append("  Customs: ").Append(Customs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentDomesticByCarrier" />
    /// </summary>
    public class ShipmentDomesticByCarrierJsonConverter : JsonConverter<ShipmentDomesticByCarrier>
    {
        /// <summary>
        /// The format to use to serialize DateOfShipment
        /// </summary>
        public static string DateOfShipmentFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="ShipmentDomesticByCarrier" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentDomesticByCarrier Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<FromAddressV2> fromAddress = default;
            Option<ToAddressV2> toAddress = default;
            Option<string> parcelType = default;
            Option<ShipmentDomesticByCarrier.RateShopByEnum?> rateShopBy = default;
            Option<ShipmentDomesticByCarrier.LabelSizeEnum?> labelSize = default;
            Option<ShipmentDomesticByCarrier.LabelTypeEnum?> labelType = default;
            Option<ShipmentDomesticByCarrier.LabelFormatEnum?> labelFormat = default;
            Option<SoldToAddressV2> soldToAddress = default;
            Option<List<AdditionalAddressesInner>> additionalAddresses = default;
            Option<ShipmentDomesticByCarrierAltReturnAddress> altReturnAddress = default;
            Option<ParcelV2> parcel = default;
            Option<ByCarrierV2> byCarrier = default;
            Option<ShipmentDomesticByCarrierShipmentOptions> shipmentOptions = default;
            Option<List<CarrierPaymentsInner>> carrierPayments = default;
            Option<ShipmentDomesticByCarrierDocTab> docTab = default;
            Option<List<SpecialService>> specialServices = default;
            Option<ShipmentDomesticByCarrierDeliveryConfirmation> deliveryConfirmation = default;
            Option<ShipmentDomesticByCarrierHandling> handling = default;
            Option<ShipmentDomesticByCarrierInsurance> insurance = default;
            Option<ReferenceV2> references = default;
            Option<List<MilitaryMailShipmentsRequestV2MetadataInner>> metadata = default;
            Option<ShipmentDomesticByCarrier.ContentTypeEnum?> contentType = default;
            Option<string> printerAliasName = default;
            Option<DateTime?> dateOfShipment = default;
            Option<MilitaryMailShipmentsRequestV2DeliveryOption> deliveryOption = default;
            Option<ShipmentDomesticByCarrierReturnOptions> returnOptions = default;
            Option<ShipmentDomesticByCarrierCustoms> customs = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "fromAddress":
                            fromAddress = new Option<FromAddressV2>(JsonSerializer.Deserialize<FromAddressV2>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "toAddress":
                            toAddress = new Option<ToAddressV2>(JsonSerializer.Deserialize<ToAddressV2>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "parcelType":
                            parcelType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rateShopBy":
                            string rateShopByRawValue = utf8JsonReader.GetString();
                            if (rateShopByRawValue != null)
                                rateShopBy = new Option<ShipmentDomesticByCarrier.RateShopByEnum?>(ShipmentDomesticByCarrier.RateShopByEnumFromStringOrDefault(rateShopByRawValue));
                            break;
                        case "labelSize":
                            string labelSizeRawValue = utf8JsonReader.GetString();
                            if (labelSizeRawValue != null)
                                labelSize = new Option<ShipmentDomesticByCarrier.LabelSizeEnum?>(ShipmentDomesticByCarrier.LabelSizeEnumFromStringOrDefault(labelSizeRawValue));
                            break;
                        case "labelType":
                            string labelTypeRawValue = utf8JsonReader.GetString();
                            if (labelTypeRawValue != null)
                                labelType = new Option<ShipmentDomesticByCarrier.LabelTypeEnum?>(ShipmentDomesticByCarrier.LabelTypeEnumFromStringOrDefault(labelTypeRawValue));
                            break;
                        case "labelFormat":
                            string labelFormatRawValue = utf8JsonReader.GetString();
                            if (labelFormatRawValue != null)
                                labelFormat = new Option<ShipmentDomesticByCarrier.LabelFormatEnum?>(ShipmentDomesticByCarrier.LabelFormatEnumFromStringOrDefault(labelFormatRawValue));
                            break;
                        case "soldToAddress":
                            soldToAddress = new Option<SoldToAddressV2>(JsonSerializer.Deserialize<SoldToAddressV2>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "additionalAddresses":
                            additionalAddresses = new Option<List<AdditionalAddressesInner>>(JsonSerializer.Deserialize<List<AdditionalAddressesInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "altReturnAddress":
                            altReturnAddress = new Option<ShipmentDomesticByCarrierAltReturnAddress>(JsonSerializer.Deserialize<ShipmentDomesticByCarrierAltReturnAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "parcel":
                            parcel = new Option<ParcelV2>(JsonSerializer.Deserialize<ParcelV2>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "byCarrier":
                            byCarrier = new Option<ByCarrierV2>(JsonSerializer.Deserialize<ByCarrierV2>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shipmentOptions":
                            shipmentOptions = new Option<ShipmentDomesticByCarrierShipmentOptions>(JsonSerializer.Deserialize<ShipmentDomesticByCarrierShipmentOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "carrierPayments":
                            carrierPayments = new Option<List<CarrierPaymentsInner>>(JsonSerializer.Deserialize<List<CarrierPaymentsInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "docTab":
                            docTab = new Option<ShipmentDomesticByCarrierDocTab>(JsonSerializer.Deserialize<ShipmentDomesticByCarrierDocTab>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "specialServices":
                            specialServices = new Option<List<SpecialService>>(JsonSerializer.Deserialize<List<SpecialService>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliveryConfirmation":
                            deliveryConfirmation = new Option<ShipmentDomesticByCarrierDeliveryConfirmation>(JsonSerializer.Deserialize<ShipmentDomesticByCarrierDeliveryConfirmation>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "handling":
                            handling = new Option<ShipmentDomesticByCarrierHandling>(JsonSerializer.Deserialize<ShipmentDomesticByCarrierHandling>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "insurance":
                            insurance = new Option<ShipmentDomesticByCarrierInsurance>(JsonSerializer.Deserialize<ShipmentDomesticByCarrierInsurance>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "references":
                            references = new Option<ReferenceV2>(JsonSerializer.Deserialize<ReferenceV2>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metadata":
                            metadata = new Option<List<MilitaryMailShipmentsRequestV2MetadataInner>>(JsonSerializer.Deserialize<List<MilitaryMailShipmentsRequestV2MetadataInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "contentType":
                            string contentTypeRawValue = utf8JsonReader.GetString();
                            if (contentTypeRawValue != null)
                                contentType = new Option<ShipmentDomesticByCarrier.ContentTypeEnum?>(ShipmentDomesticByCarrier.ContentTypeEnumFromStringOrDefault(contentTypeRawValue));
                            break;
                        case "printerAliasName":
                            printerAliasName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dateOfShipment":
                            dateOfShipment = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deliveryOption":
                            deliveryOption = new Option<MilitaryMailShipmentsRequestV2DeliveryOption>(JsonSerializer.Deserialize<MilitaryMailShipmentsRequestV2DeliveryOption>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "returnOptions":
                            returnOptions = new Option<ShipmentDomesticByCarrierReturnOptions>(JsonSerializer.Deserialize<ShipmentDomesticByCarrierReturnOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "customs":
                            customs = new Option<ShipmentDomesticByCarrierCustoms>(JsonSerializer.Deserialize<ShipmentDomesticByCarrierCustoms>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fromAddress.IsSet)
                throw new ArgumentException("Property is required for class ShipmentDomesticByCarrier.", nameof(fromAddress));

            if (!toAddress.IsSet)
                throw new ArgumentException("Property is required for class ShipmentDomesticByCarrier.", nameof(toAddress));

            if (!parcelType.IsSet)
                throw new ArgumentException("Property is required for class ShipmentDomesticByCarrier.", nameof(parcelType));

            if (!rateShopBy.IsSet)
                throw new ArgumentException("Property is required for class ShipmentDomesticByCarrier.", nameof(rateShopBy));

            if (!labelSize.IsSet)
                throw new ArgumentException("Property is required for class ShipmentDomesticByCarrier.", nameof(labelSize));

            if (!labelType.IsSet)
                throw new ArgumentException("Property is required for class ShipmentDomesticByCarrier.", nameof(labelType));

            if (!labelFormat.IsSet)
                throw new ArgumentException("Property is required for class ShipmentDomesticByCarrier.", nameof(labelFormat));

            if (fromAddress.IsSet && fromAddress.Value == null)
                throw new ArgumentNullException(nameof(fromAddress), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (toAddress.IsSet && toAddress.Value == null)
                throw new ArgumentNullException(nameof(toAddress), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (parcelType.IsSet && parcelType.Value == null)
                throw new ArgumentNullException(nameof(parcelType), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (rateShopBy.IsSet && rateShopBy.Value == null)
                throw new ArgumentNullException(nameof(rateShopBy), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (labelSize.IsSet && labelSize.Value == null)
                throw new ArgumentNullException(nameof(labelSize), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (labelType.IsSet && labelType.Value == null)
                throw new ArgumentNullException(nameof(labelType), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (labelFormat.IsSet && labelFormat.Value == null)
                throw new ArgumentNullException(nameof(labelFormat), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (soldToAddress.IsSet && soldToAddress.Value == null)
                throw new ArgumentNullException(nameof(soldToAddress), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (additionalAddresses.IsSet && additionalAddresses.Value == null)
                throw new ArgumentNullException(nameof(additionalAddresses), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (altReturnAddress.IsSet && altReturnAddress.Value == null)
                throw new ArgumentNullException(nameof(altReturnAddress), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (parcel.IsSet && parcel.Value == null)
                throw new ArgumentNullException(nameof(parcel), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (byCarrier.IsSet && byCarrier.Value == null)
                throw new ArgumentNullException(nameof(byCarrier), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (shipmentOptions.IsSet && shipmentOptions.Value == null)
                throw new ArgumentNullException(nameof(shipmentOptions), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (carrierPayments.IsSet && carrierPayments.Value == null)
                throw new ArgumentNullException(nameof(carrierPayments), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (docTab.IsSet && docTab.Value == null)
                throw new ArgumentNullException(nameof(docTab), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (specialServices.IsSet && specialServices.Value == null)
                throw new ArgumentNullException(nameof(specialServices), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (deliveryConfirmation.IsSet && deliveryConfirmation.Value == null)
                throw new ArgumentNullException(nameof(deliveryConfirmation), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (handling.IsSet && handling.Value == null)
                throw new ArgumentNullException(nameof(handling), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (insurance.IsSet && insurance.Value == null)
                throw new ArgumentNullException(nameof(insurance), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (references.IsSet && references.Value == null)
                throw new ArgumentNullException(nameof(references), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (printerAliasName.IsSet && printerAliasName.Value == null)
                throw new ArgumentNullException(nameof(printerAliasName), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (dateOfShipment.IsSet && dateOfShipment.Value == null)
                throw new ArgumentNullException(nameof(dateOfShipment), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (deliveryOption.IsSet && deliveryOption.Value == null)
                throw new ArgumentNullException(nameof(deliveryOption), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (returnOptions.IsSet && returnOptions.Value == null)
                throw new ArgumentNullException(nameof(returnOptions), "Property is not nullable for class ShipmentDomesticByCarrier.");

            if (customs.IsSet && customs.Value == null)
                throw new ArgumentNullException(nameof(customs), "Property is not nullable for class ShipmentDomesticByCarrier.");

            return new ShipmentDomesticByCarrier(fromAddress.Value, toAddress.Value, parcelType.Value, rateShopBy.Value.Value, labelSize.Value.Value, labelType.Value.Value, labelFormat.Value.Value, soldToAddress, additionalAddresses, altReturnAddress, parcel, byCarrier, shipmentOptions, carrierPayments, docTab, specialServices, deliveryConfirmation, handling, insurance, references, metadata, contentType, printerAliasName, dateOfShipment, deliveryOption, returnOptions, customs);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentDomesticByCarrier" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticByCarrier"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentDomesticByCarrier shipmentDomesticByCarrier, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, shipmentDomesticByCarrier, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentDomesticByCarrier" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticByCarrier"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ShipmentDomesticByCarrier shipmentDomesticByCarrier, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentDomesticByCarrier.FromAddress == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.FromAddress), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.ToAddress == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.ToAddress), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.ParcelType == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.ParcelType), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.SoldToAddressOption.IsSet && shipmentDomesticByCarrier.SoldToAddress == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.SoldToAddress), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.AdditionalAddressesOption.IsSet && shipmentDomesticByCarrier.AdditionalAddresses == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.AdditionalAddresses), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.AltReturnAddressOption.IsSet && shipmentDomesticByCarrier.AltReturnAddress == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.AltReturnAddress), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.ParcelOption.IsSet && shipmentDomesticByCarrier.Parcel == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.Parcel), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.ByCarrierOption.IsSet && shipmentDomesticByCarrier.ByCarrier == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.ByCarrier), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.ShipmentOptionsOption.IsSet && shipmentDomesticByCarrier.ShipmentOptions == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.ShipmentOptions), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.CarrierPaymentsOption.IsSet && shipmentDomesticByCarrier.CarrierPayments == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.CarrierPayments), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.DocTabOption.IsSet && shipmentDomesticByCarrier.DocTab == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.DocTab), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.SpecialServicesOption.IsSet && shipmentDomesticByCarrier.SpecialServices == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.SpecialServices), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.DeliveryConfirmationOption.IsSet && shipmentDomesticByCarrier.DeliveryConfirmation == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.DeliveryConfirmation), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.HandlingOption.IsSet && shipmentDomesticByCarrier.Handling == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.Handling), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.InsuranceOption.IsSet && shipmentDomesticByCarrier.Insurance == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.Insurance), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.ReferencesOption.IsSet && shipmentDomesticByCarrier.References == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.References), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.MetadataOption.IsSet && shipmentDomesticByCarrier.Metadata == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.Metadata), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.PrinterAliasNameOption.IsSet && shipmentDomesticByCarrier.PrinterAliasName == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.PrinterAliasName), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.DeliveryOptionOption.IsSet && shipmentDomesticByCarrier.DeliveryOption == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.DeliveryOption), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.ReturnOptionsOption.IsSet && shipmentDomesticByCarrier.ReturnOptions == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.ReturnOptions), "Property is required for class ShipmentDomesticByCarrier.");

            if (shipmentDomesticByCarrier.CustomsOption.IsSet && shipmentDomesticByCarrier.Customs == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrier.Customs), "Property is required for class ShipmentDomesticByCarrier.");

            writer.WritePropertyName("fromAddress");
            JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.FromAddress, jsonSerializerOptions);
            writer.WritePropertyName("toAddress");
            JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.ToAddress, jsonSerializerOptions);
            writer.WriteString("parcelType", shipmentDomesticByCarrier.ParcelType);

            var rateShopByRawValue = ShipmentDomesticByCarrier.RateShopByEnumToJsonValue(shipmentDomesticByCarrier.RateShopBy);
            writer.WriteString("rateShopBy", rateShopByRawValue);
            var labelSizeRawValue = ShipmentDomesticByCarrier.LabelSizeEnumToJsonValue(shipmentDomesticByCarrier.LabelSize);
            writer.WriteString("labelSize", labelSizeRawValue);
            var labelTypeRawValue = ShipmentDomesticByCarrier.LabelTypeEnumToJsonValue(shipmentDomesticByCarrier.LabelType);
            writer.WriteString("labelType", labelTypeRawValue);
            var labelFormatRawValue = ShipmentDomesticByCarrier.LabelFormatEnumToJsonValue(shipmentDomesticByCarrier.LabelFormat);
            writer.WriteString("labelFormat", labelFormatRawValue);
            if (shipmentDomesticByCarrier.SoldToAddressOption.IsSet)
            {
                writer.WritePropertyName("soldToAddress");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.SoldToAddress, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.AdditionalAddressesOption.IsSet)
            {
                writer.WritePropertyName("additionalAddresses");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.AdditionalAddresses, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.AltReturnAddressOption.IsSet)
            {
                writer.WritePropertyName("altReturnAddress");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.AltReturnAddress, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.ParcelOption.IsSet)
            {
                writer.WritePropertyName("parcel");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.Parcel, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.ByCarrierOption.IsSet)
            {
                writer.WritePropertyName("byCarrier");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.ByCarrier, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.ShipmentOptionsOption.IsSet)
            {
                writer.WritePropertyName("shipmentOptions");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.ShipmentOptions, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.CarrierPaymentsOption.IsSet)
            {
                writer.WritePropertyName("carrierPayments");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.CarrierPayments, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.DocTabOption.IsSet)
            {
                writer.WritePropertyName("docTab");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.DocTab, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.SpecialServicesOption.IsSet)
            {
                writer.WritePropertyName("specialServices");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.SpecialServices, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.DeliveryConfirmationOption.IsSet)
            {
                writer.WritePropertyName("deliveryConfirmation");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.DeliveryConfirmation, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.HandlingOption.IsSet)
            {
                writer.WritePropertyName("handling");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.Handling, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.InsuranceOption.IsSet)
            {
                writer.WritePropertyName("insurance");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.Insurance, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.ReferencesOption.IsSet)
            {
                writer.WritePropertyName("references");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.References, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.Metadata, jsonSerializerOptions);
            }
            var contentTypeRawValue = ShipmentDomesticByCarrier.ContentTypeEnumToJsonValue(shipmentDomesticByCarrier.ContentTypeOption.Value.Value);
            writer.WriteString("contentType", contentTypeRawValue);
            if (shipmentDomesticByCarrier.PrinterAliasNameOption.IsSet)
                writer.WriteString("printerAliasName", shipmentDomesticByCarrier.PrinterAliasName);

            if (shipmentDomesticByCarrier.DateOfShipmentOption.IsSet)
                writer.WriteString("dateOfShipment", shipmentDomesticByCarrier.DateOfShipmentOption.Value.Value.ToString(DateOfShipmentFormat));

            if (shipmentDomesticByCarrier.DeliveryOptionOption.IsSet)
            {
                writer.WritePropertyName("deliveryOption");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.DeliveryOption, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.ReturnOptionsOption.IsSet)
            {
                writer.WritePropertyName("returnOptions");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.ReturnOptions, jsonSerializerOptions);
            }
            if (shipmentDomesticByCarrier.CustomsOption.IsSet)
            {
                writer.WritePropertyName("customs");
                JsonSerializer.Serialize(writer, shipmentDomesticByCarrier.Customs, jsonSerializerOptions);
            }
        }
    }
}
