// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// SchedulePickupFedexRequest
    /// </summary>
    public partial class SchedulePickupFedexRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulePickupFedexRequest" /> class.
        /// </summary>
        /// <param name="packageLocation">The location where the parcel will be available for pickup at the specified pickup address.</param>
        /// <param name="carrierAccountId">The unique identifier of the carrier account being used to process the pickup.</param>
        /// <param name="pickupAddress">pickupAddress</param>
        /// <param name="pickupSummary">An array of the pickup details, including the number of packages, total weight, and carrier service information.</param>
        /// <param name="pickupOptions">description</param>
        /// <param name="additionalnotes">Additional instructions or notes for the carrier regarding the pickup. &lt;br /&gt; Value is required when packageLocation is set to other.</param>
        /// <param name="reference">An optional Reference related to the pickup.</param>
        [JsonConstructor]
        public SchedulePickupFedexRequest(PackageLocationEnum packageLocation, string carrierAccountId, SchedulePickupUSPSRequestPickupAddress pickupAddress, List<SchedulePickupFedexRequestPickupSummaryInner> pickupSummary, List<SchedulePickupFedexRequestPickupOptionsInner> pickupOptions, Option<string?> additionalnotes = default, Option<string?> reference = default)
        {
            PackageLocation = packageLocation;
            CarrierAccountId = carrierAccountId;
            PickupAddress = pickupAddress;
            PickupSummary = pickupSummary;
            PickupOptions = pickupOptions;
            AdditionalnotesOption = additionalnotes;
            ReferenceOption = reference;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The location where the parcel will be available for pickup at the specified pickup address.
        /// </summary>
        /// <value>The location where the parcel will be available for pickup at the specified pickup address.</value>
        public enum PackageLocationEnum
        {
            /// <summary>
            /// Enum Front for value: Front
            /// </summary>
            Front = 1,

            /// <summary>
            /// Enum None for value: None
            /// </summary>
            None = 2,

            /// <summary>
            /// Enum Side for value: Side
            /// </summary>
            Side = 3,

            /// <summary>
            /// Enum REAR for value: REAR
            /// </summary>
            REAR = 4
        }

        /// <summary>
        /// Returns a <see cref="PackageLocationEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PackageLocationEnum PackageLocationEnumFromString(string value)
        {
            if (value.Equals("Front"))
                return PackageLocationEnum.Front;

            if (value.Equals("None"))
                return PackageLocationEnum.None;

            if (value.Equals("Side"))
                return PackageLocationEnum.Side;

            if (value.Equals("REAR"))
                return PackageLocationEnum.REAR;

            throw new NotImplementedException($"Could not convert value to type PackageLocationEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PackageLocationEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PackageLocationEnum? PackageLocationEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Front"))
                return PackageLocationEnum.Front;

            if (value.Equals("None"))
                return PackageLocationEnum.None;

            if (value.Equals("Side"))
                return PackageLocationEnum.Side;

            if (value.Equals("REAR"))
                return PackageLocationEnum.REAR;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PackageLocationEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PackageLocationEnumToJsonValue(PackageLocationEnum value)
        {
            if (value == PackageLocationEnum.Front)
                return "Front";

            if (value == PackageLocationEnum.None)
                return "None";

            if (value == PackageLocationEnum.Side)
                return "Side";

            if (value == PackageLocationEnum.REAR)
                return "REAR";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The location where the parcel will be available for pickup at the specified pickup address.
        /// </summary>
        /// <value>The location where the parcel will be available for pickup at the specified pickup address.</value>
        /* <example>None</example> */
        [JsonPropertyName("packageLocation")]
        public PackageLocationEnum PackageLocation { get; set; }

        /// <summary>
        /// The unique identifier of the carrier account being used to process the pickup.
        /// </summary>
        /// <value>The unique identifier of the carrier account being used to process the pickup.</value>
        /* <example>j4pqLKjQ5dn</example> */
        [JsonPropertyName("carrierAccountId")]
        public string CarrierAccountId { get; set; }

        /// <summary>
        /// Gets or Sets PickupAddress
        /// </summary>
        [JsonPropertyName("pickupAddress")]
        public SchedulePickupUSPSRequestPickupAddress PickupAddress { get; set; }

        /// <summary>
        /// An array of the pickup details, including the number of packages, total weight, and carrier service information.
        /// </summary>
        /// <value>An array of the pickup details, including the number of packages, total weight, and carrier service information.</value>
        [JsonPropertyName("pickupSummary")]
        public List<SchedulePickupFedexRequestPickupSummaryInner> PickupSummary { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [JsonPropertyName("pickupOptions")]
        public List<SchedulePickupFedexRequestPickupOptionsInner> PickupOptions { get; set; }

        /// <summary>
        /// Used to track the state of Additionalnotes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AdditionalnotesOption { get; private set; }

        /// <summary>
        /// Additional instructions or notes for the carrier regarding the pickup. &lt;br /&gt; Value is required when packageLocation is set to other.
        /// </summary>
        /// <value>Additional instructions or notes for the carrier regarding the pickup. &lt;br /&gt; Value is required when packageLocation is set to other.</value>
        /* <example>absdhda</example> */
        [JsonPropertyName("additionalnotes")]
        public string? Additionalnotes { get { return this.AdditionalnotesOption; } set { this.AdditionalnotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReferenceOption { get; private set; }

        /// <summary>
        /// An optional Reference related to the pickup.
        /// </summary>
        /// <value>An optional Reference related to the pickup.</value>
        /* <example>zscsdc</example> */
        [JsonPropertyName("reference")]
        public string? Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SchedulePickupFedexRequest {\n");
            sb.Append("  PackageLocation: ").Append(PackageLocation).Append("\n");
            sb.Append("  CarrierAccountId: ").Append(CarrierAccountId).Append("\n");
            sb.Append("  PickupAddress: ").Append(PickupAddress).Append("\n");
            sb.Append("  PickupSummary: ").Append(PickupSummary).Append("\n");
            sb.Append("  PickupOptions: ").Append(PickupOptions).Append("\n");
            sb.Append("  Additionalnotes: ").Append(Additionalnotes).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SchedulePickupFedexRequest" />
    /// </summary>
    public class SchedulePickupFedexRequestJsonConverter : JsonConverter<SchedulePickupFedexRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SchedulePickupFedexRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SchedulePickupFedexRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<SchedulePickupFedexRequest.PackageLocationEnum?> packageLocation = default;
            Option<string?> carrierAccountId = default;
            Option<SchedulePickupUSPSRequestPickupAddress?> pickupAddress = default;
            Option<List<SchedulePickupFedexRequestPickupSummaryInner>?> pickupSummary = default;
            Option<List<SchedulePickupFedexRequestPickupOptionsInner>?> pickupOptions = default;
            Option<string?> additionalnotes = default;
            Option<string?> reference = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "packageLocation":
                            string? packageLocationRawValue = utf8JsonReader.GetString();
                            if (packageLocationRawValue != null)
                                packageLocation = new Option<SchedulePickupFedexRequest.PackageLocationEnum?>(SchedulePickupFedexRequest.PackageLocationEnumFromStringOrDefault(packageLocationRawValue));
                            break;
                        case "carrierAccountId":
                            carrierAccountId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pickupAddress":
                            pickupAddress = new Option<SchedulePickupUSPSRequestPickupAddress?>(JsonSerializer.Deserialize<SchedulePickupUSPSRequestPickupAddress>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pickupSummary":
                            pickupSummary = new Option<List<SchedulePickupFedexRequestPickupSummaryInner>?>(JsonSerializer.Deserialize<List<SchedulePickupFedexRequestPickupSummaryInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pickupOptions":
                            pickupOptions = new Option<List<SchedulePickupFedexRequestPickupOptionsInner>?>(JsonSerializer.Deserialize<List<SchedulePickupFedexRequestPickupOptionsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "additionalnotes":
                            additionalnotes = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reference":
                            reference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!packageLocation.IsSet)
                throw new ArgumentException("Property is required for class SchedulePickupFedexRequest.", nameof(packageLocation));

            if (!carrierAccountId.IsSet)
                throw new ArgumentException("Property is required for class SchedulePickupFedexRequest.", nameof(carrierAccountId));

            if (!pickupAddress.IsSet)
                throw new ArgumentException("Property is required for class SchedulePickupFedexRequest.", nameof(pickupAddress));

            if (!pickupSummary.IsSet)
                throw new ArgumentException("Property is required for class SchedulePickupFedexRequest.", nameof(pickupSummary));

            if (!pickupOptions.IsSet)
                throw new ArgumentException("Property is required for class SchedulePickupFedexRequest.", nameof(pickupOptions));

            if (packageLocation.IsSet && packageLocation.Value == null)
                throw new ArgumentNullException(nameof(packageLocation), "Property is not nullable for class SchedulePickupFedexRequest.");

            if (carrierAccountId.IsSet && carrierAccountId.Value == null)
                throw new ArgumentNullException(nameof(carrierAccountId), "Property is not nullable for class SchedulePickupFedexRequest.");

            if (pickupAddress.IsSet && pickupAddress.Value == null)
                throw new ArgumentNullException(nameof(pickupAddress), "Property is not nullable for class SchedulePickupFedexRequest.");

            if (pickupSummary.IsSet && pickupSummary.Value == null)
                throw new ArgumentNullException(nameof(pickupSummary), "Property is not nullable for class SchedulePickupFedexRequest.");

            if (pickupOptions.IsSet && pickupOptions.Value == null)
                throw new ArgumentNullException(nameof(pickupOptions), "Property is not nullable for class SchedulePickupFedexRequest.");

            if (additionalnotes.IsSet && additionalnotes.Value == null)
                throw new ArgumentNullException(nameof(additionalnotes), "Property is not nullable for class SchedulePickupFedexRequest.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class SchedulePickupFedexRequest.");

            return new SchedulePickupFedexRequest(packageLocation.Value!.Value!, carrierAccountId.Value!, pickupAddress.Value!, pickupSummary.Value!, pickupOptions.Value!, additionalnotes, reference);
        }

        /// <summary>
        /// Serializes a <see cref="SchedulePickupFedexRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="schedulePickupFedexRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SchedulePickupFedexRequest schedulePickupFedexRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, schedulePickupFedexRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SchedulePickupFedexRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="schedulePickupFedexRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SchedulePickupFedexRequest schedulePickupFedexRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (schedulePickupFedexRequest.CarrierAccountId == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexRequest.CarrierAccountId), "Property is required for class SchedulePickupFedexRequest.");

            if (schedulePickupFedexRequest.PickupAddress == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexRequest.PickupAddress), "Property is required for class SchedulePickupFedexRequest.");

            if (schedulePickupFedexRequest.PickupSummary == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexRequest.PickupSummary), "Property is required for class SchedulePickupFedexRequest.");

            if (schedulePickupFedexRequest.PickupOptions == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexRequest.PickupOptions), "Property is required for class SchedulePickupFedexRequest.");

            if (schedulePickupFedexRequest.AdditionalnotesOption.IsSet && schedulePickupFedexRequest.Additionalnotes == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexRequest.Additionalnotes), "Property is required for class SchedulePickupFedexRequest.");

            if (schedulePickupFedexRequest.ReferenceOption.IsSet && schedulePickupFedexRequest.Reference == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexRequest.Reference), "Property is required for class SchedulePickupFedexRequest.");

            var packageLocationRawValue = SchedulePickupFedexRequest.PackageLocationEnumToJsonValue(schedulePickupFedexRequest.PackageLocation);
            writer.WriteString("packageLocation", packageLocationRawValue);
            writer.WriteString("carrierAccountId", schedulePickupFedexRequest.CarrierAccountId);

            writer.WritePropertyName("pickupAddress");
            JsonSerializer.Serialize(writer, schedulePickupFedexRequest.PickupAddress, jsonSerializerOptions);
            writer.WritePropertyName("pickupSummary");
            JsonSerializer.Serialize(writer, schedulePickupFedexRequest.PickupSummary, jsonSerializerOptions);
            writer.WritePropertyName("pickupOptions");
            JsonSerializer.Serialize(writer, schedulePickupFedexRequest.PickupOptions, jsonSerializerOptions);
            if (schedulePickupFedexRequest.AdditionalnotesOption.IsSet)
                writer.WriteString("additionalnotes", schedulePickupFedexRequest.Additionalnotes);

            if (schedulePickupFedexRequest.ReferenceOption.IsSet)
                writer.WriteString("reference", schedulePickupFedexRequest.Reference);
        }
    }
}
