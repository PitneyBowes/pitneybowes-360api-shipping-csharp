// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// Indicates the category to select how cheap the carrier service is, or which carrier has fastest service. &lt;br /&gt; It displays the list of those services. 
    /// </summary>
    public partial class ShipmentDomesticByRateGroupByRateGroup : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDomesticByRateGroupByRateGroup" /> class.
        /// </summary>
        /// <param name="ruleType">The Rule Type is a condition applied to RateGroup by Product side as per the customer requirement, which can have following options: Cheapest, Fastest, and deliverBy.&lt;br /&gt; If ruleType is deliverBy, then deliverBy date under deliveryOption will be mandatory to provide.</param>
        /// <param name="rateGroupId">This is a unique identifier assigned to the created RateGroup, which is used in the shipment creation.</param>
        [JsonConstructor]
        public ShipmentDomesticByRateGroupByRateGroup(RuleTypeEnum ruleType, string rateGroupId)
        {
            RuleType = ruleType;
            RateGroupId = rateGroupId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The Rule Type is a condition applied to RateGroup by Product side as per the customer requirement, which can have following options: Cheapest, Fastest, and deliverBy.&lt;br /&gt; If ruleType is deliverBy, then deliverBy date under deliveryOption will be mandatory to provide.
        /// </summary>
        /// <value>The Rule Type is a condition applied to RateGroup by Product side as per the customer requirement, which can have following options: Cheapest, Fastest, and deliverBy.&lt;br /&gt; If ruleType is deliverBy, then deliverBy date under deliveryOption will be mandatory to provide.</value>
        public enum RuleTypeEnum
        {
            /// <summary>
            /// Enum Cheapest for value: Cheapest
            /// </summary>
            Cheapest = 1,

            /// <summary>
            /// Enum Fastest for value: Fastest
            /// </summary>
            Fastest = 2,

            /// <summary>
            /// Enum DeliverBy for value: DeliverBy
            /// </summary>
            DeliverBy = 3
        }

        /// <summary>
        /// Returns a <see cref="RuleTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RuleTypeEnum RuleTypeEnumFromString(string value)
        {
            if (value.Equals("Cheapest"))
                return RuleTypeEnum.Cheapest;

            if (value.Equals("Fastest"))
                return RuleTypeEnum.Fastest;

            if (value.Equals("DeliverBy"))
                return RuleTypeEnum.DeliverBy;

            throw new NotImplementedException($"Could not convert value to type RuleTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RuleTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RuleTypeEnum? RuleTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Cheapest"))
                return RuleTypeEnum.Cheapest;

            if (value.Equals("Fastest"))
                return RuleTypeEnum.Fastest;

            if (value.Equals("DeliverBy"))
                return RuleTypeEnum.DeliverBy;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RuleTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RuleTypeEnumToJsonValue(RuleTypeEnum value)
        {
            if (value == RuleTypeEnum.Cheapest)
                return "Cheapest";

            if (value == RuleTypeEnum.Fastest)
                return "Fastest";

            if (value == RuleTypeEnum.DeliverBy)
                return "DeliverBy";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The Rule Type is a condition applied to RateGroup by Product side as per the customer requirement, which can have following options: Cheapest, Fastest, and deliverBy.&lt;br /&gt; If ruleType is deliverBy, then deliverBy date under deliveryOption will be mandatory to provide.
        /// </summary>
        /// <value>The Rule Type is a condition applied to RateGroup by Product side as per the customer requirement, which can have following options: Cheapest, Fastest, and deliverBy.&lt;br /&gt; If ruleType is deliverBy, then deliverBy date under deliveryOption will be mandatory to provide.</value>
        /* <example>Cheapest</example> */
        [JsonPropertyName("ruleType")]
        public RuleTypeEnum RuleType { get; set; }

        /// <summary>
        /// This is a unique identifier assigned to the created RateGroup, which is used in the shipment creation.
        /// </summary>
        /// <value>This is a unique identifier assigned to the created RateGroup, which is used in the shipment creation.</value>
        /* <example>9bzUUq2w70h7</example> */
        [JsonPropertyName("rateGroupId")]
        public string RateGroupId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentDomesticByRateGroupByRateGroup {\n");
            sb.Append("  RuleType: ").Append(RuleType).Append("\n");
            sb.Append("  RateGroupId: ").Append(RateGroupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentDomesticByRateGroupByRateGroup" />
    /// </summary>
    public class ShipmentDomesticByRateGroupByRateGroupJsonConverter : JsonConverter<ShipmentDomesticByRateGroupByRateGroup>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShipmentDomesticByRateGroupByRateGroup" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentDomesticByRateGroupByRateGroup Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ShipmentDomesticByRateGroupByRateGroup.RuleTypeEnum?> ruleType = default;
            Option<string?> rateGroupId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ruleType":
                            string? ruleTypeRawValue = utf8JsonReader.GetString();
                            if (ruleTypeRawValue != null)
                                ruleType = new Option<ShipmentDomesticByRateGroupByRateGroup.RuleTypeEnum?>(ShipmentDomesticByRateGroupByRateGroup.RuleTypeEnumFromStringOrDefault(ruleTypeRawValue));
                            break;
                        case "rateGroupId":
                            rateGroupId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ruleType.IsSet)
                throw new ArgumentException("Property is required for class ShipmentDomesticByRateGroupByRateGroup.", nameof(ruleType));

            if (!rateGroupId.IsSet)
                throw new ArgumentException("Property is required for class ShipmentDomesticByRateGroupByRateGroup.", nameof(rateGroupId));

            if (ruleType.IsSet && ruleType.Value == null)
                throw new ArgumentNullException(nameof(ruleType), "Property is not nullable for class ShipmentDomesticByRateGroupByRateGroup.");

            if (rateGroupId.IsSet && rateGroupId.Value == null)
                throw new ArgumentNullException(nameof(rateGroupId), "Property is not nullable for class ShipmentDomesticByRateGroupByRateGroup.");

            return new ShipmentDomesticByRateGroupByRateGroup(ruleType.Value!.Value!, rateGroupId.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentDomesticByRateGroupByRateGroup" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticByRateGroupByRateGroup"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentDomesticByRateGroupByRateGroup shipmentDomesticByRateGroupByRateGroup, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, shipmentDomesticByRateGroupByRateGroup, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentDomesticByRateGroupByRateGroup" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticByRateGroupByRateGroup"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ShipmentDomesticByRateGroupByRateGroup shipmentDomesticByRateGroupByRateGroup, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentDomesticByRateGroupByRateGroup.RateGroupId == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByRateGroupByRateGroup.RateGroupId), "Property is required for class ShipmentDomesticByRateGroupByRateGroup.");

            var ruleTypeRawValue = ShipmentDomesticByRateGroupByRateGroup.RuleTypeEnumToJsonValue(shipmentDomesticByRateGroupByRateGroup.RuleType);
            writer.WriteString("ruleType", ruleTypeRawValue);
            writer.WriteString("rateGroupId", shipmentDomesticByRateGroupByRateGroup.RateGroupId);
        }
    }
}
