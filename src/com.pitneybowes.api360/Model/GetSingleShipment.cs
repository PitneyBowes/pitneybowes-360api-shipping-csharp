/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.pitneybowes.api360.Client.OpenAPIDateConverter;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// GetSingleShipment
    /// </summary>
    [DataContract(Name = "getSingleShipment")]
    public partial class GetSingleShipment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSingleShipment" /> class.
        /// </summary>
        /// <param name="correlationId">This is a GUID (globally unique identifier) that&#39;s automatically generated for every request that the webserver receives..</param>
        /// <param name="fromAddress">fromAddress.</param>
        /// <param name="parcel">parcel.</param>
        /// <param name="metadata">Additional metadata that needs to be stored for this shipment can be added here. For now, &#x60;costAccountName&#x60; is supported..</param>
        /// <param name="parcelTrackingNumber">The Tracking number given to the Parcel for tracking purpose..</param>
        /// <param name="rate">rate.</param>
        /// <param name="service">This indicates the carrier based service that is used for shipment..</param>
        /// <param name="shipmentId">A unique identifier associated with Shipment ID..</param>
        /// <param name="status">The status of the Shipment..</param>
        /// <param name="toAddress">toAddress.</param>
        public GetSingleShipment(string correlationId = default(string), GetSingleShipmentFromAddress fromAddress = default(GetSingleShipmentFromAddress), ShipmentDomesticParcel parcel = default(ShipmentDomesticParcel), List<GetAllShipmentsDataInnerMetadataInner> metadata = default(List<GetAllShipmentsDataInnerMetadataInner>), string parcelTrackingNumber = default(string), GetSingleShipmentRate rate = default(GetSingleShipmentRate), string service = default(string), string shipmentId = default(string), string status = default(string), GetSingleShipmentToAddress toAddress = default(GetSingleShipmentToAddress))
        {
            this.CorrelationId = correlationId;
            this.FromAddress = fromAddress;
            this.Parcel = parcel;
            this.Metadata = metadata;
            this.ParcelTrackingNumber = parcelTrackingNumber;
            this.Rate = rate;
            this.Service = service;
            this.ShipmentId = shipmentId;
            this.Status = status;
            this.ToAddress = toAddress;
        }

        /// <summary>
        /// This is a GUID (globally unique identifier) that&#39;s automatically generated for every request that the webserver receives.
        /// </summary>
        /// <value>This is a GUID (globally unique identifier) that&#39;s automatically generated for every request that the webserver receives.</value>
        /// <example>b448ca2e733d4e23994a85374b9d8264</example>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [DataMember(Name = "fromAddress", EmitDefaultValue = false)]
        public GetSingleShipmentFromAddress FromAddress { get; set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [DataMember(Name = "parcel", EmitDefaultValue = false)]
        public ShipmentDomesticParcel Parcel { get; set; }

        /// <summary>
        /// Additional metadata that needs to be stored for this shipment can be added here. For now, &#x60;costAccountName&#x60; is supported.
        /// </summary>
        /// <value>Additional metadata that needs to be stored for this shipment can be added here. For now, &#x60;costAccountName&#x60; is supported.</value>
        /// <example>[{&quot;name&quot;:&quot;costAccountName&quot;,&quot;value&quot;:&quot;test&quot;}]</example>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public List<GetAllShipmentsDataInnerMetadataInner> Metadata { get; set; }

        /// <summary>
        /// The Tracking number given to the Parcel for tracking purpose.
        /// </summary>
        /// <value>The Tracking number given to the Parcel for tracking purpose.</value>
        /// <example>9471309105156000826739</example>
        [DataMember(Name = "parcelTrackingNumber", EmitDefaultValue = false)]
        public string ParcelTrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name = "rate", EmitDefaultValue = false)]
        public GetSingleShipmentRate Rate { get; set; }

        /// <summary>
        /// This indicates the carrier based service that is used for shipment.
        /// </summary>
        /// <value>This indicates the carrier based service that is used for shipment.</value>
        [DataMember(Name = "service", EmitDefaultValue = false)]
        public string Service { get; set; }

        /// <summary>
        /// A unique identifier associated with Shipment ID.
        /// </summary>
        /// <value>A unique identifier associated with Shipment ID.</value>
        /// <example>USPS2200579677758143</example>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// The status of the Shipment.
        /// </summary>
        /// <value>The status of the Shipment.</value>
        /// <example>COMPLETE</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [DataMember(Name = "toAddress", EmitDefaultValue = false)]
        public GetSingleShipmentToAddress ToAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSingleShipment {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ParcelTrackingNumber: ").Append(ParcelTrackingNumber).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
