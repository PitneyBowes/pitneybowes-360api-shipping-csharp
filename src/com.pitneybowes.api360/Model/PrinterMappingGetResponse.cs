/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.pitneybowes.api360.Client.OpenAPIDateConverter;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// PrinterMappingGetResponse
    /// </summary>
    [DataContract(Name = "PrinterMappingGetResponse")]
    public partial class PrinterMappingGetResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrinterMappingGetResponse" /> class.
        /// </summary>
        /// <param name="alias">The printer connected (directly or via network) to a computer..</param>
        /// <param name="serialNumber">A Device Serial number..</param>
        /// <param name="printerName">The Printer name which is used for mapping..</param>
        /// <param name="subId">The subscription ID used for mapping..</param>
        /// <param name="insertTimeStamp">It records saved Timestamp..</param>
        /// <param name="updateTimeStamp">It records updated Timestamp..</param>
        public PrinterMappingGetResponse(string alias = default(string), string serialNumber = default(string), string printerName = default(string), string subId = default(string), DateTime insertTimeStamp = default(DateTime), DateTime updateTimeStamp = default(DateTime))
        {
            this.Alias = alias;
            this.SerialNumber = serialNumber;
            this.PrinterName = printerName;
            this.SubId = subId;
            this.InsertTimeStamp = insertTimeStamp;
            this.UpdateTimeStamp = updateTimeStamp;
        }

        /// <summary>
        /// The printer connected (directly or via network) to a computer.
        /// </summary>
        /// <value>The printer connected (directly or via network) to a computer.</value>
        /// <example>rohit2</example>
        [DataMember(Name = "alias", EmitDefaultValue = false)]
        public string Alias { get; set; }

        /// <summary>
        /// A Device Serial number.
        /// </summary>
        /// <value>A Device Serial number.</value>
        /// <example>AP-DP1LZH3-0x919e698164-dev</example>
        [DataMember(Name = "serialNumber", EmitDefaultValue = false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// The Printer name which is used for mapping.
        /// </summary>
        /// <value>The Printer name which is used for mapping.</value>
        /// <example>Brother QL-1110NWB</example>
        [DataMember(Name = "printerName", EmitDefaultValue = false)]
        public string PrinterName { get; set; }

        /// <summary>
        /// The subscription ID used for mapping.
        /// </summary>
        /// <value>The subscription ID used for mapping.</value>
        /// <example>rohit2</example>
        [DataMember(Name = "subId", EmitDefaultValue = false)]
        public string SubId { get; set; }

        /// <summary>
        /// It records saved Timestamp.
        /// </summary>
        /// <value>It records saved Timestamp.</value>
        /// <example>2024-02-02T11:51:00.479Z</example>
        [DataMember(Name = "insertTimeStamp", EmitDefaultValue = false)]
        public DateTime InsertTimeStamp { get; set; }

        /// <summary>
        /// It records updated Timestamp.
        /// </summary>
        /// <value>It records updated Timestamp.</value>
        /// <example>2024-02-02T11:51:00.479Z</example>
        [DataMember(Name = "updateTimeStamp", EmitDefaultValue = false)]
        public DateTime UpdateTimeStamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrinterMappingGetResponse {\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  PrinterName: ").Append(PrinterName).Append("\n");
            sb.Append("  SubId: ").Append(SubId).Append("\n");
            sb.Append("  InsertTimeStamp: ").Append(InsertTimeStamp).Append("\n");
            sb.Append("  UpdateTimeStamp: ").Append(UpdateTimeStamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
