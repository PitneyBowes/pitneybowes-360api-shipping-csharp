// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// PrinterMappingGetResponse
    /// </summary>
    public partial class PrinterMappingGetResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrinterMappingGetResponse" /> class.
        /// </summary>
        /// <param name="alias">The printer connected (directly or via network) to a computer.</param>
        /// <param name="serialNumber">A Device Serial number.</param>
        /// <param name="printerName">The Printer name which is used for mapping.</param>
        /// <param name="subId">The subscription ID used for mapping.</param>
        /// <param name="insertTimeStamp">It records saved Timestamp.</param>
        /// <param name="updateTimeStamp">It records updated Timestamp.</param>
        [JsonConstructor]
        public PrinterMappingGetResponse(Option<string?> alias = default, Option<string?> serialNumber = default, Option<string?> printerName = default, Option<string?> subId = default, Option<DateTime?> insertTimeStamp = default, Option<DateTime?> updateTimeStamp = default)
        {
            AliasOption = alias;
            SerialNumberOption = serialNumber;
            PrinterNameOption = printerName;
            SubIdOption = subId;
            InsertTimeStampOption = insertTimeStamp;
            UpdateTimeStampOption = updateTimeStamp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Alias
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AliasOption { get; private set; }

        /// <summary>
        /// The printer connected (directly or via network) to a computer.
        /// </summary>
        /// <value>The printer connected (directly or via network) to a computer.</value>
        /* <example>rohit2</example> */
        [JsonPropertyName("alias")]
        public string? Alias { get { return this.AliasOption; } set { this.AliasOption = new(value); } }

        /// <summary>
        /// Used to track the state of SerialNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SerialNumberOption { get; private set; }

        /// <summary>
        /// A Device Serial number.
        /// </summary>
        /// <value>A Device Serial number.</value>
        /* <example>AP-DP1LZH3-0x919e698164-dev</example> */
        [JsonPropertyName("serialNumber")]
        public string? SerialNumber { get { return this.SerialNumberOption; } set { this.SerialNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrinterName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrinterNameOption { get; private set; }

        /// <summary>
        /// The Printer name which is used for mapping.
        /// </summary>
        /// <value>The Printer name which is used for mapping.</value>
        /* <example>Brother QL-1110NWB</example> */
        [JsonPropertyName("printerName")]
        public string? PrinterName { get { return this.PrinterNameOption; } set { this.PrinterNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubIdOption { get; private set; }

        /// <summary>
        /// The subscription ID used for mapping.
        /// </summary>
        /// <value>The subscription ID used for mapping.</value>
        /* <example>rohit2</example> */
        [JsonPropertyName("subId")]
        public string? SubId { get { return this.SubIdOption; } set { this.SubIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of InsertTimeStamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> InsertTimeStampOption { get; private set; }

        /// <summary>
        /// It records saved Timestamp.
        /// </summary>
        /// <value>It records saved Timestamp.</value>
        /* <example>2024-02-02T11:51:00.479Z</example> */
        [JsonPropertyName("insertTimeStamp")]
        public DateTime? InsertTimeStamp { get { return this.InsertTimeStampOption; } set { this.InsertTimeStampOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdateTimeStamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdateTimeStampOption { get; private set; }

        /// <summary>
        /// It records updated Timestamp.
        /// </summary>
        /// <value>It records updated Timestamp.</value>
        /* <example>2024-02-02T11:51:00.479Z</example> */
        [JsonPropertyName("updateTimeStamp")]
        public DateTime? UpdateTimeStamp { get { return this.UpdateTimeStampOption; } set { this.UpdateTimeStampOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrinterMappingGetResponse {\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  PrinterName: ").Append(PrinterName).Append("\n");
            sb.Append("  SubId: ").Append(SubId).Append("\n");
            sb.Append("  InsertTimeStamp: ").Append(InsertTimeStamp).Append("\n");
            sb.Append("  UpdateTimeStamp: ").Append(UpdateTimeStamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PrinterMappingGetResponse" />
    /// </summary>
    public class PrinterMappingGetResponseJsonConverter : JsonConverter<PrinterMappingGetResponse>
    {
        /// <summary>
        /// The format to use to serialize InsertTimeStamp
        /// </summary>
        public static string InsertTimeStampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateTimeStamp
        /// </summary>
        public static string UpdateTimeStampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PrinterMappingGetResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PrinterMappingGetResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> alias = default;
            Option<string?> serialNumber = default;
            Option<string?> printerName = default;
            Option<string?> subId = default;
            Option<DateTime?> insertTimeStamp = default;
            Option<DateTime?> updateTimeStamp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "alias":
                            alias = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "serialNumber":
                            serialNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "printerName":
                            printerName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subId":
                            subId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "insertTimeStamp":
                            insertTimeStamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updateTimeStamp":
                            updateTimeStamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (alias.IsSet && alias.Value == null)
                throw new ArgumentNullException(nameof(alias), "Property is not nullable for class PrinterMappingGetResponse.");

            if (serialNumber.IsSet && serialNumber.Value == null)
                throw new ArgumentNullException(nameof(serialNumber), "Property is not nullable for class PrinterMappingGetResponse.");

            if (printerName.IsSet && printerName.Value == null)
                throw new ArgumentNullException(nameof(printerName), "Property is not nullable for class PrinterMappingGetResponse.");

            if (subId.IsSet && subId.Value == null)
                throw new ArgumentNullException(nameof(subId), "Property is not nullable for class PrinterMappingGetResponse.");

            if (insertTimeStamp.IsSet && insertTimeStamp.Value == null)
                throw new ArgumentNullException(nameof(insertTimeStamp), "Property is not nullable for class PrinterMappingGetResponse.");

            if (updateTimeStamp.IsSet && updateTimeStamp.Value == null)
                throw new ArgumentNullException(nameof(updateTimeStamp), "Property is not nullable for class PrinterMappingGetResponse.");

            return new PrinterMappingGetResponse(alias, serialNumber, printerName, subId, insertTimeStamp, updateTimeStamp);
        }

        /// <summary>
        /// Serializes a <see cref="PrinterMappingGetResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="printerMappingGetResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PrinterMappingGetResponse printerMappingGetResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, printerMappingGetResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PrinterMappingGetResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="printerMappingGetResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PrinterMappingGetResponse printerMappingGetResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (printerMappingGetResponse.AliasOption.IsSet && printerMappingGetResponse.Alias == null)
                throw new ArgumentNullException(nameof(printerMappingGetResponse.Alias), "Property is required for class PrinterMappingGetResponse.");

            if (printerMappingGetResponse.SerialNumberOption.IsSet && printerMappingGetResponse.SerialNumber == null)
                throw new ArgumentNullException(nameof(printerMappingGetResponse.SerialNumber), "Property is required for class PrinterMappingGetResponse.");

            if (printerMappingGetResponse.PrinterNameOption.IsSet && printerMappingGetResponse.PrinterName == null)
                throw new ArgumentNullException(nameof(printerMappingGetResponse.PrinterName), "Property is required for class PrinterMappingGetResponse.");

            if (printerMappingGetResponse.SubIdOption.IsSet && printerMappingGetResponse.SubId == null)
                throw new ArgumentNullException(nameof(printerMappingGetResponse.SubId), "Property is required for class PrinterMappingGetResponse.");

            if (printerMappingGetResponse.AliasOption.IsSet)
                writer.WriteString("alias", printerMappingGetResponse.Alias);

            if (printerMappingGetResponse.SerialNumberOption.IsSet)
                writer.WriteString("serialNumber", printerMappingGetResponse.SerialNumber);

            if (printerMappingGetResponse.PrinterNameOption.IsSet)
                writer.WriteString("printerName", printerMappingGetResponse.PrinterName);

            if (printerMappingGetResponse.SubIdOption.IsSet)
                writer.WriteString("subId", printerMappingGetResponse.SubId);

            if (printerMappingGetResponse.InsertTimeStampOption.IsSet)
                writer.WriteString("insertTimeStamp", printerMappingGetResponse.InsertTimeStampOption.Value!.Value.ToString(InsertTimeStampFormat));

            if (printerMappingGetResponse.UpdateTimeStampOption.IsSet)
                writer.WriteString("updateTimeStamp", printerMappingGetResponse.UpdateTimeStampOption.Value!.Value.ToString(UpdateTimeStampFormat));
        }
    }
}
