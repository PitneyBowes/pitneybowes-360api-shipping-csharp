// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// MilitaryMailShipmentResponseV2
    /// </summary>
    public partial class MilitaryMailShipmentResponseV2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MilitaryMailShipmentResponseV2" /> class.
        /// </summary>
        /// <param name="correlationId">Key assigned by the shipping system to the transaction.</param>
        /// <param name="shipmentId">The shipmentId, a unique identifier for an individual Shipment.</param>
        /// <param name="parcelTrackingNumber">The Tracking number given to the Parcel for tracking purpose.</param>
        /// <param name="labelLayout">labelLayout</param>
        /// <param name="parcel">parcel</param>
        /// <param name="rate">rate</param>
        /// <param name="references">references</param>
        /// <param name="printStatus">Status of the Printed Label.</param>
        /// <param name="printError">printError</param>
        /// <param name="fromAddress">fromAddress</param>
        /// <param name="toAddress">toAddress</param>
        /// <param name="soldToAddress">soldToAddress</param>
        /// <param name="additionalAddresses">A list of additional addresses associated with the shipment.  - Each object includes an address and its designated type, such as BROKER or other parties involved in customs or shipping processes.  - Additional address could be domestic or International both.  </param>
        /// <param name="shipmentOptions">shipmentOptions</param>
        /// <param name="carrierPayments">Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. </param>
        /// <param name="customs">customs</param>
        [JsonConstructor]
        public MilitaryMailShipmentResponseV2(Option<string> correlationId = default, Option<string> shipmentId = default, Option<string> parcelTrackingNumber = default, Option<List<DomesticShipmentResponseV2LabelLayoutInner>> labelLayout = default, Option<ParcelV2> parcel = default, Option<DomesticShipmentResponseV2Rate> rate = default, Option<ReferenceV2> references = default, Option<string> printStatus = default, Option<DomesticShipmentResponseV2PrintError> printError = default, Option<FromAddressV2Response> fromAddress = default, Option<ToAddressV2Response> toAddress = default, Option<SoldToAddress> soldToAddress = default, Option<List<AdditionalAddressesInner>> additionalAddresses = default, Option<ReprintShipmentShipmentOptions> shipmentOptions = default, Option<List<CarrierPaymentsInner>> carrierPayments = default, Option<MilitaryMailShipmentResponseV2AllOfCustoms> customs = default)
        {
            CorrelationIdOption = correlationId;
            ShipmentIdOption = shipmentId;
            ParcelTrackingNumberOption = parcelTrackingNumber;
            LabelLayoutOption = labelLayout;
            ParcelOption = parcel;
            RateOption = rate;
            ReferencesOption = references;
            PrintStatusOption = printStatus;
            PrintErrorOption = printError;
            FromAddressOption = fromAddress;
            ToAddressOption = toAddress;
            SoldToAddressOption = soldToAddress;
            AdditionalAddressesOption = additionalAddresses;
            ShipmentOptionsOption = shipmentOptions;
            CarrierPaymentsOption = carrierPayments;
            CustomsOption = customs;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CorrelationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CorrelationIdOption { get; private set; }

        /// <summary>
        /// Key assigned by the shipping system to the transaction.
        /// </summary>
        /// <value>Key assigned by the shipping system to the transaction.</value>
        /* <example>3e2a71cc421e40b7970db9d540b1c7f2</example> */
        [JsonPropertyName("correlationId")]
        public string CorrelationId { get { return this.CorrelationIdOption; } set { this.CorrelationIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShipmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShipmentIdOption { get; private set; }

        /// <summary>
        /// The shipmentId, a unique identifier for an individual Shipment.
        /// </summary>
        /// <value>The shipmentId, a unique identifier for an individual Shipment.</value>
        /* <example>FEDEX2200626443337314</example> */
        [JsonPropertyName("shipmentId")]
        public string ShipmentId { get { return this.ShipmentIdOption; } set { this.ShipmentIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ParcelTrackingNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ParcelTrackingNumberOption { get; private set; }

        /// <summary>
        /// The Tracking number given to the Parcel for tracking purpose.
        /// </summary>
        /// <value>The Tracking number given to the Parcel for tracking purpose.</value>
        /* <example>329039098457</example> */
        [JsonPropertyName("parcelTrackingNumber")]
        public string ParcelTrackingNumber { get { return this.ParcelTrackingNumberOption; } set { this.ParcelTrackingNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LabelLayout
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DomesticShipmentResponseV2LabelLayoutInner>> LabelLayoutOption { get; private set; }

        /// <summary>
        /// Gets or Sets LabelLayout
        /// </summary>
        [JsonPropertyName("labelLayout")]
        public List<DomesticShipmentResponseV2LabelLayoutInner> LabelLayout { get { return this.LabelLayoutOption; } set { this.LabelLayoutOption = new Option<List<DomesticShipmentResponseV2LabelLayoutInner>>(value); } }

        /// <summary>
        /// Used to track the state of Parcel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ParcelV2> ParcelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [JsonPropertyName("parcel")]
        public ParcelV2 Parcel { get { return this.ParcelOption; } set { this.ParcelOption = new Option<ParcelV2>(value); } }

        /// <summary>
        /// Used to track the state of Rate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DomesticShipmentResponseV2Rate> RateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [JsonPropertyName("rate")]
        public DomesticShipmentResponseV2Rate Rate { get { return this.RateOption; } set { this.RateOption = new Option<DomesticShipmentResponseV2Rate>(value); } }

        /// <summary>
        /// Used to track the state of References
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReferenceV2> ReferencesOption { get; private set; }

        /// <summary>
        /// Gets or Sets References
        /// </summary>
        [JsonPropertyName("references")]
        public ReferenceV2 References { get { return this.ReferencesOption; } set { this.ReferencesOption = new Option<ReferenceV2>(value); } }

        /// <summary>
        /// Used to track the state of PrintStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PrintStatusOption { get; private set; }

        /// <summary>
        /// Status of the Printed Label.
        /// </summary>
        /// <value>Status of the Printed Label.</value>
        /* <example>submitted</example> */
        [JsonPropertyName("printStatus")]
        public string PrintStatus { get { return this.PrintStatusOption; } set { this.PrintStatusOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PrintError
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DomesticShipmentResponseV2PrintError> PrintErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets PrintError
        /// </summary>
        [JsonPropertyName("printError")]
        public DomesticShipmentResponseV2PrintError PrintError { get { return this.PrintErrorOption; } set { this.PrintErrorOption = new Option<DomesticShipmentResponseV2PrintError>(value); } }

        /// <summary>
        /// Used to track the state of FromAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FromAddressV2Response> FromAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [JsonPropertyName("fromAddress")]
        public FromAddressV2Response FromAddress { get { return this.FromAddressOption; } set { this.FromAddressOption = new Option<FromAddressV2Response>(value); } }

        /// <summary>
        /// Used to track the state of ToAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ToAddressV2Response> ToAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [JsonPropertyName("toAddress")]
        public ToAddressV2Response ToAddress { get { return this.ToAddressOption; } set { this.ToAddressOption = new Option<ToAddressV2Response>(value); } }

        /// <summary>
        /// Used to track the state of SoldToAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SoldToAddress> SoldToAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets SoldToAddress
        /// </summary>
        [JsonPropertyName("soldToAddress")]
        public SoldToAddress SoldToAddress { get { return this.SoldToAddressOption; } set { this.SoldToAddressOption = new Option<SoldToAddress>(value); } }

        /// <summary>
        /// Used to track the state of AdditionalAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<AdditionalAddressesInner>> AdditionalAddressesOption { get; private set; }

        /// <summary>
        /// A list of additional addresses associated with the shipment.  - Each object includes an address and its designated type, such as BROKER or other parties involved in customs or shipping processes.  - Additional address could be domestic or International both.  
        /// </summary>
        /// <value>A list of additional addresses associated with the shipment.  - Each object includes an address and its designated type, such as BROKER or other parties involved in customs or shipping processes.  - Additional address could be domestic or International both.  </value>
        [JsonPropertyName("additionalAddresses")]
        public List<AdditionalAddressesInner> AdditionalAddresses { get { return this.AdditionalAddressesOption; } set { this.AdditionalAddressesOption = new Option<List<AdditionalAddressesInner>>(value); } }

        /// <summary>
        /// Used to track the state of ShipmentOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReprintShipmentShipmentOptions> ShipmentOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShipmentOptions
        /// </summary>
        [JsonPropertyName("shipmentOptions")]
        public ReprintShipmentShipmentOptions ShipmentOptions { get { return this.ShipmentOptionsOption; } set { this.ShipmentOptionsOption = new Option<ReprintShipmentShipmentOptions>(value); } }

        /// <summary>
        /// Used to track the state of CarrierPayments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CarrierPaymentsInner>> CarrierPaymentsOption { get; private set; }

        /// <summary>
        /// Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. 
        /// </summary>
        /// <value>Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. </value>
        [JsonPropertyName("carrierPayments")]
        public List<CarrierPaymentsInner> CarrierPayments { get { return this.CarrierPaymentsOption; } set { this.CarrierPaymentsOption = new Option<List<CarrierPaymentsInner>>(value); } }

        /// <summary>
        /// Used to track the state of Customs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MilitaryMailShipmentResponseV2AllOfCustoms> CustomsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Customs
        /// </summary>
        [JsonPropertyName("customs")]
        public MilitaryMailShipmentResponseV2AllOfCustoms Customs { get { return this.CustomsOption; } set { this.CustomsOption = new Option<MilitaryMailShipmentResponseV2AllOfCustoms>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MilitaryMailShipmentResponseV2 {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ParcelTrackingNumber: ").Append(ParcelTrackingNumber).Append("\n");
            sb.Append("  LabelLayout: ").Append(LabelLayout).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  References: ").Append(References).Append("\n");
            sb.Append("  PrintStatus: ").Append(PrintStatus).Append("\n");
            sb.Append("  PrintError: ").Append(PrintError).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("  SoldToAddress: ").Append(SoldToAddress).Append("\n");
            sb.Append("  AdditionalAddresses: ").Append(AdditionalAddresses).Append("\n");
            sb.Append("  ShipmentOptions: ").Append(ShipmentOptions).Append("\n");
            sb.Append("  CarrierPayments: ").Append(CarrierPayments).Append("\n");
            sb.Append("  Customs: ").Append(Customs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MilitaryMailShipmentResponseV2" />
    /// </summary>
    public class MilitaryMailShipmentResponseV2JsonConverter : JsonConverter<MilitaryMailShipmentResponseV2>
    {
        /// <summary>
        /// Deserializes json to <see cref="MilitaryMailShipmentResponseV2" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MilitaryMailShipmentResponseV2 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> correlationId = default;
            Option<string> shipmentId = default;
            Option<string> parcelTrackingNumber = default;
            Option<List<DomesticShipmentResponseV2LabelLayoutInner>> labelLayout = default;
            Option<ParcelV2> parcel = default;
            Option<DomesticShipmentResponseV2Rate> rate = default;
            Option<ReferenceV2> references = default;
            Option<string> printStatus = default;
            Option<DomesticShipmentResponseV2PrintError> printError = default;
            Option<FromAddressV2Response> fromAddress = default;
            Option<ToAddressV2Response> toAddress = default;
            Option<SoldToAddress> soldToAddress = default;
            Option<List<AdditionalAddressesInner>> additionalAddresses = default;
            Option<ReprintShipmentShipmentOptions> shipmentOptions = default;
            Option<List<CarrierPaymentsInner>> carrierPayments = default;
            Option<MilitaryMailShipmentResponseV2AllOfCustoms> customs = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "correlationId":
                            correlationId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shipmentId":
                            shipmentId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "parcelTrackingNumber":
                            parcelTrackingNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "labelLayout":
                            labelLayout = new Option<List<DomesticShipmentResponseV2LabelLayoutInner>>(JsonSerializer.Deserialize<List<DomesticShipmentResponseV2LabelLayoutInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "parcel":
                            parcel = new Option<ParcelV2>(JsonSerializer.Deserialize<ParcelV2>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "rate":
                            rate = new Option<DomesticShipmentResponseV2Rate>(JsonSerializer.Deserialize<DomesticShipmentResponseV2Rate>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "references":
                            references = new Option<ReferenceV2>(JsonSerializer.Deserialize<ReferenceV2>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "printStatus":
                            printStatus = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "printError":
                            printError = new Option<DomesticShipmentResponseV2PrintError>(JsonSerializer.Deserialize<DomesticShipmentResponseV2PrintError>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fromAddress":
                            fromAddress = new Option<FromAddressV2Response>(JsonSerializer.Deserialize<FromAddressV2Response>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "toAddress":
                            toAddress = new Option<ToAddressV2Response>(JsonSerializer.Deserialize<ToAddressV2Response>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "soldToAddress":
                            soldToAddress = new Option<SoldToAddress>(JsonSerializer.Deserialize<SoldToAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "additionalAddresses":
                            additionalAddresses = new Option<List<AdditionalAddressesInner>>(JsonSerializer.Deserialize<List<AdditionalAddressesInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shipmentOptions":
                            shipmentOptions = new Option<ReprintShipmentShipmentOptions>(JsonSerializer.Deserialize<ReprintShipmentShipmentOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "carrierPayments":
                            carrierPayments = new Option<List<CarrierPaymentsInner>>(JsonSerializer.Deserialize<List<CarrierPaymentsInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "customs":
                            customs = new Option<MilitaryMailShipmentResponseV2AllOfCustoms>(JsonSerializer.Deserialize<MilitaryMailShipmentResponseV2AllOfCustoms>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (correlationId.IsSet && correlationId.Value == null)
                throw new ArgumentNullException(nameof(correlationId), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (shipmentId.IsSet && shipmentId.Value == null)
                throw new ArgumentNullException(nameof(shipmentId), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (parcelTrackingNumber.IsSet && parcelTrackingNumber.Value == null)
                throw new ArgumentNullException(nameof(parcelTrackingNumber), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (labelLayout.IsSet && labelLayout.Value == null)
                throw new ArgumentNullException(nameof(labelLayout), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (parcel.IsSet && parcel.Value == null)
                throw new ArgumentNullException(nameof(parcel), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (rate.IsSet && rate.Value == null)
                throw new ArgumentNullException(nameof(rate), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (references.IsSet && references.Value == null)
                throw new ArgumentNullException(nameof(references), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (printStatus.IsSet && printStatus.Value == null)
                throw new ArgumentNullException(nameof(printStatus), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (printError.IsSet && printError.Value == null)
                throw new ArgumentNullException(nameof(printError), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (fromAddress.IsSet && fromAddress.Value == null)
                throw new ArgumentNullException(nameof(fromAddress), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (toAddress.IsSet && toAddress.Value == null)
                throw new ArgumentNullException(nameof(toAddress), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (soldToAddress.IsSet && soldToAddress.Value == null)
                throw new ArgumentNullException(nameof(soldToAddress), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (additionalAddresses.IsSet && additionalAddresses.Value == null)
                throw new ArgumentNullException(nameof(additionalAddresses), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (shipmentOptions.IsSet && shipmentOptions.Value == null)
                throw new ArgumentNullException(nameof(shipmentOptions), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (carrierPayments.IsSet && carrierPayments.Value == null)
                throw new ArgumentNullException(nameof(carrierPayments), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            if (customs.IsSet && customs.Value == null)
                throw new ArgumentNullException(nameof(customs), "Property is not nullable for class MilitaryMailShipmentResponseV2.");

            return new MilitaryMailShipmentResponseV2(correlationId, shipmentId, parcelTrackingNumber, labelLayout, parcel, rate, references, printStatus, printError, fromAddress, toAddress, soldToAddress, additionalAddresses, shipmentOptions, carrierPayments, customs);
        }

        /// <summary>
        /// Serializes a <see cref="MilitaryMailShipmentResponseV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="militaryMailShipmentResponseV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MilitaryMailShipmentResponseV2 militaryMailShipmentResponseV2, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, militaryMailShipmentResponseV2, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MilitaryMailShipmentResponseV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="militaryMailShipmentResponseV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MilitaryMailShipmentResponseV2 militaryMailShipmentResponseV2, JsonSerializerOptions jsonSerializerOptions)
        {
            if (militaryMailShipmentResponseV2.CorrelationIdOption.IsSet && militaryMailShipmentResponseV2.CorrelationId == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.CorrelationId), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.ShipmentIdOption.IsSet && militaryMailShipmentResponseV2.ShipmentId == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.ShipmentId), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.ParcelTrackingNumberOption.IsSet && militaryMailShipmentResponseV2.ParcelTrackingNumber == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.ParcelTrackingNumber), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.LabelLayoutOption.IsSet && militaryMailShipmentResponseV2.LabelLayout == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.LabelLayout), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.ParcelOption.IsSet && militaryMailShipmentResponseV2.Parcel == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.Parcel), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.RateOption.IsSet && militaryMailShipmentResponseV2.Rate == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.Rate), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.ReferencesOption.IsSet && militaryMailShipmentResponseV2.References == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.References), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.PrintStatusOption.IsSet && militaryMailShipmentResponseV2.PrintStatus == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.PrintStatus), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.PrintErrorOption.IsSet && militaryMailShipmentResponseV2.PrintError == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.PrintError), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.FromAddressOption.IsSet && militaryMailShipmentResponseV2.FromAddress == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.FromAddress), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.ToAddressOption.IsSet && militaryMailShipmentResponseV2.ToAddress == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.ToAddress), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.SoldToAddressOption.IsSet && militaryMailShipmentResponseV2.SoldToAddress == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.SoldToAddress), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.AdditionalAddressesOption.IsSet && militaryMailShipmentResponseV2.AdditionalAddresses == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.AdditionalAddresses), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.ShipmentOptionsOption.IsSet && militaryMailShipmentResponseV2.ShipmentOptions == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.ShipmentOptions), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.CarrierPaymentsOption.IsSet && militaryMailShipmentResponseV2.CarrierPayments == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.CarrierPayments), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.CustomsOption.IsSet && militaryMailShipmentResponseV2.Customs == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentResponseV2.Customs), "Property is required for class MilitaryMailShipmentResponseV2.");

            if (militaryMailShipmentResponseV2.CorrelationIdOption.IsSet)
                writer.WriteString("correlationId", militaryMailShipmentResponseV2.CorrelationId);

            if (militaryMailShipmentResponseV2.ShipmentIdOption.IsSet)
                writer.WriteString("shipmentId", militaryMailShipmentResponseV2.ShipmentId);

            if (militaryMailShipmentResponseV2.ParcelTrackingNumberOption.IsSet)
                writer.WriteString("parcelTrackingNumber", militaryMailShipmentResponseV2.ParcelTrackingNumber);

            if (militaryMailShipmentResponseV2.LabelLayoutOption.IsSet)
            {
                writer.WritePropertyName("labelLayout");
                JsonSerializer.Serialize(writer, militaryMailShipmentResponseV2.LabelLayout, jsonSerializerOptions);
            }
            if (militaryMailShipmentResponseV2.ParcelOption.IsSet)
            {
                writer.WritePropertyName("parcel");
                JsonSerializer.Serialize(writer, militaryMailShipmentResponseV2.Parcel, jsonSerializerOptions);
            }
            if (militaryMailShipmentResponseV2.RateOption.IsSet)
            {
                writer.WritePropertyName("rate");
                JsonSerializer.Serialize(writer, militaryMailShipmentResponseV2.Rate, jsonSerializerOptions);
            }
            if (militaryMailShipmentResponseV2.ReferencesOption.IsSet)
            {
                writer.WritePropertyName("references");
                JsonSerializer.Serialize(writer, militaryMailShipmentResponseV2.References, jsonSerializerOptions);
            }
            if (militaryMailShipmentResponseV2.PrintStatusOption.IsSet)
                writer.WriteString("printStatus", militaryMailShipmentResponseV2.PrintStatus);

            if (militaryMailShipmentResponseV2.PrintErrorOption.IsSet)
            {
                writer.WritePropertyName("printError");
                JsonSerializer.Serialize(writer, militaryMailShipmentResponseV2.PrintError, jsonSerializerOptions);
            }
            if (militaryMailShipmentResponseV2.FromAddressOption.IsSet)
            {
                writer.WritePropertyName("fromAddress");
                JsonSerializer.Serialize(writer, militaryMailShipmentResponseV2.FromAddress, jsonSerializerOptions);
            }
            if (militaryMailShipmentResponseV2.ToAddressOption.IsSet)
            {
                writer.WritePropertyName("toAddress");
                JsonSerializer.Serialize(writer, militaryMailShipmentResponseV2.ToAddress, jsonSerializerOptions);
            }
            if (militaryMailShipmentResponseV2.SoldToAddressOption.IsSet)
            {
                writer.WritePropertyName("soldToAddress");
                JsonSerializer.Serialize(writer, militaryMailShipmentResponseV2.SoldToAddress, jsonSerializerOptions);
            }
            if (militaryMailShipmentResponseV2.AdditionalAddressesOption.IsSet)
            {
                writer.WritePropertyName("additionalAddresses");
                JsonSerializer.Serialize(writer, militaryMailShipmentResponseV2.AdditionalAddresses, jsonSerializerOptions);
            }
            if (militaryMailShipmentResponseV2.ShipmentOptionsOption.IsSet)
            {
                writer.WritePropertyName("shipmentOptions");
                JsonSerializer.Serialize(writer, militaryMailShipmentResponseV2.ShipmentOptions, jsonSerializerOptions);
            }
            if (militaryMailShipmentResponseV2.CarrierPaymentsOption.IsSet)
            {
                writer.WritePropertyName("carrierPayments");
                JsonSerializer.Serialize(writer, militaryMailShipmentResponseV2.CarrierPayments, jsonSerializerOptions);
            }
            if (militaryMailShipmentResponseV2.CustomsOption.IsSet)
            {
                writer.WritePropertyName("customs");
                JsonSerializer.Serialize(writer, militaryMailShipmentResponseV2.Customs, jsonSerializerOptions);
            }
        }
    }
}
