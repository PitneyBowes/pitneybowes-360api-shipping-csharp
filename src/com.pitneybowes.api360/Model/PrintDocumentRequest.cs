// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// PrintDocumentRequest
    /// </summary>
    public partial class PrintDocumentRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintDocumentRequest" /> class.
        /// </summary>
        /// <param name="printerAliasName">Name of the Printer connected (directly or via network) to a Computer. &#x60;Max length &#x3D; 30&#x60;</param>
        /// <param name="data">Content/Identifier of document e.g., DOCUMENT_REFERECE_ID. Actual document name e.g., abc.pdf. [IN] i.e base64 string, URL, file path</param>
        /// <param name="dataType">Data Type of the document e.g., DOCUMENT_REFERENCE. [IN/OUT]</param>
        /// <param name="documentType">The format of the document file the print takes.</param>
        /// <param name="formName">The name of the Document Form.</param>
        /// <param name="orientation">The orientation of the document layout: Portrait or Landscape.</param>
        /// <param name="reference">reference</param>
        [JsonConstructor]
        public PrintDocumentRequest(string printerAliasName, string data, DataTypeEnum dataType, DocumentTypeEnum documentType, FormNameEnum formName, Option<string?> orientation = default, Option<PrintDocumentRequestReference?> reference = default)
        {
            PrinterAliasName = printerAliasName;
            Data = data;
            DataType = dataType;
            DocumentType = documentType;
            FormName = formName;
            OrientationOption = orientation;
            ReferenceOption = reference;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Data Type of the document e.g., DOCUMENT_REFERENCE. [IN/OUT]
        /// </summary>
        /// <value>Data Type of the document e.g., DOCUMENT_REFERENCE. [IN/OUT]</value>
        public enum DataTypeEnum
        {
            /// <summary>
            /// Enum BASE64 for value: BASE64
            /// </summary>
            BASE64 = 1,

            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            URL = 2
        }

        /// <summary>
        /// Returns a <see cref="DataTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DataTypeEnum DataTypeEnumFromString(string value)
        {
            if (value.Equals("BASE64"))
                return DataTypeEnum.BASE64;

            if (value.Equals("URL"))
                return DataTypeEnum.URL;

            throw new NotImplementedException($"Could not convert value to type DataTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DataTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DataTypeEnum? DataTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("BASE64"))
                return DataTypeEnum.BASE64;

            if (value.Equals("URL"))
                return DataTypeEnum.URL;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DataTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DataTypeEnumToJsonValue(DataTypeEnum value)
        {
            if (value == DataTypeEnum.BASE64)
                return "BASE64";

            if (value == DataTypeEnum.URL)
                return "URL";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Data Type of the document e.g., DOCUMENT_REFERENCE. [IN/OUT]
        /// </summary>
        /// <value>Data Type of the document e.g., DOCUMENT_REFERENCE. [IN/OUT]</value>
        /* <example>BASE64</example> */
        [JsonPropertyName("dataType")]
        public DataTypeEnum DataType { get; set; }

        /// <summary>
        /// The format of the document file the print takes.
        /// </summary>
        /// <value>The format of the document file the print takes.</value>
        public enum DocumentTypeEnum
        {
            /// <summary>
            /// Enum ZPL2 for value: ZPL2
            /// </summary>
            ZPL2 = 1,

            /// <summary>
            /// Enum ZPL for value: ZPL
            /// </summary>
            ZPL = 2,

            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            PDF = 3
        }

        /// <summary>
        /// Returns a <see cref="DocumentTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DocumentTypeEnum DocumentTypeEnumFromString(string value)
        {
            if (value.Equals("ZPL2"))
                return DocumentTypeEnum.ZPL2;

            if (value.Equals("ZPL"))
                return DocumentTypeEnum.ZPL;

            if (value.Equals("PDF"))
                return DocumentTypeEnum.PDF;

            throw new NotImplementedException($"Could not convert value to type DocumentTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DocumentTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DocumentTypeEnum? DocumentTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ZPL2"))
                return DocumentTypeEnum.ZPL2;

            if (value.Equals("ZPL"))
                return DocumentTypeEnum.ZPL;

            if (value.Equals("PDF"))
                return DocumentTypeEnum.PDF;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DocumentTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DocumentTypeEnumToJsonValue(DocumentTypeEnum value)
        {
            if (value == DocumentTypeEnum.ZPL2)
                return "ZPL2";

            if (value == DocumentTypeEnum.ZPL)
                return "ZPL";

            if (value == DocumentTypeEnum.PDF)
                return "PDF";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The format of the document file the print takes.
        /// </summary>
        /// <value>The format of the document file the print takes.</value>
        /* <example>ZPL2</example> */
        [JsonPropertyName("documentType")]
        public DocumentTypeEnum DocumentType { get; set; }

        /// <summary>
        /// The name of the Document Form.
        /// </summary>
        /// <value>The name of the Document Form.</value>
        public enum FormNameEnum
        {
            /// <summary>
            /// Enum _8x11 for value: 8x11
            /// </summary>
            _8x11 = 1,

            /// <summary>
            /// Enum _4x6 for value: 4x6
            /// </summary>
            _4x6 = 2,

            /// <summary>
            /// Enum _2x1 for value: 2x1
            /// </summary>
            _2x1 = 3,

            /// <summary>
            /// Enum ENV10 for value: ENV10
            /// </summary>
            ENV10 = 4,

            /// <summary>
            /// Enum ENV9 for value: ENV9
            /// </summary>
            ENV9 = 5,

            /// <summary>
            /// Enum A1 for value: A1
            /// </summary>
            A1 = 6
        }

        /// <summary>
        /// Returns a <see cref="FormNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FormNameEnum FormNameEnumFromString(string value)
        {
            if (value.Equals("8x11"))
                return FormNameEnum._8x11;

            if (value.Equals("4x6"))
                return FormNameEnum._4x6;

            if (value.Equals("2x1"))
                return FormNameEnum._2x1;

            if (value.Equals("ENV10"))
                return FormNameEnum.ENV10;

            if (value.Equals("ENV9"))
                return FormNameEnum.ENV9;

            if (value.Equals("A1"))
                return FormNameEnum.A1;

            throw new NotImplementedException($"Could not convert value to type FormNameEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FormNameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FormNameEnum? FormNameEnumFromStringOrDefault(string value)
        {
            if (value.Equals("8x11"))
                return FormNameEnum._8x11;

            if (value.Equals("4x6"))
                return FormNameEnum._4x6;

            if (value.Equals("2x1"))
                return FormNameEnum._2x1;

            if (value.Equals("ENV10"))
                return FormNameEnum.ENV10;

            if (value.Equals("ENV9"))
                return FormNameEnum.ENV9;

            if (value.Equals("A1"))
                return FormNameEnum.A1;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FormNameEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FormNameEnumToJsonValue(FormNameEnum value)
        {
            if (value == FormNameEnum._8x11)
                return "8x11";

            if (value == FormNameEnum._4x6)
                return "4x6";

            if (value == FormNameEnum._2x1)
                return "2x1";

            if (value == FormNameEnum.ENV10)
                return "ENV10";

            if (value == FormNameEnum.ENV9)
                return "ENV9";

            if (value == FormNameEnum.A1)
                return "A1";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The name of the Document Form.
        /// </summary>
        /// <value>The name of the Document Form.</value>
        /* <example>ENV10</example> */
        [JsonPropertyName("formName")]
        public FormNameEnum FormName { get; set; }

        /// <summary>
        /// Name of the Printer connected (directly or via network) to a Computer. &#x60;Max length &#x3D; 30&#x60;
        /// </summary>
        /// <value>Name of the Printer connected (directly or via network) to a Computer. &#x60;Max length &#x3D; 30&#x60;</value>
        /* <example>Pitney Bowes Printer</example> */
        [JsonPropertyName("printerAliasName")]
        public string PrinterAliasName { get; set; }

        /// <summary>
        /// Content/Identifier of document e.g., DOCUMENT_REFERECE_ID. Actual document name e.g., abc.pdf. [IN] i.e base64 string, URL, file path
        /// </summary>
        /// <value>Content/Identifier of document e.g., DOCUMENT_REFERECE_ID. Actual document name e.g., abc.pdf. [IN] i.e base64 string, URL, file path</value>
        /* <example>&lt;&lt;base64string&gt;&gt;</example> */
        [JsonPropertyName("data")]
        public string Data { get; set; }

        /// <summary>
        /// Used to track the state of Orientation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrientationOption { get; private set; }

        /// <summary>
        /// The orientation of the document layout: Portrait or Landscape.
        /// </summary>
        /// <value>The orientation of the document layout: Portrait or Landscape.</value>
        /* <example>PORTRAIT</example> */
        [JsonPropertyName("orientation")]
        public string? Orientation { get { return this.OrientationOption; } set { this.OrientationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PrintDocumentRequestReference?> ReferenceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [JsonPropertyName("reference")]
        public PrintDocumentRequestReference? Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrintDocumentRequest {\n");
            sb.Append("  PrinterAliasName: ").Append(PrinterAliasName).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  FormName: ").Append(FormName).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PrintDocumentRequest" />
    /// </summary>
    public class PrintDocumentRequestJsonConverter : JsonConverter<PrintDocumentRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PrintDocumentRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PrintDocumentRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> printerAliasName = default;
            Option<string?> data = default;
            Option<PrintDocumentRequest.DataTypeEnum?> dataType = default;
            Option<PrintDocumentRequest.DocumentTypeEnum?> documentType = default;
            Option<PrintDocumentRequest.FormNameEnum?> formName = default;
            Option<string?> orientation = default;
            Option<PrintDocumentRequestReference?> reference = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "printerAliasName":
                            printerAliasName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "data":
                            data = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dataType":
                            string? dataTypeRawValue = utf8JsonReader.GetString();
                            if (dataTypeRawValue != null)
                                dataType = new Option<PrintDocumentRequest.DataTypeEnum?>(PrintDocumentRequest.DataTypeEnumFromStringOrDefault(dataTypeRawValue));
                            break;
                        case "documentType":
                            string? documentTypeRawValue = utf8JsonReader.GetString();
                            if (documentTypeRawValue != null)
                                documentType = new Option<PrintDocumentRequest.DocumentTypeEnum?>(PrintDocumentRequest.DocumentTypeEnumFromStringOrDefault(documentTypeRawValue));
                            break;
                        case "formName":
                            string? formNameRawValue = utf8JsonReader.GetString();
                            if (formNameRawValue != null)
                                formName = new Option<PrintDocumentRequest.FormNameEnum?>(PrintDocumentRequest.FormNameEnumFromStringOrDefault(formNameRawValue));
                            break;
                        case "orientation":
                            orientation = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reference":
                            reference = new Option<PrintDocumentRequestReference?>(JsonSerializer.Deserialize<PrintDocumentRequestReference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!printerAliasName.IsSet)
                throw new ArgumentException("Property is required for class PrintDocumentRequest.", nameof(printerAliasName));

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class PrintDocumentRequest.", nameof(data));

            if (!dataType.IsSet)
                throw new ArgumentException("Property is required for class PrintDocumentRequest.", nameof(dataType));

            if (!documentType.IsSet)
                throw new ArgumentException("Property is required for class PrintDocumentRequest.", nameof(documentType));

            if (!formName.IsSet)
                throw new ArgumentException("Property is required for class PrintDocumentRequest.", nameof(formName));

            if (printerAliasName.IsSet && printerAliasName.Value == null)
                throw new ArgumentNullException(nameof(printerAliasName), "Property is not nullable for class PrintDocumentRequest.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class PrintDocumentRequest.");

            if (dataType.IsSet && dataType.Value == null)
                throw new ArgumentNullException(nameof(dataType), "Property is not nullable for class PrintDocumentRequest.");

            if (documentType.IsSet && documentType.Value == null)
                throw new ArgumentNullException(nameof(documentType), "Property is not nullable for class PrintDocumentRequest.");

            if (formName.IsSet && formName.Value == null)
                throw new ArgumentNullException(nameof(formName), "Property is not nullable for class PrintDocumentRequest.");

            if (orientation.IsSet && orientation.Value == null)
                throw new ArgumentNullException(nameof(orientation), "Property is not nullable for class PrintDocumentRequest.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class PrintDocumentRequest.");

            return new PrintDocumentRequest(printerAliasName.Value!, data.Value!, dataType.Value!.Value!, documentType.Value!.Value!, formName.Value!.Value!, orientation, reference);
        }

        /// <summary>
        /// Serializes a <see cref="PrintDocumentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="printDocumentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PrintDocumentRequest printDocumentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, printDocumentRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PrintDocumentRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="printDocumentRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PrintDocumentRequest printDocumentRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (printDocumentRequest.PrinterAliasName == null)
                throw new ArgumentNullException(nameof(printDocumentRequest.PrinterAliasName), "Property is required for class PrintDocumentRequest.");

            if (printDocumentRequest.Data == null)
                throw new ArgumentNullException(nameof(printDocumentRequest.Data), "Property is required for class PrintDocumentRequest.");

            if (printDocumentRequest.OrientationOption.IsSet && printDocumentRequest.Orientation == null)
                throw new ArgumentNullException(nameof(printDocumentRequest.Orientation), "Property is required for class PrintDocumentRequest.");

            if (printDocumentRequest.ReferenceOption.IsSet && printDocumentRequest.Reference == null)
                throw new ArgumentNullException(nameof(printDocumentRequest.Reference), "Property is required for class PrintDocumentRequest.");

            writer.WriteString("printerAliasName", printDocumentRequest.PrinterAliasName);

            writer.WriteString("data", printDocumentRequest.Data);

            var dataTypeRawValue = PrintDocumentRequest.DataTypeEnumToJsonValue(printDocumentRequest.DataType);
            writer.WriteString("dataType", dataTypeRawValue);
            var documentTypeRawValue = PrintDocumentRequest.DocumentTypeEnumToJsonValue(printDocumentRequest.DocumentType);
            writer.WriteString("documentType", documentTypeRawValue);
            var formNameRawValue = PrintDocumentRequest.FormNameEnumToJsonValue(printDocumentRequest.FormName);
            writer.WriteString("formName", formNameRawValue);
            if (printDocumentRequest.OrientationOption.IsSet)
                writer.WriteString("orientation", printDocumentRequest.Orientation);

            if (printDocumentRequest.ReferenceOption.IsSet)
            {
                writer.WritePropertyName("reference");
                JsonSerializer.Serialize(writer, printDocumentRequest.Reference, jsonSerializerOptions);
            }
        }
    }
}
