// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// MultipieceShipmentInternationalRequest
    /// </summary>
    public partial class MultipieceShipmentInternationalRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultipieceShipmentInternationalRequest" /> class.
        /// </summary>
        /// <param name="size">Defines the label size of the Shipment, e.g., Shipping Label having Doc Size ( 8&#39; X 11&#39;). It supports the document sizes as per the eligible carrier size support.</param>
        /// <param name="format">Defines the type of the multipiece shipment label that is printed.&lt;br&gt;PDF supports content type URL.&lt;br&gt; ZPL2 supports content type BASE64.</param>
        /// <param name="type">Defines the type of the Shipment, e.g., Shipping Label.</param>
        /// <param name="contentType">Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; . &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;. </param>
        /// <param name="fromAddress">fromAddress</param>
        /// <param name="carrierAccountId"> A unique identifier associated with the Carrier account used by client users during shipment process.</param>
        /// <param name="serviceId">&gt;-A unique identifier given to the carrier-specific service. This is required for creating a shipment, while it is optional for rating a parcel.</param>
        /// <param name="shipmentOptions">shipmentOptions</param>
        /// <param name="carrierPayments">Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. </param>
        /// <param name="metadata">An array containing custom metadata for the shipment.</param>
        /// <param name="multiPieceParcels">Details of each parcel in the shipment.</param>
        /// <param name="toAddress">toAddress</param>
        /// <param name="additionalAddresses">A list of additional addresses associated with the shipment.  - Each object includes an address and its designated type, such as BROKER or other parties involved in customs or shipping processes.  - Additional address could be domestic or International both.  </param>
        /// <param name="altReturnAddress">altReturnAddress</param>
        /// <param name="customs">customs</param>
        [JsonConstructor]
        public MultipieceShipmentInternationalRequest(Option<SizeEnum?> size = default, Option<FormatEnum?> format = default, Option<TypeEnum?> type = default, Option<ContentTypeEnum?> contentType = default, Option<MultipieceShipmentInternationalRequestFromAddress> fromAddress = default, Option<string> carrierAccountId = default, Option<string> serviceId = default, Option<MultipieceShipmentInternationalRequestShipmentOptions> shipmentOptions = default, Option<List<CarrierPaymentsInner>> carrierPayments = default, Option<List<MultipieceShipmentRequestMetadataInner>> metadata = default, Option<List<MultipieceShipmentInternationalRequestMultiPieceParcelsInner>> multiPieceParcels = default, Option<MultipieceShipmentInternationalRequestToAddress> toAddress = default, Option<List<AdditionalAddressesInner>> additionalAddresses = default, Option<MultipieceShipmentRequestAltReturnAddress> altReturnAddress = default, Option<MultipieceShipmentInternationalRequestCustoms> customs = default)
        {
            SizeOption = size;
            FormatOption = format;
            TypeOption = type;
            ContentTypeOption = contentType;
            FromAddressOption = fromAddress;
            CarrierAccountIdOption = carrierAccountId;
            ServiceIdOption = serviceId;
            ShipmentOptionsOption = shipmentOptions;
            CarrierPaymentsOption = carrierPayments;
            MetadataOption = metadata;
            MultiPieceParcelsOption = multiPieceParcels;
            ToAddressOption = toAddress;
            AdditionalAddressesOption = additionalAddresses;
            AltReturnAddressOption = altReturnAddress;
            CustomsOption = customs;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines the label size of the Shipment, e.g., Shipping Label having Doc Size ( 8&#39; X 11&#39;). It supports the document sizes as per the eligible carrier size support.
        /// </summary>
        /// <value>Defines the label size of the Shipment, e.g., Shipping Label having Doc Size ( 8&#39; X 11&#39;). It supports the document sizes as per the eligible carrier size support.</value>
        public enum SizeEnum
        {
            /// <summary>
            /// Enum DOC8X11 for value: DOC_8X11
            /// </summary>
            DOC8X11 = 1,

            /// <summary>
            /// Enum DOC4X8 for value: DOC_4X8
            /// </summary>
            DOC4X8 = 2,

            /// <summary>
            /// Enum DOC4X6 for value: DOC_4X6
            /// </summary>
            DOC4X6 = 3
        }

        /// <summary>
        /// Returns a <see cref="SizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SizeEnum SizeEnumFromString(string value)
        {
            if (value.Equals("DOC_8X11"))
                return SizeEnum.DOC8X11;

            if (value.Equals("DOC_4X8"))
                return SizeEnum.DOC4X8;

            if (value.Equals("DOC_4X6"))
                return SizeEnum.DOC4X6;

            throw new NotImplementedException($"Could not convert value to type SizeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SizeEnum? SizeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("DOC_8X11"))
                return SizeEnum.DOC8X11;

            if (value.Equals("DOC_4X8"))
                return SizeEnum.DOC4X8;

            if (value.Equals("DOC_4X6"))
                return SizeEnum.DOC4X6;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SizeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SizeEnumToJsonValue(SizeEnum? value)
        {
            if (value == SizeEnum.DOC8X11)
                return "DOC_8X11";

            if (value == SizeEnum.DOC4X8)
                return "DOC_4X8";

            if (value == SizeEnum.DOC4X6)
                return "DOC_4X6";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SizeEnum?> SizeOption { get; private set; }

        /// <summary>
        /// Defines the label size of the Shipment, e.g., Shipping Label having Doc Size ( 8&#39; X 11&#39;). It supports the document sizes as per the eligible carrier size support.
        /// </summary>
        /// <value>Defines the label size of the Shipment, e.g., Shipping Label having Doc Size ( 8&#39; X 11&#39;). It supports the document sizes as per the eligible carrier size support.</value>
        /* <example>DOC_8X11</example> */
        [JsonPropertyName("size")]
        public SizeEnum? Size { get { return this.SizeOption; } set { this.SizeOption = new Option<SizeEnum?>(value); } }

        /// <summary>
        /// Defines the type of the multipiece shipment label that is printed.&lt;br&gt;PDF supports content type URL.&lt;br&gt; ZPL2 supports content type BASE64.
        /// </summary>
        /// <value>Defines the type of the multipiece shipment label that is printed.&lt;br&gt;PDF supports content type URL.&lt;br&gt; ZPL2 supports content type BASE64.</value>
        public enum FormatEnum
        {
            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            PDF = 1,

            /// <summary>
            /// Enum ZPL2 for value: ZPL2
            /// </summary>
            ZPL2 = 2
        }

        /// <summary>
        /// Returns a <see cref="FormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FormatEnum FormatEnumFromString(string value)
        {
            if (value.Equals("PDF"))
                return FormatEnum.PDF;

            if (value.Equals("ZPL2"))
                return FormatEnum.ZPL2;

            throw new NotImplementedException($"Could not convert value to type FormatEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FormatEnum? FormatEnumFromStringOrDefault(string value)
        {
            if (value.Equals("PDF"))
                return FormatEnum.PDF;

            if (value.Equals("ZPL2"))
                return FormatEnum.ZPL2;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FormatEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FormatEnumToJsonValue(FormatEnum? value)
        {
            if (value == FormatEnum.PDF)
                return "PDF";

            if (value == FormatEnum.ZPL2)
                return "ZPL2";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Format
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FormatEnum?> FormatOption { get; private set; }

        /// <summary>
        /// Defines the type of the multipiece shipment label that is printed.&lt;br&gt;PDF supports content type URL.&lt;br&gt; ZPL2 supports content type BASE64.
        /// </summary>
        /// <value>Defines the type of the multipiece shipment label that is printed.&lt;br&gt;PDF supports content type URL.&lt;br&gt; ZPL2 supports content type BASE64.</value>
        /* <example>PDF</example> */
        [JsonPropertyName("format")]
        public FormatEnum? Format { get { return this.FormatOption; } set { this.FormatOption = new Option<FormatEnum?>(value); } }

        /// <summary>
        /// Defines the type of the Shipment, e.g., Shipping Label.
        /// </summary>
        /// <value>Defines the type of the Shipment, e.g., Shipping Label.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SHIPPINGLABEL for value: SHIPPING_LABEL
            /// </summary>
            SHIPPINGLABEL = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("SHIPPING_LABEL"))
                return TypeEnum.SHIPPINGLABEL;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SHIPPING_LABEL"))
                return TypeEnum.SHIPPINGLABEL;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.SHIPPINGLABEL)
                return "SHIPPING_LABEL";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Defines the type of the Shipment, e.g., Shipping Label.
        /// </summary>
        /// <value>Defines the type of the Shipment, e.g., Shipping Label.</value>
        /* <example>SHIPPING_LABEL</example> */
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; . &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;. 
        /// </summary>
        /// <value>Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; . &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;. </value>
        public enum ContentTypeEnum
        {
            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            URL = 1,

            /// <summary>
            /// Enum BASE64 for value: BASE64
            /// </summary>
            BASE64 = 2
        }

        /// <summary>
        /// Returns a <see cref="ContentTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ContentTypeEnum ContentTypeEnumFromString(string value)
        {
            if (value.Equals("URL"))
                return ContentTypeEnum.URL;

            if (value.Equals("BASE64"))
                return ContentTypeEnum.BASE64;

            throw new NotImplementedException($"Could not convert value to type ContentTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ContentTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ContentTypeEnum? ContentTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("URL"))
                return ContentTypeEnum.URL;

            if (value.Equals("BASE64"))
                return ContentTypeEnum.BASE64;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ContentTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ContentTypeEnumToJsonValue(ContentTypeEnum? value)
        {
            if (value == ContentTypeEnum.URL)
                return "URL";

            if (value == ContentTypeEnum.BASE64)
                return "BASE64";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ContentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ContentTypeEnum?> ContentTypeOption { get; private set; }

        /// <summary>
        /// Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; . &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;. 
        /// </summary>
        /// <value>Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; . &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;. </value>
        /* <example>URL</example> */
        [JsonPropertyName("contentType")]
        public ContentTypeEnum? ContentType { get { return this.ContentTypeOption; } set { this.ContentTypeOption = new Option<ContentTypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of FromAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MultipieceShipmentInternationalRequestFromAddress> FromAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [JsonPropertyName("fromAddress")]
        public MultipieceShipmentInternationalRequestFromAddress FromAddress { get { return this.FromAddressOption; } set { this.FromAddressOption = new Option<MultipieceShipmentInternationalRequestFromAddress>(value); } }

        /// <summary>
        /// Used to track the state of CarrierAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarrierAccountIdOption { get; private set; }

        /// <summary>
        ///  A unique identifier associated with the Carrier account used by client users during shipment process.
        /// </summary>
        /// <value> A unique identifier associated with the Carrier account used by client users during shipment process.</value>
        /* <example>4J67bLB62BG</example> */
        [JsonPropertyName("carrierAccountId")]
        public string CarrierAccountId { get { return this.CarrierAccountIdOption; } set { this.CarrierAccountIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ServiceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ServiceIdOption { get; private set; }

        /// <summary>
        /// &gt;-A unique identifier given to the carrier-specific service. This is required for creating a shipment, while it is optional for rating a parcel.
        /// </summary>
        /// <value>&gt;-A unique identifier given to the carrier-specific service. This is required for creating a shipment, while it is optional for rating a parcel.</value>
        /* <example>EXP</example> */
        [JsonPropertyName("serviceId")]
        public string ServiceId { get { return this.ServiceIdOption; } set { this.ServiceIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShipmentOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MultipieceShipmentInternationalRequestShipmentOptions> ShipmentOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShipmentOptions
        /// </summary>
        [JsonPropertyName("shipmentOptions")]
        public MultipieceShipmentInternationalRequestShipmentOptions ShipmentOptions { get { return this.ShipmentOptionsOption; } set { this.ShipmentOptionsOption = new Option<MultipieceShipmentInternationalRequestShipmentOptions>(value); } }

        /// <summary>
        /// Used to track the state of CarrierPayments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CarrierPaymentsInner>> CarrierPaymentsOption { get; private set; }

        /// <summary>
        /// Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. 
        /// </summary>
        /// <value>Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. </value>
        [JsonPropertyName("carrierPayments")]
        public List<CarrierPaymentsInner> CarrierPayments { get { return this.CarrierPaymentsOption; } set { this.CarrierPaymentsOption = new Option<List<CarrierPaymentsInner>>(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<MultipieceShipmentRequestMetadataInner>> MetadataOption { get; private set; }

        /// <summary>
        /// An array containing custom metadata for the shipment.
        /// </summary>
        /// <value>An array containing custom metadata for the shipment.</value>
        [JsonPropertyName("metadata")]
        public List<MultipieceShipmentRequestMetadataInner> Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new Option<List<MultipieceShipmentRequestMetadataInner>>(value); } }

        /// <summary>
        /// Used to track the state of MultiPieceParcels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<MultipieceShipmentInternationalRequestMultiPieceParcelsInner>> MultiPieceParcelsOption { get; private set; }

        /// <summary>
        /// Details of each parcel in the shipment.
        /// </summary>
        /// <value>Details of each parcel in the shipment.</value>
        /* <example>[{&quot;parcelType&quot;:&quot;PKG&quot;,&quot;parcel&quot;:{&quot;weight&quot;:10,&quot;weightUnit&quot;:&quot;OZ&quot;,&quot;width&quot;:10,&quot;length&quot;:10,&quot;height&quot;:10,&quot;dimUnit&quot;:&quot;IN&quot;},&quot;parcelShipmentOptions&quot;:{&quot;printCustomMessage&quot;:&quot;custom message 1&quot;,&quot;printDepartment&quot;:&quot;Department 1&quot;,&quot;printInvoiceNumber&quot;:&quot;invoice number 1&quot;,&quot;printPONumber&quot;:&quot;ponumber 1&quot;}},{&quot;parcelType&quot;:&quot;PKG&quot;,&quot;parcel&quot;:{&quot;weight&quot;:8,&quot;weightUnit&quot;:&quot;OZ&quot;,&quot;width&quot;:8,&quot;length&quot;:8,&quot;height&quot;:8,&quot;dimUnit&quot;:&quot;IN&quot;}}]</example> */
        [JsonPropertyName("multiPieceParcels")]
        public List<MultipieceShipmentInternationalRequestMultiPieceParcelsInner> MultiPieceParcels { get { return this.MultiPieceParcelsOption; } set { this.MultiPieceParcelsOption = new Option<List<MultipieceShipmentInternationalRequestMultiPieceParcelsInner>>(value); } }

        /// <summary>
        /// Used to track the state of ToAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MultipieceShipmentInternationalRequestToAddress> ToAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [JsonPropertyName("toAddress")]
        public MultipieceShipmentInternationalRequestToAddress ToAddress { get { return this.ToAddressOption; } set { this.ToAddressOption = new Option<MultipieceShipmentInternationalRequestToAddress>(value); } }

        /// <summary>
        /// Used to track the state of AdditionalAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<AdditionalAddressesInner>> AdditionalAddressesOption { get; private set; }

        /// <summary>
        /// A list of additional addresses associated with the shipment.  - Each object includes an address and its designated type, such as BROKER or other parties involved in customs or shipping processes.  - Additional address could be domestic or International both.  
        /// </summary>
        /// <value>A list of additional addresses associated with the shipment.  - Each object includes an address and its designated type, such as BROKER or other parties involved in customs or shipping processes.  - Additional address could be domestic or International both.  </value>
        [JsonPropertyName("additionalAddresses")]
        public List<AdditionalAddressesInner> AdditionalAddresses { get { return this.AdditionalAddressesOption; } set { this.AdditionalAddressesOption = new Option<List<AdditionalAddressesInner>>(value); } }

        /// <summary>
        /// Used to track the state of AltReturnAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MultipieceShipmentRequestAltReturnAddress> AltReturnAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets AltReturnAddress
        /// </summary>
        [JsonPropertyName("altReturnAddress")]
        public MultipieceShipmentRequestAltReturnAddress AltReturnAddress { get { return this.AltReturnAddressOption; } set { this.AltReturnAddressOption = new Option<MultipieceShipmentRequestAltReturnAddress>(value); } }

        /// <summary>
        /// Used to track the state of Customs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MultipieceShipmentInternationalRequestCustoms> CustomsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Customs
        /// </summary>
        [JsonPropertyName("customs")]
        public MultipieceShipmentInternationalRequestCustoms Customs { get { return this.CustomsOption; } set { this.CustomsOption = new Option<MultipieceShipmentInternationalRequestCustoms>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultipieceShipmentInternationalRequest {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  CarrierAccountId: ").Append(CarrierAccountId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  ShipmentOptions: ").Append(ShipmentOptions).Append("\n");
            sb.Append("  CarrierPayments: ").Append(CarrierPayments).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  MultiPieceParcels: ").Append(MultiPieceParcels).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("  AdditionalAddresses: ").Append(AdditionalAddresses).Append("\n");
            sb.Append("  AltReturnAddress: ").Append(AltReturnAddress).Append("\n");
            sb.Append("  Customs: ").Append(Customs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MultipieceShipmentInternationalRequest" />
    /// </summary>
    public class MultipieceShipmentInternationalRequestJsonConverter : JsonConverter<MultipieceShipmentInternationalRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="MultipieceShipmentInternationalRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MultipieceShipmentInternationalRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<MultipieceShipmentInternationalRequest.SizeEnum?> size = default;
            Option<MultipieceShipmentInternationalRequest.FormatEnum?> format = default;
            Option<MultipieceShipmentInternationalRequest.TypeEnum?> type = default;
            Option<MultipieceShipmentInternationalRequest.ContentTypeEnum?> contentType = default;
            Option<MultipieceShipmentInternationalRequestFromAddress> fromAddress = default;
            Option<string> carrierAccountId = default;
            Option<string> serviceId = default;
            Option<MultipieceShipmentInternationalRequestShipmentOptions> shipmentOptions = default;
            Option<List<CarrierPaymentsInner>> carrierPayments = default;
            Option<List<MultipieceShipmentRequestMetadataInner>> metadata = default;
            Option<List<MultipieceShipmentInternationalRequestMultiPieceParcelsInner>> multiPieceParcels = default;
            Option<MultipieceShipmentInternationalRequestToAddress> toAddress = default;
            Option<List<AdditionalAddressesInner>> additionalAddresses = default;
            Option<MultipieceShipmentRequestAltReturnAddress> altReturnAddress = default;
            Option<MultipieceShipmentInternationalRequestCustoms> customs = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "size":
                            string sizeRawValue = utf8JsonReader.GetString();
                            if (sizeRawValue != null)
                                size = new Option<MultipieceShipmentInternationalRequest.SizeEnum?>(MultipieceShipmentInternationalRequest.SizeEnumFromStringOrDefault(sizeRawValue));
                            break;
                        case "format":
                            string formatRawValue = utf8JsonReader.GetString();
                            if (formatRawValue != null)
                                format = new Option<MultipieceShipmentInternationalRequest.FormatEnum?>(MultipieceShipmentInternationalRequest.FormatEnumFromStringOrDefault(formatRawValue));
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<MultipieceShipmentInternationalRequest.TypeEnum?>(MultipieceShipmentInternationalRequest.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "contentType":
                            string contentTypeRawValue = utf8JsonReader.GetString();
                            if (contentTypeRawValue != null)
                                contentType = new Option<MultipieceShipmentInternationalRequest.ContentTypeEnum?>(MultipieceShipmentInternationalRequest.ContentTypeEnumFromStringOrDefault(contentTypeRawValue));
                            break;
                        case "fromAddress":
                            fromAddress = new Option<MultipieceShipmentInternationalRequestFromAddress>(JsonSerializer.Deserialize<MultipieceShipmentInternationalRequestFromAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "carrierAccountId":
                            carrierAccountId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "serviceId":
                            serviceId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shipmentOptions":
                            shipmentOptions = new Option<MultipieceShipmentInternationalRequestShipmentOptions>(JsonSerializer.Deserialize<MultipieceShipmentInternationalRequestShipmentOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "carrierPayments":
                            carrierPayments = new Option<List<CarrierPaymentsInner>>(JsonSerializer.Deserialize<List<CarrierPaymentsInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metadata":
                            metadata = new Option<List<MultipieceShipmentRequestMetadataInner>>(JsonSerializer.Deserialize<List<MultipieceShipmentRequestMetadataInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "multiPieceParcels":
                            multiPieceParcels = new Option<List<MultipieceShipmentInternationalRequestMultiPieceParcelsInner>>(JsonSerializer.Deserialize<List<MultipieceShipmentInternationalRequestMultiPieceParcelsInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "toAddress":
                            toAddress = new Option<MultipieceShipmentInternationalRequestToAddress>(JsonSerializer.Deserialize<MultipieceShipmentInternationalRequestToAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "additionalAddresses":
                            additionalAddresses = new Option<List<AdditionalAddressesInner>>(JsonSerializer.Deserialize<List<AdditionalAddressesInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "altReturnAddress":
                            altReturnAddress = new Option<MultipieceShipmentRequestAltReturnAddress>(JsonSerializer.Deserialize<MultipieceShipmentRequestAltReturnAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "customs":
                            customs = new Option<MultipieceShipmentInternationalRequestCustoms>(JsonSerializer.Deserialize<MultipieceShipmentInternationalRequestCustoms>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (fromAddress.IsSet && fromAddress.Value == null)
                throw new ArgumentNullException(nameof(fromAddress), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (carrierAccountId.IsSet && carrierAccountId.Value == null)
                throw new ArgumentNullException(nameof(carrierAccountId), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (serviceId.IsSet && serviceId.Value == null)
                throw new ArgumentNullException(nameof(serviceId), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (shipmentOptions.IsSet && shipmentOptions.Value == null)
                throw new ArgumentNullException(nameof(shipmentOptions), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (carrierPayments.IsSet && carrierPayments.Value == null)
                throw new ArgumentNullException(nameof(carrierPayments), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (multiPieceParcels.IsSet && multiPieceParcels.Value == null)
                throw new ArgumentNullException(nameof(multiPieceParcels), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (toAddress.IsSet && toAddress.Value == null)
                throw new ArgumentNullException(nameof(toAddress), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (additionalAddresses.IsSet && additionalAddresses.Value == null)
                throw new ArgumentNullException(nameof(additionalAddresses), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (altReturnAddress.IsSet && altReturnAddress.Value == null)
                throw new ArgumentNullException(nameof(altReturnAddress), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            if (customs.IsSet && customs.Value == null)
                throw new ArgumentNullException(nameof(customs), "Property is not nullable for class MultipieceShipmentInternationalRequest.");

            return new MultipieceShipmentInternationalRequest(size, format, type, contentType, fromAddress, carrierAccountId, serviceId, shipmentOptions, carrierPayments, metadata, multiPieceParcels, toAddress, additionalAddresses, altReturnAddress, customs);
        }

        /// <summary>
        /// Serializes a <see cref="MultipieceShipmentInternationalRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="multipieceShipmentInternationalRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MultipieceShipmentInternationalRequest multipieceShipmentInternationalRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, multipieceShipmentInternationalRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MultipieceShipmentInternationalRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="multipieceShipmentInternationalRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MultipieceShipmentInternationalRequest multipieceShipmentInternationalRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (multipieceShipmentInternationalRequest.FromAddressOption.IsSet && multipieceShipmentInternationalRequest.FromAddress == null)
                throw new ArgumentNullException(nameof(multipieceShipmentInternationalRequest.FromAddress), "Property is required for class MultipieceShipmentInternationalRequest.");

            if (multipieceShipmentInternationalRequest.CarrierAccountIdOption.IsSet && multipieceShipmentInternationalRequest.CarrierAccountId == null)
                throw new ArgumentNullException(nameof(multipieceShipmentInternationalRequest.CarrierAccountId), "Property is required for class MultipieceShipmentInternationalRequest.");

            if (multipieceShipmentInternationalRequest.ServiceIdOption.IsSet && multipieceShipmentInternationalRequest.ServiceId == null)
                throw new ArgumentNullException(nameof(multipieceShipmentInternationalRequest.ServiceId), "Property is required for class MultipieceShipmentInternationalRequest.");

            if (multipieceShipmentInternationalRequest.ShipmentOptionsOption.IsSet && multipieceShipmentInternationalRequest.ShipmentOptions == null)
                throw new ArgumentNullException(nameof(multipieceShipmentInternationalRequest.ShipmentOptions), "Property is required for class MultipieceShipmentInternationalRequest.");

            if (multipieceShipmentInternationalRequest.CarrierPaymentsOption.IsSet && multipieceShipmentInternationalRequest.CarrierPayments == null)
                throw new ArgumentNullException(nameof(multipieceShipmentInternationalRequest.CarrierPayments), "Property is required for class MultipieceShipmentInternationalRequest.");

            if (multipieceShipmentInternationalRequest.MetadataOption.IsSet && multipieceShipmentInternationalRequest.Metadata == null)
                throw new ArgumentNullException(nameof(multipieceShipmentInternationalRequest.Metadata), "Property is required for class MultipieceShipmentInternationalRequest.");

            if (multipieceShipmentInternationalRequest.MultiPieceParcelsOption.IsSet && multipieceShipmentInternationalRequest.MultiPieceParcels == null)
                throw new ArgumentNullException(nameof(multipieceShipmentInternationalRequest.MultiPieceParcels), "Property is required for class MultipieceShipmentInternationalRequest.");

            if (multipieceShipmentInternationalRequest.ToAddressOption.IsSet && multipieceShipmentInternationalRequest.ToAddress == null)
                throw new ArgumentNullException(nameof(multipieceShipmentInternationalRequest.ToAddress), "Property is required for class MultipieceShipmentInternationalRequest.");

            if (multipieceShipmentInternationalRequest.AdditionalAddressesOption.IsSet && multipieceShipmentInternationalRequest.AdditionalAddresses == null)
                throw new ArgumentNullException(nameof(multipieceShipmentInternationalRequest.AdditionalAddresses), "Property is required for class MultipieceShipmentInternationalRequest.");

            if (multipieceShipmentInternationalRequest.AltReturnAddressOption.IsSet && multipieceShipmentInternationalRequest.AltReturnAddress == null)
                throw new ArgumentNullException(nameof(multipieceShipmentInternationalRequest.AltReturnAddress), "Property is required for class MultipieceShipmentInternationalRequest.");

            if (multipieceShipmentInternationalRequest.CustomsOption.IsSet && multipieceShipmentInternationalRequest.Customs == null)
                throw new ArgumentNullException(nameof(multipieceShipmentInternationalRequest.Customs), "Property is required for class MultipieceShipmentInternationalRequest.");

            var sizeRawValue = MultipieceShipmentInternationalRequest.SizeEnumToJsonValue(multipieceShipmentInternationalRequest.SizeOption.Value.Value);
            writer.WriteString("size", sizeRawValue);
            var formatRawValue = MultipieceShipmentInternationalRequest.FormatEnumToJsonValue(multipieceShipmentInternationalRequest.FormatOption.Value.Value);
            writer.WriteString("format", formatRawValue);
            var typeRawValue = MultipieceShipmentInternationalRequest.TypeEnumToJsonValue(multipieceShipmentInternationalRequest.TypeOption.Value.Value);
            writer.WriteString("type", typeRawValue);
            var contentTypeRawValue = MultipieceShipmentInternationalRequest.ContentTypeEnumToJsonValue(multipieceShipmentInternationalRequest.ContentTypeOption.Value.Value);
            writer.WriteString("contentType", contentTypeRawValue);
            if (multipieceShipmentInternationalRequest.FromAddressOption.IsSet)
            {
                writer.WritePropertyName("fromAddress");
                JsonSerializer.Serialize(writer, multipieceShipmentInternationalRequest.FromAddress, jsonSerializerOptions);
            }
            if (multipieceShipmentInternationalRequest.CarrierAccountIdOption.IsSet)
                writer.WriteString("carrierAccountId", multipieceShipmentInternationalRequest.CarrierAccountId);

            if (multipieceShipmentInternationalRequest.ServiceIdOption.IsSet)
                writer.WriteString("serviceId", multipieceShipmentInternationalRequest.ServiceId);

            if (multipieceShipmentInternationalRequest.ShipmentOptionsOption.IsSet)
            {
                writer.WritePropertyName("shipmentOptions");
                JsonSerializer.Serialize(writer, multipieceShipmentInternationalRequest.ShipmentOptions, jsonSerializerOptions);
            }
            if (multipieceShipmentInternationalRequest.CarrierPaymentsOption.IsSet)
            {
                writer.WritePropertyName("carrierPayments");
                JsonSerializer.Serialize(writer, multipieceShipmentInternationalRequest.CarrierPayments, jsonSerializerOptions);
            }
            if (multipieceShipmentInternationalRequest.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, multipieceShipmentInternationalRequest.Metadata, jsonSerializerOptions);
            }
            if (multipieceShipmentInternationalRequest.MultiPieceParcelsOption.IsSet)
            {
                writer.WritePropertyName("multiPieceParcels");
                JsonSerializer.Serialize(writer, multipieceShipmentInternationalRequest.MultiPieceParcels, jsonSerializerOptions);
            }
            if (multipieceShipmentInternationalRequest.ToAddressOption.IsSet)
            {
                writer.WritePropertyName("toAddress");
                JsonSerializer.Serialize(writer, multipieceShipmentInternationalRequest.ToAddress, jsonSerializerOptions);
            }
            if (multipieceShipmentInternationalRequest.AdditionalAddressesOption.IsSet)
            {
                writer.WritePropertyName("additionalAddresses");
                JsonSerializer.Serialize(writer, multipieceShipmentInternationalRequest.AdditionalAddresses, jsonSerializerOptions);
            }
            if (multipieceShipmentInternationalRequest.AltReturnAddressOption.IsSet)
            {
                writer.WritePropertyName("altReturnAddress");
                JsonSerializer.Serialize(writer, multipieceShipmentInternationalRequest.AltReturnAddress, jsonSerializerOptions);
            }
            if (multipieceShipmentInternationalRequest.CustomsOption.IsSet)
            {
                writer.WritePropertyName("customs");
                JsonSerializer.Serialize(writer, multipieceShipmentInternationalRequest.Customs, jsonSerializerOptions);
            }
        }
    }
}
