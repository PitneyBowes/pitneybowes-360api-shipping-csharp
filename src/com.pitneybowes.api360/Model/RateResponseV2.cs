// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// RateResponseV2
    /// </summary>
    public partial class RateResponseV2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RateResponseV2" /> class.
        /// </summary>
        /// <param name="baseCharge">The base service charge is payable to the carrier, excluding special service charges.</param>
        /// <param name="carrier">Carrier is a service used to transport the parcels or couriers from one place to another.</param>
        /// <param name="currencyCode">A three-character (all uppercase letter) symbol of a currency according to the international ISO standard.&lt;br /&gt; As a rule, the first two letters denote the name of the country, and the third letter, the name of the currency thereof. For example, for US - the currency is Dollars and code is USD. Similarly for Canada, the currencycode is CAD, and for India, it is INR. </param>
        /// <param name="parcelType">Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.&lt;br /&gt; ParcelType have categories like Package, Envelopes, Paks, Boxes, Tube, etc.</param>
        /// <param name="serviceId">The unique identifier given to the carrier specific service.</param>
        /// <param name="surcharges">Additional fees or surcharges applied to the shipment. Each object in the array represents a specific surcharge and its associated fee.  The &#x60;name&#x60; field must be one of the supported surcharge types from the respective carrier.  **Supported Surcharge Names by Carrier:**  | Carrier       | Surcharge Names                                                                 | |- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | DHL Express   | FUEL, GO_GREEN_BASIC, OVERSIZE, PREMIUM, RURAL, TOLL                            | | FedEx         | ANCILLARY_FEE, CANADIAN_DESTINATION, DELIVERY_AREA, DELIVERY_CONFIRMATION, FUEL, NON_MACHINABLE, OTHER, OUT_OF_DELIVERY_AREA, OUT_OF_PICKUP_AREA, OVERSIZE, RESIDENTIAL_DELIVERY, RESIDENTIAL_PICKUP | | UPS           | DELIVERY_AREA, EXTENDED_AREA, FUEL, LARGE_PACKAGE, RESIDENTIAL, SHIPPER_PAYS_DUTY_TAX | | USPS          | nonmachinable, oversize                                                         |    </param>
        /// <param name="totalCarrierCharge">The total amount payable to the carrier, including special service fees, surcharges, and any international taxes and duties, except as noted below:</param>
        /// <param name="deliveryCommitment">deliveryCommitment</param>
        /// <param name="inductionPostalCode">The postal code where the shipment is tendered to the carrier. If an induction postal code is specified in the \&quot;fromAddress\&quot;, it will be used for rate calculations and determining manifest eligibility instead of the standard postal code. If not specified, the postal code from the \&quot;fromAddress\&quot; will be used.</param>
        /// <param name="destinationZone">This is the postal or delivery zone assigned to the shipment&#39;s destination by the carrier. This field is returned for USPS as of now.</param>
        [JsonConstructor]
        public RateResponseV2(Option<decimal?> baseCharge = default, Option<string?> carrier = default, Option<string?> currencyCode = default, Option<string?> parcelType = default, Option<string?> serviceId = default, Option<List<RateResponseV2SurchargesInner>?> surcharges = default, Option<decimal?> totalCarrierCharge = default, Option<RateResponseV2DeliveryCommitment?> deliveryCommitment = default, Option<string?> inductionPostalCode = default, Option<string?> destinationZone = default)
        {
            BaseChargeOption = baseCharge;
            CarrierOption = carrier;
            CurrencyCodeOption = currencyCode;
            ParcelTypeOption = parcelType;
            ServiceIdOption = serviceId;
            SurchargesOption = surcharges;
            TotalCarrierChargeOption = totalCarrierCharge;
            DeliveryCommitmentOption = deliveryCommitment;
            InductionPostalCodeOption = inductionPostalCode;
            DestinationZoneOption = destinationZone;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BaseCharge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> BaseChargeOption { get; private set; }

        /// <summary>
        /// The base service charge is payable to the carrier, excluding special service charges.
        /// </summary>
        /// <value>The base service charge is payable to the carrier, excluding special service charges.</value>
        /* <example>16.15</example> */
        [JsonPropertyName("baseCharge")]
        public decimal? BaseCharge { get { return this.BaseChargeOption; } set { this.BaseChargeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Carrier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CarrierOption { get; private set; }

        /// <summary>
        /// Carrier is a service used to transport the parcels or couriers from one place to another.
        /// </summary>
        /// <value>Carrier is a service used to transport the parcels or couriers from one place to another.</value>
        /* <example>PUROLATOR</example> */
        [JsonPropertyName("carrier")]
        public string? Carrier { get { return this.CarrierOption; } set { this.CarrierOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// A three-character (all uppercase letter) symbol of a currency according to the international ISO standard.&lt;br /&gt; As a rule, the first two letters denote the name of the country, and the third letter, the name of the currency thereof. For example, for US - the currency is Dollars and code is USD. Similarly for Canada, the currencycode is CAD, and for India, it is INR. 
        /// </summary>
        /// <value>A three-character (all uppercase letter) symbol of a currency according to the international ISO standard.&lt;br /&gt; As a rule, the first two letters denote the name of the country, and the third letter, the name of the currency thereof. For example, for US - the currency is Dollars and code is USD. Similarly for Canada, the currencycode is CAD, and for India, it is INR. </value>
        /* <example>CAD</example> */
        [JsonPropertyName("currencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParcelType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParcelTypeOption { get; private set; }

        /// <summary>
        /// Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.&lt;br /&gt; ParcelType have categories like Package, Envelopes, Paks, Boxes, Tube, etc.
        /// </summary>
        /// <value>Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.&lt;br /&gt; ParcelType have categories like Package, Envelopes, Paks, Boxes, Tube, etc.</value>
        /* <example>PKG</example> */
        [JsonPropertyName("parcelType")]
        public string? ParcelType { get { return this.ParcelTypeOption; } set { this.ParcelTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServiceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ServiceIdOption { get; private set; }

        /// <summary>
        /// The unique identifier given to the carrier specific service.
        /// </summary>
        /// <value>The unique identifier given to the carrier specific service.</value>
        /* <example>GRD</example> */
        [JsonPropertyName("serviceId")]
        public string? ServiceId { get { return this.ServiceIdOption; } set { this.ServiceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Surcharges
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<RateResponseV2SurchargesInner>?> SurchargesOption { get; private set; }

        /// <summary>
        /// Additional fees or surcharges applied to the shipment. Each object in the array represents a specific surcharge and its associated fee.  The &#x60;name&#x60; field must be one of the supported surcharge types from the respective carrier.  **Supported Surcharge Names by Carrier:**  | Carrier       | Surcharge Names                                                                 | |- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | DHL Express   | FUEL, GO_GREEN_BASIC, OVERSIZE, PREMIUM, RURAL, TOLL                            | | FedEx         | ANCILLARY_FEE, CANADIAN_DESTINATION, DELIVERY_AREA, DELIVERY_CONFIRMATION, FUEL, NON_MACHINABLE, OTHER, OUT_OF_DELIVERY_AREA, OUT_OF_PICKUP_AREA, OVERSIZE, RESIDENTIAL_DELIVERY, RESIDENTIAL_PICKUP | | UPS           | DELIVERY_AREA, EXTENDED_AREA, FUEL, LARGE_PACKAGE, RESIDENTIAL, SHIPPER_PAYS_DUTY_TAX | | USPS          | nonmachinable, oversize                                                         |    
        /// </summary>
        /// <value>Additional fees or surcharges applied to the shipment. Each object in the array represents a specific surcharge and its associated fee.  The &#x60;name&#x60; field must be one of the supported surcharge types from the respective carrier.  **Supported Surcharge Names by Carrier:**  | Carrier       | Surcharge Names                                                                 | |- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -| | DHL Express   | FUEL, GO_GREEN_BASIC, OVERSIZE, PREMIUM, RURAL, TOLL                            | | FedEx         | ANCILLARY_FEE, CANADIAN_DESTINATION, DELIVERY_AREA, DELIVERY_CONFIRMATION, FUEL, NON_MACHINABLE, OTHER, OUT_OF_DELIVERY_AREA, OUT_OF_PICKUP_AREA, OVERSIZE, RESIDENTIAL_DELIVERY, RESIDENTIAL_PICKUP | | UPS           | DELIVERY_AREA, EXTENDED_AREA, FUEL, LARGE_PACKAGE, RESIDENTIAL, SHIPPER_PAYS_DUTY_TAX | | USPS          | nonmachinable, oversize                                                         |    </value>
        [JsonPropertyName("surcharges")]
        public List<RateResponseV2SurchargesInner>? Surcharges { get { return this.SurchargesOption; } set { this.SurchargesOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalCarrierCharge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TotalCarrierChargeOption { get; private set; }

        /// <summary>
        /// The total amount payable to the carrier, including special service fees, surcharges, and any international taxes and duties, except as noted below:
        /// </summary>
        /// <value>The total amount payable to the carrier, including special service fees, surcharges, and any international taxes and duties, except as noted below:</value>
        /* <example>22.46</example> */
        [JsonPropertyName("totalCarrierCharge")]
        public decimal? TotalCarrierCharge { get { return this.TotalCarrierChargeOption; } set { this.TotalCarrierChargeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryCommitment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RateResponseV2DeliveryCommitment?> DeliveryCommitmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryCommitment
        /// </summary>
        [JsonPropertyName("deliveryCommitment")]
        public RateResponseV2DeliveryCommitment? DeliveryCommitment { get { return this.DeliveryCommitmentOption; } set { this.DeliveryCommitmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of InductionPostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InductionPostalCodeOption { get; private set; }

        /// <summary>
        /// The postal code where the shipment is tendered to the carrier. If an induction postal code is specified in the \&quot;fromAddress\&quot;, it will be used for rate calculations and determining manifest eligibility instead of the standard postal code. If not specified, the postal code from the \&quot;fromAddress\&quot; will be used.
        /// </summary>
        /// <value>The postal code where the shipment is tendered to the carrier. If an induction postal code is specified in the \&quot;fromAddress\&quot;, it will be used for rate calculations and determining manifest eligibility instead of the standard postal code. If not specified, the postal code from the \&quot;fromAddress\&quot; will be used.</value>
        /* <example>06905</example> */
        [JsonPropertyName("inductionPostalCode")]
        public string? InductionPostalCode { get { return this.InductionPostalCodeOption; } set { this.InductionPostalCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DestinationZone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DestinationZoneOption { get; private set; }

        /// <summary>
        /// This is the postal or delivery zone assigned to the shipment&#39;s destination by the carrier. This field is returned for USPS as of now.
        /// </summary>
        /// <value>This is the postal or delivery zone assigned to the shipment&#39;s destination by the carrier. This field is returned for USPS as of now.</value>
        /* <example>1</example> */
        [JsonPropertyName("destinationZone")]
        public string? DestinationZone { get { return this.DestinationZoneOption; } set { this.DestinationZoneOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RateResponseV2 {\n");
            sb.Append("  BaseCharge: ").Append(BaseCharge).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  Surcharges: ").Append(Surcharges).Append("\n");
            sb.Append("  TotalCarrierCharge: ").Append(TotalCarrierCharge).Append("\n");
            sb.Append("  DeliveryCommitment: ").Append(DeliveryCommitment).Append("\n");
            sb.Append("  InductionPostalCode: ").Append(InductionPostalCode).Append("\n");
            sb.Append("  DestinationZone: ").Append(DestinationZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RateResponseV2" />
    /// </summary>
    public class RateResponseV2JsonConverter : JsonConverter<RateResponseV2>
    {
        /// <summary>
        /// Deserializes json to <see cref="RateResponseV2" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RateResponseV2 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> baseCharge = default;
            Option<string?> carrier = default;
            Option<string?> currencyCode = default;
            Option<string?> parcelType = default;
            Option<string?> serviceId = default;
            Option<List<RateResponseV2SurchargesInner>?> surcharges = default;
            Option<decimal?> totalCarrierCharge = default;
            Option<RateResponseV2DeliveryCommitment?> deliveryCommitment = default;
            Option<string?> inductionPostalCode = default;
            Option<string?> destinationZone = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "baseCharge":
                            baseCharge = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "carrier":
                            carrier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parcelType":
                            parcelType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "serviceId":
                            serviceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "surcharges":
                            surcharges = new Option<List<RateResponseV2SurchargesInner>?>(JsonSerializer.Deserialize<List<RateResponseV2SurchargesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "totalCarrierCharge":
                            totalCarrierCharge = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "deliveryCommitment":
                            deliveryCommitment = new Option<RateResponseV2DeliveryCommitment?>(JsonSerializer.Deserialize<RateResponseV2DeliveryCommitment>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "inductionPostalCode":
                            inductionPostalCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "destinationZone":
                            destinationZone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (baseCharge.IsSet && baseCharge.Value == null)
                throw new ArgumentNullException(nameof(baseCharge), "Property is not nullable for class RateResponseV2.");

            if (carrier.IsSet && carrier.Value == null)
                throw new ArgumentNullException(nameof(carrier), "Property is not nullable for class RateResponseV2.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class RateResponseV2.");

            if (parcelType.IsSet && parcelType.Value == null)
                throw new ArgumentNullException(nameof(parcelType), "Property is not nullable for class RateResponseV2.");

            if (serviceId.IsSet && serviceId.Value == null)
                throw new ArgumentNullException(nameof(serviceId), "Property is not nullable for class RateResponseV2.");

            if (surcharges.IsSet && surcharges.Value == null)
                throw new ArgumentNullException(nameof(surcharges), "Property is not nullable for class RateResponseV2.");

            if (totalCarrierCharge.IsSet && totalCarrierCharge.Value == null)
                throw new ArgumentNullException(nameof(totalCarrierCharge), "Property is not nullable for class RateResponseV2.");

            if (deliveryCommitment.IsSet && deliveryCommitment.Value == null)
                throw new ArgumentNullException(nameof(deliveryCommitment), "Property is not nullable for class RateResponseV2.");

            if (inductionPostalCode.IsSet && inductionPostalCode.Value == null)
                throw new ArgumentNullException(nameof(inductionPostalCode), "Property is not nullable for class RateResponseV2.");

            if (destinationZone.IsSet && destinationZone.Value == null)
                throw new ArgumentNullException(nameof(destinationZone), "Property is not nullable for class RateResponseV2.");

            return new RateResponseV2(baseCharge, carrier, currencyCode, parcelType, serviceId, surcharges, totalCarrierCharge, deliveryCommitment, inductionPostalCode, destinationZone);
        }

        /// <summary>
        /// Serializes a <see cref="RateResponseV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rateResponseV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RateResponseV2 rateResponseV2, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rateResponseV2, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RateResponseV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rateResponseV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RateResponseV2 rateResponseV2, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rateResponseV2.CarrierOption.IsSet && rateResponseV2.Carrier == null)
                throw new ArgumentNullException(nameof(rateResponseV2.Carrier), "Property is required for class RateResponseV2.");

            if (rateResponseV2.CurrencyCodeOption.IsSet && rateResponseV2.CurrencyCode == null)
                throw new ArgumentNullException(nameof(rateResponseV2.CurrencyCode), "Property is required for class RateResponseV2.");

            if (rateResponseV2.ParcelTypeOption.IsSet && rateResponseV2.ParcelType == null)
                throw new ArgumentNullException(nameof(rateResponseV2.ParcelType), "Property is required for class RateResponseV2.");

            if (rateResponseV2.ServiceIdOption.IsSet && rateResponseV2.ServiceId == null)
                throw new ArgumentNullException(nameof(rateResponseV2.ServiceId), "Property is required for class RateResponseV2.");

            if (rateResponseV2.SurchargesOption.IsSet && rateResponseV2.Surcharges == null)
                throw new ArgumentNullException(nameof(rateResponseV2.Surcharges), "Property is required for class RateResponseV2.");

            if (rateResponseV2.DeliveryCommitmentOption.IsSet && rateResponseV2.DeliveryCommitment == null)
                throw new ArgumentNullException(nameof(rateResponseV2.DeliveryCommitment), "Property is required for class RateResponseV2.");

            if (rateResponseV2.InductionPostalCodeOption.IsSet && rateResponseV2.InductionPostalCode == null)
                throw new ArgumentNullException(nameof(rateResponseV2.InductionPostalCode), "Property is required for class RateResponseV2.");

            if (rateResponseV2.DestinationZoneOption.IsSet && rateResponseV2.DestinationZone == null)
                throw new ArgumentNullException(nameof(rateResponseV2.DestinationZone), "Property is required for class RateResponseV2.");

            if (rateResponseV2.BaseChargeOption.IsSet)
                writer.WriteNumber("baseCharge", rateResponseV2.BaseChargeOption.Value!.Value);

            if (rateResponseV2.CarrierOption.IsSet)
                writer.WriteString("carrier", rateResponseV2.Carrier);

            if (rateResponseV2.CurrencyCodeOption.IsSet)
                writer.WriteString("currencyCode", rateResponseV2.CurrencyCode);

            if (rateResponseV2.ParcelTypeOption.IsSet)
                writer.WriteString("parcelType", rateResponseV2.ParcelType);

            if (rateResponseV2.ServiceIdOption.IsSet)
                writer.WriteString("serviceId", rateResponseV2.ServiceId);

            if (rateResponseV2.SurchargesOption.IsSet)
            {
                writer.WritePropertyName("surcharges");
                JsonSerializer.Serialize(writer, rateResponseV2.Surcharges, jsonSerializerOptions);
            }
            if (rateResponseV2.TotalCarrierChargeOption.IsSet)
                writer.WriteNumber("totalCarrierCharge", rateResponseV2.TotalCarrierChargeOption.Value!.Value);

            if (rateResponseV2.DeliveryCommitmentOption.IsSet)
            {
                writer.WritePropertyName("deliveryCommitment");
                JsonSerializer.Serialize(writer, rateResponseV2.DeliveryCommitment, jsonSerializerOptions);
            }
            if (rateResponseV2.InductionPostalCodeOption.IsSet)
                writer.WriteString("inductionPostalCode", rateResponseV2.InductionPostalCode);

            if (rateResponseV2.DestinationZoneOption.IsSet)
                writer.WriteString("destinationZone", rateResponseV2.DestinationZone);
        }
    }
}
