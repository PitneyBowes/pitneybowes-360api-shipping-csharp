// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// ErrCoversheetResponseToAddress
    /// </summary>
    public partial class ErrCoversheetResponseToAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrCoversheetResponseToAddress" /> class.
        /// </summary>
        /// <param name="name">Name of the person or entity.</param>
        /// <param name="addressLine1">First line of the address.</param>
        /// <param name="addressLine2">The addressLine2 contains Street address or Landmark (if any).</param>
        /// <param name="addressLine3">The addressLine3 contains P.O. Box (if any) near the address.</param>
        /// <param name="cityTown">City or town of the address.</param>
        /// <param name="stateProvince">State or province of the address. It is the &#x60;2-letter&#x60; State or Province Code for US address(es).</param>
        /// <param name="postalCode">The Postal Code or ZIP Code of the address. &lt;br /&gt; For US addresses, use only &#x60;9-digit&#x60; ZIP Code.</param>
        /// <param name="countryCode">Country code of the address.</param>
        /// <param name="phone">Phone number associated with the address.</param>
        /// <param name="company">The name of the company, in case if the receiver address is not residential. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</param>
        /// <param name="email">This must be recipient’s valid email. Email is required if the customer is using GoFor Carrier. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; </param>
        /// <param name="residential">The specified address can be Residential or Official. In case if the address is Residential, the boolean value is &#39;true&#39;, else it is &#39;false&#39;.</param>
        [JsonConstructor]
        public ErrCoversheetResponseToAddress(Option<string?> name = default, Option<string?> addressLine1 = default, Option<string?> addressLine2 = default, Option<string?> addressLine3 = default, Option<string?> cityTown = default, Option<string?> stateProvince = default, Option<string?> postalCode = default, Option<string?> countryCode = default, Option<string?> phone = default, Option<string?> company = default, Option<string?> email = default, Option<bool?> residential = default)
        {
            NameOption = name;
            AddressLine1Option = addressLine1;
            AddressLine2Option = addressLine2;
            AddressLine3Option = addressLine3;
            CityTownOption = cityTown;
            StateProvinceOption = stateProvince;
            PostalCodeOption = postalCode;
            CountryCodeOption = countryCode;
            PhoneOption = phone;
            CompanyOption = company;
            EmailOption = email;
            ResidentialOption = residential;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Name of the person or entity.
        /// </summary>
        /// <value>Name of the person or entity.</value>
        /* <example>test_user</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of AddressLine1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine1Option { get; private set; }

        /// <summary>
        /// First line of the address.
        /// </summary>
        /// <value>First line of the address.</value>
        /* <example>27 Waterview Dr</example> */
        [JsonPropertyName("addressLine1")]
        public string? AddressLine1 { get { return this.AddressLine1Option; } set { this.AddressLine1Option = new(value); } }

        /// <summary>
        /// Used to track the state of AddressLine2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine2Option { get; private set; }

        /// <summary>
        /// The addressLine2 contains Street address or Landmark (if any).
        /// </summary>
        /// <value>The addressLine2 contains Street address or Landmark (if any).</value>
        /* <example>near abc street</example> */
        [JsonPropertyName("addressLine2")]
        public string? AddressLine2 { get { return this.AddressLine2Option; } set { this.AddressLine2Option = new(value); } }

        /// <summary>
        /// Used to track the state of AddressLine3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine3Option { get; private set; }

        /// <summary>
        /// The addressLine3 contains P.O. Box (if any) near the address.
        /// </summary>
        /// <value>The addressLine3 contains P.O. Box (if any) near the address.</value>
        /* <example>near xyz street</example> */
        [JsonPropertyName("addressLine3")]
        public string? AddressLine3 { get { return this.AddressLine3Option; } set { this.AddressLine3Option = new(value); } }

        /// <summary>
        /// Used to track the state of CityTown
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CityTownOption { get; private set; }

        /// <summary>
        /// City or town of the address.
        /// </summary>
        /// <value>City or town of the address.</value>
        /* <example>Shelton</example> */
        [JsonPropertyName("cityTown")]
        public string? CityTown { get { return this.CityTownOption; } set { this.CityTownOption = new(value); } }

        /// <summary>
        /// Used to track the state of StateProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateProvinceOption { get; private set; }

        /// <summary>
        /// State or province of the address. It is the &#x60;2-letter&#x60; State or Province Code for US address(es).
        /// </summary>
        /// <value>State or province of the address. It is the &#x60;2-letter&#x60; State or Province Code for US address(es).</value>
        /* <example>CT</example> */
        [JsonPropertyName("stateProvince")]
        public string? StateProvince { get { return this.StateProvinceOption; } set { this.StateProvinceOption = new(value); } }

        /// <summary>
        /// Used to track the state of PostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PostalCodeOption { get; private set; }

        /// <summary>
        /// The Postal Code or ZIP Code of the address. &lt;br /&gt; For US addresses, use only &#x60;9-digit&#x60; ZIP Code.
        /// </summary>
        /// <value>The Postal Code or ZIP Code of the address. &lt;br /&gt; For US addresses, use only &#x60;9-digit&#x60; ZIP Code.</value>
        /* <example>06484-4361</example> */
        [JsonPropertyName("postalCode")]
        public string? PostalCode { get { return this.PostalCodeOption; } set { this.PostalCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryCodeOption { get; private set; }

        /// <summary>
        /// Country code of the address.
        /// </summary>
        /// <value>Country code of the address.</value>
        /* <example>US</example> */
        [JsonPropertyName("countryCode")]
        public string? CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneOption { get; private set; }

        /// <summary>
        /// Phone number associated with the address.
        /// </summary>
        /// <value>Phone number associated with the address.</value>
        /* <example>203-555-1213</example> */
        [JsonPropertyName("phone")]
        public string? Phone { get { return this.PhoneOption; } set { this.PhoneOption = new(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CompanyOption { get; private set; }

        /// <summary>
        /// The name of the company, in case if the receiver address is not residential. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>The name of the company, in case if the receiver address is not residential. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /* <example>PB</example> */
        [JsonPropertyName("company")]
        public string? Company { get { return this.CompanyOption; } set { this.CompanyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// This must be recipient’s valid email. Email is required if the customer is using GoFor Carrier. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; 
        /// </summary>
        /// <value>This must be recipient’s valid email. Email is required if the customer is using GoFor Carrier. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; </value>
        /* <example>testuser@gmail.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Residential
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ResidentialOption { get; private set; }

        /// <summary>
        /// The specified address can be Residential or Official. In case if the address is Residential, the boolean value is &#39;true&#39;, else it is &#39;false&#39;.
        /// </summary>
        /// <value>The specified address can be Residential or Official. In case if the address is Residential, the boolean value is &#39;true&#39;, else it is &#39;false&#39;.</value>
        [JsonPropertyName("residential")]
        public bool? Residential { get { return this.ResidentialOption; } set { this.ResidentialOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrCoversheetResponseToAddress {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  CityTown: ").Append(CityTown).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Residential: ").Append(Residential).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ErrCoversheetResponseToAddress" />
    /// </summary>
    public class ErrCoversheetResponseToAddressJsonConverter : JsonConverter<ErrCoversheetResponseToAddress>
    {
        /// <summary>
        /// Deserializes json to <see cref="ErrCoversheetResponseToAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ErrCoversheetResponseToAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> addressLine1 = default;
            Option<string?> addressLine2 = default;
            Option<string?> addressLine3 = default;
            Option<string?> cityTown = default;
            Option<string?> stateProvince = default;
            Option<string?> postalCode = default;
            Option<string?> countryCode = default;
            Option<string?> phone = default;
            Option<string?> company = default;
            Option<string?> email = default;
            Option<bool?> residential = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressLine1":
                            addressLine1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressLine2":
                            addressLine2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressLine3":
                            addressLine3 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cityTown":
                            cityTown = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stateProvince":
                            stateProvince = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "postalCode":
                            postalCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "countryCode":
                            countryCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "phone":
                            phone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "company":
                            company = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "residential":
                            residential = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ErrCoversheetResponseToAddress.");

            if (addressLine1.IsSet && addressLine1.Value == null)
                throw new ArgumentNullException(nameof(addressLine1), "Property is not nullable for class ErrCoversheetResponseToAddress.");

            if (addressLine2.IsSet && addressLine2.Value == null)
                throw new ArgumentNullException(nameof(addressLine2), "Property is not nullable for class ErrCoversheetResponseToAddress.");

            if (addressLine3.IsSet && addressLine3.Value == null)
                throw new ArgumentNullException(nameof(addressLine3), "Property is not nullable for class ErrCoversheetResponseToAddress.");

            if (cityTown.IsSet && cityTown.Value == null)
                throw new ArgumentNullException(nameof(cityTown), "Property is not nullable for class ErrCoversheetResponseToAddress.");

            if (stateProvince.IsSet && stateProvince.Value == null)
                throw new ArgumentNullException(nameof(stateProvince), "Property is not nullable for class ErrCoversheetResponseToAddress.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class ErrCoversheetResponseToAddress.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class ErrCoversheetResponseToAddress.");

            if (phone.IsSet && phone.Value == null)
                throw new ArgumentNullException(nameof(phone), "Property is not nullable for class ErrCoversheetResponseToAddress.");

            if (company.IsSet && company.Value == null)
                throw new ArgumentNullException(nameof(company), "Property is not nullable for class ErrCoversheetResponseToAddress.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class ErrCoversheetResponseToAddress.");

            if (residential.IsSet && residential.Value == null)
                throw new ArgumentNullException(nameof(residential), "Property is not nullable for class ErrCoversheetResponseToAddress.");

            return new ErrCoversheetResponseToAddress(name, addressLine1, addressLine2, addressLine3, cityTown, stateProvince, postalCode, countryCode, phone, company, email, residential);
        }

        /// <summary>
        /// Serializes a <see cref="ErrCoversheetResponseToAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errCoversheetResponseToAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ErrCoversheetResponseToAddress errCoversheetResponseToAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, errCoversheetResponseToAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ErrCoversheetResponseToAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errCoversheetResponseToAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ErrCoversheetResponseToAddress errCoversheetResponseToAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (errCoversheetResponseToAddress.NameOption.IsSet && errCoversheetResponseToAddress.Name == null)
                throw new ArgumentNullException(nameof(errCoversheetResponseToAddress.Name), "Property is required for class ErrCoversheetResponseToAddress.");

            if (errCoversheetResponseToAddress.AddressLine1Option.IsSet && errCoversheetResponseToAddress.AddressLine1 == null)
                throw new ArgumentNullException(nameof(errCoversheetResponseToAddress.AddressLine1), "Property is required for class ErrCoversheetResponseToAddress.");

            if (errCoversheetResponseToAddress.AddressLine2Option.IsSet && errCoversheetResponseToAddress.AddressLine2 == null)
                throw new ArgumentNullException(nameof(errCoversheetResponseToAddress.AddressLine2), "Property is required for class ErrCoversheetResponseToAddress.");

            if (errCoversheetResponseToAddress.AddressLine3Option.IsSet && errCoversheetResponseToAddress.AddressLine3 == null)
                throw new ArgumentNullException(nameof(errCoversheetResponseToAddress.AddressLine3), "Property is required for class ErrCoversheetResponseToAddress.");

            if (errCoversheetResponseToAddress.CityTownOption.IsSet && errCoversheetResponseToAddress.CityTown == null)
                throw new ArgumentNullException(nameof(errCoversheetResponseToAddress.CityTown), "Property is required for class ErrCoversheetResponseToAddress.");

            if (errCoversheetResponseToAddress.StateProvinceOption.IsSet && errCoversheetResponseToAddress.StateProvince == null)
                throw new ArgumentNullException(nameof(errCoversheetResponseToAddress.StateProvince), "Property is required for class ErrCoversheetResponseToAddress.");

            if (errCoversheetResponseToAddress.PostalCodeOption.IsSet && errCoversheetResponseToAddress.PostalCode == null)
                throw new ArgumentNullException(nameof(errCoversheetResponseToAddress.PostalCode), "Property is required for class ErrCoversheetResponseToAddress.");

            if (errCoversheetResponseToAddress.CountryCodeOption.IsSet && errCoversheetResponseToAddress.CountryCode == null)
                throw new ArgumentNullException(nameof(errCoversheetResponseToAddress.CountryCode), "Property is required for class ErrCoversheetResponseToAddress.");

            if (errCoversheetResponseToAddress.PhoneOption.IsSet && errCoversheetResponseToAddress.Phone == null)
                throw new ArgumentNullException(nameof(errCoversheetResponseToAddress.Phone), "Property is required for class ErrCoversheetResponseToAddress.");

            if (errCoversheetResponseToAddress.CompanyOption.IsSet && errCoversheetResponseToAddress.Company == null)
                throw new ArgumentNullException(nameof(errCoversheetResponseToAddress.Company), "Property is required for class ErrCoversheetResponseToAddress.");

            if (errCoversheetResponseToAddress.EmailOption.IsSet && errCoversheetResponseToAddress.Email == null)
                throw new ArgumentNullException(nameof(errCoversheetResponseToAddress.Email), "Property is required for class ErrCoversheetResponseToAddress.");

            if (errCoversheetResponseToAddress.NameOption.IsSet)
                writer.WriteString("name", errCoversheetResponseToAddress.Name);

            if (errCoversheetResponseToAddress.AddressLine1Option.IsSet)
                writer.WriteString("addressLine1", errCoversheetResponseToAddress.AddressLine1);

            if (errCoversheetResponseToAddress.AddressLine2Option.IsSet)
                writer.WriteString("addressLine2", errCoversheetResponseToAddress.AddressLine2);

            if (errCoversheetResponseToAddress.AddressLine3Option.IsSet)
                writer.WriteString("addressLine3", errCoversheetResponseToAddress.AddressLine3);

            if (errCoversheetResponseToAddress.CityTownOption.IsSet)
                writer.WriteString("cityTown", errCoversheetResponseToAddress.CityTown);

            if (errCoversheetResponseToAddress.StateProvinceOption.IsSet)
                writer.WriteString("stateProvince", errCoversheetResponseToAddress.StateProvince);

            if (errCoversheetResponseToAddress.PostalCodeOption.IsSet)
                writer.WriteString("postalCode", errCoversheetResponseToAddress.PostalCode);

            if (errCoversheetResponseToAddress.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", errCoversheetResponseToAddress.CountryCode);

            if (errCoversheetResponseToAddress.PhoneOption.IsSet)
                writer.WriteString("phone", errCoversheetResponseToAddress.Phone);

            if (errCoversheetResponseToAddress.CompanyOption.IsSet)
                writer.WriteString("company", errCoversheetResponseToAddress.Company);

            if (errCoversheetResponseToAddress.EmailOption.IsSet)
                writer.WriteString("email", errCoversheetResponseToAddress.Email);

            if (errCoversheetResponseToAddress.ResidentialOption.IsSet)
                writer.WriteBoolean("residential", errCoversheetResponseToAddress.ResidentialOption.Value!.Value);
        }
    }
}
