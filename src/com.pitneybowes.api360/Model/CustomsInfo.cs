// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// CustomsInfo
    /// </summary>
    public partial class CustomsInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomsInfo" /> class.
        /// </summary>
        /// <param name="currencyCode">&gt;-The type of currency used for the monetary values in this API request. Use three uppercase letters, per ISO 4217. For example, use USD for US Dollars, CAD for Canadian Dollars, and EUR for Euros.</param>
        /// <param name="reasonForExport">&gt;-The reason the commodity is being exported. Valid values are: Valid Values: [GIFT COMMERCIAL_SAMPLE MERCHANDISE DOCUMENTS RETURNED_GOODS OTHER SOLD NOT_SOLD]</param>
        /// <param name="customsDeclaredValue">&gt;- Enter the value to declare in customs for the shipment. Enter the value in the currency specified in the currencyCode field.</param>
        /// <param name="eELPFC">A number provided by the Automated Export System (AES). &lt;br/&gt; Required if the item is more than $2,500 USD, per Schedule B export codes. &lt;br/&gt; Required if EELPFC  is AES ITN. - AES ITN is a unique transaction number generated by the Automated Export System (AES) when export data is filed for international shipments from the U.S. - The ITN format is AES XYYYYMMDDNNNNNN, where X indicates the type, YYYYMMDD is the filing date, and NNNNNN is a 6-digit number. Example: &#x60;AES X20250327123456&#x60; - If the ITN is not available, an exemption format may be used: AESDOWN [Filer ID] [mm/dd/yyyy]. Example: &#x60;AESDOWN 12345678912 03/27/2025&#x60; </param>
        /// <param name="certificateNumber">The certificate number associated with the commodity.</param>
        /// <param name="comments">&gt;-Free form comments regarding the exported shipment entered by the shipper.</param>
        /// <param name="fromCustomsReference">&gt;-Free form reference information provided by the requestor of the shipment. Depending on the carrier this information may or may not be rendered on the customs documents.</param>
        /// <param name="importerCustomsReference">&gt;- A reference number used by the importer, such as a VAT number, PO number, or insured number. &#x60;Shipments to the EU&#x60;: Merchants shipping to the European Union (EU) from outside the EU must provide a VAT or IOSS number. Enter the number in this field and specify the reference type in the importerCustomsReferenceType field.</param>
        /// <param name="invoiceNumber">The commercial invoice number assigned by the exporter.</param>
        /// <param name="licenseNumber">The export license number associated with the commodity.</param>
        /// <param name="declarationStatement">This is declaration statement from the Shipper for the items being shipped.</param>
        /// <param name="importerCustomsReferenceType">&gt;-A reference type used by the importer to determine the type of importerCustomsReference. Valid Values are TAX_CODE, IMPORTER_CODE, VAT_NUMBER, IOSS_NUMBER.</param>
        /// <param name="insuredAmount">Enter the insurance fee, if applicable.</param>
        /// <param name="insuredNumber">&gt;- If the sender wishes to ensure the contents, they complete an insurance receipt and affix the insured numbered label to the package. The insured number label is what this field represents.</param>
        /// <param name="sdrValue">&gt;-When an international parcel is insured, the insured value must be expressed in Special Drawing Rights values. E.g., $100 USD &#x3D; 66.87 SDR.</param>
        /// <param name="termsOfSale">Defines the delivery and payment terms between the shipper and recipient. Currenty supported by carriers - UPS, FedEx and DHL. - Common values include:   - CIP: Carriage and Insurance Paid to   - CPT: Carriage Paid To   - DAP: Delivered at Place   - DAT: Delivered at Terminal   - DDP: Delivered Duty Paid   - EXW: Ex Works   - FCA: Free Carrier </param>
        [JsonConstructor]
        public CustomsInfo(string currencyCode, Option<string> reasonForExport = default, Option<double?> customsDeclaredValue = default, Option<string> eELPFC = default, Option<string> certificateNumber = default, Option<string> comments = default, Option<string> fromCustomsReference = default, Option<string> importerCustomsReference = default, Option<string> invoiceNumber = default, Option<string> licenseNumber = default, Option<string> declarationStatement = default, Option<string> importerCustomsReferenceType = default, Option<double?> insuredAmount = default, Option<string> insuredNumber = default, Option<double?> sdrValue = default, Option<TermsOfSaleEnum?> termsOfSale = default)
        {
            CurrencyCode = currencyCode;
            ReasonForExportOption = reasonForExport;
            CustomsDeclaredValueOption = customsDeclaredValue;
            EELPFCOption = eELPFC;
            CertificateNumberOption = certificateNumber;
            CommentsOption = comments;
            FromCustomsReferenceOption = fromCustomsReference;
            ImporterCustomsReferenceOption = importerCustomsReference;
            InvoiceNumberOption = invoiceNumber;
            LicenseNumberOption = licenseNumber;
            DeclarationStatementOption = declarationStatement;
            ImporterCustomsReferenceTypeOption = importerCustomsReferenceType;
            InsuredAmountOption = insuredAmount;
            InsuredNumberOption = insuredNumber;
            SdrValueOption = sdrValue;
            TermsOfSaleOption = termsOfSale;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines the delivery and payment terms between the shipper and recipient. Currenty supported by carriers - UPS, FedEx and DHL. - Common values include:   - CIP: Carriage and Insurance Paid to   - CPT: Carriage Paid To   - DAP: Delivered at Place   - DAT: Delivered at Terminal   - DDP: Delivered Duty Paid   - EXW: Ex Works   - FCA: Free Carrier 
        /// </summary>
        /// <value>Defines the delivery and payment terms between the shipper and recipient. Currenty supported by carriers - UPS, FedEx and DHL. - Common values include:   - CIP: Carriage and Insurance Paid to   - CPT: Carriage Paid To   - DAP: Delivered at Place   - DAT: Delivered at Terminal   - DDP: Delivered Duty Paid   - EXW: Ex Works   - FCA: Free Carrier </value>
        public enum TermsOfSaleEnum
        {
            /// <summary>
            /// Enum CIP for value: CIP
            /// </summary>
            CIP = 1,

            /// <summary>
            /// Enum CPT for value: CPT
            /// </summary>
            CPT = 2,

            /// <summary>
            /// Enum DAP for value: DAP
            /// </summary>
            DAP = 3,

            /// <summary>
            /// Enum DAT for value: DAT
            /// </summary>
            DAT = 4,

            /// <summary>
            /// Enum DDP for value: DDP
            /// </summary>
            DDP = 5,

            /// <summary>
            /// Enum EXW for value: EXW
            /// </summary>
            EXW = 6,

            /// <summary>
            /// Enum FCA for value: FCA
            /// </summary>
            FCA = 7
        }

        /// <summary>
        /// Returns a <see cref="TermsOfSaleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TermsOfSaleEnum TermsOfSaleEnumFromString(string value)
        {
            if (value.Equals("CIP"))
                return TermsOfSaleEnum.CIP;

            if (value.Equals("CPT"))
                return TermsOfSaleEnum.CPT;

            if (value.Equals("DAP"))
                return TermsOfSaleEnum.DAP;

            if (value.Equals("DAT"))
                return TermsOfSaleEnum.DAT;

            if (value.Equals("DDP"))
                return TermsOfSaleEnum.DDP;

            if (value.Equals("EXW"))
                return TermsOfSaleEnum.EXW;

            if (value.Equals("FCA"))
                return TermsOfSaleEnum.FCA;

            throw new NotImplementedException($"Could not convert value to type TermsOfSaleEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TermsOfSaleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TermsOfSaleEnum? TermsOfSaleEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CIP"))
                return TermsOfSaleEnum.CIP;

            if (value.Equals("CPT"))
                return TermsOfSaleEnum.CPT;

            if (value.Equals("DAP"))
                return TermsOfSaleEnum.DAP;

            if (value.Equals("DAT"))
                return TermsOfSaleEnum.DAT;

            if (value.Equals("DDP"))
                return TermsOfSaleEnum.DDP;

            if (value.Equals("EXW"))
                return TermsOfSaleEnum.EXW;

            if (value.Equals("FCA"))
                return TermsOfSaleEnum.FCA;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TermsOfSaleEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TermsOfSaleEnumToJsonValue(TermsOfSaleEnum? value)
        {
            if (value == TermsOfSaleEnum.CIP)
                return "CIP";

            if (value == TermsOfSaleEnum.CPT)
                return "CPT";

            if (value == TermsOfSaleEnum.DAP)
                return "DAP";

            if (value == TermsOfSaleEnum.DAT)
                return "DAT";

            if (value == TermsOfSaleEnum.DDP)
                return "DDP";

            if (value == TermsOfSaleEnum.EXW)
                return "EXW";

            if (value == TermsOfSaleEnum.FCA)
                return "FCA";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of TermsOfSale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TermsOfSaleEnum?> TermsOfSaleOption { get; private set; }

        /// <summary>
        /// Defines the delivery and payment terms between the shipper and recipient. Currenty supported by carriers - UPS, FedEx and DHL. - Common values include:   - CIP: Carriage and Insurance Paid to   - CPT: Carriage Paid To   - DAP: Delivered at Place   - DAT: Delivered at Terminal   - DDP: Delivered Duty Paid   - EXW: Ex Works   - FCA: Free Carrier 
        /// </summary>
        /// <value>Defines the delivery and payment terms between the shipper and recipient. Currenty supported by carriers - UPS, FedEx and DHL. - Common values include:   - CIP: Carriage and Insurance Paid to   - CPT: Carriage Paid To   - DAP: Delivered at Place   - DAT: Delivered at Terminal   - DDP: Delivered Duty Paid   - EXW: Ex Works   - FCA: Free Carrier </value>
        /* <example>DDU</example> */
        [JsonPropertyName("termsOfSale")]
        public TermsOfSaleEnum? TermsOfSale { get { return this.TermsOfSaleOption; } set { this.TermsOfSaleOption = new Option<TermsOfSaleEnum?>(value); } }

        /// <summary>
        /// &gt;-The type of currency used for the monetary values in this API request. Use three uppercase letters, per ISO 4217. For example, use USD for US Dollars, CAD for Canadian Dollars, and EUR for Euros.
        /// </summary>
        /// <value>&gt;-The type of currency used for the monetary values in this API request. Use three uppercase letters, per ISO 4217. For example, use USD for US Dollars, CAD for Canadian Dollars, and EUR for Euros.</value>
        /* <example>USD</example> */
        [JsonPropertyName("currencyCode")]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Used to track the state of ReasonForExport
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReasonForExportOption { get; private set; }

        /// <summary>
        /// &gt;-The reason the commodity is being exported. Valid values are: Valid Values: [GIFT COMMERCIAL_SAMPLE MERCHANDISE DOCUMENTS RETURNED_GOODS OTHER SOLD NOT_SOLD]
        /// </summary>
        /// <value>&gt;-The reason the commodity is being exported. Valid values are: Valid Values: [GIFT COMMERCIAL_SAMPLE MERCHANDISE DOCUMENTS RETURNED_GOODS OTHER SOLD NOT_SOLD]</value>
        /* <example>birthday gift</example> */
        [JsonPropertyName("reasonForExport")]
        public string ReasonForExport { get { return this.ReasonForExportOption; } set { this.ReasonForExportOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CustomsDeclaredValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CustomsDeclaredValueOption { get; private set; }

        /// <summary>
        /// &gt;- Enter the value to declare in customs for the shipment. Enter the value in the currency specified in the currencyCode field.
        /// </summary>
        /// <value>&gt;- Enter the value to declare in customs for the shipment. Enter the value in the currency specified in the currencyCode field.</value>
        /* <example>200.0</example> */
        [JsonPropertyName("customsDeclaredValue")]
        public double? CustomsDeclaredValue { get { return this.CustomsDeclaredValueOption; } set { this.CustomsDeclaredValueOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of EELPFC
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EELPFCOption { get; private set; }

        /// <summary>
        /// A number provided by the Automated Export System (AES). &lt;br/&gt; Required if the item is more than $2,500 USD, per Schedule B export codes. &lt;br/&gt; Required if EELPFC  is AES ITN. - AES ITN is a unique transaction number generated by the Automated Export System (AES) when export data is filed for international shipments from the U.S. - The ITN format is AES XYYYYMMDDNNNNNN, where X indicates the type, YYYYMMDD is the filing date, and NNNNNN is a 6-digit number. Example: &#x60;AES X20250327123456&#x60; - If the ITN is not available, an exemption format may be used: AESDOWN [Filer ID] [mm/dd/yyyy]. Example: &#x60;AESDOWN 12345678912 03/27/2025&#x60; 
        /// </summary>
        /// <value>A number provided by the Automated Export System (AES). &lt;br/&gt; Required if the item is more than $2,500 USD, per Schedule B export codes. &lt;br/&gt; Required if EELPFC  is AES ITN. - AES ITN is a unique transaction number generated by the Automated Export System (AES) when export data is filed for international shipments from the U.S. - The ITN format is AES XYYYYMMDDNNNNNN, where X indicates the type, YYYYMMDD is the filing date, and NNNNNN is a 6-digit number. Example: &#x60;AES X20250327123456&#x60; - If the ITN is not available, an exemption format may be used: AESDOWN [Filer ID] [mm/dd/yyyy]. Example: &#x60;AESDOWN 12345678912 03/27/2025&#x60; </value>
        /* <example>NOEEI 30.2D2</example> */
        [JsonPropertyName("EELPFC")]
        public string EELPFC { get { return this.EELPFCOption; } set { this.EELPFCOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CertificateNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CertificateNumberOption { get; private set; }

        /// <summary>
        /// The certificate number associated with the commodity.
        /// </summary>
        /// <value>The certificate number associated with the commodity.</value>
        /* <example>123456789</example> */
        [JsonPropertyName("certificateNumber")]
        public string CertificateNumber { get { return this.CertificateNumberOption; } set { this.CertificateNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Comments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CommentsOption { get; private set; }

        /// <summary>
        /// &gt;-Free form comments regarding the exported shipment entered by the shipper.
        /// </summary>
        /// <value>&gt;-Free form comments regarding the exported shipment entered by the shipper.</value>
        /* <example>Gift for birthday</example> */
        [JsonPropertyName("comments")]
        public string Comments { get { return this.CommentsOption; } set { this.CommentsOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FromCustomsReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FromCustomsReferenceOption { get; private set; }

        /// <summary>
        /// &gt;-Free form reference information provided by the requestor of the shipment. Depending on the carrier this information may or may not be rendered on the customs documents.
        /// </summary>
        /// <value>&gt;-Free form reference information provided by the requestor of the shipment. Depending on the carrier this information may or may not be rendered on the customs documents.</value>
        /* <example>123456789</example> */
        [JsonPropertyName("fromCustomsReference")]
        public string FromCustomsReference { get { return this.FromCustomsReferenceOption; } set { this.FromCustomsReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ImporterCustomsReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ImporterCustomsReferenceOption { get; private set; }

        /// <summary>
        /// &gt;- A reference number used by the importer, such as a VAT number, PO number, or insured number. &#x60;Shipments to the EU&#x60;: Merchants shipping to the European Union (EU) from outside the EU must provide a VAT or IOSS number. Enter the number in this field and specify the reference type in the importerCustomsReferenceType field.
        /// </summary>
        /// <value>&gt;- A reference number used by the importer, such as a VAT number, PO number, or insured number. &#x60;Shipments to the EU&#x60;: Merchants shipping to the European Union (EU) from outside the EU must provide a VAT or IOSS number. Enter the number in this field and specify the reference type in the importerCustomsReferenceType field.</value>
        /* <example>55454</example> */
        [JsonPropertyName("importerCustomsReference")]
        public string ImporterCustomsReference { get { return this.ImporterCustomsReferenceOption; } set { this.ImporterCustomsReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InvoiceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InvoiceNumberOption { get; private set; }

        /// <summary>
        /// The commercial invoice number assigned by the exporter.
        /// </summary>
        /// <value>The commercial invoice number assigned by the exporter.</value>
        /* <example>123456789</example> */
        [JsonPropertyName("invoiceNumber")]
        public string InvoiceNumber { get { return this.InvoiceNumberOption; } set { this.InvoiceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LicenseNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LicenseNumberOption { get; private set; }

        /// <summary>
        /// The export license number associated with the commodity.
        /// </summary>
        /// <value>The export license number associated with the commodity.</value>
        /* <example>123456789</example> */
        [JsonPropertyName("licenseNumber")]
        public string LicenseNumber { get { return this.LicenseNumberOption; } set { this.LicenseNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DeclarationStatement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DeclarationStatementOption { get; private set; }

        /// <summary>
        /// This is declaration statement from the Shipper for the items being shipped.
        /// </summary>
        /// <value>This is declaration statement from the Shipper for the items being shipped.</value>
        /* <example>I hereby certify that the information on this invoice is true and correct and that the contents of this shipment are as stated above.</example> */
        [JsonPropertyName("declarationStatement")]
        public string DeclarationStatement { get { return this.DeclarationStatementOption; } set { this.DeclarationStatementOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ImporterCustomsReferenceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ImporterCustomsReferenceTypeOption { get; private set; }

        /// <summary>
        /// &gt;-A reference type used by the importer to determine the type of importerCustomsReference. Valid Values are TAX_CODE, IMPORTER_CODE, VAT_NUMBER, IOSS_NUMBER.
        /// </summary>
        /// <value>&gt;-A reference type used by the importer to determine the type of importerCustomsReference. Valid Values are TAX_CODE, IMPORTER_CODE, VAT_NUMBER, IOSS_NUMBER.</value>
        /* <example>TAX_CODE</example> */
        [JsonPropertyName("importerCustomsReferenceType")]
        public string ImporterCustomsReferenceType { get { return this.ImporterCustomsReferenceTypeOption; } set { this.ImporterCustomsReferenceTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of InsuredAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> InsuredAmountOption { get; private set; }

        /// <summary>
        /// Enter the insurance fee, if applicable.
        /// </summary>
        /// <value>Enter the insurance fee, if applicable.</value>
        /* <example>200.0</example> */
        [JsonPropertyName("insuredAmount")]
        public double? InsuredAmount { get { return this.InsuredAmountOption; } set { this.InsuredAmountOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of InsuredNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> InsuredNumberOption { get; private set; }

        /// <summary>
        /// &gt;- If the sender wishes to ensure the contents, they complete an insurance receipt and affix the insured numbered label to the package. The insured number label is what this field represents.
        /// </summary>
        /// <value>&gt;- If the sender wishes to ensure the contents, they complete an insurance receipt and affix the insured numbered label to the package. The insured number label is what this field represents.</value>
        /* <example>123456789</example> */
        [JsonPropertyName("insuredNumber")]
        public string InsuredNumber { get { return this.InsuredNumberOption; } set { this.InsuredNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SdrValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SdrValueOption { get; private set; }

        /// <summary>
        /// &gt;-When an international parcel is insured, the insured value must be expressed in Special Drawing Rights values. E.g., $100 USD &#x3D; 66.87 SDR.
        /// </summary>
        /// <value>&gt;-When an international parcel is insured, the insured value must be expressed in Special Drawing Rights values. E.g., $100 USD &#x3D; 66.87 SDR.</value>
        /* <example>200.0</example> */
        [JsonPropertyName("sdrValue")]
        public double? SdrValue { get { return this.SdrValueOption; } set { this.SdrValueOption = new Option<double?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomsInfo {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ReasonForExport: ").Append(ReasonForExport).Append("\n");
            sb.Append("  CustomsDeclaredValue: ").Append(CustomsDeclaredValue).Append("\n");
            sb.Append("  EELPFC: ").Append(EELPFC).Append("\n");
            sb.Append("  CertificateNumber: ").Append(CertificateNumber).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  FromCustomsReference: ").Append(FromCustomsReference).Append("\n");
            sb.Append("  ImporterCustomsReference: ").Append(ImporterCustomsReference).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  LicenseNumber: ").Append(LicenseNumber).Append("\n");
            sb.Append("  DeclarationStatement: ").Append(DeclarationStatement).Append("\n");
            sb.Append("  ImporterCustomsReferenceType: ").Append(ImporterCustomsReferenceType).Append("\n");
            sb.Append("  InsuredAmount: ").Append(InsuredAmount).Append("\n");
            sb.Append("  InsuredNumber: ").Append(InsuredNumber).Append("\n");
            sb.Append("  SdrValue: ").Append(SdrValue).Append("\n");
            sb.Append("  TermsOfSale: ").Append(TermsOfSale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CustomsInfo" />
    /// </summary>
    public class CustomsInfoJsonConverter : JsonConverter<CustomsInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="CustomsInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CustomsInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> currencyCode = default;
            Option<string> reasonForExport = default;
            Option<double?> customsDeclaredValue = default;
            Option<string> eELPFC = default;
            Option<string> certificateNumber = default;
            Option<string> comments = default;
            Option<string> fromCustomsReference = default;
            Option<string> importerCustomsReference = default;
            Option<string> invoiceNumber = default;
            Option<string> licenseNumber = default;
            Option<string> declarationStatement = default;
            Option<string> importerCustomsReferenceType = default;
            Option<double?> insuredAmount = default;
            Option<string> insuredNumber = default;
            Option<double?> sdrValue = default;
            Option<CustomsInfo.TermsOfSaleEnum?> termsOfSale = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "currencyCode":
                            currencyCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reasonForExport":
                            reasonForExport = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "customsDeclaredValue":
                            customsDeclaredValue = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "EELPFC":
                            eELPFC = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "certificateNumber":
                            certificateNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "comments":
                            comments = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fromCustomsReference":
                            fromCustomsReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "importerCustomsReference":
                            importerCustomsReference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "invoiceNumber":
                            invoiceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "licenseNumber":
                            licenseNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "declarationStatement":
                            declarationStatement = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "importerCustomsReferenceType":
                            importerCustomsReferenceType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "insuredAmount":
                            insuredAmount = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "insuredNumber":
                            insuredNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sdrValue":
                            sdrValue = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "termsOfSale":
                            string termsOfSaleRawValue = utf8JsonReader.GetString();
                            if (termsOfSaleRawValue != null)
                                termsOfSale = new Option<CustomsInfo.TermsOfSaleEnum?>(CustomsInfo.TermsOfSaleEnumFromStringOrDefault(termsOfSaleRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!currencyCode.IsSet)
                throw new ArgumentException("Property is required for class CustomsInfo.", nameof(currencyCode));

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class CustomsInfo.");

            if (reasonForExport.IsSet && reasonForExport.Value == null)
                throw new ArgumentNullException(nameof(reasonForExport), "Property is not nullable for class CustomsInfo.");

            if (customsDeclaredValue.IsSet && customsDeclaredValue.Value == null)
                throw new ArgumentNullException(nameof(customsDeclaredValue), "Property is not nullable for class CustomsInfo.");

            if (eELPFC.IsSet && eELPFC.Value == null)
                throw new ArgumentNullException(nameof(eELPFC), "Property is not nullable for class CustomsInfo.");

            if (certificateNumber.IsSet && certificateNumber.Value == null)
                throw new ArgumentNullException(nameof(certificateNumber), "Property is not nullable for class CustomsInfo.");

            if (comments.IsSet && comments.Value == null)
                throw new ArgumentNullException(nameof(comments), "Property is not nullable for class CustomsInfo.");

            if (fromCustomsReference.IsSet && fromCustomsReference.Value == null)
                throw new ArgumentNullException(nameof(fromCustomsReference), "Property is not nullable for class CustomsInfo.");

            if (importerCustomsReference.IsSet && importerCustomsReference.Value == null)
                throw new ArgumentNullException(nameof(importerCustomsReference), "Property is not nullable for class CustomsInfo.");

            if (invoiceNumber.IsSet && invoiceNumber.Value == null)
                throw new ArgumentNullException(nameof(invoiceNumber), "Property is not nullable for class CustomsInfo.");

            if (licenseNumber.IsSet && licenseNumber.Value == null)
                throw new ArgumentNullException(nameof(licenseNumber), "Property is not nullable for class CustomsInfo.");

            if (declarationStatement.IsSet && declarationStatement.Value == null)
                throw new ArgumentNullException(nameof(declarationStatement), "Property is not nullable for class CustomsInfo.");

            if (importerCustomsReferenceType.IsSet && importerCustomsReferenceType.Value == null)
                throw new ArgumentNullException(nameof(importerCustomsReferenceType), "Property is not nullable for class CustomsInfo.");

            if (insuredAmount.IsSet && insuredAmount.Value == null)
                throw new ArgumentNullException(nameof(insuredAmount), "Property is not nullable for class CustomsInfo.");

            if (insuredNumber.IsSet && insuredNumber.Value == null)
                throw new ArgumentNullException(nameof(insuredNumber), "Property is not nullable for class CustomsInfo.");

            if (sdrValue.IsSet && sdrValue.Value == null)
                throw new ArgumentNullException(nameof(sdrValue), "Property is not nullable for class CustomsInfo.");

            if (termsOfSale.IsSet && termsOfSale.Value == null)
                throw new ArgumentNullException(nameof(termsOfSale), "Property is not nullable for class CustomsInfo.");

            return new CustomsInfo(currencyCode.Value, reasonForExport, customsDeclaredValue, eELPFC, certificateNumber, comments, fromCustomsReference, importerCustomsReference, invoiceNumber, licenseNumber, declarationStatement, importerCustomsReferenceType, insuredAmount, insuredNumber, sdrValue, termsOfSale);
        }

        /// <summary>
        /// Serializes a <see cref="CustomsInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customsInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CustomsInfo customsInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, customsInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CustomsInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customsInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CustomsInfo customsInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (customsInfo.CurrencyCode == null)
                throw new ArgumentNullException(nameof(customsInfo.CurrencyCode), "Property is required for class CustomsInfo.");

            if (customsInfo.ReasonForExportOption.IsSet && customsInfo.ReasonForExport == null)
                throw new ArgumentNullException(nameof(customsInfo.ReasonForExport), "Property is required for class CustomsInfo.");

            if (customsInfo.EELPFCOption.IsSet && customsInfo.EELPFC == null)
                throw new ArgumentNullException(nameof(customsInfo.EELPFC), "Property is required for class CustomsInfo.");

            if (customsInfo.CertificateNumberOption.IsSet && customsInfo.CertificateNumber == null)
                throw new ArgumentNullException(nameof(customsInfo.CertificateNumber), "Property is required for class CustomsInfo.");

            if (customsInfo.CommentsOption.IsSet && customsInfo.Comments == null)
                throw new ArgumentNullException(nameof(customsInfo.Comments), "Property is required for class CustomsInfo.");

            if (customsInfo.FromCustomsReferenceOption.IsSet && customsInfo.FromCustomsReference == null)
                throw new ArgumentNullException(nameof(customsInfo.FromCustomsReference), "Property is required for class CustomsInfo.");

            if (customsInfo.ImporterCustomsReferenceOption.IsSet && customsInfo.ImporterCustomsReference == null)
                throw new ArgumentNullException(nameof(customsInfo.ImporterCustomsReference), "Property is required for class CustomsInfo.");

            if (customsInfo.InvoiceNumberOption.IsSet && customsInfo.InvoiceNumber == null)
                throw new ArgumentNullException(nameof(customsInfo.InvoiceNumber), "Property is required for class CustomsInfo.");

            if (customsInfo.LicenseNumberOption.IsSet && customsInfo.LicenseNumber == null)
                throw new ArgumentNullException(nameof(customsInfo.LicenseNumber), "Property is required for class CustomsInfo.");

            if (customsInfo.DeclarationStatementOption.IsSet && customsInfo.DeclarationStatement == null)
                throw new ArgumentNullException(nameof(customsInfo.DeclarationStatement), "Property is required for class CustomsInfo.");

            if (customsInfo.ImporterCustomsReferenceTypeOption.IsSet && customsInfo.ImporterCustomsReferenceType == null)
                throw new ArgumentNullException(nameof(customsInfo.ImporterCustomsReferenceType), "Property is required for class CustomsInfo.");

            if (customsInfo.InsuredNumberOption.IsSet && customsInfo.InsuredNumber == null)
                throw new ArgumentNullException(nameof(customsInfo.InsuredNumber), "Property is required for class CustomsInfo.");

            writer.WriteString("currencyCode", customsInfo.CurrencyCode);

            if (customsInfo.ReasonForExportOption.IsSet)
                writer.WriteString("reasonForExport", customsInfo.ReasonForExport);

            if (customsInfo.CustomsDeclaredValueOption.IsSet)
                writer.WriteNumber("customsDeclaredValue", customsInfo.CustomsDeclaredValueOption.Value.Value);

            if (customsInfo.EELPFCOption.IsSet)
                writer.WriteString("EELPFC", customsInfo.EELPFC);

            if (customsInfo.CertificateNumberOption.IsSet)
                writer.WriteString("certificateNumber", customsInfo.CertificateNumber);

            if (customsInfo.CommentsOption.IsSet)
                writer.WriteString("comments", customsInfo.Comments);

            if (customsInfo.FromCustomsReferenceOption.IsSet)
                writer.WriteString("fromCustomsReference", customsInfo.FromCustomsReference);

            if (customsInfo.ImporterCustomsReferenceOption.IsSet)
                writer.WriteString("importerCustomsReference", customsInfo.ImporterCustomsReference);

            if (customsInfo.InvoiceNumberOption.IsSet)
                writer.WriteString("invoiceNumber", customsInfo.InvoiceNumber);

            if (customsInfo.LicenseNumberOption.IsSet)
                writer.WriteString("licenseNumber", customsInfo.LicenseNumber);

            if (customsInfo.DeclarationStatementOption.IsSet)
                writer.WriteString("declarationStatement", customsInfo.DeclarationStatement);

            if (customsInfo.ImporterCustomsReferenceTypeOption.IsSet)
                writer.WriteString("importerCustomsReferenceType", customsInfo.ImporterCustomsReferenceType);

            if (customsInfo.InsuredAmountOption.IsSet)
                writer.WriteNumber("insuredAmount", customsInfo.InsuredAmountOption.Value.Value);

            if (customsInfo.InsuredNumberOption.IsSet)
                writer.WriteString("insuredNumber", customsInfo.InsuredNumber);

            if (customsInfo.SdrValueOption.IsSet)
                writer.WriteNumber("sdrValue", customsInfo.SdrValueOption.Value.Value);

            var termsOfSaleRawValue = CustomsInfo.TermsOfSaleEnumToJsonValue(customsInfo.TermsOfSaleOption.Value.Value);
            writer.WriteString("termsOfSale", termsOfSaleRawValue);
        }
    }
}
