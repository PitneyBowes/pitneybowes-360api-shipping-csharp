// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// MilitaryMailShipmentsParcel
    /// </summary>
    public partial class MilitaryMailShipmentsParcel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MilitaryMailShipmentsParcel" /> class.
        /// </summary>
        /// <param name="length">Length is a part of Dimension object having highest numeric value out of three required parameters (length, width, and height) of Dimension. It helps determine a parcel’s girth.</param>
        /// <param name="width">Width is a part of Dimension object having lowest numeric value out of three required parameters of dimension (length, width, and height). This helps determine a parcel’s girth.</param>
        /// <param name="height">Height is a part of Dimension object where it helps determine a parcel’s girth.</param>
        /// <param name="dimUnit">DimUnit is a standard for measuring the physical quantities of specified dimension parameters.</param>
        /// <param name="weightUnit">WeightUnit is a standard for measuring the physical quantities of specified weight.</param>
        /// <param name="weight">Weight is the measure of how heavy an object is.</param>
        [JsonConstructor]
        public MilitaryMailShipmentsParcel(decimal length, decimal width, decimal height, DimUnitEnum dimUnit, WeightUnitEnum weightUnit, decimal weight)
        {
            Length = length;
            Width = width;
            Height = height;
            DimUnit = dimUnit;
            WeightUnit = weightUnit;
            Weight = weight;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// DimUnit is a standard for measuring the physical quantities of specified dimension parameters.
        /// </summary>
        /// <value>DimUnit is a standard for measuring the physical quantities of specified dimension parameters.</value>
        public enum DimUnitEnum
        {
            /// <summary>
            /// Enum IN for value: IN
            /// </summary>
            IN = 1
        }

        /// <summary>
        /// Returns a <see cref="DimUnitEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DimUnitEnum DimUnitEnumFromString(string value)
        {
            if (value.Equals("IN"))
                return DimUnitEnum.IN;

            throw new NotImplementedException($"Could not convert value to type DimUnitEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DimUnitEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DimUnitEnum? DimUnitEnumFromStringOrDefault(string value)
        {
            if (value.Equals("IN"))
                return DimUnitEnum.IN;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DimUnitEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DimUnitEnumToJsonValue(DimUnitEnum value)
        {
            if (value == DimUnitEnum.IN)
                return "IN";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// DimUnit is a standard for measuring the physical quantities of specified dimension parameters.
        /// </summary>
        /// <value>DimUnit is a standard for measuring the physical quantities of specified dimension parameters.</value>
        /* <example>IN</example> */
        [JsonPropertyName("dimUnit")]
        public DimUnitEnum DimUnit { get; set; }

        /// <summary>
        /// WeightUnit is a standard for measuring the physical quantities of specified weight.
        /// </summary>
        /// <value>WeightUnit is a standard for measuring the physical quantities of specified weight.</value>
        public enum WeightUnitEnum
        {
            /// <summary>
            /// Enum OZ for value: OZ
            /// </summary>
            OZ = 1
        }

        /// <summary>
        /// Returns a <see cref="WeightUnitEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static WeightUnitEnum WeightUnitEnumFromString(string value)
        {
            if (value.Equals("OZ"))
                return WeightUnitEnum.OZ;

            throw new NotImplementedException($"Could not convert value to type WeightUnitEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="WeightUnitEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WeightUnitEnum? WeightUnitEnumFromStringOrDefault(string value)
        {
            if (value.Equals("OZ"))
                return WeightUnitEnum.OZ;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="WeightUnitEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string WeightUnitEnumToJsonValue(WeightUnitEnum value)
        {
            if (value == WeightUnitEnum.OZ)
                return "OZ";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// WeightUnit is a standard for measuring the physical quantities of specified weight.
        /// </summary>
        /// <value>WeightUnit is a standard for measuring the physical quantities of specified weight.</value>
        /* <example>OZ</example> */
        [JsonPropertyName("weightUnit")]
        public WeightUnitEnum WeightUnit { get; set; }

        /// <summary>
        /// Length is a part of Dimension object having highest numeric value out of three required parameters (length, width, and height) of Dimension. It helps determine a parcel’s girth.
        /// </summary>
        /// <value>Length is a part of Dimension object having highest numeric value out of three required parameters (length, width, and height) of Dimension. It helps determine a parcel’s girth.</value>
        /* <example>10</example> */
        [JsonPropertyName("length")]
        public decimal Length { get; set; }

        /// <summary>
        /// Width is a part of Dimension object having lowest numeric value out of three required parameters of dimension (length, width, and height). This helps determine a parcel’s girth.
        /// </summary>
        /// <value>Width is a part of Dimension object having lowest numeric value out of three required parameters of dimension (length, width, and height). This helps determine a parcel’s girth.</value>
        /* <example>10</example> */
        [JsonPropertyName("width")]
        public decimal Width { get; set; }

        /// <summary>
        /// Height is a part of Dimension object where it helps determine a parcel’s girth.
        /// </summary>
        /// <value>Height is a part of Dimension object where it helps determine a parcel’s girth.</value>
        /* <example>1</example> */
        [JsonPropertyName("height")]
        public decimal Height { get; set; }

        /// <summary>
        /// Weight is the measure of how heavy an object is.
        /// </summary>
        /// <value>Weight is the measure of how heavy an object is.</value>
        /* <example>1</example> */
        [JsonPropertyName("weight")]
        public decimal Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MilitaryMailShipmentsParcel {\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  DimUnit: ").Append(DimUnit).Append("\n");
            sb.Append("  WeightUnit: ").Append(WeightUnit).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MilitaryMailShipmentsParcel" />
    /// </summary>
    public class MilitaryMailShipmentsParcelJsonConverter : JsonConverter<MilitaryMailShipmentsParcel>
    {
        /// <summary>
        /// Deserializes json to <see cref="MilitaryMailShipmentsParcel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MilitaryMailShipmentsParcel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> length = default;
            Option<decimal?> width = default;
            Option<decimal?> height = default;
            Option<MilitaryMailShipmentsParcel.DimUnitEnum?> dimUnit = default;
            Option<MilitaryMailShipmentsParcel.WeightUnitEnum?> weightUnit = default;
            Option<decimal?> weight = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "length":
                            length = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "width":
                            width = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "height":
                            height = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "dimUnit":
                            string dimUnitRawValue = utf8JsonReader.GetString();
                            if (dimUnitRawValue != null)
                                dimUnit = new Option<MilitaryMailShipmentsParcel.DimUnitEnum?>(MilitaryMailShipmentsParcel.DimUnitEnumFromStringOrDefault(dimUnitRawValue));
                            break;
                        case "weightUnit":
                            string weightUnitRawValue = utf8JsonReader.GetString();
                            if (weightUnitRawValue != null)
                                weightUnit = new Option<MilitaryMailShipmentsParcel.WeightUnitEnum?>(MilitaryMailShipmentsParcel.WeightUnitEnumFromStringOrDefault(weightUnitRawValue));
                            break;
                        case "weight":
                            weight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!length.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipmentsParcel.", nameof(length));

            if (!width.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipmentsParcel.", nameof(width));

            if (!height.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipmentsParcel.", nameof(height));

            if (!dimUnit.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipmentsParcel.", nameof(dimUnit));

            if (!weightUnit.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipmentsParcel.", nameof(weightUnit));

            if (!weight.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipmentsParcel.", nameof(weight));

            if (length.IsSet && length.Value == null)
                throw new ArgumentNullException(nameof(length), "Property is not nullable for class MilitaryMailShipmentsParcel.");

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class MilitaryMailShipmentsParcel.");

            if (height.IsSet && height.Value == null)
                throw new ArgumentNullException(nameof(height), "Property is not nullable for class MilitaryMailShipmentsParcel.");

            if (dimUnit.IsSet && dimUnit.Value == null)
                throw new ArgumentNullException(nameof(dimUnit), "Property is not nullable for class MilitaryMailShipmentsParcel.");

            if (weightUnit.IsSet && weightUnit.Value == null)
                throw new ArgumentNullException(nameof(weightUnit), "Property is not nullable for class MilitaryMailShipmentsParcel.");

            if (weight.IsSet && weight.Value == null)
                throw new ArgumentNullException(nameof(weight), "Property is not nullable for class MilitaryMailShipmentsParcel.");

            return new MilitaryMailShipmentsParcel(length.Value.Value, width.Value.Value, height.Value.Value, dimUnit.Value.Value, weightUnit.Value.Value, weight.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="MilitaryMailShipmentsParcel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="militaryMailShipmentsParcel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MilitaryMailShipmentsParcel militaryMailShipmentsParcel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, militaryMailShipmentsParcel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MilitaryMailShipmentsParcel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="militaryMailShipmentsParcel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MilitaryMailShipmentsParcel militaryMailShipmentsParcel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("length", militaryMailShipmentsParcel.Length);

            writer.WriteNumber("width", militaryMailShipmentsParcel.Width);

            writer.WriteNumber("height", militaryMailShipmentsParcel.Height);

            var dimUnitRawValue = MilitaryMailShipmentsParcel.DimUnitEnumToJsonValue(militaryMailShipmentsParcel.DimUnit);
            writer.WriteString("dimUnit", dimUnitRawValue);
            var weightUnitRawValue = MilitaryMailShipmentsParcel.WeightUnitEnumToJsonValue(militaryMailShipmentsParcel.WeightUnit);
            writer.WriteString("weightUnit", weightUnitRawValue);
            writer.WriteNumber("weight", militaryMailShipmentsParcel.Weight);
        }
    }
}
