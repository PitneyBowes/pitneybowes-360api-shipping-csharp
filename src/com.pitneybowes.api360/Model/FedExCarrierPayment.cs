// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// **FedEx Billing Rules:**&lt;br/&gt; - If no bill-to party (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly defined, FedEx will default billing to the sender. - If sender provides the receiver&#39;s account number, Duties and taxes will be charged directly from the account.  - If no account number is provided, FedEx will attempt to collect payment from the receiver at the time of import. - In the case of DDU (Delivery Duty Unpaid) and no bill-to party provided:   - Pitney Bowes does not prompt for BILL_PARTY.   - FedEx attempts to collect duties and taxes in the destination country via its billing team.   - In cases where FedEx is unable to collect these charges, the sender (in the origin country) will be billed as a fallback. - Recipient must be an authorized collect recipient - Postal code and country code are not required for any party.  - -- -- -- -- -- FedEx Billing Scenarios: | Scenario                  | Party                  | Type of Charge                | Account Required | Postal/Country Code | |- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- --|- -- -- -- -- -- -- -| | COLLECT/CONSIGNEE        | BILL_RECEIVER_CONTRACT | ALL_CHARGES                  | Not Required     | Optional             | | Shipper pays all         | BILL_SENDER            | ALL_CHARGES                  | Optional         | Optional             | | Shipper (split charges)  | BILL_SENDER            | TRANSPORTATION_CHARGES       | Required         | Optional             | |                           | BILL_SENDER            | DUTIES_AND_TAXES             | Optional         | Optional             | | Sender &amp; Receiver split  | BILL_SENDER            | TRANSPORTATION_CHARGES       | Required         | Optional             | |                           | BILL_RECEIVER          | DUTIES_AND_TAXES             | Optional         | Optional             | | Receiver pays all        | BILL_RECEIVER          | ALL_CHARGES                  | Optional         | Optional             | | Receiver (split charges) | BILL_RECEIVER          | TRANSPORTATION_CHARGES       | Required         | Optional             | |                           | BILL_RECEIVER          | DUTIES_AND_TAXES             | Optional         | Optional             | | Shipper &amp; 3rd Party      | BILL_SENDER            | TRANSPORTATION_CHARGES       | Required         | Optional             | |                           | BILL_THIRD_PARTY       | DUTIES_AND_TAXES             | Optional         | Optional             | | 3rd Party pays all       | BILL_THIRD_PARTY       | ALL_CHARGES                  | Optional         | Optional             | | 3rd Party (split charges)| BILL_THIRD_PARTY       | TRANSPORTATION_CHARGES       | Required         | Optional             | |                           | BILL_THIRD_PARTY       | DUTIES_AND_TAXES             | Required         | Optional             | 
    /// </summary>
    public partial class FedExCarrierPayment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FedExCarrierPayment" /> class.
        /// </summary>
        /// <param name="accountNumber">The FedEx account number of the party to be billed.</param>
        /// <param name="countryCode">Two-letter ISO country code of the party to be billed.</param>
        /// <param name="postalCode">Postal code of the party to be billed.</param>
        /// <param name="party">Billing party for the shipment charges.</param>
        /// <param name="typeOfCharge">The type of charge billed to the specified party. Possible values: - TRANSPORTATION_CHARGES: Transportation-related charges only. When billing transportation charges to the sender (BILL_SENDER), the accountNumber must match the account used to initiate the shipment. - DUTIES_AND_TAXES: Duties and taxes only - ALL_CHARGES: All Shipment Charges (Transportatio and Duties and Taxes)Required when using BILL_RECEIVER_CONTRACT (FedEx COLLECT); includes all charges  </param>
        [JsonConstructor]
        public FedExCarrierPayment(Option<string?> accountNumber = default, Option<string?> countryCode = default, Option<string?> postalCode = default, Option<PartyEnum?> party = default, Option<TypeOfChargeEnum?> typeOfCharge = default)
        {
            AccountNumberOption = accountNumber;
            CountryCodeOption = countryCode;
            PostalCodeOption = postalCode;
            PartyOption = party;
            TypeOfChargeOption = typeOfCharge;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Billing party for the shipment charges.
        /// </summary>
        /// <value>Billing party for the shipment charges.</value>
        public enum PartyEnum
        {
            /// <summary>
            /// Enum BILLRECEIVER for value: BILL_RECEIVER
            /// </summary>
            BILLRECEIVER = 1,

            /// <summary>
            /// Enum BILLSENDER for value: BILL_SENDER
            /// </summary>
            BILLSENDER = 2,

            /// <summary>
            /// Enum BILLTHIRDPARTY for value: BILL_THIRD_PARTY
            /// </summary>
            BILLTHIRDPARTY = 3,

            /// <summary>
            /// Enum BILLRECEIVERCONTRACT for value: BILL_RECEIVER_CONTRACT
            /// </summary>
            BILLRECEIVERCONTRACT = 4
        }

        /// <summary>
        /// Returns a <see cref="PartyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PartyEnum PartyEnumFromString(string value)
        {
            if (value.Equals("BILL_RECEIVER"))
                return PartyEnum.BILLRECEIVER;

            if (value.Equals("BILL_SENDER"))
                return PartyEnum.BILLSENDER;

            if (value.Equals("BILL_THIRD_PARTY"))
                return PartyEnum.BILLTHIRDPARTY;

            if (value.Equals("BILL_RECEIVER_CONTRACT"))
                return PartyEnum.BILLRECEIVERCONTRACT;

            throw new NotImplementedException($"Could not convert value to type PartyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PartyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PartyEnum? PartyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("BILL_RECEIVER"))
                return PartyEnum.BILLRECEIVER;

            if (value.Equals("BILL_SENDER"))
                return PartyEnum.BILLSENDER;

            if (value.Equals("BILL_THIRD_PARTY"))
                return PartyEnum.BILLTHIRDPARTY;

            if (value.Equals("BILL_RECEIVER_CONTRACT"))
                return PartyEnum.BILLRECEIVERCONTRACT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PartyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PartyEnumToJsonValue(PartyEnum? value)
        {
            if (value == PartyEnum.BILLRECEIVER)
                return "BILL_RECEIVER";

            if (value == PartyEnum.BILLSENDER)
                return "BILL_SENDER";

            if (value == PartyEnum.BILLTHIRDPARTY)
                return "BILL_THIRD_PARTY";

            if (value == PartyEnum.BILLRECEIVERCONTRACT)
                return "BILL_RECEIVER_CONTRACT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Party
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PartyEnum?> PartyOption { get; private set; }

        /// <summary>
        /// Billing party for the shipment charges.
        /// </summary>
        /// <value>Billing party for the shipment charges.</value>
        /* <example>BILL_RECEIVER</example> */
        [JsonPropertyName("party")]
        public PartyEnum? Party { get { return this.PartyOption; } set { this.PartyOption = new(value); } }

        /// <summary>
        /// The type of charge billed to the specified party. Possible values: - TRANSPORTATION_CHARGES: Transportation-related charges only. When billing transportation charges to the sender (BILL_SENDER), the accountNumber must match the account used to initiate the shipment. - DUTIES_AND_TAXES: Duties and taxes only - ALL_CHARGES: All Shipment Charges (Transportatio and Duties and Taxes)Required when using BILL_RECEIVER_CONTRACT (FedEx COLLECT); includes all charges  
        /// </summary>
        /// <value>The type of charge billed to the specified party. Possible values: - TRANSPORTATION_CHARGES: Transportation-related charges only. When billing transportation charges to the sender (BILL_SENDER), the accountNumber must match the account used to initiate the shipment. - DUTIES_AND_TAXES: Duties and taxes only - ALL_CHARGES: All Shipment Charges (Transportatio and Duties and Taxes)Required when using BILL_RECEIVER_CONTRACT (FedEx COLLECT); includes all charges  </value>
        public enum TypeOfChargeEnum
        {
            /// <summary>
            /// Enum TRANSPORTATIONCHARGES for value: TRANSPORTATION_CHARGES
            /// </summary>
            TRANSPORTATIONCHARGES = 1,

            /// <summary>
            /// Enum DUTIESANDTAXES for value: DUTIES_AND_TAXES
            /// </summary>
            DUTIESANDTAXES = 2,

            /// <summary>
            /// Enum ALLCHARGES for value: ALL_CHARGES
            /// </summary>
            ALLCHARGES = 3
        }

        /// <summary>
        /// Returns a <see cref="TypeOfChargeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeOfChargeEnum TypeOfChargeEnumFromString(string value)
        {
            if (value.Equals("TRANSPORTATION_CHARGES"))
                return TypeOfChargeEnum.TRANSPORTATIONCHARGES;

            if (value.Equals("DUTIES_AND_TAXES"))
                return TypeOfChargeEnum.DUTIESANDTAXES;

            if (value.Equals("ALL_CHARGES"))
                return TypeOfChargeEnum.ALLCHARGES;

            throw new NotImplementedException($"Could not convert value to type TypeOfChargeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeOfChargeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeOfChargeEnum? TypeOfChargeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("TRANSPORTATION_CHARGES"))
                return TypeOfChargeEnum.TRANSPORTATIONCHARGES;

            if (value.Equals("DUTIES_AND_TAXES"))
                return TypeOfChargeEnum.DUTIESANDTAXES;

            if (value.Equals("ALL_CHARGES"))
                return TypeOfChargeEnum.ALLCHARGES;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeOfChargeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeOfChargeEnumToJsonValue(TypeOfChargeEnum? value)
        {
            if (value == TypeOfChargeEnum.TRANSPORTATIONCHARGES)
                return "TRANSPORTATION_CHARGES";

            if (value == TypeOfChargeEnum.DUTIESANDTAXES)
                return "DUTIES_AND_TAXES";

            if (value == TypeOfChargeEnum.ALLCHARGES)
                return "ALL_CHARGES";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of TypeOfCharge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeOfChargeEnum?> TypeOfChargeOption { get; private set; }

        /// <summary>
        /// The type of charge billed to the specified party. Possible values: - TRANSPORTATION_CHARGES: Transportation-related charges only. When billing transportation charges to the sender (BILL_SENDER), the accountNumber must match the account used to initiate the shipment. - DUTIES_AND_TAXES: Duties and taxes only - ALL_CHARGES: All Shipment Charges (Transportatio and Duties and Taxes)Required when using BILL_RECEIVER_CONTRACT (FedEx COLLECT); includes all charges  
        /// </summary>
        /// <value>The type of charge billed to the specified party. Possible values: - TRANSPORTATION_CHARGES: Transportation-related charges only. When billing transportation charges to the sender (BILL_SENDER), the accountNumber must match the account used to initiate the shipment. - DUTIES_AND_TAXES: Duties and taxes only - ALL_CHARGES: All Shipment Charges (Transportatio and Duties and Taxes)Required when using BILL_RECEIVER_CONTRACT (FedEx COLLECT); includes all charges  </value>
        /* <example>ALL_CHARGES</example> */
        [JsonPropertyName("typeOfCharge")]
        public TypeOfChargeEnum? TypeOfCharge { get { return this.TypeOfChargeOption; } set { this.TypeOfChargeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccountNumberOption { get; private set; }

        /// <summary>
        /// The FedEx account number of the party to be billed.
        /// </summary>
        /// <value>The FedEx account number of the party to be billed.</value>
        /* <example>602684342</example> */
        [JsonPropertyName("accountNumber")]
        public string? AccountNumber { get { return this.AccountNumberOption; } set { this.AccountNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryCodeOption { get; private set; }

        /// <summary>
        /// Two-letter ISO country code of the party to be billed.
        /// </summary>
        /// <value>Two-letter ISO country code of the party to be billed.</value>
        /* <example>US</example> */
        [JsonPropertyName("countryCode")]
        public string? CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PostalCodeOption { get; private set; }

        /// <summary>
        /// Postal code of the party to be billed.
        /// </summary>
        /// <value>Postal code of the party to be billed.</value>
        /* <example>30305</example> */
        [JsonPropertyName("postalCode")]
        public string? PostalCode { get { return this.PostalCodeOption; } set { this.PostalCodeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FedExCarrierPayment {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Party: ").Append(Party).Append("\n");
            sb.Append("  TypeOfCharge: ").Append(TypeOfCharge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FedExCarrierPayment" />
    /// </summary>
    public class FedExCarrierPaymentJsonConverter : JsonConverter<FedExCarrierPayment>
    {
        /// <summary>
        /// Deserializes json to <see cref="FedExCarrierPayment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FedExCarrierPayment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accountNumber = default;
            Option<string?> countryCode = default;
            Option<string?> postalCode = default;
            Option<FedExCarrierPayment.PartyEnum?> party = default;
            Option<FedExCarrierPayment.TypeOfChargeEnum?> typeOfCharge = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountNumber":
                            accountNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "countryCode":
                            countryCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "postalCode":
                            postalCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "party":
                            string? partyRawValue = utf8JsonReader.GetString();
                            if (partyRawValue != null)
                                party = new Option<FedExCarrierPayment.PartyEnum?>(FedExCarrierPayment.PartyEnumFromStringOrDefault(partyRawValue));
                            break;
                        case "typeOfCharge":
                            string? typeOfChargeRawValue = utf8JsonReader.GetString();
                            if (typeOfChargeRawValue != null)
                                typeOfCharge = new Option<FedExCarrierPayment.TypeOfChargeEnum?>(FedExCarrierPayment.TypeOfChargeEnumFromStringOrDefault(typeOfChargeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accountNumber.IsSet && accountNumber.Value == null)
                throw new ArgumentNullException(nameof(accountNumber), "Property is not nullable for class FedExCarrierPayment.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class FedExCarrierPayment.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class FedExCarrierPayment.");

            if (party.IsSet && party.Value == null)
                throw new ArgumentNullException(nameof(party), "Property is not nullable for class FedExCarrierPayment.");

            if (typeOfCharge.IsSet && typeOfCharge.Value == null)
                throw new ArgumentNullException(nameof(typeOfCharge), "Property is not nullable for class FedExCarrierPayment.");

            return new FedExCarrierPayment(accountNumber, countryCode, postalCode, party, typeOfCharge);
        }

        /// <summary>
        /// Serializes a <see cref="FedExCarrierPayment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fedExCarrierPayment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FedExCarrierPayment fedExCarrierPayment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fedExCarrierPayment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FedExCarrierPayment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fedExCarrierPayment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FedExCarrierPayment fedExCarrierPayment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fedExCarrierPayment.AccountNumberOption.IsSet && fedExCarrierPayment.AccountNumber == null)
                throw new ArgumentNullException(nameof(fedExCarrierPayment.AccountNumber), "Property is required for class FedExCarrierPayment.");

            if (fedExCarrierPayment.CountryCodeOption.IsSet && fedExCarrierPayment.CountryCode == null)
                throw new ArgumentNullException(nameof(fedExCarrierPayment.CountryCode), "Property is required for class FedExCarrierPayment.");

            if (fedExCarrierPayment.PostalCodeOption.IsSet && fedExCarrierPayment.PostalCode == null)
                throw new ArgumentNullException(nameof(fedExCarrierPayment.PostalCode), "Property is required for class FedExCarrierPayment.");

            if (fedExCarrierPayment.AccountNumberOption.IsSet)
                writer.WriteString("accountNumber", fedExCarrierPayment.AccountNumber);

            if (fedExCarrierPayment.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", fedExCarrierPayment.CountryCode);

            if (fedExCarrierPayment.PostalCodeOption.IsSet)
                writer.WriteString("postalCode", fedExCarrierPayment.PostalCode);

            var partyRawValue = FedExCarrierPayment.PartyEnumToJsonValue(fedExCarrierPayment.PartyOption.Value!.Value);
            writer.WriteString("party", partyRawValue);
            var typeOfChargeRawValue = FedExCarrierPayment.TypeOfChargeEnumToJsonValue(fedExCarrierPayment.TypeOfChargeOption.Value!.Value);
            writer.WriteString("typeOfCharge", typeOfChargeRawValue);
        }
    }
}
