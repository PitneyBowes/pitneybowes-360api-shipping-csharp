// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// Shipment Options have an added feature that is Manifest.&lt;br /&gt; With Manifest, the Mail Center agent can print the Manifest (End of day records of all created shipment) of selected carrier.
    /// </summary>
    public partial class MilitaryMailShipmentsRequestV2ShipmentOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MilitaryMailShipmentsRequestV2ShipmentOptions" /> class.
        /// </summary>
        /// <param name="addToManifest">This option asks if the shipment is to be added for Manifest, so that the shipment will reflect in the Manifest Form while compilation. Supported for CPC and USPS carriers. &lt;br /&gt; The value can be &#39;true&#39; or &#39;false&#39;.</param>
        /// <param name="minimalAddressValidation">Allows performing minimal address validation during shipment creation. the addressLine1 field is not validated if set to true. Minimal address validation is supported only for these APIs:   - Create Shipment   - Create Bulk Shipments   - Create Multipiece Shipment </param>
        /// <param name="shipperID">The unique identifier of the known shipper associated with this shipment.</param>
        [JsonConstructor]
        public MilitaryMailShipmentsRequestV2ShipmentOptions(Option<bool?> addToManifest = default, Option<bool?> minimalAddressValidation = default, Option<string> shipperID = default)
        {
            AddToManifestOption = addToManifest;
            MinimalAddressValidationOption = minimalAddressValidation;
            ShipperIDOption = shipperID;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AddToManifest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AddToManifestOption { get; private set; }

        /// <summary>
        /// This option asks if the shipment is to be added for Manifest, so that the shipment will reflect in the Manifest Form while compilation. Supported for CPC and USPS carriers. &lt;br /&gt; The value can be &#39;true&#39; or &#39;false&#39;.
        /// </summary>
        /// <value>This option asks if the shipment is to be added for Manifest, so that the shipment will reflect in the Manifest Form while compilation. Supported for CPC and USPS carriers. &lt;br /&gt; The value can be &#39;true&#39; or &#39;false&#39;.</value>
        /* <example>true</example> */
        [JsonPropertyName("addToManifest")]
        public bool? AddToManifest { get { return this.AddToManifestOption; } set { this.AddToManifestOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of MinimalAddressValidation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MinimalAddressValidationOption { get; private set; }

        /// <summary>
        /// Allows performing minimal address validation during shipment creation. the addressLine1 field is not validated if set to true. Minimal address validation is supported only for these APIs:   - Create Shipment   - Create Bulk Shipments   - Create Multipiece Shipment 
        /// </summary>
        /// <value>Allows performing minimal address validation during shipment creation. the addressLine1 field is not validated if set to true. Minimal address validation is supported only for these APIs:   - Create Shipment   - Create Bulk Shipments   - Create Multipiece Shipment </value>
        /* <example>true</example> */
        [JsonPropertyName("minimalAddressValidation")]
        public bool? MinimalAddressValidation { get { return this.MinimalAddressValidationOption; } set { this.MinimalAddressValidationOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ShipperID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShipperIDOption { get; private set; }

        /// <summary>
        /// The unique identifier of the known shipper associated with this shipment.
        /// </summary>
        /// <value>The unique identifier of the known shipper associated with this shipment.</value>
        /* <example>1234567890</example> */
        [JsonPropertyName("shipperID")]
        public string ShipperID { get { return this.ShipperIDOption; } set { this.ShipperIDOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MilitaryMailShipmentsRequestV2ShipmentOptions {\n");
            sb.Append("  AddToManifest: ").Append(AddToManifest).Append("\n");
            sb.Append("  MinimalAddressValidation: ").Append(MinimalAddressValidation).Append("\n");
            sb.Append("  ShipperID: ").Append(ShipperID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MilitaryMailShipmentsRequestV2ShipmentOptions" />
    /// </summary>
    public class MilitaryMailShipmentsRequestV2ShipmentOptionsJsonConverter : JsonConverter<MilitaryMailShipmentsRequestV2ShipmentOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="MilitaryMailShipmentsRequestV2ShipmentOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MilitaryMailShipmentsRequestV2ShipmentOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> addToManifest = default;
            Option<bool?> minimalAddressValidation = default;
            Option<string> shipperID = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "addToManifest":
                            addToManifest = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "minimalAddressValidation":
                            minimalAddressValidation = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "shipperID":
                            shipperID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (addToManifest.IsSet && addToManifest.Value == null)
                throw new ArgumentNullException(nameof(addToManifest), "Property is not nullable for class MilitaryMailShipmentsRequestV2ShipmentOptions.");

            if (minimalAddressValidation.IsSet && minimalAddressValidation.Value == null)
                throw new ArgumentNullException(nameof(minimalAddressValidation), "Property is not nullable for class MilitaryMailShipmentsRequestV2ShipmentOptions.");

            if (shipperID.IsSet && shipperID.Value == null)
                throw new ArgumentNullException(nameof(shipperID), "Property is not nullable for class MilitaryMailShipmentsRequestV2ShipmentOptions.");

            return new MilitaryMailShipmentsRequestV2ShipmentOptions(addToManifest, minimalAddressValidation, shipperID);
        }

        /// <summary>
        /// Serializes a <see cref="MilitaryMailShipmentsRequestV2ShipmentOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="militaryMailShipmentsRequestV2ShipmentOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MilitaryMailShipmentsRequestV2ShipmentOptions militaryMailShipmentsRequestV2ShipmentOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, militaryMailShipmentsRequestV2ShipmentOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MilitaryMailShipmentsRequestV2ShipmentOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="militaryMailShipmentsRequestV2ShipmentOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MilitaryMailShipmentsRequestV2ShipmentOptions militaryMailShipmentsRequestV2ShipmentOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (militaryMailShipmentsRequestV2ShipmentOptions.ShipperIDOption.IsSet && militaryMailShipmentsRequestV2ShipmentOptions.ShipperID == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentsRequestV2ShipmentOptions.ShipperID), "Property is required for class MilitaryMailShipmentsRequestV2ShipmentOptions.");

            if (militaryMailShipmentsRequestV2ShipmentOptions.AddToManifestOption.IsSet)
                writer.WriteBoolean("addToManifest", militaryMailShipmentsRequestV2ShipmentOptions.AddToManifestOption.Value.Value);

            if (militaryMailShipmentsRequestV2ShipmentOptions.MinimalAddressValidationOption.IsSet)
                writer.WriteBoolean("minimalAddressValidation", militaryMailShipmentsRequestV2ShipmentOptions.MinimalAddressValidationOption.Value.Value);

            if (militaryMailShipmentsRequestV2ShipmentOptions.ShipperIDOption.IsSet)
                writer.WriteString("shipperID", militaryMailShipmentsRequestV2ShipmentOptions.ShipperID);
        }
    }
}
