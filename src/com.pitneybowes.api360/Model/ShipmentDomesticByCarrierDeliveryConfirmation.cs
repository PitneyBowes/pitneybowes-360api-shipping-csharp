// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// Indicates the supporting special service or document as an evidence of shipment delivery.  &gt; Provide either the specialserviceId or the specialservice objects such as deliveryConfirmation, handling, insurance and returnOptions, but not both.  For the delivery confirmation, user can select any of the following special services, but they may vary as per the carrier selection. &lt;br /&gt;   - Signature Required/ Indirect Signature Required : SIGNATURE   - Delivery confirmation: DELIVERY_CONFIRMATION   - Proof of age required (18 years) Adult Signature Required: ADULT_SIGNATURE   - Proof of age required (19 years): ADULT_SIGNATURE_19   - No Signature Required: NO_SIGNATURE   - Direct Signature Required: DIRECT_SIGNATURE   - Chain of Signature: CHAIN_OF_SIGNATURE       Carrier specific options:   - UPS supports *SIGNATURE and ADULT_SIGNATURE*.    - FedEx supports *SIGNATURE, ADULT_SIGNATURE, NO_SIGNATURE, and DIRECT_SIGNATURE*.   - Purolator supports *ADULT_SIGNATURE, NO_SIGNATURE, and CHAIN_OF_SIGNATURE*.   - GoFor supports *SIGNATURE*.   - CPC supports *SIGNATURE, DELIVERY_CONFIRMATION, ADULT_SIGNATURE, ADULT_SIGNATURE_19, and NO_SIGNATURE*.     
    /// </summary>
    public partial class ShipmentDomesticByCarrierDeliveryConfirmation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDomesticByCarrierDeliveryConfirmation" /> class.
        /// </summary>
        /// <param name="type">The delivery confirmation Type.</param>
        [JsonConstructor]
        public ShipmentDomesticByCarrierDeliveryConfirmation(Option<TypeEnum?> type = default)
        {
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The delivery confirmation Type.
        /// </summary>
        /// <value>The delivery confirmation Type.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum NOSIGNATURE for value: NO_SIGNATURE
            /// </summary>
            NOSIGNATURE = 1,

            /// <summary>
            /// Enum SIGNATURE for value: SIGNATURE
            /// </summary>
            SIGNATURE = 2,

            /// <summary>
            /// Enum ADULTSIGNATURE for value: ADULT_SIGNATURE
            /// </summary>
            ADULTSIGNATURE = 3,

            /// <summary>
            /// Enum ADULTSIGNATURE19 for value: ADULT_SIGNATURE_19
            /// </summary>
            ADULTSIGNATURE19 = 4,

            /// <summary>
            /// Enum DIRECTSIGNATURE for value: DIRECT_SIGNATURE
            /// </summary>
            DIRECTSIGNATURE = 5,

            /// <summary>
            /// Enum DELIVERYCONFIRMATION for value: DELIVERY_CONFIRMATION
            /// </summary>
            DELIVERYCONFIRMATION = 6,

            /// <summary>
            /// Enum CHAINOFSIGNATURE for value: CHAIN_OF_SIGNATURE
            /// </summary>
            CHAINOFSIGNATURE = 7
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("NO_SIGNATURE"))
                return TypeEnum.NOSIGNATURE;

            if (value.Equals("SIGNATURE"))
                return TypeEnum.SIGNATURE;

            if (value.Equals("ADULT_SIGNATURE"))
                return TypeEnum.ADULTSIGNATURE;

            if (value.Equals("ADULT_SIGNATURE_19"))
                return TypeEnum.ADULTSIGNATURE19;

            if (value.Equals("DIRECT_SIGNATURE"))
                return TypeEnum.DIRECTSIGNATURE;

            if (value.Equals("DELIVERY_CONFIRMATION"))
                return TypeEnum.DELIVERYCONFIRMATION;

            if (value.Equals("CHAIN_OF_SIGNATURE"))
                return TypeEnum.CHAINOFSIGNATURE;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("NO_SIGNATURE"))
                return TypeEnum.NOSIGNATURE;

            if (value.Equals("SIGNATURE"))
                return TypeEnum.SIGNATURE;

            if (value.Equals("ADULT_SIGNATURE"))
                return TypeEnum.ADULTSIGNATURE;

            if (value.Equals("ADULT_SIGNATURE_19"))
                return TypeEnum.ADULTSIGNATURE19;

            if (value.Equals("DIRECT_SIGNATURE"))
                return TypeEnum.DIRECTSIGNATURE;

            if (value.Equals("DELIVERY_CONFIRMATION"))
                return TypeEnum.DELIVERYCONFIRMATION;

            if (value.Equals("CHAIN_OF_SIGNATURE"))
                return TypeEnum.CHAINOFSIGNATURE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.NOSIGNATURE)
                return "NO_SIGNATURE";

            if (value == TypeEnum.SIGNATURE)
                return "SIGNATURE";

            if (value == TypeEnum.ADULTSIGNATURE)
                return "ADULT_SIGNATURE";

            if (value == TypeEnum.ADULTSIGNATURE19)
                return "ADULT_SIGNATURE_19";

            if (value == TypeEnum.DIRECTSIGNATURE)
                return "DIRECT_SIGNATURE";

            if (value == TypeEnum.DELIVERYCONFIRMATION)
                return "DELIVERY_CONFIRMATION";

            if (value == TypeEnum.CHAINOFSIGNATURE)
                return "CHAIN_OF_SIGNATURE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// The delivery confirmation Type.
        /// </summary>
        /// <value>The delivery confirmation Type.</value>
        /* <example>ADULT_SIGNATURE</example> */
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentDomesticByCarrierDeliveryConfirmation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentDomesticByCarrierDeliveryConfirmation" />
    /// </summary>
    public class ShipmentDomesticByCarrierDeliveryConfirmationJsonConverter : JsonConverter<ShipmentDomesticByCarrierDeliveryConfirmation>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShipmentDomesticByCarrierDeliveryConfirmation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentDomesticByCarrierDeliveryConfirmation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ShipmentDomesticByCarrierDeliveryConfirmation.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ShipmentDomesticByCarrierDeliveryConfirmation.TypeEnum?>(ShipmentDomesticByCarrierDeliveryConfirmation.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ShipmentDomesticByCarrierDeliveryConfirmation.");

            return new ShipmentDomesticByCarrierDeliveryConfirmation(type);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentDomesticByCarrierDeliveryConfirmation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticByCarrierDeliveryConfirmation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentDomesticByCarrierDeliveryConfirmation shipmentDomesticByCarrierDeliveryConfirmation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, shipmentDomesticByCarrierDeliveryConfirmation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentDomesticByCarrierDeliveryConfirmation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticByCarrierDeliveryConfirmation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ShipmentDomesticByCarrierDeliveryConfirmation shipmentDomesticByCarrierDeliveryConfirmation, JsonSerializerOptions jsonSerializerOptions)
        {
            var typeRawValue = ShipmentDomesticByCarrierDeliveryConfirmation.TypeEnumToJsonValue(shipmentDomesticByCarrierDeliveryConfirmation.TypeOption.Value.Value);
            writer.WriteString("type", typeRawValue);
        }
    }
}
