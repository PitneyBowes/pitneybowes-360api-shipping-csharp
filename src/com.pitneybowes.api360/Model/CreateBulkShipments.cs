/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.pitneybowes.api360.Client.OpenAPIDateConverter;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// ShipmentBatch information contains following schema
    /// </summary>
    [DataContract(Name = "CreateBulkShipments")]
    public partial class CreateBulkShipments : IValidatableObject
    {
        /// <summary>
        /// This indicates the label size of the Bulk Shipment, e.g., DocSize can be 8&#39; X 11&#39; or 4&#39; X 6&#39;.
        /// </summary>
        /// <value>This indicates the label size of the Bulk Shipment, e.g., DocSize can be 8&#39; X 11&#39; or 4&#39; X 6&#39;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SizeEnum
        {
            /// <summary>
            /// Enum _8X11 for value: DOC_8X11
            /// </summary>
            [EnumMember(Value = "DOC_8X11")]
            _8X11 = 1,

            /// <summary>
            /// Enum _4X6 for value: DOC_4X6
            /// </summary>
            [EnumMember(Value = "DOC_4X6")]
            _4X6 = 2
        }


        /// <summary>
        /// This indicates the label size of the Bulk Shipment, e.g., DocSize can be 8&#39; X 11&#39; or 4&#39; X 6&#39;.
        /// </summary>
        /// <value>This indicates the label size of the Bulk Shipment, e.g., DocSize can be 8&#39; X 11&#39; or 4&#39; X 6&#39;.</value>
        /// <example>DOC_8X11</example>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public SizeEnum Size { get; set; }
        /// <summary>
        /// This indicates the type of the Batch Shipment, e.g., Shipping Label.
        /// </summary>
        /// <value>This indicates the type of the Batch Shipment, e.g., Shipping Label.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SHIPPINGLABEL for value: SHIPPING_LABEL
            /// </summary>
            [EnumMember(Value = "SHIPPING_LABEL")]
            SHIPPINGLABEL = 1
        }


        /// <summary>
        /// This indicates the type of the Batch Shipment, e.g., Shipping Label.
        /// </summary>
        /// <value>This indicates the type of the Batch Shipment, e.g., Shipping Label.</value>
        /// <example>SHIPPING_LABEL</example>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// This defines the type of the shipment which is printed, e.g., Shipping label gets printed in PDF form.
        /// </summary>
        /// <value>This defines the type of the shipment which is printed, e.g., Shipping label gets printed in PDF form.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF = 1
        }


        /// <summary>
        /// This defines the type of the shipment which is printed, e.g., Shipping label gets printed in PDF form.
        /// </summary>
        /// <value>This defines the type of the shipment which is printed, e.g., Shipping label gets printed in PDF form.</value>
        /// <example>PDF</example>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBulkShipments" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateBulkShipments() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBulkShipments" /> class.
        /// </summary>
        /// <param name="groupName">groupName.</param>
        /// <param name="size">This indicates the label size of the Bulk Shipment, e.g., DocSize can be 8&#39; X 11&#39; or 4&#39; X 6&#39;. (required).</param>
        /// <param name="type">This indicates the type of the Batch Shipment, e.g., Shipping Label. (required).</param>
        /// <param name="format">This defines the type of the shipment which is printed, e.g., Shipping label gets printed in PDF form..</param>
        /// <param name="name">name (required).</param>
        /// <param name="carrierAccountId">A unique identifier associated with the Carrier account used by client users during shipment process. Default CarrierAccountID for this batch will be user&#39;s registered carrier account. User can override this value by defining it at shipment level. (required).</param>
        /// <param name="parcelType">Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. Different carriers have different ParcelTypes, e.g., FRPKG, LGENV, TUBE, and PKG. User can override this value by defining it at Shipment level. (required).</param>
        /// <param name="serviceId">A unique identifier given to the carrier-specific service. It varies with carrier selection. This is required for creating a shipment, while it is optional for rating a parcel. User can override this value by defining it at Shipment level. (required).</param>
        /// <param name="specialServices">It provides a carrier-service based special or extra service, which also varies based on services and parcel types. User can override this value by defining it at shipment level..</param>
        /// <param name="shipments">shipments (required).</param>
        public CreateBulkShipments(string groupName = default(string), SizeEnum size = default(SizeEnum), TypeEnum type = default(TypeEnum), FormatEnum? format = default(FormatEnum?), string name = default(string), string carrierAccountId = default(string), string parcelType = default(string), string serviceId = default(string), List<SpecialService> specialServices = default(List<SpecialService>), List<Shipment> shipments = default(List<Shipment>))
        {
            this.Size = size;
            this.Type = type;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateBulkShipments and cannot be null");
            }
            this.Name = name;
            // to ensure "carrierAccountId" is required (not null)
            if (carrierAccountId == null)
            {
                throw new ArgumentNullException("carrierAccountId is a required property for CreateBulkShipments and cannot be null");
            }
            this.CarrierAccountId = carrierAccountId;
            // to ensure "parcelType" is required (not null)
            if (parcelType == null)
            {
                throw new ArgumentNullException("parcelType is a required property for CreateBulkShipments and cannot be null");
            }
            this.ParcelType = parcelType;
            // to ensure "serviceId" is required (not null)
            if (serviceId == null)
            {
                throw new ArgumentNullException("serviceId is a required property for CreateBulkShipments and cannot be null");
            }
            this.ServiceId = serviceId;
            // to ensure "shipments" is required (not null)
            if (shipments == null)
            {
                throw new ArgumentNullException("shipments is a required property for CreateBulkShipments and cannot be null");
            }
            this.Shipments = shipments;
            this.GroupName = groupName;
            this.Format = format;
            this.SpecialServices = specialServices;
        }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// A unique identifier associated with the Carrier account used by client users during shipment process. Default CarrierAccountID for this batch will be user&#39;s registered carrier account. User can override this value by defining it at shipment level.
        /// </summary>
        /// <value>A unique identifier associated with the Carrier account used by client users during shipment process. Default CarrierAccountID for this batch will be user&#39;s registered carrier account. User can override this value by defining it at shipment level.</value>
        /// <example>abcd123</example>
        [DataMember(Name = "carrierAccountId", IsRequired = true, EmitDefaultValue = true)]
        public string CarrierAccountId { get; set; }

        /// <summary>
        /// Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. Different carriers have different ParcelTypes, e.g., FRPKG, LGENV, TUBE, and PKG. User can override this value by defining it at Shipment level.
        /// </summary>
        /// <value>Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. Different carriers have different ParcelTypes, e.g., FRPKG, LGENV, TUBE, and PKG. User can override this value by defining it at Shipment level.</value>
        /// <example>LP</example>
        [DataMember(Name = "parcelType", IsRequired = true, EmitDefaultValue = true)]
        public string ParcelType { get; set; }

        /// <summary>
        /// A unique identifier given to the carrier-specific service. It varies with carrier selection. This is required for creating a shipment, while it is optional for rating a parcel. User can override this value by defining it at Shipment level.
        /// </summary>
        /// <value>A unique identifier given to the carrier-specific service. It varies with carrier selection. This is required for creating a shipment, while it is optional for rating a parcel. User can override this value by defining it at Shipment level.</value>
        /// <example>LIB</example>
        [DataMember(Name = "serviceId", IsRequired = true, EmitDefaultValue = true)]
        public string ServiceId { get; set; }

        /// <summary>
        /// It provides a carrier-service based special or extra service, which also varies based on services and parcel types. User can override this value by defining it at shipment level.
        /// </summary>
        /// <value>It provides a carrier-service based special or extra service, which also varies based on services and parcel types. User can override this value by defining it at shipment level.</value>
        [DataMember(Name = "specialServices", EmitDefaultValue = false)]
        public List<SpecialService> SpecialServices { get; set; }

        /// <summary>
        /// Gets or Sets Shipments
        /// </summary>
        [DataMember(Name = "shipments", IsRequired = true, EmitDefaultValue = true)]
        public List<Shipment> Shipments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateBulkShipments {\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CarrierAccountId: ").Append(CarrierAccountId).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  SpecialServices: ").Append(SpecialServices).Append("\n");
            sb.Append("  Shipments: ").Append(Shipments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
