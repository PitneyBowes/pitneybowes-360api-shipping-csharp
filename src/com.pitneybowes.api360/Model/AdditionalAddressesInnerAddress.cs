// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// The additional address details.
    /// </summary>
    public partial class AdditionalAddressesInnerAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalAddressesInnerAddress" /> class.
        /// </summary>
        /// <param name="residential">If the address is residential.</param>
        /// <param name="phone">Contact phone number for the address.</param>
        /// <param name="countryCode">The ISO 2-letter country code.</param>
        /// <param name="company">The name of the company associated with the address.</param>
        /// <param name="postalCode">ZIP or postal code.</param>
        /// <param name="cityTown">Name of the city or town.</param>
        /// <param name="name">Name of the contact person.</param>
        /// <param name="stateProvince">State or province code.</param>
        /// <param name="addressLine1">Primary street address line.</param>
        [JsonConstructor]
        public AdditionalAddressesInnerAddress(Option<bool?> residential = default, Option<string> phone = default, Option<string> countryCode = default, Option<string> company = default, Option<string> postalCode = default, Option<string> cityTown = default, Option<string> name = default, Option<string> stateProvince = default, Option<string> addressLine1 = default)
        {
            ResidentialOption = residential;
            PhoneOption = phone;
            CountryCodeOption = countryCode;
            CompanyOption = company;
            PostalCodeOption = postalCode;
            CityTownOption = cityTown;
            NameOption = name;
            StateProvinceOption = stateProvince;
            AddressLine1Option = addressLine1;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Residential
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ResidentialOption { get; private set; }

        /// <summary>
        /// If the address is residential.
        /// </summary>
        /// <value>If the address is residential.</value>
        /* <example>false</example> */
        [JsonPropertyName("residential")]
        public bool? Residential { get { return this.ResidentialOption; } set { this.ResidentialOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PhoneOption { get; private set; }

        /// <summary>
        /// Contact phone number for the address.
        /// </summary>
        /// <value>Contact phone number for the address.</value>
        /* <example>732-443-1007</example> */
        [JsonPropertyName("phone")]
        public string Phone { get { return this.PhoneOption; } set { this.PhoneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryCodeOption { get; private set; }

        /// <summary>
        /// The ISO 2-letter country code.
        /// </summary>
        /// <value>The ISO 2-letter country code.</value>
        /* <example>US</example> */
        [JsonPropertyName("countryCode")]
        public string CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CompanyOption { get; private set; }

        /// <summary>
        /// The name of the company associated with the address.
        /// </summary>
        /// <value>The name of the company associated with the address.</value>
        /* <example>ABC Company</example> */
        [JsonPropertyName("company")]
        public string Company { get { return this.CompanyOption; } set { this.CompanyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PostalCodeOption { get; private set; }

        /// <summary>
        /// ZIP or postal code.
        /// </summary>
        /// <value>ZIP or postal code.</value>
        /* <example>08810-1411</example> */
        [JsonPropertyName("postalCode")]
        public string PostalCode { get { return this.PostalCodeOption; } set { this.PostalCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CityTown
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CityTownOption { get; private set; }

        /// <summary>
        /// Name of the city or town.
        /// </summary>
        /// <value>Name of the city or town.</value>
        /* <example>DAYTON</example> */
        [JsonPropertyName("cityTown")]
        public string CityTown { get { return this.CityTownOption; } set { this.CityTownOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Name of the contact person.
        /// </summary>
        /// <value>Name of the contact person.</value>
        /* <example>Warehouse Manager</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StateProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StateProvinceOption { get; private set; }

        /// <summary>
        /// State or province code.
        /// </summary>
        /// <value>State or province code.</value>
        /* <example>NJ</example> */
        [JsonPropertyName("stateProvince")]
        public string StateProvince { get { return this.StateProvinceOption; } set { this.StateProvinceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressLine1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressLine1Option { get; private set; }

        /// <summary>
        /// Primary street address line.
        /// </summary>
        /// <value>Primary street address line.</value>
        /* <example>2270 US HIGHWAY 130</example> */
        [JsonPropertyName("addressLine1")]
        public string AddressLine1 { get { return this.AddressLine1Option; } set { this.AddressLine1Option = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalAddressesInnerAddress {\n");
            sb.Append("  Residential: ").Append(Residential).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CityTown: ").Append(CityTown).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdditionalAddressesInnerAddress" />
    /// </summary>
    public class AdditionalAddressesInnerAddressJsonConverter : JsonConverter<AdditionalAddressesInnerAddress>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdditionalAddressesInnerAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdditionalAddressesInnerAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> residential = default;
            Option<string> phone = default;
            Option<string> countryCode = default;
            Option<string> company = default;
            Option<string> postalCode = default;
            Option<string> cityTown = default;
            Option<string> name = default;
            Option<string> stateProvince = default;
            Option<string> addressLine1 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "residential":
                            residential = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "phone":
                            phone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "countryCode":
                            countryCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "company":
                            company = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "postalCode":
                            postalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cityTown":
                            cityTown = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "stateProvince":
                            stateProvince = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "addressLine1":
                            addressLine1 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (residential.IsSet && residential.Value == null)
                throw new ArgumentNullException(nameof(residential), "Property is not nullable for class AdditionalAddressesInnerAddress.");

            if (phone.IsSet && phone.Value == null)
                throw new ArgumentNullException(nameof(phone), "Property is not nullable for class AdditionalAddressesInnerAddress.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class AdditionalAddressesInnerAddress.");

            if (company.IsSet && company.Value == null)
                throw new ArgumentNullException(nameof(company), "Property is not nullable for class AdditionalAddressesInnerAddress.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class AdditionalAddressesInnerAddress.");

            if (cityTown.IsSet && cityTown.Value == null)
                throw new ArgumentNullException(nameof(cityTown), "Property is not nullable for class AdditionalAddressesInnerAddress.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AdditionalAddressesInnerAddress.");

            if (stateProvince.IsSet && stateProvince.Value == null)
                throw new ArgumentNullException(nameof(stateProvince), "Property is not nullable for class AdditionalAddressesInnerAddress.");

            if (addressLine1.IsSet && addressLine1.Value == null)
                throw new ArgumentNullException(nameof(addressLine1), "Property is not nullable for class AdditionalAddressesInnerAddress.");

            return new AdditionalAddressesInnerAddress(residential, phone, countryCode, company, postalCode, cityTown, name, stateProvince, addressLine1);
        }

        /// <summary>
        /// Serializes a <see cref="AdditionalAddressesInnerAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalAddressesInnerAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdditionalAddressesInnerAddress additionalAddressesInnerAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, additionalAddressesInnerAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdditionalAddressesInnerAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="additionalAddressesInnerAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdditionalAddressesInnerAddress additionalAddressesInnerAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (additionalAddressesInnerAddress.PhoneOption.IsSet && additionalAddressesInnerAddress.Phone == null)
                throw new ArgumentNullException(nameof(additionalAddressesInnerAddress.Phone), "Property is required for class AdditionalAddressesInnerAddress.");

            if (additionalAddressesInnerAddress.CountryCodeOption.IsSet && additionalAddressesInnerAddress.CountryCode == null)
                throw new ArgumentNullException(nameof(additionalAddressesInnerAddress.CountryCode), "Property is required for class AdditionalAddressesInnerAddress.");

            if (additionalAddressesInnerAddress.CompanyOption.IsSet && additionalAddressesInnerAddress.Company == null)
                throw new ArgumentNullException(nameof(additionalAddressesInnerAddress.Company), "Property is required for class AdditionalAddressesInnerAddress.");

            if (additionalAddressesInnerAddress.PostalCodeOption.IsSet && additionalAddressesInnerAddress.PostalCode == null)
                throw new ArgumentNullException(nameof(additionalAddressesInnerAddress.PostalCode), "Property is required for class AdditionalAddressesInnerAddress.");

            if (additionalAddressesInnerAddress.CityTownOption.IsSet && additionalAddressesInnerAddress.CityTown == null)
                throw new ArgumentNullException(nameof(additionalAddressesInnerAddress.CityTown), "Property is required for class AdditionalAddressesInnerAddress.");

            if (additionalAddressesInnerAddress.NameOption.IsSet && additionalAddressesInnerAddress.Name == null)
                throw new ArgumentNullException(nameof(additionalAddressesInnerAddress.Name), "Property is required for class AdditionalAddressesInnerAddress.");

            if (additionalAddressesInnerAddress.StateProvinceOption.IsSet && additionalAddressesInnerAddress.StateProvince == null)
                throw new ArgumentNullException(nameof(additionalAddressesInnerAddress.StateProvince), "Property is required for class AdditionalAddressesInnerAddress.");

            if (additionalAddressesInnerAddress.AddressLine1Option.IsSet && additionalAddressesInnerAddress.AddressLine1 == null)
                throw new ArgumentNullException(nameof(additionalAddressesInnerAddress.AddressLine1), "Property is required for class AdditionalAddressesInnerAddress.");

            if (additionalAddressesInnerAddress.ResidentialOption.IsSet)
                writer.WriteBoolean("residential", additionalAddressesInnerAddress.ResidentialOption.Value.Value);

            if (additionalAddressesInnerAddress.PhoneOption.IsSet)
                writer.WriteString("phone", additionalAddressesInnerAddress.Phone);

            if (additionalAddressesInnerAddress.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", additionalAddressesInnerAddress.CountryCode);

            if (additionalAddressesInnerAddress.CompanyOption.IsSet)
                writer.WriteString("company", additionalAddressesInnerAddress.Company);

            if (additionalAddressesInnerAddress.PostalCodeOption.IsSet)
                writer.WriteString("postalCode", additionalAddressesInnerAddress.PostalCode);

            if (additionalAddressesInnerAddress.CityTownOption.IsSet)
                writer.WriteString("cityTown", additionalAddressesInnerAddress.CityTown);

            if (additionalAddressesInnerAddress.NameOption.IsSet)
                writer.WriteString("name", additionalAddressesInnerAddress.Name);

            if (additionalAddressesInnerAddress.StateProvinceOption.IsSet)
                writer.WriteString("stateProvince", additionalAddressesInnerAddress.StateProvince);

            if (additionalAddressesInnerAddress.AddressLine1Option.IsSet)
                writer.WriteString("addressLine1", additionalAddressesInnerAddress.AddressLine1);
        }
    }
}
