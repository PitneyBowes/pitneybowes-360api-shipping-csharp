// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// The complete address of the Sender.
    /// </summary>
    public partial class FromAddressV2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FromAddressV2" /> class.
        /// </summary>
        /// <param name="name">The name of the Sender to which this address points.</param>
        /// <param name="addressLine1">The addressLine1 contains the Flat number, Building or Apartment Name/number (if any) or company name (if not residential) of the Sender. &lt;br /&gt; &#x60;Max length &#x3D; 35&#x60;.</param>
        /// <param name="phone">This is sender&#39;s phone number. Enter the digits with or without spaces or hyphens. The maximum limit of characters for Phone number are 10 digits. </param>
        /// <param name="cityTown">The name of the city or town the Sender&#39;s address belongs to. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</param>
        /// <param name="stateProvince">\&quot;The name of the State or Province the Sender belongs to. It is the &#x60;2-letter&#x60; State or Province Code for US or Canadian address(es). &lt;br /&gt; Below is the hyperlink for CA country that will navigate to its Province/State Codes page. Similarly, respective country users can check for their country- State/Province codes. &lt;br /&gt; Please switch to the &#x60;Search&#x60; tab, select &#x60;Country codes&#x60; radio button, enter the required country name or country code, and then click &#x60;SEARCH&#x60; button. &lt;br /&gt; &#x60;Max length &#x3D; 2&#x60;\&quot; </param>
        /// <param name="postalCode">The Postal Code or ZIP Code of the address. &lt;br /&gt; For CA addresses, use a &#x60;six-character&#x60; alphanumeric string Postal Code in this format: &#39;A1A 1A1&#39;. &lt;br /&gt; While for US addresses, use either the &#x60;5-digit&#x60; or &#x60;9-digit&#x60; ZIP Code in one of the following formats: &#39;12345&#39; or &#39;12345-6789&#39;. &lt;br /&gt; &#x60;Max length &#x3D; 10&#x60;</param>
        /// <param name="countryCode">\&quot;The country in which the sender&#39;s address is located. The value will be the two-character ISO Code of the country from the ISO country list. &lt;br /&gt; Use ISO 3166-1 Alpha-2 standard values. For best results this should be included, especially if the country name does not appear in any of the unparsedAddressLines. &lt;br /&gt; Below is the hyperlink, please select &#x60;Country codes&#x60; and then click &#x60;SEARCH&#x60; button. &lt;br /&gt; &#x60;Max length &#x3D; 2&#x60;\&quot; </param>
        /// <param name="addressLine2">The addressLine2 contains Street address or Landmark (if any).</param>
        /// <param name="addressLine3">The addressLine3 contains P.O. Box (if any) near the address.</param>
        /// <param name="company">The name of the company, in case if the senders address is not residential.</param>
        /// <param name="email">This must be senders&#39;s valid email. Email is required if the customer is using GoFor Carrier. Sender email is required for RMG b2b shipment. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; </param>
        /// <param name="inductionPostalCode">The postal code where the shipment is tendered to the carrier. If an induction postal code is specified in the \&quot;fromAddress\&quot;, it will be used for rate calculations and determining manifest eligibility instead of the standard postal code. If not specified, the postal code from the \&quot;fromAddress\&quot; will be used. </param>
        /// <param name="residential">The specified address can be Residential or Official. In case if the address is Residential, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.</param>
        [JsonConstructor]
        public FromAddressV2(string name, string addressLine1, string phone, string cityTown, string stateProvince, string postalCode, string countryCode, Option<string?> addressLine2 = default, Option<string?> addressLine3 = default, Option<string?> company = default, Option<string?> email = default, Option<string?> inductionPostalCode = default, Option<bool?> residential = default)
        {
            Name = name;
            AddressLine1 = addressLine1;
            Phone = phone;
            CityTown = cityTown;
            StateProvince = stateProvince;
            PostalCode = postalCode;
            CountryCode = countryCode;
            AddressLine2Option = addressLine2;
            AddressLine3Option = addressLine3;
            CompanyOption = company;
            EmailOption = email;
            InductionPostalCodeOption = inductionPostalCode;
            ResidentialOption = residential;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name of the Sender to which this address points.
        /// </summary>
        /// <value>The name of the Sender to which this address points.</value>
        /* <example>Sender Name</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The addressLine1 contains the Flat number, Building or Apartment Name/number (if any) or company name (if not residential) of the Sender. &lt;br /&gt; &#x60;Max length &#x3D; 35&#x60;.
        /// </summary>
        /// <value>The addressLine1 contains the Flat number, Building or Apartment Name/number (if any) or company name (if not residential) of the Sender. &lt;br /&gt; &#x60;Max length &#x3D; 35&#x60;.</value>
        /* <example>1600 Amphitheatre Parkway</example> */
        [JsonPropertyName("addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// This is sender&#39;s phone number. Enter the digits with or without spaces or hyphens. The maximum limit of characters for Phone number are 10 digits. 
        /// </summary>
        /// <value>This is sender&#39;s phone number. Enter the digits with or without spaces or hyphens. The maximum limit of characters for Phone number are 10 digits. </value>
        /* <example>6502530000</example> */
        [JsonPropertyName("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// The name of the city or town the Sender&#39;s address belongs to. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>The name of the city or town the Sender&#39;s address belongs to. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /* <example>Mountain View</example> */
        [JsonPropertyName("cityTown")]
        public string CityTown { get; set; }

        /// <summary>
        /// \&quot;The name of the State or Province the Sender belongs to. It is the &#x60;2-letter&#x60; State or Province Code for US or Canadian address(es). &lt;br /&gt; Below is the hyperlink for CA country that will navigate to its Province/State Codes page. Similarly, respective country users can check for their country- State/Province codes. &lt;br /&gt; Please switch to the &#x60;Search&#x60; tab, select &#x60;Country codes&#x60; radio button, enter the required country name or country code, and then click &#x60;SEARCH&#x60; button. &lt;br /&gt; &#x60;Max length &#x3D; 2&#x60;\&quot; 
        /// </summary>
        /// <value>\&quot;The name of the State or Province the Sender belongs to. It is the &#x60;2-letter&#x60; State or Province Code for US or Canadian address(es). &lt;br /&gt; Below is the hyperlink for CA country that will navigate to its Province/State Codes page. Similarly, respective country users can check for their country- State/Province codes. &lt;br /&gt; Please switch to the &#x60;Search&#x60; tab, select &#x60;Country codes&#x60; radio button, enter the required country name or country code, and then click &#x60;SEARCH&#x60; button. &lt;br /&gt; &#x60;Max length &#x3D; 2&#x60;\&quot; </value>
        /* <example>CA</example> */
        [JsonPropertyName("stateProvince")]
        public string StateProvince { get; set; }

        /// <summary>
        /// The Postal Code or ZIP Code of the address. &lt;br /&gt; For CA addresses, use a &#x60;six-character&#x60; alphanumeric string Postal Code in this format: &#39;A1A 1A1&#39;. &lt;br /&gt; While for US addresses, use either the &#x60;5-digit&#x60; or &#x60;9-digit&#x60; ZIP Code in one of the following formats: &#39;12345&#39; or &#39;12345-6789&#39;. &lt;br /&gt; &#x60;Max length &#x3D; 10&#x60;
        /// </summary>
        /// <value>The Postal Code or ZIP Code of the address. &lt;br /&gt; For CA addresses, use a &#x60;six-character&#x60; alphanumeric string Postal Code in this format: &#39;A1A 1A1&#39;. &lt;br /&gt; While for US addresses, use either the &#x60;5-digit&#x60; or &#x60;9-digit&#x60; ZIP Code in one of the following formats: &#39;12345&#39; or &#39;12345-6789&#39;. &lt;br /&gt; &#x60;Max length &#x3D; 10&#x60;</value>
        /* <example>94043</example> */
        [JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// \&quot;The country in which the sender&#39;s address is located. The value will be the two-character ISO Code of the country from the ISO country list. &lt;br /&gt; Use ISO 3166-1 Alpha-2 standard values. For best results this should be included, especially if the country name does not appear in any of the unparsedAddressLines. &lt;br /&gt; Below is the hyperlink, please select &#x60;Country codes&#x60; and then click &#x60;SEARCH&#x60; button. &lt;br /&gt; &#x60;Max length &#x3D; 2&#x60;\&quot; 
        /// </summary>
        /// <value>\&quot;The country in which the sender&#39;s address is located. The value will be the two-character ISO Code of the country from the ISO country list. &lt;br /&gt; Use ISO 3166-1 Alpha-2 standard values. For best results this should be included, especially if the country name does not appear in any of the unparsedAddressLines. &lt;br /&gt; Below is the hyperlink, please select &#x60;Country codes&#x60; and then click &#x60;SEARCH&#x60; button. &lt;br /&gt; &#x60;Max length &#x3D; 2&#x60;\&quot; </value>
        /* <example>US</example> */
        [JsonPropertyName("countryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        /// Used to track the state of AddressLine2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine2Option { get; private set; }

        /// <summary>
        /// The addressLine2 contains Street address or Landmark (if any).
        /// </summary>
        /// <value>The addressLine2 contains Street address or Landmark (if any).</value>
        /* <example>near abc street</example> */
        [JsonPropertyName("addressLine2")]
        public string? AddressLine2 { get { return this.AddressLine2Option; } set { this.AddressLine2Option = new(value); } }

        /// <summary>
        /// Used to track the state of AddressLine3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine3Option { get; private set; }

        /// <summary>
        /// The addressLine3 contains P.O. Box (if any) near the address.
        /// </summary>
        /// <value>The addressLine3 contains P.O. Box (if any) near the address.</value>
        /* <example>near xyz street</example> */
        [JsonPropertyName("addressLine3")]
        public string? AddressLine3 { get { return this.AddressLine3Option; } set { this.AddressLine3Option = new(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CompanyOption { get; private set; }

        /// <summary>
        /// The name of the company, in case if the senders address is not residential.
        /// </summary>
        /// <value>The name of the company, in case if the senders address is not residential.</value>
        /* <example>PB</example> */
        [JsonPropertyName("company")]
        public string? Company { get { return this.CompanyOption; } set { this.CompanyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// This must be senders&#39;s valid email. Email is required if the customer is using GoFor Carrier. Sender email is required for RMG b2b shipment. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; 
        /// </summary>
        /// <value>This must be senders&#39;s valid email. Email is required if the customer is using GoFor Carrier. Sender email is required for RMG b2b shipment. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; </value>
        /* <example>testuser@gmail.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of InductionPostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InductionPostalCodeOption { get; private set; }

        /// <summary>
        /// The postal code where the shipment is tendered to the carrier. If an induction postal code is specified in the \&quot;fromAddress\&quot;, it will be used for rate calculations and determining manifest eligibility instead of the standard postal code. If not specified, the postal code from the \&quot;fromAddress\&quot; will be used. 
        /// </summary>
        /// <value>The postal code where the shipment is tendered to the carrier. If an induction postal code is specified in the \&quot;fromAddress\&quot;, it will be used for rate calculations and determining manifest eligibility instead of the standard postal code. If not specified, the postal code from the \&quot;fromAddress\&quot; will be used. </value>
        /* <example>06905</example> */
        [JsonPropertyName("inductionPostalCode")]
        public string? InductionPostalCode { get { return this.InductionPostalCodeOption; } set { this.InductionPostalCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Residential
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ResidentialOption { get; private set; }

        /// <summary>
        /// The specified address can be Residential or Official. In case if the address is Residential, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.
        /// </summary>
        /// <value>The specified address can be Residential or Official. In case if the address is Residential, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.</value>
        /* <example>true</example> */
        [JsonPropertyName("residential")]
        public bool? Residential { get { return this.ResidentialOption; } set { this.ResidentialOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FromAddressV2 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  CityTown: ").Append(CityTown).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  InductionPostalCode: ").Append(InductionPostalCode).Append("\n");
            sb.Append("  Residential: ").Append(Residential).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FromAddressV2" />
    /// </summary>
    public class FromAddressV2JsonConverter : JsonConverter<FromAddressV2>
    {
        /// <summary>
        /// Deserializes json to <see cref="FromAddressV2" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FromAddressV2 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> addressLine1 = default;
            Option<string?> phone = default;
            Option<string?> cityTown = default;
            Option<string?> stateProvince = default;
            Option<string?> postalCode = default;
            Option<string?> countryCode = default;
            Option<string?> addressLine2 = default;
            Option<string?> addressLine3 = default;
            Option<string?> company = default;
            Option<string?> email = default;
            Option<string?> inductionPostalCode = default;
            Option<bool?> residential = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressLine1":
                            addressLine1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "phone":
                            phone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cityTown":
                            cityTown = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stateProvince":
                            stateProvince = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "postalCode":
                            postalCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "countryCode":
                            countryCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressLine2":
                            addressLine2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressLine3":
                            addressLine3 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "company":
                            company = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "inductionPostalCode":
                            inductionPostalCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "residential":
                            residential = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class FromAddressV2.", nameof(name));

            if (!addressLine1.IsSet)
                throw new ArgumentException("Property is required for class FromAddressV2.", nameof(addressLine1));

            if (!phone.IsSet)
                throw new ArgumentException("Property is required for class FromAddressV2.", nameof(phone));

            if (!cityTown.IsSet)
                throw new ArgumentException("Property is required for class FromAddressV2.", nameof(cityTown));

            if (!stateProvince.IsSet)
                throw new ArgumentException("Property is required for class FromAddressV2.", nameof(stateProvince));

            if (!postalCode.IsSet)
                throw new ArgumentException("Property is required for class FromAddressV2.", nameof(postalCode));

            if (!countryCode.IsSet)
                throw new ArgumentException("Property is required for class FromAddressV2.", nameof(countryCode));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class FromAddressV2.");

            if (addressLine1.IsSet && addressLine1.Value == null)
                throw new ArgumentNullException(nameof(addressLine1), "Property is not nullable for class FromAddressV2.");

            if (phone.IsSet && phone.Value == null)
                throw new ArgumentNullException(nameof(phone), "Property is not nullable for class FromAddressV2.");

            if (cityTown.IsSet && cityTown.Value == null)
                throw new ArgumentNullException(nameof(cityTown), "Property is not nullable for class FromAddressV2.");

            if (stateProvince.IsSet && stateProvince.Value == null)
                throw new ArgumentNullException(nameof(stateProvince), "Property is not nullable for class FromAddressV2.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class FromAddressV2.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class FromAddressV2.");

            if (addressLine2.IsSet && addressLine2.Value == null)
                throw new ArgumentNullException(nameof(addressLine2), "Property is not nullable for class FromAddressV2.");

            if (addressLine3.IsSet && addressLine3.Value == null)
                throw new ArgumentNullException(nameof(addressLine3), "Property is not nullable for class FromAddressV2.");

            if (company.IsSet && company.Value == null)
                throw new ArgumentNullException(nameof(company), "Property is not nullable for class FromAddressV2.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class FromAddressV2.");

            if (inductionPostalCode.IsSet && inductionPostalCode.Value == null)
                throw new ArgumentNullException(nameof(inductionPostalCode), "Property is not nullable for class FromAddressV2.");

            if (residential.IsSet && residential.Value == null)
                throw new ArgumentNullException(nameof(residential), "Property is not nullable for class FromAddressV2.");

            return new FromAddressV2(name.Value!, addressLine1.Value!, phone.Value!, cityTown.Value!, stateProvince.Value!, postalCode.Value!, countryCode.Value!, addressLine2, addressLine3, company, email, inductionPostalCode, residential);
        }

        /// <summary>
        /// Serializes a <see cref="FromAddressV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fromAddressV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FromAddressV2 fromAddressV2, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fromAddressV2, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FromAddressV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fromAddressV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FromAddressV2 fromAddressV2, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fromAddressV2.Name == null)
                throw new ArgumentNullException(nameof(fromAddressV2.Name), "Property is required for class FromAddressV2.");

            if (fromAddressV2.AddressLine1 == null)
                throw new ArgumentNullException(nameof(fromAddressV2.AddressLine1), "Property is required for class FromAddressV2.");

            if (fromAddressV2.Phone == null)
                throw new ArgumentNullException(nameof(fromAddressV2.Phone), "Property is required for class FromAddressV2.");

            if (fromAddressV2.CityTown == null)
                throw new ArgumentNullException(nameof(fromAddressV2.CityTown), "Property is required for class FromAddressV2.");

            if (fromAddressV2.StateProvince == null)
                throw new ArgumentNullException(nameof(fromAddressV2.StateProvince), "Property is required for class FromAddressV2.");

            if (fromAddressV2.PostalCode == null)
                throw new ArgumentNullException(nameof(fromAddressV2.PostalCode), "Property is required for class FromAddressV2.");

            if (fromAddressV2.CountryCode == null)
                throw new ArgumentNullException(nameof(fromAddressV2.CountryCode), "Property is required for class FromAddressV2.");

            if (fromAddressV2.AddressLine2Option.IsSet && fromAddressV2.AddressLine2 == null)
                throw new ArgumentNullException(nameof(fromAddressV2.AddressLine2), "Property is required for class FromAddressV2.");

            if (fromAddressV2.AddressLine3Option.IsSet && fromAddressV2.AddressLine3 == null)
                throw new ArgumentNullException(nameof(fromAddressV2.AddressLine3), "Property is required for class FromAddressV2.");

            if (fromAddressV2.CompanyOption.IsSet && fromAddressV2.Company == null)
                throw new ArgumentNullException(nameof(fromAddressV2.Company), "Property is required for class FromAddressV2.");

            if (fromAddressV2.EmailOption.IsSet && fromAddressV2.Email == null)
                throw new ArgumentNullException(nameof(fromAddressV2.Email), "Property is required for class FromAddressV2.");

            if (fromAddressV2.InductionPostalCodeOption.IsSet && fromAddressV2.InductionPostalCode == null)
                throw new ArgumentNullException(nameof(fromAddressV2.InductionPostalCode), "Property is required for class FromAddressV2.");

            writer.WriteString("name", fromAddressV2.Name);

            writer.WriteString("addressLine1", fromAddressV2.AddressLine1);

            writer.WriteString("phone", fromAddressV2.Phone);

            writer.WriteString("cityTown", fromAddressV2.CityTown);

            writer.WriteString("stateProvince", fromAddressV2.StateProvince);

            writer.WriteString("postalCode", fromAddressV2.PostalCode);

            writer.WriteString("countryCode", fromAddressV2.CountryCode);

            if (fromAddressV2.AddressLine2Option.IsSet)
                writer.WriteString("addressLine2", fromAddressV2.AddressLine2);

            if (fromAddressV2.AddressLine3Option.IsSet)
                writer.WriteString("addressLine3", fromAddressV2.AddressLine3);

            if (fromAddressV2.CompanyOption.IsSet)
                writer.WriteString("company", fromAddressV2.Company);

            if (fromAddressV2.EmailOption.IsSet)
                writer.WriteString("email", fromAddressV2.Email);

            if (fromAddressV2.InductionPostalCodeOption.IsSet)
                writer.WriteString("inductionPostalCode", fromAddressV2.InductionPostalCode);

            if (fromAddressV2.ResidentialOption.IsSet)
                writer.WriteBoolean("residential", fromAddressV2.ResidentialOption.Value!.Value);
        }
    }
}
