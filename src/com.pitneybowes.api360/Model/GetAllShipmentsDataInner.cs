// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// GetAllShipmentsDataInner
    /// </summary>
    public partial class GetAllShipmentsDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAllShipmentsDataInner" /> class.
        /// </summary>
        /// <param name="correlationId">Key assigned by the shipping system to the transaction.</param>
        /// <param name="fromAddress">fromAddress</param>
        /// <param name="parcel">parcel</param>
        /// <param name="metadata">Additional metadata that needs to be stored for this shipment can be added here. For now, &#39;Cost Account Name&#39; is supported.</param>
        /// <param name="parcelId">A unique identifier associated with the Parcel.</param>
        /// <param name="parcelTrackingNumber">The Tracking number given to the Parcel for tracking purpose.</param>
        /// <param name="rate">rate</param>
        /// <param name="service">service</param>
        /// <param name="shipmentId">A unique identifier associated with the Shipment.</param>
        /// <param name="shipmentOptions">shipmentOptions</param>
        /// <param name="status">status</param>
        /// <param name="toAddress">toAddress</param>
        /// <param name="altReturnAddress">altReturnAddress</param>
        [JsonConstructor]
        public GetAllShipmentsDataInner(Option<string?> correlationId = default, Option<GetAllShipmentsDataInnerFromAddress?> fromAddress = default, Option<GetAllShipmentsDataInnerParcel?> parcel = default, Option<List<GetAllShipmentsDataInnerMetadataInner>?> metadata = default, Option<string?> parcelId = default, Option<string?> parcelTrackingNumber = default, Option<GetAllShipmentsDataInnerRate?> rate = default, Option<string?> service = default, Option<string?> shipmentId = default, Option<GetAllShipmentsDataInnerShipmentOptions?> shipmentOptions = default, Option<string?> status = default, Option<GetAllShipmentsDataInnerToAddress?> toAddress = default, Option<ShipmentInternationalAltReturnAddress?> altReturnAddress = default)
        {
            CorrelationIdOption = correlationId;
            FromAddressOption = fromAddress;
            ParcelOption = parcel;
            MetadataOption = metadata;
            ParcelIdOption = parcelId;
            ParcelTrackingNumberOption = parcelTrackingNumber;
            RateOption = rate;
            ServiceOption = service;
            ShipmentIdOption = shipmentId;
            ShipmentOptionsOption = shipmentOptions;
            StatusOption = status;
            ToAddressOption = toAddress;
            AltReturnAddressOption = altReturnAddress;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CorrelationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CorrelationIdOption { get; private set; }

        /// <summary>
        /// Key assigned by the shipping system to the transaction.
        /// </summary>
        /// <value>Key assigned by the shipping system to the transaction.</value>
        /* <example>5471c111c60e4b1f9410a434caf3fbd2</example> */
        [JsonPropertyName("correlationId")]
        public string? CorrelationId { get { return this.CorrelationIdOption; } set { this.CorrelationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FromAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetAllShipmentsDataInnerFromAddress?> FromAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [JsonPropertyName("fromAddress")]
        public GetAllShipmentsDataInnerFromAddress? FromAddress { get { return this.FromAddressOption; } set { this.FromAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Parcel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetAllShipmentsDataInnerParcel?> ParcelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [JsonPropertyName("parcel")]
        public GetAllShipmentsDataInnerParcel? Parcel { get { return this.ParcelOption; } set { this.ParcelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetAllShipmentsDataInnerMetadataInner>?> MetadataOption { get; private set; }

        /// <summary>
        /// Additional metadata that needs to be stored for this shipment can be added here. For now, &#39;Cost Account Name&#39; is supported.
        /// </summary>
        /// <value>Additional metadata that needs to be stored for this shipment can be added here. For now, &#39;Cost Account Name&#39; is supported.</value>
        /* <example>[{&quot;name&quot;:&quot;costAccountName&quot;,&quot;value&quot;:&quot;test&quot;}]</example> */
        [JsonPropertyName("metadata")]
        public List<GetAllShipmentsDataInnerMetadataInner>? Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParcelId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParcelIdOption { get; private set; }

        /// <summary>
        /// A unique identifier associated with the Parcel.
        /// </summary>
        /// <value>A unique identifier associated with the Parcel.</value>
        /* <example>B1092</example> */
        [JsonPropertyName("parcelId")]
        public string? ParcelId { get { return this.ParcelIdOption; } set { this.ParcelIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParcelTrackingNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParcelTrackingNumberOption { get; private set; }

        /// <summary>
        /// The Tracking number given to the Parcel for tracking purpose.
        /// </summary>
        /// <value>The Tracking number given to the Parcel for tracking purpose.</value>
        /* <example>EP863905659US</example> */
        [JsonPropertyName("parcelTrackingNumber")]
        public string? ParcelTrackingNumber { get { return this.ParcelTrackingNumberOption; } set { this.ParcelTrackingNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Rate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetAllShipmentsDataInnerRate?> RateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [JsonPropertyName("rate")]
        public GetAllShipmentsDataInnerRate? Rate { get { return this.RateOption; } set { this.RateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Service
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ServiceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        /* <example>EMI</example> */
        [JsonPropertyName("service")]
        public string? Service { get { return this.ServiceOption; } set { this.ServiceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShipmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShipmentIdOption { get; private set; }

        /// <summary>
        /// A unique identifier associated with the Shipment.
        /// </summary>
        /// <value>A unique identifier associated with the Shipment.</value>
        /* <example>XXXX2200579576496921</example> */
        [JsonPropertyName("shipmentId")]
        public string? ShipmentId { get { return this.ShipmentIdOption; } set { this.ShipmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShipmentOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetAllShipmentsDataInnerShipmentOptions?> ShipmentOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShipmentOptions
        /// </summary>
        [JsonPropertyName("shipmentOptions")]
        public GetAllShipmentsDataInnerShipmentOptions? ShipmentOptions { get { return this.ShipmentOptionsOption; } set { this.ShipmentOptionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        /* <example>COMPLETE</example> */
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of ToAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetAllShipmentsDataInnerToAddress?> ToAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [JsonPropertyName("toAddress")]
        public GetAllShipmentsDataInnerToAddress? ToAddress { get { return this.ToAddressOption; } set { this.ToAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of AltReturnAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipmentInternationalAltReturnAddress?> AltReturnAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets AltReturnAddress
        /// </summary>
        [JsonPropertyName("altReturnAddress")]
        public ShipmentInternationalAltReturnAddress? AltReturnAddress { get { return this.AltReturnAddressOption; } set { this.AltReturnAddressOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAllShipmentsDataInner {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ParcelId: ").Append(ParcelId).Append("\n");
            sb.Append("  ParcelTrackingNumber: ").Append(ParcelTrackingNumber).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipmentOptions: ").Append(ShipmentOptions).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("  AltReturnAddress: ").Append(AltReturnAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAllShipmentsDataInner" />
    /// </summary>
    public class GetAllShipmentsDataInnerJsonConverter : JsonConverter<GetAllShipmentsDataInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAllShipmentsDataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAllShipmentsDataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> correlationId = default;
            Option<GetAllShipmentsDataInnerFromAddress?> fromAddress = default;
            Option<GetAllShipmentsDataInnerParcel?> parcel = default;
            Option<List<GetAllShipmentsDataInnerMetadataInner>?> metadata = default;
            Option<string?> parcelId = default;
            Option<string?> parcelTrackingNumber = default;
            Option<GetAllShipmentsDataInnerRate?> rate = default;
            Option<string?> service = default;
            Option<string?> shipmentId = default;
            Option<GetAllShipmentsDataInnerShipmentOptions?> shipmentOptions = default;
            Option<string?> status = default;
            Option<GetAllShipmentsDataInnerToAddress?> toAddress = default;
            Option<ShipmentInternationalAltReturnAddress?> altReturnAddress = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "correlationId":
                            correlationId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fromAddress":
                            fromAddress = new Option<GetAllShipmentsDataInnerFromAddress?>(JsonSerializer.Deserialize<GetAllShipmentsDataInnerFromAddress>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "parcel":
                            parcel = new Option<GetAllShipmentsDataInnerParcel?>(JsonSerializer.Deserialize<GetAllShipmentsDataInnerParcel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "metadata":
                            metadata = new Option<List<GetAllShipmentsDataInnerMetadataInner>?>(JsonSerializer.Deserialize<List<GetAllShipmentsDataInnerMetadataInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "parcelId":
                            parcelId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parcelTrackingNumber":
                            parcelTrackingNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "rate":
                            rate = new Option<GetAllShipmentsDataInnerRate?>(JsonSerializer.Deserialize<GetAllShipmentsDataInnerRate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "service":
                            service = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "shipmentId":
                            shipmentId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "shipmentOptions":
                            shipmentOptions = new Option<GetAllShipmentsDataInnerShipmentOptions?>(JsonSerializer.Deserialize<GetAllShipmentsDataInnerShipmentOptions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "toAddress":
                            toAddress = new Option<GetAllShipmentsDataInnerToAddress?>(JsonSerializer.Deserialize<GetAllShipmentsDataInnerToAddress>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "altReturnAddress":
                            altReturnAddress = new Option<ShipmentInternationalAltReturnAddress?>(JsonSerializer.Deserialize<ShipmentInternationalAltReturnAddress>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (correlationId.IsSet && correlationId.Value == null)
                throw new ArgumentNullException(nameof(correlationId), "Property is not nullable for class GetAllShipmentsDataInner.");

            if (fromAddress.IsSet && fromAddress.Value == null)
                throw new ArgumentNullException(nameof(fromAddress), "Property is not nullable for class GetAllShipmentsDataInner.");

            if (parcel.IsSet && parcel.Value == null)
                throw new ArgumentNullException(nameof(parcel), "Property is not nullable for class GetAllShipmentsDataInner.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class GetAllShipmentsDataInner.");

            if (parcelId.IsSet && parcelId.Value == null)
                throw new ArgumentNullException(nameof(parcelId), "Property is not nullable for class GetAllShipmentsDataInner.");

            if (parcelTrackingNumber.IsSet && parcelTrackingNumber.Value == null)
                throw new ArgumentNullException(nameof(parcelTrackingNumber), "Property is not nullable for class GetAllShipmentsDataInner.");

            if (rate.IsSet && rate.Value == null)
                throw new ArgumentNullException(nameof(rate), "Property is not nullable for class GetAllShipmentsDataInner.");

            if (service.IsSet && service.Value == null)
                throw new ArgumentNullException(nameof(service), "Property is not nullable for class GetAllShipmentsDataInner.");

            if (shipmentId.IsSet && shipmentId.Value == null)
                throw new ArgumentNullException(nameof(shipmentId), "Property is not nullable for class GetAllShipmentsDataInner.");

            if (shipmentOptions.IsSet && shipmentOptions.Value == null)
                throw new ArgumentNullException(nameof(shipmentOptions), "Property is not nullable for class GetAllShipmentsDataInner.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class GetAllShipmentsDataInner.");

            if (toAddress.IsSet && toAddress.Value == null)
                throw new ArgumentNullException(nameof(toAddress), "Property is not nullable for class GetAllShipmentsDataInner.");

            if (altReturnAddress.IsSet && altReturnAddress.Value == null)
                throw new ArgumentNullException(nameof(altReturnAddress), "Property is not nullable for class GetAllShipmentsDataInner.");

            return new GetAllShipmentsDataInner(correlationId, fromAddress, parcel, metadata, parcelId, parcelTrackingNumber, rate, service, shipmentId, shipmentOptions, status, toAddress, altReturnAddress);
        }

        /// <summary>
        /// Serializes a <see cref="GetAllShipmentsDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAllShipmentsDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAllShipmentsDataInner getAllShipmentsDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getAllShipmentsDataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAllShipmentsDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAllShipmentsDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetAllShipmentsDataInner getAllShipmentsDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getAllShipmentsDataInner.CorrelationIdOption.IsSet && getAllShipmentsDataInner.CorrelationId == null)
                throw new ArgumentNullException(nameof(getAllShipmentsDataInner.CorrelationId), "Property is required for class GetAllShipmentsDataInner.");

            if (getAllShipmentsDataInner.FromAddressOption.IsSet && getAllShipmentsDataInner.FromAddress == null)
                throw new ArgumentNullException(nameof(getAllShipmentsDataInner.FromAddress), "Property is required for class GetAllShipmentsDataInner.");

            if (getAllShipmentsDataInner.ParcelOption.IsSet && getAllShipmentsDataInner.Parcel == null)
                throw new ArgumentNullException(nameof(getAllShipmentsDataInner.Parcel), "Property is required for class GetAllShipmentsDataInner.");

            if (getAllShipmentsDataInner.MetadataOption.IsSet && getAllShipmentsDataInner.Metadata == null)
                throw new ArgumentNullException(nameof(getAllShipmentsDataInner.Metadata), "Property is required for class GetAllShipmentsDataInner.");

            if (getAllShipmentsDataInner.ParcelIdOption.IsSet && getAllShipmentsDataInner.ParcelId == null)
                throw new ArgumentNullException(nameof(getAllShipmentsDataInner.ParcelId), "Property is required for class GetAllShipmentsDataInner.");

            if (getAllShipmentsDataInner.ParcelTrackingNumberOption.IsSet && getAllShipmentsDataInner.ParcelTrackingNumber == null)
                throw new ArgumentNullException(nameof(getAllShipmentsDataInner.ParcelTrackingNumber), "Property is required for class GetAllShipmentsDataInner.");

            if (getAllShipmentsDataInner.RateOption.IsSet && getAllShipmentsDataInner.Rate == null)
                throw new ArgumentNullException(nameof(getAllShipmentsDataInner.Rate), "Property is required for class GetAllShipmentsDataInner.");

            if (getAllShipmentsDataInner.ServiceOption.IsSet && getAllShipmentsDataInner.Service == null)
                throw new ArgumentNullException(nameof(getAllShipmentsDataInner.Service), "Property is required for class GetAllShipmentsDataInner.");

            if (getAllShipmentsDataInner.ShipmentIdOption.IsSet && getAllShipmentsDataInner.ShipmentId == null)
                throw new ArgumentNullException(nameof(getAllShipmentsDataInner.ShipmentId), "Property is required for class GetAllShipmentsDataInner.");

            if (getAllShipmentsDataInner.ShipmentOptionsOption.IsSet && getAllShipmentsDataInner.ShipmentOptions == null)
                throw new ArgumentNullException(nameof(getAllShipmentsDataInner.ShipmentOptions), "Property is required for class GetAllShipmentsDataInner.");

            if (getAllShipmentsDataInner.StatusOption.IsSet && getAllShipmentsDataInner.Status == null)
                throw new ArgumentNullException(nameof(getAllShipmentsDataInner.Status), "Property is required for class GetAllShipmentsDataInner.");

            if (getAllShipmentsDataInner.ToAddressOption.IsSet && getAllShipmentsDataInner.ToAddress == null)
                throw new ArgumentNullException(nameof(getAllShipmentsDataInner.ToAddress), "Property is required for class GetAllShipmentsDataInner.");

            if (getAllShipmentsDataInner.AltReturnAddressOption.IsSet && getAllShipmentsDataInner.AltReturnAddress == null)
                throw new ArgumentNullException(nameof(getAllShipmentsDataInner.AltReturnAddress), "Property is required for class GetAllShipmentsDataInner.");

            if (getAllShipmentsDataInner.CorrelationIdOption.IsSet)
                writer.WriteString("correlationId", getAllShipmentsDataInner.CorrelationId);

            if (getAllShipmentsDataInner.FromAddressOption.IsSet)
            {
                writer.WritePropertyName("fromAddress");
                JsonSerializer.Serialize(writer, getAllShipmentsDataInner.FromAddress, jsonSerializerOptions);
            }
            if (getAllShipmentsDataInner.ParcelOption.IsSet)
            {
                writer.WritePropertyName("parcel");
                JsonSerializer.Serialize(writer, getAllShipmentsDataInner.Parcel, jsonSerializerOptions);
            }
            if (getAllShipmentsDataInner.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, getAllShipmentsDataInner.Metadata, jsonSerializerOptions);
            }
            if (getAllShipmentsDataInner.ParcelIdOption.IsSet)
                writer.WriteString("parcelId", getAllShipmentsDataInner.ParcelId);

            if (getAllShipmentsDataInner.ParcelTrackingNumberOption.IsSet)
                writer.WriteString("parcelTrackingNumber", getAllShipmentsDataInner.ParcelTrackingNumber);

            if (getAllShipmentsDataInner.RateOption.IsSet)
            {
                writer.WritePropertyName("rate");
                JsonSerializer.Serialize(writer, getAllShipmentsDataInner.Rate, jsonSerializerOptions);
            }
            if (getAllShipmentsDataInner.ServiceOption.IsSet)
                writer.WriteString("service", getAllShipmentsDataInner.Service);

            if (getAllShipmentsDataInner.ShipmentIdOption.IsSet)
                writer.WriteString("shipmentId", getAllShipmentsDataInner.ShipmentId);

            if (getAllShipmentsDataInner.ShipmentOptionsOption.IsSet)
            {
                writer.WritePropertyName("shipmentOptions");
                JsonSerializer.Serialize(writer, getAllShipmentsDataInner.ShipmentOptions, jsonSerializerOptions);
            }
            if (getAllShipmentsDataInner.StatusOption.IsSet)
                writer.WriteString("status", getAllShipmentsDataInner.Status);

            if (getAllShipmentsDataInner.ToAddressOption.IsSet)
            {
                writer.WritePropertyName("toAddress");
                JsonSerializer.Serialize(writer, getAllShipmentsDataInner.ToAddress, jsonSerializerOptions);
            }
            if (getAllShipmentsDataInner.AltReturnAddressOption.IsSet)
            {
                writer.WritePropertyName("altReturnAddress");
                JsonSerializer.Serialize(writer, getAllShipmentsDataInner.AltReturnAddress, jsonSerializerOptions);
            }
        }
    }
}
