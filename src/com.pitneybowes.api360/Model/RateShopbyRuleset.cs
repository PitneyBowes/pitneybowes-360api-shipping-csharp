// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// RateShopbyRuleset
    /// </summary>
    public partial class RateShopbyRuleset : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RateShopbyRuleset" /> class.
        /// </summary>
        /// <param name="fromAddress">fromAddress</param>
        /// <param name="toAddress">toAddress</param>
        /// <param name="parcel">parcel</param>
        /// <param name="parcelType">Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.&lt;br /&gt; ParcelType can have categories like Package, Envelopes, Paks, Boxes, Tube, etc. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; \&quot;</param>
        /// <param name="rateShopBy">RateShop, which is attached to an Enterprise or Location, is done through three approaches: by Carrier, by RateGroup, and by Ruleset.  &lt;br /&gt;  Through Carrier, customers can choose the carriers as per requirement, based on which services, parcel types, and special services can be selected, and RateShop is done. &lt;br /&gt; Through RateGroup, customers can select the RateGroup, which has been divided into two categories: Cheapest (w.r.t. price) and Fastest (w.r.t. delivery hours).  &lt;br /&gt; Through Ruleset, customers can define the Condition/rule for selecting carriers and their services, so they do not need to worry for Rate Shopping every time they create Shipment. For example, For a particular location, they can set one definite carrier, or apply RateGroup - Cheapest/Fastest.   Similarly, for a particular amount like below $1000 Dollars, they can select a definite carrier service, based on RateGroup.</param>
        /// <param name="byRuleSet">byRuleSet</param>
        [JsonConstructor]
        public RateShopbyRuleset(FromAddressV2 fromAddress, ToAddressV2 toAddress, RateShopbyCarrierParcel parcel, string parcelType, RateShopByEnum rateShopBy, RateShopbyRulesetByRuleSet byRuleSet)
        {
            FromAddress = fromAddress;
            ToAddress = toAddress;
            Parcel = parcel;
            ParcelType = parcelType;
            RateShopBy = rateShopBy;
            ByRuleSet = byRuleSet;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// RateShop, which is attached to an Enterprise or Location, is done through three approaches: by Carrier, by RateGroup, and by Ruleset.  &lt;br /&gt;  Through Carrier, customers can choose the carriers as per requirement, based on which services, parcel types, and special services can be selected, and RateShop is done. &lt;br /&gt; Through RateGroup, customers can select the RateGroup, which has been divided into two categories: Cheapest (w.r.t. price) and Fastest (w.r.t. delivery hours).  &lt;br /&gt; Through Ruleset, customers can define the Condition/rule for selecting carriers and their services, so they do not need to worry for Rate Shopping every time they create Shipment. For example, For a particular location, they can set one definite carrier, or apply RateGroup - Cheapest/Fastest.   Similarly, for a particular amount like below $1000 Dollars, they can select a definite carrier service, based on RateGroup.
        /// </summary>
        /// <value>RateShop, which is attached to an Enterprise or Location, is done through three approaches: by Carrier, by RateGroup, and by Ruleset.  &lt;br /&gt;  Through Carrier, customers can choose the carriers as per requirement, based on which services, parcel types, and special services can be selected, and RateShop is done. &lt;br /&gt; Through RateGroup, customers can select the RateGroup, which has been divided into two categories: Cheapest (w.r.t. price) and Fastest (w.r.t. delivery hours).  &lt;br /&gt; Through Ruleset, customers can define the Condition/rule for selecting carriers and their services, so they do not need to worry for Rate Shopping every time they create Shipment. For example, For a particular location, they can set one definite carrier, or apply RateGroup - Cheapest/Fastest.   Similarly, for a particular amount like below $1000 Dollars, they can select a definite carrier service, based on RateGroup.</value>
        public enum RateShopByEnum
        {
            /// <summary>
            /// Enum Carrier for value: carrier
            /// </summary>
            Carrier = 1,

            /// <summary>
            /// Enum Rategroup for value: rategroup
            /// </summary>
            Rategroup = 2,

            /// <summary>
            /// Enum Ruleset for value: ruleset
            /// </summary>
            Ruleset = 3
        }

        /// <summary>
        /// Returns a <see cref="RateShopByEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RateShopByEnum RateShopByEnumFromString(string value)
        {
            if (value.Equals("carrier"))
                return RateShopByEnum.Carrier;

            if (value.Equals("rategroup"))
                return RateShopByEnum.Rategroup;

            if (value.Equals("ruleset"))
                return RateShopByEnum.Ruleset;

            throw new NotImplementedException($"Could not convert value to type RateShopByEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RateShopByEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RateShopByEnum? RateShopByEnumFromStringOrDefault(string value)
        {
            if (value.Equals("carrier"))
                return RateShopByEnum.Carrier;

            if (value.Equals("rategroup"))
                return RateShopByEnum.Rategroup;

            if (value.Equals("ruleset"))
                return RateShopByEnum.Ruleset;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RateShopByEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RateShopByEnumToJsonValue(RateShopByEnum value)
        {
            if (value == RateShopByEnum.Carrier)
                return "carrier";

            if (value == RateShopByEnum.Rategroup)
                return "rategroup";

            if (value == RateShopByEnum.Ruleset)
                return "ruleset";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// RateShop, which is attached to an Enterprise or Location, is done through three approaches: by Carrier, by RateGroup, and by Ruleset.  &lt;br /&gt;  Through Carrier, customers can choose the carriers as per requirement, based on which services, parcel types, and special services can be selected, and RateShop is done. &lt;br /&gt; Through RateGroup, customers can select the RateGroup, which has been divided into two categories: Cheapest (w.r.t. price) and Fastest (w.r.t. delivery hours).  &lt;br /&gt; Through Ruleset, customers can define the Condition/rule for selecting carriers and their services, so they do not need to worry for Rate Shopping every time they create Shipment. For example, For a particular location, they can set one definite carrier, or apply RateGroup - Cheapest/Fastest.   Similarly, for a particular amount like below $1000 Dollars, they can select a definite carrier service, based on RateGroup.
        /// </summary>
        /// <value>RateShop, which is attached to an Enterprise or Location, is done through three approaches: by Carrier, by RateGroup, and by Ruleset.  &lt;br /&gt;  Through Carrier, customers can choose the carriers as per requirement, based on which services, parcel types, and special services can be selected, and RateShop is done. &lt;br /&gt; Through RateGroup, customers can select the RateGroup, which has been divided into two categories: Cheapest (w.r.t. price) and Fastest (w.r.t. delivery hours).  &lt;br /&gt; Through Ruleset, customers can define the Condition/rule for selecting carriers and their services, so they do not need to worry for Rate Shopping every time they create Shipment. For example, For a particular location, they can set one definite carrier, or apply RateGroup - Cheapest/Fastest.   Similarly, for a particular amount like below $1000 Dollars, they can select a definite carrier service, based on RateGroup.</value>
        /* <example>ruleset</example> */
        [JsonPropertyName("rateShopBy")]
        public RateShopByEnum RateShopBy { get; set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [JsonPropertyName("fromAddress")]
        public FromAddressV2 FromAddress { get; set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [JsonPropertyName("toAddress")]
        public ToAddressV2 ToAddress { get; set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [JsonPropertyName("parcel")]
        public RateShopbyCarrierParcel Parcel { get; set; }

        /// <summary>
        /// Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.&lt;br /&gt; ParcelType can have categories like Package, Envelopes, Paks, Boxes, Tube, etc. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; \&quot;
        /// </summary>
        /// <value>Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.&lt;br /&gt; ParcelType can have categories like Package, Envelopes, Paks, Boxes, Tube, etc. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60; \&quot;</value>
        /* <example>PKG</example> */
        [JsonPropertyName("parcelType")]
        public string ParcelType { get; set; }

        /// <summary>
        /// Gets or Sets ByRuleSet
        /// </summary>
        [JsonPropertyName("byRuleSet")]
        public RateShopbyRulesetByRuleSet ByRuleSet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RateShopbyRuleset {\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  RateShopBy: ").Append(RateShopBy).Append("\n");
            sb.Append("  ByRuleSet: ").Append(ByRuleSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RateShopbyRuleset" />
    /// </summary>
    public class RateShopbyRulesetJsonConverter : JsonConverter<RateShopbyRuleset>
    {
        /// <summary>
        /// Deserializes json to <see cref="RateShopbyRuleset" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RateShopbyRuleset Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<FromAddressV2> fromAddress = default;
            Option<ToAddressV2> toAddress = default;
            Option<RateShopbyCarrierParcel> parcel = default;
            Option<string> parcelType = default;
            Option<RateShopbyRuleset.RateShopByEnum?> rateShopBy = default;
            Option<RateShopbyRulesetByRuleSet> byRuleSet = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "fromAddress":
                            fromAddress = new Option<FromAddressV2>(JsonSerializer.Deserialize<FromAddressV2>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "toAddress":
                            toAddress = new Option<ToAddressV2>(JsonSerializer.Deserialize<ToAddressV2>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "parcel":
                            parcel = new Option<RateShopbyCarrierParcel>(JsonSerializer.Deserialize<RateShopbyCarrierParcel>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "parcelType":
                            parcelType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rateShopBy":
                            string rateShopByRawValue = utf8JsonReader.GetString();
                            if (rateShopByRawValue != null)
                                rateShopBy = new Option<RateShopbyRuleset.RateShopByEnum?>(RateShopbyRuleset.RateShopByEnumFromStringOrDefault(rateShopByRawValue));
                            break;
                        case "byRuleSet":
                            byRuleSet = new Option<RateShopbyRulesetByRuleSet>(JsonSerializer.Deserialize<RateShopbyRulesetByRuleSet>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fromAddress.IsSet)
                throw new ArgumentException("Property is required for class RateShopbyRuleset.", nameof(fromAddress));

            if (!toAddress.IsSet)
                throw new ArgumentException("Property is required for class RateShopbyRuleset.", nameof(toAddress));

            if (!parcel.IsSet)
                throw new ArgumentException("Property is required for class RateShopbyRuleset.", nameof(parcel));

            if (!parcelType.IsSet)
                throw new ArgumentException("Property is required for class RateShopbyRuleset.", nameof(parcelType));

            if (!rateShopBy.IsSet)
                throw new ArgumentException("Property is required for class RateShopbyRuleset.", nameof(rateShopBy));

            if (!byRuleSet.IsSet)
                throw new ArgumentException("Property is required for class RateShopbyRuleset.", nameof(byRuleSet));

            if (fromAddress.IsSet && fromAddress.Value == null)
                throw new ArgumentNullException(nameof(fromAddress), "Property is not nullable for class RateShopbyRuleset.");

            if (toAddress.IsSet && toAddress.Value == null)
                throw new ArgumentNullException(nameof(toAddress), "Property is not nullable for class RateShopbyRuleset.");

            if (parcel.IsSet && parcel.Value == null)
                throw new ArgumentNullException(nameof(parcel), "Property is not nullable for class RateShopbyRuleset.");

            if (parcelType.IsSet && parcelType.Value == null)
                throw new ArgumentNullException(nameof(parcelType), "Property is not nullable for class RateShopbyRuleset.");

            if (rateShopBy.IsSet && rateShopBy.Value == null)
                throw new ArgumentNullException(nameof(rateShopBy), "Property is not nullable for class RateShopbyRuleset.");

            if (byRuleSet.IsSet && byRuleSet.Value == null)
                throw new ArgumentNullException(nameof(byRuleSet), "Property is not nullable for class RateShopbyRuleset.");

            return new RateShopbyRuleset(fromAddress.Value, toAddress.Value, parcel.Value, parcelType.Value, rateShopBy.Value.Value, byRuleSet.Value);
        }

        /// <summary>
        /// Serializes a <see cref="RateShopbyRuleset" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rateShopbyRuleset"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RateShopbyRuleset rateShopbyRuleset, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rateShopbyRuleset, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RateShopbyRuleset" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rateShopbyRuleset"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RateShopbyRuleset rateShopbyRuleset, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rateShopbyRuleset.FromAddress == null)
                throw new ArgumentNullException(nameof(rateShopbyRuleset.FromAddress), "Property is required for class RateShopbyRuleset.");

            if (rateShopbyRuleset.ToAddress == null)
                throw new ArgumentNullException(nameof(rateShopbyRuleset.ToAddress), "Property is required for class RateShopbyRuleset.");

            if (rateShopbyRuleset.Parcel == null)
                throw new ArgumentNullException(nameof(rateShopbyRuleset.Parcel), "Property is required for class RateShopbyRuleset.");

            if (rateShopbyRuleset.ParcelType == null)
                throw new ArgumentNullException(nameof(rateShopbyRuleset.ParcelType), "Property is required for class RateShopbyRuleset.");

            if (rateShopbyRuleset.ByRuleSet == null)
                throw new ArgumentNullException(nameof(rateShopbyRuleset.ByRuleSet), "Property is required for class RateShopbyRuleset.");

            writer.WritePropertyName("fromAddress");
            JsonSerializer.Serialize(writer, rateShopbyRuleset.FromAddress, jsonSerializerOptions);
            writer.WritePropertyName("toAddress");
            JsonSerializer.Serialize(writer, rateShopbyRuleset.ToAddress, jsonSerializerOptions);
            writer.WritePropertyName("parcel");
            JsonSerializer.Serialize(writer, rateShopbyRuleset.Parcel, jsonSerializerOptions);
            writer.WriteString("parcelType", rateShopbyRuleset.ParcelType);

            var rateShopByRawValue = RateShopbyRuleset.RateShopByEnumToJsonValue(rateShopbyRuleset.RateShopBy);
            writer.WriteString("rateShopBy", rateShopByRawValue);
            writer.WritePropertyName("byRuleSet");
            JsonSerializer.Serialize(writer, rateShopbyRuleset.ByRuleSet, jsonSerializerOptions);
        }
    }
}
