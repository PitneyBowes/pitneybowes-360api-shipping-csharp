/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.pitneybowes.api360.Client.OpenAPIDateConverter;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// CustomsItem
    /// </summary>
    [DataContract(Name = "CustomsItem")]
    public partial class CustomsItem : IValidatableObject
    {
        /// <summary>
        /// The unit of measurement. This field is required by the unitWeight object.
        /// </summary>
        /// <value>The unit of measurement. This field is required by the unitWeight object.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WeightUnitEnum
        {
            /// <summary>
            /// Enum OZ for value: OZ
            /// </summary>
            [EnumMember(Value = "OZ")]
            OZ = 1
        }


        /// <summary>
        /// The unit of measurement. This field is required by the unitWeight object.
        /// </summary>
        /// <value>The unit of measurement. This field is required by the unitWeight object.</value>
        /// <example>OZ</example>
        [DataMember(Name = "weightUnit", IsRequired = true, EmitDefaultValue = true)]
        public WeightUnitEnum WeightUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomsItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomsItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomsItem" /> class.
        /// </summary>
        /// <param name="description">A detailed description of the commodity. (required).</param>
        /// <param name="hSTariffCode">&gt;- The destination country&#39;s tariff-classification number for the commodity. Most countries use the six-digit Harmonized System (HS) as the basis for their tariff classifications and add additional digits for more detail. The maximum length is 14 characters.If you are issuing the HS Code API, you can use this field to help with the HS code prediction by entering the commodity&#39;s HS code from another country, such as from the origin country. Enter the country that the code comes from in the hSTariffCodeCountry field..</param>
        /// <param name="quantity">Enter the total number of items of this type of commodity. (required).</param>
        /// <param name="unitPrice">&gt;- The price of one item of this type of commodity. Currency should be declared under customsInfo. (required).</param>
        /// <param name="weightUnit">The unit of measurement. This field is required by the unitWeight object. (required).</param>
        /// <param name="weight">The weight of the item. (required).</param>
        public CustomsItem(string description = default(string), string hSTariffCode = default(string), int quantity = default(int), double unitPrice = default(double), WeightUnitEnum weightUnit = default(WeightUnitEnum), decimal weight = default(decimal))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for CustomsItem and cannot be null");
            }
            this.Description = description;
            this.Quantity = quantity;
            this.UnitPrice = unitPrice;
            this.WeightUnit = weightUnit;
            this.Weight = weight;
            this.HSTariffCode = hSTariffCode;
        }

        /// <summary>
        /// A detailed description of the commodity.
        /// </summary>
        /// <value>A detailed description of the commodity.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// &gt;- The destination country&#39;s tariff-classification number for the commodity. Most countries use the six-digit Harmonized System (HS) as the basis for their tariff classifications and add additional digits for more detail. The maximum length is 14 characters.If you are issuing the HS Code API, you can use this field to help with the HS code prediction by entering the commodity&#39;s HS code from another country, such as from the origin country. Enter the country that the code comes from in the hSTariffCodeCountry field.
        /// </summary>
        /// <value>&gt;- The destination country&#39;s tariff-classification number for the commodity. Most countries use the six-digit Harmonized System (HS) as the basis for their tariff classifications and add additional digits for more detail. The maximum length is 14 characters.If you are issuing the HS Code API, you can use this field to help with the HS code prediction by entering the commodity&#39;s HS code from another country, such as from the origin country. Enter the country that the code comes from in the hSTariffCodeCountry field.</value>
        /// <example>AST559</example>
        [DataMember(Name = "hSTariffCode", EmitDefaultValue = false)]
        public string HSTariffCode { get; set; }

        /// <summary>
        /// Enter the total number of items of this type of commodity.
        /// </summary>
        /// <value>Enter the total number of items of this type of commodity.</value>
        /// <example>1</example>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// &gt;- The price of one item of this type of commodity. Currency should be declared under customsInfo.
        /// </summary>
        /// <value>&gt;- The price of one item of this type of commodity. Currency should be declared under customsInfo.</value>
        /// <example>200</example>
        [DataMember(Name = "unitPrice", IsRequired = true, EmitDefaultValue = true)]
        public double UnitPrice { get; set; }

        /// <summary>
        /// The weight of the item.
        /// </summary>
        /// <value>The weight of the item.</value>
        /// <example>1</example>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = true)]
        public decimal Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomsItem {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HSTariffCode: ").Append(HSTariffCode).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  WeightUnit: ").Append(WeightUnit).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
