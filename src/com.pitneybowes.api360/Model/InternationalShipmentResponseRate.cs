// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// InternationalShipmentResponseRate
    /// </summary>
    public partial class InternationalShipmentResponseRate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InternationalShipmentResponseRate" /> class.
        /// </summary>
        /// <param name="baseCharge">The base service charge is payable to the carrier, excluding special service charges.</param>
        /// <param name="carrier">Carrier is a service used to transport the parcels or couriers from one place to another.</param>
        /// <param name="currencyCode">A three-character (all uppercase letter) symbol of a currency according to the international ISO standard. As a rule, the first two letters denote the name of the country, and the third letter, the name of the currency thereof. For example, for US - the currency is Dollars and code is USD. Similarly for Canada, the currencycode is CAD, and for India, it is INR. </param>
        /// <param name="deliveryCommitment">deliveryCommitment</param>
        /// <param name="parcelType">Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. ParcelType have categories like Package, Envelopes, Paks, Boxes, Tube, etc. </param>
        /// <param name="rateTypeId">Its value can be CONTRACT_RATES, COMMERCIAL or COMMERCIAL_BASE for USPS and COMMERCIAL for other carriers depending on the Pitney Bowes contract/subscription</param>
        /// <param name="serviceId">The unique identifier given to the carrier specific service.</param>
        /// <param name="specialServices"> It provides a carrier-service based special or extra service.</param>
        /// <param name="totalCarrierCharge">The total amount payable to the carrier, including special service fees, surcharges, and any international taxes and duties, except as noted below:</param>
        [JsonConstructor]
        public InternationalShipmentResponseRate(Option<decimal?> baseCharge = default, Option<string> carrier = default, Option<string> currencyCode = default, Option<InternationalShipmentResponseRateDeliveryCommitment> deliveryCommitment = default, Option<string> parcelType = default, Option<string> rateTypeId = default, Option<string> serviceId = default, Option<List<InternationalShipmentResponseRateSpecialServicesInner>> specialServices = default, Option<decimal?> totalCarrierCharge = default)
        {
            BaseChargeOption = baseCharge;
            CarrierOption = carrier;
            CurrencyCodeOption = currencyCode;
            DeliveryCommitmentOption = deliveryCommitment;
            ParcelTypeOption = parcelType;
            RateTypeIdOption = rateTypeId;
            ServiceIdOption = serviceId;
            SpecialServicesOption = specialServices;
            TotalCarrierChargeOption = totalCarrierCharge;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BaseCharge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> BaseChargeOption { get; private set; }

        /// <summary>
        /// The base service charge is payable to the carrier, excluding special service charges.
        /// </summary>
        /// <value>The base service charge is payable to the carrier, excluding special service charges.</value>
        /* <example>25.5</example> */
        [JsonPropertyName("baseCharge")]
        public decimal? BaseCharge { get { return this.BaseChargeOption; } set { this.BaseChargeOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Carrier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarrierOption { get; private set; }

        /// <summary>
        /// Carrier is a service used to transport the parcels or couriers from one place to another.
        /// </summary>
        /// <value>Carrier is a service used to transport the parcels or couriers from one place to another.</value>
        /* <example>USPS</example> */
        [JsonPropertyName("carrier")]
        public string Carrier { get { return this.CarrierOption; } set { this.CarrierOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// A three-character (all uppercase letter) symbol of a currency according to the international ISO standard. As a rule, the first two letters denote the name of the country, and the third letter, the name of the currency thereof. For example, for US - the currency is Dollars and code is USD. Similarly for Canada, the currencycode is CAD, and for India, it is INR. 
        /// </summary>
        /// <value>A three-character (all uppercase letter) symbol of a currency according to the international ISO standard. As a rule, the first two letters denote the name of the country, and the third letter, the name of the currency thereof. For example, for US - the currency is Dollars and code is USD. Similarly for Canada, the currencycode is CAD, and for India, it is INR. </value>
        /* <example>USD</example> */
        [JsonPropertyName("currencyCode")]
        public string CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DeliveryCommitment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InternationalShipmentResponseRateDeliveryCommitment> DeliveryCommitmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryCommitment
        /// </summary>
        [JsonPropertyName("deliveryCommitment")]
        public InternationalShipmentResponseRateDeliveryCommitment DeliveryCommitment { get { return this.DeliveryCommitmentOption; } set { this.DeliveryCommitmentOption = new Option<InternationalShipmentResponseRateDeliveryCommitment>(value); } }

        /// <summary>
        /// Used to track the state of ParcelType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ParcelTypeOption { get; private set; }

        /// <summary>
        /// Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. ParcelType have categories like Package, Envelopes, Paks, Boxes, Tube, etc. 
        /// </summary>
        /// <value>Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. ParcelType have categories like Package, Envelopes, Paks, Boxes, Tube, etc. </value>
        /* <example>PKG</example> */
        [JsonPropertyName("parcelType")]
        public string ParcelType { get { return this.ParcelTypeOption; } set { this.ParcelTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RateTypeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RateTypeIdOption { get; private set; }

        /// <summary>
        /// Its value can be CONTRACT_RATES, COMMERCIAL or COMMERCIAL_BASE for USPS and COMMERCIAL for other carriers depending on the Pitney Bowes contract/subscription
        /// </summary>
        /// <value>Its value can be CONTRACT_RATES, COMMERCIAL or COMMERCIAL_BASE for USPS and COMMERCIAL for other carriers depending on the Pitney Bowes contract/subscription</value>
        /* <example>CONTRACT_RATES</example> */
        [JsonPropertyName("rateTypeId")]
        public string RateTypeId { get { return this.RateTypeIdOption; } set { this.RateTypeIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ServiceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ServiceIdOption { get; private set; }

        /// <summary>
        /// The unique identifier given to the carrier specific service.
        /// </summary>
        /// <value>The unique identifier given to the carrier specific service.</value>
        /* <example>EM</example> */
        [JsonPropertyName("serviceId")]
        public string ServiceId { get { return this.ServiceIdOption; } set { this.ServiceIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SpecialServices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<InternationalShipmentResponseRateSpecialServicesInner>> SpecialServicesOption { get; private set; }

        /// <summary>
        ///  It provides a carrier-service based special or extra service.
        /// </summary>
        /// <value> It provides a carrier-service based special or extra service.</value>
        [JsonPropertyName("specialServices")]
        public List<InternationalShipmentResponseRateSpecialServicesInner> SpecialServices { get { return this.SpecialServicesOption; } set { this.SpecialServicesOption = new Option<List<InternationalShipmentResponseRateSpecialServicesInner>>(value); } }

        /// <summary>
        /// Used to track the state of TotalCarrierCharge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TotalCarrierChargeOption { get; private set; }

        /// <summary>
        /// The total amount payable to the carrier, including special service fees, surcharges, and any international taxes and duties, except as noted below:
        /// </summary>
        /// <value>The total amount payable to the carrier, including special service fees, surcharges, and any international taxes and duties, except as noted below:</value>
        /* <example>117.35</example> */
        [JsonPropertyName("totalCarrierCharge")]
        public decimal? TotalCarrierCharge { get { return this.TotalCarrierChargeOption; } set { this.TotalCarrierChargeOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InternationalShipmentResponseRate {\n");
            sb.Append("  BaseCharge: ").Append(BaseCharge).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  DeliveryCommitment: ").Append(DeliveryCommitment).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  RateTypeId: ").Append(RateTypeId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  SpecialServices: ").Append(SpecialServices).Append("\n");
            sb.Append("  TotalCarrierCharge: ").Append(TotalCarrierCharge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InternationalShipmentResponseRate" />
    /// </summary>
    public class InternationalShipmentResponseRateJsonConverter : JsonConverter<InternationalShipmentResponseRate>
    {
        /// <summary>
        /// Deserializes json to <see cref="InternationalShipmentResponseRate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InternationalShipmentResponseRate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> baseCharge = default;
            Option<string> carrier = default;
            Option<string> currencyCode = default;
            Option<InternationalShipmentResponseRateDeliveryCommitment> deliveryCommitment = default;
            Option<string> parcelType = default;
            Option<string> rateTypeId = default;
            Option<string> serviceId = default;
            Option<List<InternationalShipmentResponseRateSpecialServicesInner>> specialServices = default;
            Option<decimal?> totalCarrierCharge = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "baseCharge":
                            baseCharge = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "carrier":
                            carrier = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "currencyCode":
                            currencyCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "deliveryCommitment":
                            deliveryCommitment = new Option<InternationalShipmentResponseRateDeliveryCommitment>(JsonSerializer.Deserialize<InternationalShipmentResponseRateDeliveryCommitment>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "parcelType":
                            parcelType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rateTypeId":
                            rateTypeId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "serviceId":
                            serviceId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "specialServices":
                            specialServices = new Option<List<InternationalShipmentResponseRateSpecialServicesInner>>(JsonSerializer.Deserialize<List<InternationalShipmentResponseRateSpecialServicesInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "totalCarrierCharge":
                            totalCarrierCharge = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (baseCharge.IsSet && baseCharge.Value == null)
                throw new ArgumentNullException(nameof(baseCharge), "Property is not nullable for class InternationalShipmentResponseRate.");

            if (carrier.IsSet && carrier.Value == null)
                throw new ArgumentNullException(nameof(carrier), "Property is not nullable for class InternationalShipmentResponseRate.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class InternationalShipmentResponseRate.");

            if (deliveryCommitment.IsSet && deliveryCommitment.Value == null)
                throw new ArgumentNullException(nameof(deliveryCommitment), "Property is not nullable for class InternationalShipmentResponseRate.");

            if (parcelType.IsSet && parcelType.Value == null)
                throw new ArgumentNullException(nameof(parcelType), "Property is not nullable for class InternationalShipmentResponseRate.");

            if (rateTypeId.IsSet && rateTypeId.Value == null)
                throw new ArgumentNullException(nameof(rateTypeId), "Property is not nullable for class InternationalShipmentResponseRate.");

            if (serviceId.IsSet && serviceId.Value == null)
                throw new ArgumentNullException(nameof(serviceId), "Property is not nullable for class InternationalShipmentResponseRate.");

            if (specialServices.IsSet && specialServices.Value == null)
                throw new ArgumentNullException(nameof(specialServices), "Property is not nullable for class InternationalShipmentResponseRate.");

            if (totalCarrierCharge.IsSet && totalCarrierCharge.Value == null)
                throw new ArgumentNullException(nameof(totalCarrierCharge), "Property is not nullable for class InternationalShipmentResponseRate.");

            return new InternationalShipmentResponseRate(baseCharge, carrier, currencyCode, deliveryCommitment, parcelType, rateTypeId, serviceId, specialServices, totalCarrierCharge);
        }

        /// <summary>
        /// Serializes a <see cref="InternationalShipmentResponseRate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="internationalShipmentResponseRate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InternationalShipmentResponseRate internationalShipmentResponseRate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, internationalShipmentResponseRate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InternationalShipmentResponseRate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="internationalShipmentResponseRate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InternationalShipmentResponseRate internationalShipmentResponseRate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (internationalShipmentResponseRate.CarrierOption.IsSet && internationalShipmentResponseRate.Carrier == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponseRate.Carrier), "Property is required for class InternationalShipmentResponseRate.");

            if (internationalShipmentResponseRate.CurrencyCodeOption.IsSet && internationalShipmentResponseRate.CurrencyCode == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponseRate.CurrencyCode), "Property is required for class InternationalShipmentResponseRate.");

            if (internationalShipmentResponseRate.DeliveryCommitmentOption.IsSet && internationalShipmentResponseRate.DeliveryCommitment == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponseRate.DeliveryCommitment), "Property is required for class InternationalShipmentResponseRate.");

            if (internationalShipmentResponseRate.ParcelTypeOption.IsSet && internationalShipmentResponseRate.ParcelType == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponseRate.ParcelType), "Property is required for class InternationalShipmentResponseRate.");

            if (internationalShipmentResponseRate.RateTypeIdOption.IsSet && internationalShipmentResponseRate.RateTypeId == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponseRate.RateTypeId), "Property is required for class InternationalShipmentResponseRate.");

            if (internationalShipmentResponseRate.ServiceIdOption.IsSet && internationalShipmentResponseRate.ServiceId == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponseRate.ServiceId), "Property is required for class InternationalShipmentResponseRate.");

            if (internationalShipmentResponseRate.SpecialServicesOption.IsSet && internationalShipmentResponseRate.SpecialServices == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponseRate.SpecialServices), "Property is required for class InternationalShipmentResponseRate.");

            if (internationalShipmentResponseRate.BaseChargeOption.IsSet)
                writer.WriteNumber("baseCharge", internationalShipmentResponseRate.BaseChargeOption.Value.Value);

            if (internationalShipmentResponseRate.CarrierOption.IsSet)
                writer.WriteString("carrier", internationalShipmentResponseRate.Carrier);

            if (internationalShipmentResponseRate.CurrencyCodeOption.IsSet)
                writer.WriteString("currencyCode", internationalShipmentResponseRate.CurrencyCode);

            if (internationalShipmentResponseRate.DeliveryCommitmentOption.IsSet)
            {
                writer.WritePropertyName("deliveryCommitment");
                JsonSerializer.Serialize(writer, internationalShipmentResponseRate.DeliveryCommitment, jsonSerializerOptions);
            }
            if (internationalShipmentResponseRate.ParcelTypeOption.IsSet)
                writer.WriteString("parcelType", internationalShipmentResponseRate.ParcelType);

            if (internationalShipmentResponseRate.RateTypeIdOption.IsSet)
                writer.WriteString("rateTypeId", internationalShipmentResponseRate.RateTypeId);

            if (internationalShipmentResponseRate.ServiceIdOption.IsSet)
                writer.WriteString("serviceId", internationalShipmentResponseRate.ServiceId);

            if (internationalShipmentResponseRate.SpecialServicesOption.IsSet)
            {
                writer.WritePropertyName("specialServices");
                JsonSerializer.Serialize(writer, internationalShipmentResponseRate.SpecialServices, jsonSerializerOptions);
            }
            if (internationalShipmentResponseRate.TotalCarrierChargeOption.IsSet)
                writer.WriteNumber("totalCarrierCharge", internationalShipmentResponseRate.TotalCarrierChargeOption.Value.Value);
        }
    }
}
