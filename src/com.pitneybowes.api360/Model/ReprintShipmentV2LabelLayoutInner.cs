// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// ReprintShipmentV2LabelLayoutInner
    /// </summary>
    public partial class ReprintShipmentV2LabelLayoutInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReprintShipmentV2LabelLayoutInner" /> class.
        /// </summary>
        /// <param name="contentType">This is used to encode binary data as printable text.&lt;br /&gt; ContentType of the document is URL if the fileformat is PDF, while it will be BASE64 if the fileFormat is ZPL2.</param>
        /// <param name="contents">Content/Identifier of document e.g., DOCUMENT_REFERECE_ID.&lt;br /&gt; Actual document name e.g., abc.pdf. [IN].</param>
        /// <param name="fileFormat">Defines the format of the document file the print takes.</param>
        /// <param name="size">Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size.</param>
        /// <param name="type">Defines the type of the Shipment.</param>
        [JsonConstructor]
        public ReprintShipmentV2LabelLayoutInner(Option<ContentTypeEnum?> contentType = default, Option<string> contents = default, Option<FileFormatEnum?> fileFormat = default, Option<SizeEnum?> size = default, Option<TypeEnum?> type = default)
        {
            ContentTypeOption = contentType;
            ContentsOption = contents;
            FileFormatOption = fileFormat;
            SizeOption = size;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// This is used to encode binary data as printable text.&lt;br /&gt; ContentType of the document is URL if the fileformat is PDF, while it will be BASE64 if the fileFormat is ZPL2.
        /// </summary>
        /// <value>This is used to encode binary data as printable text.&lt;br /&gt; ContentType of the document is URL if the fileformat is PDF, while it will be BASE64 if the fileFormat is ZPL2.</value>
        public enum ContentTypeEnum
        {
            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            URL = 1,

            /// <summary>
            /// Enum BASE64 for value: BASE64
            /// </summary>
            BASE64 = 2
        }

        /// <summary>
        /// Returns a <see cref="ContentTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ContentTypeEnum ContentTypeEnumFromString(string value)
        {
            if (value.Equals("URL"))
                return ContentTypeEnum.URL;

            if (value.Equals("BASE64"))
                return ContentTypeEnum.BASE64;

            throw new NotImplementedException($"Could not convert value to type ContentTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ContentTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ContentTypeEnum? ContentTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("URL"))
                return ContentTypeEnum.URL;

            if (value.Equals("BASE64"))
                return ContentTypeEnum.BASE64;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ContentTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ContentTypeEnumToJsonValue(ContentTypeEnum? value)
        {
            if (value == ContentTypeEnum.URL)
                return "URL";

            if (value == ContentTypeEnum.BASE64)
                return "BASE64";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ContentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ContentTypeEnum?> ContentTypeOption { get; private set; }

        /// <summary>
        /// This is used to encode binary data as printable text.&lt;br /&gt; ContentType of the document is URL if the fileformat is PDF, while it will be BASE64 if the fileFormat is ZPL2.
        /// </summary>
        /// <value>This is used to encode binary data as printable text.&lt;br /&gt; ContentType of the document is URL if the fileformat is PDF, while it will be BASE64 if the fileFormat is ZPL2.</value>
        /* <example>BASE64</example> */
        [JsonPropertyName("contentType")]
        public ContentTypeEnum? ContentType { get { return this.ContentTypeOption; } set { this.ContentTypeOption = new Option<ContentTypeEnum?>(value); } }

        /// <summary>
        /// Defines the format of the document file the print takes.
        /// </summary>
        /// <value>Defines the format of the document file the print takes.</value>
        public enum FileFormatEnum
        {
            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            PDF = 1,

            /// <summary>
            /// Enum ZPL2 for value: ZPL2
            /// </summary>
            ZPL2 = 2
        }

        /// <summary>
        /// Returns a <see cref="FileFormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FileFormatEnum FileFormatEnumFromString(string value)
        {
            if (value.Equals("PDF"))
                return FileFormatEnum.PDF;

            if (value.Equals("ZPL2"))
                return FileFormatEnum.ZPL2;

            throw new NotImplementedException($"Could not convert value to type FileFormatEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FileFormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FileFormatEnum? FileFormatEnumFromStringOrDefault(string value)
        {
            if (value.Equals("PDF"))
                return FileFormatEnum.PDF;

            if (value.Equals("ZPL2"))
                return FileFormatEnum.ZPL2;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FileFormatEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FileFormatEnumToJsonValue(FileFormatEnum? value)
        {
            if (value == FileFormatEnum.PDF)
                return "PDF";

            if (value == FileFormatEnum.ZPL2)
                return "ZPL2";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of FileFormat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FileFormatEnum?> FileFormatOption { get; private set; }

        /// <summary>
        /// Defines the format of the document file the print takes.
        /// </summary>
        /// <value>Defines the format of the document file the print takes.</value>
        /* <example>ZPL2</example> */
        [JsonPropertyName("fileFormat")]
        public FileFormatEnum? FileFormat { get { return this.FileFormatOption; } set { this.FileFormatOption = new Option<FileFormatEnum?>(value); } }

        /// <summary>
        /// Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size.
        /// </summary>
        /// <value>Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size.</value>
        public enum SizeEnum
        {
            /// <summary>
            /// Enum DOC8X11 for value: DOC_8X11
            /// </summary>
            DOC8X11 = 1,

            /// <summary>
            /// Enum DOC4X6 for value: DOC_4X6
            /// </summary>
            DOC4X6 = 2
        }

        /// <summary>
        /// Returns a <see cref="SizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SizeEnum SizeEnumFromString(string value)
        {
            if (value.Equals("DOC_8X11"))
                return SizeEnum.DOC8X11;

            if (value.Equals("DOC_4X6"))
                return SizeEnum.DOC4X6;

            throw new NotImplementedException($"Could not convert value to type SizeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SizeEnum? SizeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("DOC_8X11"))
                return SizeEnum.DOC8X11;

            if (value.Equals("DOC_4X6"))
                return SizeEnum.DOC4X6;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SizeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SizeEnumToJsonValue(SizeEnum? value)
        {
            if (value == SizeEnum.DOC8X11)
                return "DOC_8X11";

            if (value == SizeEnum.DOC4X6)
                return "DOC_4X6";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SizeEnum?> SizeOption { get; private set; }

        /// <summary>
        /// Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size.
        /// </summary>
        /// <value>Defines the label size of the Shipment, that is, the Shipping Label is available in different Doc Size.</value>
        /* <example>DOC_4X6</example> */
        [JsonPropertyName("size")]
        public SizeEnum? Size { get { return this.SizeOption; } set { this.SizeOption = new Option<SizeEnum?>(value); } }

        /// <summary>
        /// Defines the type of the Shipment.
        /// </summary>
        /// <value>Defines the type of the Shipment.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SHIPPINGLABEL for value: SHIPPING_LABEL
            /// </summary>
            SHIPPINGLABEL = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("SHIPPING_LABEL"))
                return TypeEnum.SHIPPINGLABEL;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SHIPPING_LABEL"))
                return TypeEnum.SHIPPINGLABEL;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.SHIPPINGLABEL)
                return "SHIPPING_LABEL";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Defines the type of the Shipment.
        /// </summary>
        /// <value>Defines the type of the Shipment.</value>
        /* <example>SHIPPING_LABEL</example> */
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Contents
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContentsOption { get; private set; }

        /// <summary>
        /// Content/Identifier of document e.g., DOCUMENT_REFERECE_ID.&lt;br /&gt; Actual document name e.g., abc.pdf. [IN].
        /// </summary>
        /// <value>Content/Identifier of document e.g., DOCUMENT_REFERECE_ID.&lt;br /&gt; Actual document name e.g., abc.pdf. [IN].</value>
        /* <example>Xhsafiuis</example> */
        [JsonPropertyName("contents")]
        public string Contents { get { return this.ContentsOption; } set { this.ContentsOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReprintShipmentV2LabelLayoutInner {\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReprintShipmentV2LabelLayoutInner" />
    /// </summary>
    public class ReprintShipmentV2LabelLayoutInnerJsonConverter : JsonConverter<ReprintShipmentV2LabelLayoutInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReprintShipmentV2LabelLayoutInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReprintShipmentV2LabelLayoutInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ReprintShipmentV2LabelLayoutInner.ContentTypeEnum?> contentType = default;
            Option<string> contents = default;
            Option<ReprintShipmentV2LabelLayoutInner.FileFormatEnum?> fileFormat = default;
            Option<ReprintShipmentV2LabelLayoutInner.SizeEnum?> size = default;
            Option<ReprintShipmentV2LabelLayoutInner.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contentType":
                            string contentTypeRawValue = utf8JsonReader.GetString();
                            if (contentTypeRawValue != null)
                                contentType = new Option<ReprintShipmentV2LabelLayoutInner.ContentTypeEnum?>(ReprintShipmentV2LabelLayoutInner.ContentTypeEnumFromStringOrDefault(contentTypeRawValue));
                            break;
                        case "contents":
                            contents = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fileFormat":
                            string fileFormatRawValue = utf8JsonReader.GetString();
                            if (fileFormatRawValue != null)
                                fileFormat = new Option<ReprintShipmentV2LabelLayoutInner.FileFormatEnum?>(ReprintShipmentV2LabelLayoutInner.FileFormatEnumFromStringOrDefault(fileFormatRawValue));
                            break;
                        case "size":
                            string sizeRawValue = utf8JsonReader.GetString();
                            if (sizeRawValue != null)
                                size = new Option<ReprintShipmentV2LabelLayoutInner.SizeEnum?>(ReprintShipmentV2LabelLayoutInner.SizeEnumFromStringOrDefault(sizeRawValue));
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ReprintShipmentV2LabelLayoutInner.TypeEnum?>(ReprintShipmentV2LabelLayoutInner.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType), "Property is not nullable for class ReprintShipmentV2LabelLayoutInner.");

            if (contents.IsSet && contents.Value == null)
                throw new ArgumentNullException(nameof(contents), "Property is not nullable for class ReprintShipmentV2LabelLayoutInner.");

            if (fileFormat.IsSet && fileFormat.Value == null)
                throw new ArgumentNullException(nameof(fileFormat), "Property is not nullable for class ReprintShipmentV2LabelLayoutInner.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class ReprintShipmentV2LabelLayoutInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ReprintShipmentV2LabelLayoutInner.");

            return new ReprintShipmentV2LabelLayoutInner(contentType, contents, fileFormat, size, type);
        }

        /// <summary>
        /// Serializes a <see cref="ReprintShipmentV2LabelLayoutInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reprintShipmentV2LabelLayoutInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReprintShipmentV2LabelLayoutInner reprintShipmentV2LabelLayoutInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, reprintShipmentV2LabelLayoutInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReprintShipmentV2LabelLayoutInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reprintShipmentV2LabelLayoutInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReprintShipmentV2LabelLayoutInner reprintShipmentV2LabelLayoutInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (reprintShipmentV2LabelLayoutInner.ContentsOption.IsSet && reprintShipmentV2LabelLayoutInner.Contents == null)
                throw new ArgumentNullException(nameof(reprintShipmentV2LabelLayoutInner.Contents), "Property is required for class ReprintShipmentV2LabelLayoutInner.");

            var contentTypeRawValue = ReprintShipmentV2LabelLayoutInner.ContentTypeEnumToJsonValue(reprintShipmentV2LabelLayoutInner.ContentTypeOption.Value.Value);
            writer.WriteString("contentType", contentTypeRawValue);
            if (reprintShipmentV2LabelLayoutInner.ContentsOption.IsSet)
                writer.WriteString("contents", reprintShipmentV2LabelLayoutInner.Contents);

            var fileFormatRawValue = ReprintShipmentV2LabelLayoutInner.FileFormatEnumToJsonValue(reprintShipmentV2LabelLayoutInner.FileFormatOption.Value.Value);
            writer.WriteString("fileFormat", fileFormatRawValue);
            var sizeRawValue = ReprintShipmentV2LabelLayoutInner.SizeEnumToJsonValue(reprintShipmentV2LabelLayoutInner.SizeOption.Value.Value);
            writer.WriteString("size", sizeRawValue);
            var typeRawValue = ReprintShipmentV2LabelLayoutInner.TypeEnumToJsonValue(reprintShipmentV2LabelLayoutInner.TypeOption.Value.Value);
            writer.WriteString("type", typeRawValue);
        }
    }
}
