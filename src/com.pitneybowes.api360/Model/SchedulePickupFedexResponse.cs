// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// SchedulePickupFedexResponse
    /// </summary>
    public partial class SchedulePickupFedexResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulePickupFedexResponse" /> class.
        /// </summary>
        /// <param name="packageLocation">The location where the parcel will be available for pickup at the specified pickup address.</param>
        /// <param name="carrierAccountId">The unique identifier of the carrier account being used to process the pickup.</param>
        /// <param name="pickupConfirmationNumber">The confirmation number generated when the pickup request is successfully processed.</param>
        /// <param name="pickupId">A unique identifier for the scheduled pickup.</param>
        /// <param name="carrier">The carrier being used for the pickup.</param>
        /// <param name="pickupAddress">pickupAddress</param>
        /// <param name="pickupSummary">An array of the pickup details, including the number of packages, total weight, and carrier service information.</param>
        /// <param name="additionalNotes">Additional instructions or notes for the carrier regarding the pickup.</param>
        /// <param name="reference">An optional Reference related to the pickup.</param>
        /// <param name="pickupDateTime">The date and time of the pickup in ISO 8601 format.</param>
        /// <param name="pickupTotalWeight">The total weight of all packages being picked up.</param>
        /// <param name="pickupTotalWeightUnit">The unit of measurement for the total package weight.</param>
        /// <param name="pickupOptions">pickupOptions</param>
        [JsonConstructor]
        public SchedulePickupFedexResponse(Option<string> packageLocation = default, Option<string> carrierAccountId = default, Option<string> pickupConfirmationNumber = default, Option<string> pickupId = default, Option<string> carrier = default, Option<SchedulePickupDHLEXPResponsePickupAddress> pickupAddress = default, Option<List<SchedulePickupFedexResponsePickupSummaryInner>> pickupSummary = default, Option<string> additionalNotes = default, Option<string> reference = default, Option<string> pickupDateTime = default, Option<decimal?> pickupTotalWeight = default, Option<string> pickupTotalWeightUnit = default, Option<SchedulePickupFedexRequestPickupOptionsInner> pickupOptions = default)
        {
            PackageLocationOption = packageLocation;
            CarrierAccountIdOption = carrierAccountId;
            PickupConfirmationNumberOption = pickupConfirmationNumber;
            PickupIdOption = pickupId;
            CarrierOption = carrier;
            PickupAddressOption = pickupAddress;
            PickupSummaryOption = pickupSummary;
            AdditionalNotesOption = additionalNotes;
            ReferenceOption = reference;
            PickupDateTimeOption = pickupDateTime;
            PickupTotalWeightOption = pickupTotalWeight;
            PickupTotalWeightUnitOption = pickupTotalWeightUnit;
            PickupOptionsOption = pickupOptions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PackageLocation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PackageLocationOption { get; private set; }

        /// <summary>
        /// The location where the parcel will be available for pickup at the specified pickup address.
        /// </summary>
        /// <value>The location where the parcel will be available for pickup at the specified pickup address.</value>
        /* <example>None</example> */
        [JsonPropertyName("packageLocation")]
        public string PackageLocation { get { return this.PackageLocationOption; } set { this.PackageLocationOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarrierAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarrierAccountIdOption { get; private set; }

        /// <summary>
        /// The unique identifier of the carrier account being used to process the pickup.
        /// </summary>
        /// <value>The unique identifier of the carrier account being used to process the pickup.</value>
        /* <example>j4pqLKjQ5dn</example> */
        [JsonPropertyName("carrierAccountId")]
        public string CarrierAccountId { get { return this.CarrierAccountIdOption; } set { this.CarrierAccountIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PickupConfirmationNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PickupConfirmationNumberOption { get; private set; }

        /// <summary>
        /// The confirmation number generated when the pickup request is successfully processed.
        /// </summary>
        /// <value>The confirmation number generated when the pickup request is successfully processed.</value>
        /* <example>CBJ180121002626</example> */
        [JsonPropertyName("pickupConfirmationNumber")]
        public string PickupConfirmationNumber { get { return this.PickupConfirmationNumberOption; } set { this.PickupConfirmationNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PickupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PickupIdOption { get; private set; }

        /// <summary>
        /// A unique identifier for the scheduled pickup.
        /// </summary>
        /// <value>A unique identifier for the scheduled pickup.</value>
        /* <example>USPSXXX10191697701225617</example> */
        [JsonPropertyName("pickupId")]
        public string PickupId { get { return this.PickupIdOption; } set { this.PickupIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Carrier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarrierOption { get; private set; }

        /// <summary>
        /// The carrier being used for the pickup.
        /// </summary>
        /// <value>The carrier being used for the pickup.</value>
        /* <example>USPS</example> */
        [JsonPropertyName("carrier")]
        public string Carrier { get { return this.CarrierOption; } set { this.CarrierOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PickupAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SchedulePickupDHLEXPResponsePickupAddress> PickupAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets PickupAddress
        /// </summary>
        [JsonPropertyName("pickupAddress")]
        public SchedulePickupDHLEXPResponsePickupAddress PickupAddress { get { return this.PickupAddressOption; } set { this.PickupAddressOption = new Option<SchedulePickupDHLEXPResponsePickupAddress>(value); } }

        /// <summary>
        /// Used to track the state of PickupSummary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SchedulePickupFedexResponsePickupSummaryInner>> PickupSummaryOption { get; private set; }

        /// <summary>
        /// An array of the pickup details, including the number of packages, total weight, and carrier service information.
        /// </summary>
        /// <value>An array of the pickup details, including the number of packages, total weight, and carrier service information.</value>
        [JsonPropertyName("pickupSummary")]
        public List<SchedulePickupFedexResponsePickupSummaryInner> PickupSummary { get { return this.PickupSummaryOption; } set { this.PickupSummaryOption = new Option<List<SchedulePickupFedexResponsePickupSummaryInner>>(value); } }

        /// <summary>
        /// Used to track the state of AdditionalNotes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AdditionalNotesOption { get; private set; }

        /// <summary>
        /// Additional instructions or notes for the carrier regarding the pickup.
        /// </summary>
        /// <value>Additional instructions or notes for the carrier regarding the pickup.</value>
        /* <example>absdhda</example> */
        [JsonPropertyName("additionalNotes")]
        public string AdditionalNotes { get { return this.AdditionalNotesOption; } set { this.AdditionalNotesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Reference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ReferenceOption { get; private set; }

        /// <summary>
        /// An optional Reference related to the pickup.
        /// </summary>
        /// <value>An optional Reference related to the pickup.</value>
        /* <example>zscsdc</example> */
        [JsonPropertyName("reference")]
        public string Reference { get { return this.ReferenceOption; } set { this.ReferenceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PickupDateTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PickupDateTimeOption { get; private set; }

        /// <summary>
        /// The date and time of the pickup in ISO 8601 format.
        /// </summary>
        /// <value>The date and time of the pickup in ISO 8601 format.</value>
        /* <example>2024-10-10T17:05:05Z</example> */
        [JsonPropertyName("pickupDateTime")]
        public string PickupDateTime { get { return this.PickupDateTimeOption; } set { this.PickupDateTimeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PickupTotalWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> PickupTotalWeightOption { get; private set; }

        /// <summary>
        /// The total weight of all packages being picked up.
        /// </summary>
        /// <value>The total weight of all packages being picked up.</value>
        /* <example>16</example> */
        [JsonPropertyName("pickupTotalWeight")]
        public decimal? PickupTotalWeight { get { return this.PickupTotalWeightOption; } set { this.PickupTotalWeightOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of PickupTotalWeightUnit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PickupTotalWeightUnitOption { get; private set; }

        /// <summary>
        /// The unit of measurement for the total package weight.
        /// </summary>
        /// <value>The unit of measurement for the total package weight.</value>
        /* <example>OZ</example> */
        [JsonPropertyName("pickupTotalWeightUnit")]
        public string PickupTotalWeightUnit { get { return this.PickupTotalWeightUnitOption; } set { this.PickupTotalWeightUnitOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PickupOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SchedulePickupFedexRequestPickupOptionsInner> PickupOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PickupOptions
        /// </summary>
        [JsonPropertyName("pickupOptions")]
        public SchedulePickupFedexRequestPickupOptionsInner PickupOptions { get { return this.PickupOptionsOption; } set { this.PickupOptionsOption = new Option<SchedulePickupFedexRequestPickupOptionsInner>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SchedulePickupFedexResponse {\n");
            sb.Append("  PackageLocation: ").Append(PackageLocation).Append("\n");
            sb.Append("  CarrierAccountId: ").Append(CarrierAccountId).Append("\n");
            sb.Append("  PickupConfirmationNumber: ").Append(PickupConfirmationNumber).Append("\n");
            sb.Append("  PickupId: ").Append(PickupId).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  PickupAddress: ").Append(PickupAddress).Append("\n");
            sb.Append("  PickupSummary: ").Append(PickupSummary).Append("\n");
            sb.Append("  AdditionalNotes: ").Append(AdditionalNotes).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  PickupDateTime: ").Append(PickupDateTime).Append("\n");
            sb.Append("  PickupTotalWeight: ").Append(PickupTotalWeight).Append("\n");
            sb.Append("  PickupTotalWeightUnit: ").Append(PickupTotalWeightUnit).Append("\n");
            sb.Append("  PickupOptions: ").Append(PickupOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SchedulePickupFedexResponse" />
    /// </summary>
    public class SchedulePickupFedexResponseJsonConverter : JsonConverter<SchedulePickupFedexResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="SchedulePickupFedexResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SchedulePickupFedexResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> packageLocation = default;
            Option<string> carrierAccountId = default;
            Option<string> pickupConfirmationNumber = default;
            Option<string> pickupId = default;
            Option<string> carrier = default;
            Option<SchedulePickupDHLEXPResponsePickupAddress> pickupAddress = default;
            Option<List<SchedulePickupFedexResponsePickupSummaryInner>> pickupSummary = default;
            Option<string> additionalNotes = default;
            Option<string> reference = default;
            Option<string> pickupDateTime = default;
            Option<decimal?> pickupTotalWeight = default;
            Option<string> pickupTotalWeightUnit = default;
            Option<SchedulePickupFedexRequestPickupOptionsInner> pickupOptions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "packageLocation":
                            packageLocation = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carrierAccountId":
                            carrierAccountId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "pickupConfirmationNumber":
                            pickupConfirmationNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "pickupId":
                            pickupId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carrier":
                            carrier = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "pickupAddress":
                            pickupAddress = new Option<SchedulePickupDHLEXPResponsePickupAddress>(JsonSerializer.Deserialize<SchedulePickupDHLEXPResponsePickupAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "pickupSummary":
                            pickupSummary = new Option<List<SchedulePickupFedexResponsePickupSummaryInner>>(JsonSerializer.Deserialize<List<SchedulePickupFedexResponsePickupSummaryInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "additionalNotes":
                            additionalNotes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "reference":
                            reference = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "pickupDateTime":
                            pickupDateTime = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "pickupTotalWeight":
                            pickupTotalWeight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "pickupTotalWeightUnit":
                            pickupTotalWeightUnit = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "pickupOptions":
                            pickupOptions = new Option<SchedulePickupFedexRequestPickupOptionsInner>(JsonSerializer.Deserialize<SchedulePickupFedexRequestPickupOptionsInner>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (packageLocation.IsSet && packageLocation.Value == null)
                throw new ArgumentNullException(nameof(packageLocation), "Property is not nullable for class SchedulePickupFedexResponse.");

            if (carrierAccountId.IsSet && carrierAccountId.Value == null)
                throw new ArgumentNullException(nameof(carrierAccountId), "Property is not nullable for class SchedulePickupFedexResponse.");

            if (pickupConfirmationNumber.IsSet && pickupConfirmationNumber.Value == null)
                throw new ArgumentNullException(nameof(pickupConfirmationNumber), "Property is not nullable for class SchedulePickupFedexResponse.");

            if (pickupId.IsSet && pickupId.Value == null)
                throw new ArgumentNullException(nameof(pickupId), "Property is not nullable for class SchedulePickupFedexResponse.");

            if (carrier.IsSet && carrier.Value == null)
                throw new ArgumentNullException(nameof(carrier), "Property is not nullable for class SchedulePickupFedexResponse.");

            if (pickupAddress.IsSet && pickupAddress.Value == null)
                throw new ArgumentNullException(nameof(pickupAddress), "Property is not nullable for class SchedulePickupFedexResponse.");

            if (pickupSummary.IsSet && pickupSummary.Value == null)
                throw new ArgumentNullException(nameof(pickupSummary), "Property is not nullable for class SchedulePickupFedexResponse.");

            if (additionalNotes.IsSet && additionalNotes.Value == null)
                throw new ArgumentNullException(nameof(additionalNotes), "Property is not nullable for class SchedulePickupFedexResponse.");

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class SchedulePickupFedexResponse.");

            if (pickupDateTime.IsSet && pickupDateTime.Value == null)
                throw new ArgumentNullException(nameof(pickupDateTime), "Property is not nullable for class SchedulePickupFedexResponse.");

            if (pickupTotalWeight.IsSet && pickupTotalWeight.Value == null)
                throw new ArgumentNullException(nameof(pickupTotalWeight), "Property is not nullable for class SchedulePickupFedexResponse.");

            if (pickupTotalWeightUnit.IsSet && pickupTotalWeightUnit.Value == null)
                throw new ArgumentNullException(nameof(pickupTotalWeightUnit), "Property is not nullable for class SchedulePickupFedexResponse.");

            if (pickupOptions.IsSet && pickupOptions.Value == null)
                throw new ArgumentNullException(nameof(pickupOptions), "Property is not nullable for class SchedulePickupFedexResponse.");

            return new SchedulePickupFedexResponse(packageLocation, carrierAccountId, pickupConfirmationNumber, pickupId, carrier, pickupAddress, pickupSummary, additionalNotes, reference, pickupDateTime, pickupTotalWeight, pickupTotalWeightUnit, pickupOptions);
        }

        /// <summary>
        /// Serializes a <see cref="SchedulePickupFedexResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="schedulePickupFedexResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SchedulePickupFedexResponse schedulePickupFedexResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, schedulePickupFedexResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SchedulePickupFedexResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="schedulePickupFedexResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SchedulePickupFedexResponse schedulePickupFedexResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (schedulePickupFedexResponse.PackageLocationOption.IsSet && schedulePickupFedexResponse.PackageLocation == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexResponse.PackageLocation), "Property is required for class SchedulePickupFedexResponse.");

            if (schedulePickupFedexResponse.CarrierAccountIdOption.IsSet && schedulePickupFedexResponse.CarrierAccountId == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexResponse.CarrierAccountId), "Property is required for class SchedulePickupFedexResponse.");

            if (schedulePickupFedexResponse.PickupConfirmationNumberOption.IsSet && schedulePickupFedexResponse.PickupConfirmationNumber == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexResponse.PickupConfirmationNumber), "Property is required for class SchedulePickupFedexResponse.");

            if (schedulePickupFedexResponse.PickupIdOption.IsSet && schedulePickupFedexResponse.PickupId == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexResponse.PickupId), "Property is required for class SchedulePickupFedexResponse.");

            if (schedulePickupFedexResponse.CarrierOption.IsSet && schedulePickupFedexResponse.Carrier == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexResponse.Carrier), "Property is required for class SchedulePickupFedexResponse.");

            if (schedulePickupFedexResponse.PickupAddressOption.IsSet && schedulePickupFedexResponse.PickupAddress == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexResponse.PickupAddress), "Property is required for class SchedulePickupFedexResponse.");

            if (schedulePickupFedexResponse.PickupSummaryOption.IsSet && schedulePickupFedexResponse.PickupSummary == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexResponse.PickupSummary), "Property is required for class SchedulePickupFedexResponse.");

            if (schedulePickupFedexResponse.AdditionalNotesOption.IsSet && schedulePickupFedexResponse.AdditionalNotes == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexResponse.AdditionalNotes), "Property is required for class SchedulePickupFedexResponse.");

            if (schedulePickupFedexResponse.ReferenceOption.IsSet && schedulePickupFedexResponse.Reference == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexResponse.Reference), "Property is required for class SchedulePickupFedexResponse.");

            if (schedulePickupFedexResponse.PickupDateTimeOption.IsSet && schedulePickupFedexResponse.PickupDateTime == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexResponse.PickupDateTime), "Property is required for class SchedulePickupFedexResponse.");

            if (schedulePickupFedexResponse.PickupTotalWeightUnitOption.IsSet && schedulePickupFedexResponse.PickupTotalWeightUnit == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexResponse.PickupTotalWeightUnit), "Property is required for class SchedulePickupFedexResponse.");

            if (schedulePickupFedexResponse.PickupOptionsOption.IsSet && schedulePickupFedexResponse.PickupOptions == null)
                throw new ArgumentNullException(nameof(schedulePickupFedexResponse.PickupOptions), "Property is required for class SchedulePickupFedexResponse.");

            if (schedulePickupFedexResponse.PackageLocationOption.IsSet)
                writer.WriteString("packageLocation", schedulePickupFedexResponse.PackageLocation);

            if (schedulePickupFedexResponse.CarrierAccountIdOption.IsSet)
                writer.WriteString("carrierAccountId", schedulePickupFedexResponse.CarrierAccountId);

            if (schedulePickupFedexResponse.PickupConfirmationNumberOption.IsSet)
                writer.WriteString("pickupConfirmationNumber", schedulePickupFedexResponse.PickupConfirmationNumber);

            if (schedulePickupFedexResponse.PickupIdOption.IsSet)
                writer.WriteString("pickupId", schedulePickupFedexResponse.PickupId);

            if (schedulePickupFedexResponse.CarrierOption.IsSet)
                writer.WriteString("carrier", schedulePickupFedexResponse.Carrier);

            if (schedulePickupFedexResponse.PickupAddressOption.IsSet)
            {
                writer.WritePropertyName("pickupAddress");
                JsonSerializer.Serialize(writer, schedulePickupFedexResponse.PickupAddress, jsonSerializerOptions);
            }
            if (schedulePickupFedexResponse.PickupSummaryOption.IsSet)
            {
                writer.WritePropertyName("pickupSummary");
                JsonSerializer.Serialize(writer, schedulePickupFedexResponse.PickupSummary, jsonSerializerOptions);
            }
            if (schedulePickupFedexResponse.AdditionalNotesOption.IsSet)
                writer.WriteString("additionalNotes", schedulePickupFedexResponse.AdditionalNotes);

            if (schedulePickupFedexResponse.ReferenceOption.IsSet)
                writer.WriteString("reference", schedulePickupFedexResponse.Reference);

            if (schedulePickupFedexResponse.PickupDateTimeOption.IsSet)
                writer.WriteString("pickupDateTime", schedulePickupFedexResponse.PickupDateTime);

            if (schedulePickupFedexResponse.PickupTotalWeightOption.IsSet)
                writer.WriteNumber("pickupTotalWeight", schedulePickupFedexResponse.PickupTotalWeightOption.Value.Value);

            if (schedulePickupFedexResponse.PickupTotalWeightUnitOption.IsSet)
                writer.WriteString("pickupTotalWeightUnit", schedulePickupFedexResponse.PickupTotalWeightUnit);

            if (schedulePickupFedexResponse.PickupOptionsOption.IsSet)
            {
                writer.WritePropertyName("pickupOptions");
                JsonSerializer.Serialize(writer, schedulePickupFedexResponse.PickupOptions, jsonSerializerOptions);
            }
        }
    }
}
