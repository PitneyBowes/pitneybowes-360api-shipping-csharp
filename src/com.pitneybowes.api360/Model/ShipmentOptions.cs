// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// ShipmentOptions
    /// </summary>
    public partial class ShipmentOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentOptions" /> class.
        /// </summary>
        /// <param name="addToManifest">The option asks if the shipment is to be added for Manifest, so that the shipment will reflect in the Manifest Form while compilation.&lt;br /&gt; The value can be &#39;true&#39; or &#39;false&#39;. Applicable for USPS and CPC carriers.</param>
        /// <param name="printCustomMessage">It prints a custom message on shipping label. Custom messages are not supported for RMG shipments.</param>
        /// <param name="receiptOption">It provides options to print receipt with shipping label. Only applicable for USPS, and it can have the indicated possible/ enum values.</param>
        /// <param name="printDepartment">It prints the Department on Shipping Label, applicable for FedEx.</param>
        /// <param name="printInvoiceNumber">It prints Invoice Number on Shipping Label, applicable for FedEx.</param>
        /// <param name="printPONumber">It prints Product Order number on Shipping Label, applicable for FedEx.</param>
        /// <param name="shipperId">The unique identifier of the known shipper.</param>
        /// <param name="minimalAddressValidation">Allows performing minimal address validation during shipment creation. the addressLine1 field is not validated if set to true. Minimal address validation is supported only for these APIs:    - Create Shipment    - Create Bulk Shipments    - Create Multipiece Shipment </param>
        [JsonConstructor]
        public ShipmentOptions(Option<bool?> addToManifest = default, Option<string> printCustomMessage = default, Option<ReceiptOptionEnum?> receiptOption = default, Option<string> printDepartment = default, Option<string> printInvoiceNumber = default, Option<string> printPONumber = default, Option<string> shipperId = default, Option<bool?> minimalAddressValidation = default)
        {
            AddToManifestOption = addToManifest;
            PrintCustomMessageOption = printCustomMessage;
            ReceiptOptionOption = receiptOption;
            PrintDepartmentOption = printDepartment;
            PrintInvoiceNumberOption = printInvoiceNumber;
            PrintPONumberOption = printPONumber;
            ShipperIdOption = shipperId;
            MinimalAddressValidationOption = minimalAddressValidation;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// It provides options to print receipt with shipping label. Only applicable for USPS, and it can have the indicated possible/ enum values.
        /// </summary>
        /// <value>It provides options to print receipt with shipping label. Only applicable for USPS, and it can have the indicated possible/ enum values.</value>
        public enum ReceiptOptionEnum
        {
            /// <summary>
            /// Enum RECEIPTONLY for value: RECEIPT_ONLY
            /// </summary>
            RECEIPTONLY = 1,

            /// <summary>
            /// Enum RECEIPTWITHINSTRUCTIONS for value: RECEIPT_WITH_INSTRUCTIONS
            /// </summary>
            RECEIPTWITHINSTRUCTIONS = 2,

            /// <summary>
            /// Enum OrNOOPTIONS for value: or NO_OPTIONS
            /// </summary>
            OrNOOPTIONS = 3
        }

        /// <summary>
        /// Returns a <see cref="ReceiptOptionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ReceiptOptionEnum ReceiptOptionEnumFromString(string value)
        {
            if (value.Equals("RECEIPT_ONLY"))
                return ReceiptOptionEnum.RECEIPTONLY;

            if (value.Equals("RECEIPT_WITH_INSTRUCTIONS"))
                return ReceiptOptionEnum.RECEIPTWITHINSTRUCTIONS;

            if (value.Equals("or NO_OPTIONS"))
                return ReceiptOptionEnum.OrNOOPTIONS;

            throw new NotImplementedException($"Could not convert value to type ReceiptOptionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ReceiptOptionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReceiptOptionEnum? ReceiptOptionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("RECEIPT_ONLY"))
                return ReceiptOptionEnum.RECEIPTONLY;

            if (value.Equals("RECEIPT_WITH_INSTRUCTIONS"))
                return ReceiptOptionEnum.RECEIPTWITHINSTRUCTIONS;

            if (value.Equals("or NO_OPTIONS"))
                return ReceiptOptionEnum.OrNOOPTIONS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ReceiptOptionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ReceiptOptionEnumToJsonValue(ReceiptOptionEnum? value)
        {
            if (value == ReceiptOptionEnum.RECEIPTONLY)
                return "RECEIPT_ONLY";

            if (value == ReceiptOptionEnum.RECEIPTWITHINSTRUCTIONS)
                return "RECEIPT_WITH_INSTRUCTIONS";

            if (value == ReceiptOptionEnum.OrNOOPTIONS)
                return "or NO_OPTIONS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ReceiptOption
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReceiptOptionEnum?> ReceiptOptionOption { get; private set; }

        /// <summary>
        /// It provides options to print receipt with shipping label. Only applicable for USPS, and it can have the indicated possible/ enum values.
        /// </summary>
        /// <value>It provides options to print receipt with shipping label. Only applicable for USPS, and it can have the indicated possible/ enum values.</value>
        /* <example>RECEIPT_WITH_INSTRUCTIONS</example> */
        [JsonPropertyName("receiptOption")]
        public ReceiptOptionEnum? ReceiptOption { get { return this.ReceiptOptionOption; } set { this.ReceiptOptionOption = new Option<ReceiptOptionEnum?>(value); } }

        /// <summary>
        /// Used to track the state of AddToManifest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AddToManifestOption { get; private set; }

        /// <summary>
        /// The option asks if the shipment is to be added for Manifest, so that the shipment will reflect in the Manifest Form while compilation.&lt;br /&gt; The value can be &#39;true&#39; or &#39;false&#39;. Applicable for USPS and CPC carriers.
        /// </summary>
        /// <value>The option asks if the shipment is to be added for Manifest, so that the shipment will reflect in the Manifest Form while compilation.&lt;br /&gt; The value can be &#39;true&#39; or &#39;false&#39;. Applicable for USPS and CPC carriers.</value>
        /* <example>true</example> */
        [JsonPropertyName("addToManifest")]
        public bool? AddToManifest { get { return this.AddToManifestOption; } set { this.AddToManifestOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of PrintCustomMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PrintCustomMessageOption { get; private set; }

        /// <summary>
        /// It prints a custom message on shipping label. Custom messages are not supported for RMG shipments.
        /// </summary>
        /// <value>It prints a custom message on shipping label. Custom messages are not supported for RMG shipments.</value>
        /* <example>Print Message 1</example> */
        [JsonPropertyName("printCustomMessage")]
        public string PrintCustomMessage { get { return this.PrintCustomMessageOption; } set { this.PrintCustomMessageOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PrintDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PrintDepartmentOption { get; private set; }

        /// <summary>
        /// It prints the Department on Shipping Label, applicable for FedEx.
        /// </summary>
        /// <value>It prints the Department on Shipping Label, applicable for FedEx.</value>
        /* <example>department</example> */
        [JsonPropertyName("printDepartment")]
        public string PrintDepartment { get { return this.PrintDepartmentOption; } set { this.PrintDepartmentOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PrintInvoiceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PrintInvoiceNumberOption { get; private set; }

        /// <summary>
        /// It prints Invoice Number on Shipping Label, applicable for FedEx.
        /// </summary>
        /// <value>It prints Invoice Number on Shipping Label, applicable for FedEx.</value>
        /* <example>invoicenumber</example> */
        [JsonPropertyName("printInvoiceNumber")]
        public string PrintInvoiceNumber { get { return this.PrintInvoiceNumberOption; } set { this.PrintInvoiceNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PrintPONumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PrintPONumberOption { get; private set; }

        /// <summary>
        /// It prints Product Order number on Shipping Label, applicable for FedEx.
        /// </summary>
        /// <value>It prints Product Order number on Shipping Label, applicable for FedEx.</value>
        /* <example>ponumber</example> */
        [JsonPropertyName("printPONumber")]
        public string PrintPONumber { get { return this.PrintPONumberOption; } set { this.PrintPONumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShipperId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShipperIdOption { get; private set; }

        /// <summary>
        /// The unique identifier of the known shipper.
        /// </summary>
        /// <value>The unique identifier of the known shipper.</value>
        /* <example>1234567890</example> */
        [JsonPropertyName("shipperId")]
        public string ShipperId { get { return this.ShipperIdOption; } set { this.ShipperIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MinimalAddressValidation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MinimalAddressValidationOption { get; private set; }

        /// <summary>
        /// Allows performing minimal address validation during shipment creation. the addressLine1 field is not validated if set to true. Minimal address validation is supported only for these APIs:    - Create Shipment    - Create Bulk Shipments    - Create Multipiece Shipment 
        /// </summary>
        /// <value>Allows performing minimal address validation during shipment creation. the addressLine1 field is not validated if set to true. Minimal address validation is supported only for these APIs:    - Create Shipment    - Create Bulk Shipments    - Create Multipiece Shipment </value>
        /* <example>true</example> */
        [JsonPropertyName("minimalAddressValidation")]
        public bool? MinimalAddressValidation { get { return this.MinimalAddressValidationOption; } set { this.MinimalAddressValidationOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentOptions {\n");
            sb.Append("  AddToManifest: ").Append(AddToManifest).Append("\n");
            sb.Append("  PrintCustomMessage: ").Append(PrintCustomMessage).Append("\n");
            sb.Append("  ReceiptOption: ").Append(ReceiptOption).Append("\n");
            sb.Append("  PrintDepartment: ").Append(PrintDepartment).Append("\n");
            sb.Append("  PrintInvoiceNumber: ").Append(PrintInvoiceNumber).Append("\n");
            sb.Append("  PrintPONumber: ").Append(PrintPONumber).Append("\n");
            sb.Append("  ShipperId: ").Append(ShipperId).Append("\n");
            sb.Append("  MinimalAddressValidation: ").Append(MinimalAddressValidation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentOptions" />
    /// </summary>
    public class ShipmentOptionsJsonConverter : JsonConverter<ShipmentOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShipmentOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> addToManifest = default;
            Option<string> printCustomMessage = default;
            Option<ShipmentOptions.ReceiptOptionEnum?> receiptOption = default;
            Option<string> printDepartment = default;
            Option<string> printInvoiceNumber = default;
            Option<string> printPONumber = default;
            Option<string> shipperId = default;
            Option<bool?> minimalAddressValidation = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "addToManifest":
                            addToManifest = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "printCustomMessage":
                            printCustomMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "receiptOption":
                            string receiptOptionRawValue = utf8JsonReader.GetString();
                            if (receiptOptionRawValue != null)
                                receiptOption = new Option<ShipmentOptions.ReceiptOptionEnum?>(ShipmentOptions.ReceiptOptionEnumFromStringOrDefault(receiptOptionRawValue));
                            break;
                        case "printDepartment":
                            printDepartment = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "printInvoiceNumber":
                            printInvoiceNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "printPONumber":
                            printPONumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shipperId":
                            shipperId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "minimalAddressValidation":
                            minimalAddressValidation = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (addToManifest.IsSet && addToManifest.Value == null)
                throw new ArgumentNullException(nameof(addToManifest), "Property is not nullable for class ShipmentOptions.");

            if (printCustomMessage.IsSet && printCustomMessage.Value == null)
                throw new ArgumentNullException(nameof(printCustomMessage), "Property is not nullable for class ShipmentOptions.");

            if (receiptOption.IsSet && receiptOption.Value == null)
                throw new ArgumentNullException(nameof(receiptOption), "Property is not nullable for class ShipmentOptions.");

            if (printDepartment.IsSet && printDepartment.Value == null)
                throw new ArgumentNullException(nameof(printDepartment), "Property is not nullable for class ShipmentOptions.");

            if (printInvoiceNumber.IsSet && printInvoiceNumber.Value == null)
                throw new ArgumentNullException(nameof(printInvoiceNumber), "Property is not nullable for class ShipmentOptions.");

            if (printPONumber.IsSet && printPONumber.Value == null)
                throw new ArgumentNullException(nameof(printPONumber), "Property is not nullable for class ShipmentOptions.");

            if (shipperId.IsSet && shipperId.Value == null)
                throw new ArgumentNullException(nameof(shipperId), "Property is not nullable for class ShipmentOptions.");

            if (minimalAddressValidation.IsSet && minimalAddressValidation.Value == null)
                throw new ArgumentNullException(nameof(minimalAddressValidation), "Property is not nullable for class ShipmentOptions.");

            return new ShipmentOptions(addToManifest, printCustomMessage, receiptOption, printDepartment, printInvoiceNumber, printPONumber, shipperId, minimalAddressValidation);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentOptions shipmentOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, shipmentOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ShipmentOptions shipmentOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentOptions.PrintCustomMessageOption.IsSet && shipmentOptions.PrintCustomMessage == null)
                throw new ArgumentNullException(nameof(shipmentOptions.PrintCustomMessage), "Property is required for class ShipmentOptions.");

            if (shipmentOptions.PrintDepartmentOption.IsSet && shipmentOptions.PrintDepartment == null)
                throw new ArgumentNullException(nameof(shipmentOptions.PrintDepartment), "Property is required for class ShipmentOptions.");

            if (shipmentOptions.PrintInvoiceNumberOption.IsSet && shipmentOptions.PrintInvoiceNumber == null)
                throw new ArgumentNullException(nameof(shipmentOptions.PrintInvoiceNumber), "Property is required for class ShipmentOptions.");

            if (shipmentOptions.PrintPONumberOption.IsSet && shipmentOptions.PrintPONumber == null)
                throw new ArgumentNullException(nameof(shipmentOptions.PrintPONumber), "Property is required for class ShipmentOptions.");

            if (shipmentOptions.ShipperIdOption.IsSet && shipmentOptions.ShipperId == null)
                throw new ArgumentNullException(nameof(shipmentOptions.ShipperId), "Property is required for class ShipmentOptions.");

            if (shipmentOptions.AddToManifestOption.IsSet)
                writer.WriteBoolean("addToManifest", shipmentOptions.AddToManifestOption.Value.Value);

            if (shipmentOptions.PrintCustomMessageOption.IsSet)
                writer.WriteString("printCustomMessage", shipmentOptions.PrintCustomMessage);

            var receiptOptionRawValue = ShipmentOptions.ReceiptOptionEnumToJsonValue(shipmentOptions.ReceiptOptionOption.Value.Value);
            writer.WriteString("receiptOption", receiptOptionRawValue);
            if (shipmentOptions.PrintDepartmentOption.IsSet)
                writer.WriteString("printDepartment", shipmentOptions.PrintDepartment);

            if (shipmentOptions.PrintInvoiceNumberOption.IsSet)
                writer.WriteString("printInvoiceNumber", shipmentOptions.PrintInvoiceNumber);

            if (shipmentOptions.PrintPONumberOption.IsSet)
                writer.WriteString("printPONumber", shipmentOptions.PrintPONumber);

            if (shipmentOptions.ShipperIdOption.IsSet)
                writer.WriteString("shipperId", shipmentOptions.ShipperId);

            if (shipmentOptions.MinimalAddressValidationOption.IsSet)
                writer.WriteBoolean("minimalAddressValidation", shipmentOptions.MinimalAddressValidationOption.Value.Value);
        }
    }
}
