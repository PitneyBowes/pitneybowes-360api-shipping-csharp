// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// InternationalShipmentResponse
    /// </summary>
    public partial class InternationalShipmentResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InternationalShipmentResponse" /> class.
        /// </summary>
        /// <param name="correlationId">Key assigned by the shipping system to the transaction.</param>
        /// <param name="size">Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).</param>
        /// <param name="type">Defines the type of the Shipment, e.g., Shipping Label.</param>
        /// <param name="format">Defines the type of the shipment which is printed. For example, Shipping label prints in PDF form.</param>
        /// <param name="fromAddress">fromAddress</param>
        /// <param name="altReturnAddress">altReturnAddress</param>
        /// <param name="parcel">parcel</param>
        /// <param name="parcelTrackingNumber">The Tracking number given to the Parcel for tracking purpose.</param>
        /// <param name="rate">rate</param>
        /// <param name="shipmentId">A unique identifier associated with the Shipment.</param>
        /// <param name="shipmentOptions">shipmentOptions</param>
        /// <param name="carrierPayments">Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. </param>
        /// <param name="toAddress">toAddress</param>
        /// <param name="customs">customs</param>
        /// <param name="soldToAddress">soldToAddress</param>
        /// <param name="additionalAddresses">A list of additional addresses associated with the shipment.  - Each object includes an address and its designated type, such as BROKER or other parties involved in customs or shipping processes.  - Additional address could be domestic or International both.  </param>
        [JsonConstructor]
        public InternationalShipmentResponse(Option<string> correlationId = default, Option<SizeEnum?> size = default, Option<TypeEnum?> type = default, Option<FormatEnum?> format = default, Option<InternationalShipmentResponseFromAddress> fromAddress = default, Option<InternationalShipmentResponseAltReturnAddress> altReturnAddress = default, Option<ReturnLabelParcel> parcel = default, Option<string> parcelTrackingNumber = default, Option<InternationalShipmentResponseRate> rate = default, Option<string> shipmentId = default, Option<GetAllShipmentsDataInnerShipmentOptions> shipmentOptions = default, Option<List<CarrierPaymentsInner>> carrierPayments = default, Option<ReprintShipmentToAddress> toAddress = default, Option<InternationalShipmentResponseCustoms> customs = default, Option<SoldToAddress> soldToAddress = default, Option<List<AdditionalAddressesInner>> additionalAddresses = default)
        {
            CorrelationIdOption = correlationId;
            SizeOption = size;
            TypeOption = type;
            FormatOption = format;
            FromAddressOption = fromAddress;
            AltReturnAddressOption = altReturnAddress;
            ParcelOption = parcel;
            ParcelTrackingNumberOption = parcelTrackingNumber;
            RateOption = rate;
            ShipmentIdOption = shipmentId;
            ShipmentOptionsOption = shipmentOptions;
            CarrierPaymentsOption = carrierPayments;
            ToAddressOption = toAddress;
            CustomsOption = customs;
            SoldToAddressOption = soldToAddress;
            AdditionalAddressesOption = additionalAddresses;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).
        /// </summary>
        /// <value>Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).</value>
        public enum SizeEnum
        {
            /// <summary>
            /// Enum DOC8X11 for value: DOC_8X11
            /// </summary>
            DOC8X11 = 1,

            /// <summary>
            /// Enum DOC4X8 for value: DOC_4X8
            /// </summary>
            DOC4X8 = 2
        }

        /// <summary>
        /// Returns a <see cref="SizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SizeEnum SizeEnumFromString(string value)
        {
            if (value.Equals("DOC_8X11"))
                return SizeEnum.DOC8X11;

            if (value.Equals("DOC_4X8"))
                return SizeEnum.DOC4X8;

            throw new NotImplementedException($"Could not convert value to type SizeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SizeEnum? SizeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("DOC_8X11"))
                return SizeEnum.DOC8X11;

            if (value.Equals("DOC_4X8"))
                return SizeEnum.DOC4X8;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SizeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SizeEnumToJsonValue(SizeEnum? value)
        {
            if (value == SizeEnum.DOC8X11)
                return "DOC_8X11";

            if (value == SizeEnum.DOC4X8)
                return "DOC_4X8";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SizeEnum?> SizeOption { get; private set; }

        /// <summary>
        /// Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).
        /// </summary>
        /// <value>Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).</value>
        /* <example>DOC_8X11</example> */
        [JsonPropertyName("size")]
        public SizeEnum? Size { get { return this.SizeOption; } set { this.SizeOption = new Option<SizeEnum?>(value); } }

        /// <summary>
        /// Defines the type of the Shipment, e.g., Shipping Label.
        /// </summary>
        /// <value>Defines the type of the Shipment, e.g., Shipping Label.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SHIPPINGLABEL for value: SHIPPING_LABEL
            /// </summary>
            SHIPPINGLABEL = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("SHIPPING_LABEL"))
                return TypeEnum.SHIPPINGLABEL;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SHIPPING_LABEL"))
                return TypeEnum.SHIPPINGLABEL;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.SHIPPINGLABEL)
                return "SHIPPING_LABEL";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Defines the type of the Shipment, e.g., Shipping Label.
        /// </summary>
        /// <value>Defines the type of the Shipment, e.g., Shipping Label.</value>
        /* <example>SHIPPING_LABEL</example> */
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// Defines the type of the shipment which is printed. For example, Shipping label prints in PDF form.
        /// </summary>
        /// <value>Defines the type of the shipment which is printed. For example, Shipping label prints in PDF form.</value>
        public enum FormatEnum
        {
            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            PDF = 1
        }

        /// <summary>
        /// Returns a <see cref="FormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FormatEnum FormatEnumFromString(string value)
        {
            if (value.Equals("PDF"))
                return FormatEnum.PDF;

            throw new NotImplementedException($"Could not convert value to type FormatEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FormatEnum? FormatEnumFromStringOrDefault(string value)
        {
            if (value.Equals("PDF"))
                return FormatEnum.PDF;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FormatEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FormatEnumToJsonValue(FormatEnum? value)
        {
            if (value == FormatEnum.PDF)
                return "PDF";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Format
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FormatEnum?> FormatOption { get; private set; }

        /// <summary>
        /// Defines the type of the shipment which is printed. For example, Shipping label prints in PDF form.
        /// </summary>
        /// <value>Defines the type of the shipment which is printed. For example, Shipping label prints in PDF form.</value>
        /* <example>PDF</example> */
        [JsonPropertyName("format")]
        public FormatEnum? Format { get { return this.FormatOption; } set { this.FormatOption = new Option<FormatEnum?>(value); } }

        /// <summary>
        /// Used to track the state of CorrelationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CorrelationIdOption { get; private set; }

        /// <summary>
        /// Key assigned by the shipping system to the transaction.
        /// </summary>
        /// <value>Key assigned by the shipping system to the transaction.</value>
        /* <example>00adf56ed852487ba9caec62b7ab2635</example> */
        [JsonPropertyName("correlationId")]
        public string CorrelationId { get { return this.CorrelationIdOption; } set { this.CorrelationIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FromAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InternationalShipmentResponseFromAddress> FromAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [JsonPropertyName("fromAddress")]
        public InternationalShipmentResponseFromAddress FromAddress { get { return this.FromAddressOption; } set { this.FromAddressOption = new Option<InternationalShipmentResponseFromAddress>(value); } }

        /// <summary>
        /// Used to track the state of AltReturnAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InternationalShipmentResponseAltReturnAddress> AltReturnAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets AltReturnAddress
        /// </summary>
        [JsonPropertyName("altReturnAddress")]
        public InternationalShipmentResponseAltReturnAddress AltReturnAddress { get { return this.AltReturnAddressOption; } set { this.AltReturnAddressOption = new Option<InternationalShipmentResponseAltReturnAddress>(value); } }

        /// <summary>
        /// Used to track the state of Parcel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReturnLabelParcel> ParcelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [JsonPropertyName("parcel")]
        public ReturnLabelParcel Parcel { get { return this.ParcelOption; } set { this.ParcelOption = new Option<ReturnLabelParcel>(value); } }

        /// <summary>
        /// Used to track the state of ParcelTrackingNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ParcelTrackingNumberOption { get; private set; }

        /// <summary>
        /// The Tracking number given to the Parcel for tracking purpose.
        /// </summary>
        /// <value>The Tracking number given to the Parcel for tracking purpose.</value>
        /* <example>9471309105156000826739</example> */
        [JsonPropertyName("parcelTrackingNumber")]
        public string ParcelTrackingNumber { get { return this.ParcelTrackingNumberOption; } set { this.ParcelTrackingNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Rate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InternationalShipmentResponseRate> RateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [JsonPropertyName("rate")]
        public InternationalShipmentResponseRate Rate { get { return this.RateOption; } set { this.RateOption = new Option<InternationalShipmentResponseRate>(value); } }

        /// <summary>
        /// Used to track the state of ShipmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShipmentIdOption { get; private set; }

        /// <summary>
        /// A unique identifier associated with the Shipment.
        /// </summary>
        /// <value>A unique identifier associated with the Shipment.</value>
        /* <example>USPS2200579677758143</example> */
        [JsonPropertyName("shipmentId")]
        public string ShipmentId { get { return this.ShipmentIdOption; } set { this.ShipmentIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ShipmentOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetAllShipmentsDataInnerShipmentOptions> ShipmentOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShipmentOptions
        /// </summary>
        [JsonPropertyName("shipmentOptions")]
        public GetAllShipmentsDataInnerShipmentOptions ShipmentOptions { get { return this.ShipmentOptionsOption; } set { this.ShipmentOptionsOption = new Option<GetAllShipmentsDataInnerShipmentOptions>(value); } }

        /// <summary>
        /// Used to track the state of CarrierPayments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CarrierPaymentsInner>> CarrierPaymentsOption { get; private set; }

        /// <summary>
        /// Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. 
        /// </summary>
        /// <value>Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. </value>
        [JsonPropertyName("carrierPayments")]
        public List<CarrierPaymentsInner> CarrierPayments { get { return this.CarrierPaymentsOption; } set { this.CarrierPaymentsOption = new Option<List<CarrierPaymentsInner>>(value); } }

        /// <summary>
        /// Used to track the state of ToAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReprintShipmentToAddress> ToAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [JsonPropertyName("toAddress")]
        public ReprintShipmentToAddress ToAddress { get { return this.ToAddressOption; } set { this.ToAddressOption = new Option<ReprintShipmentToAddress>(value); } }

        /// <summary>
        /// Used to track the state of Customs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InternationalShipmentResponseCustoms> CustomsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Customs
        /// </summary>
        [JsonPropertyName("customs")]
        public InternationalShipmentResponseCustoms Customs { get { return this.CustomsOption; } set { this.CustomsOption = new Option<InternationalShipmentResponseCustoms>(value); } }

        /// <summary>
        /// Used to track the state of SoldToAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SoldToAddress> SoldToAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets SoldToAddress
        /// </summary>
        [JsonPropertyName("soldToAddress")]
        public SoldToAddress SoldToAddress { get { return this.SoldToAddressOption; } set { this.SoldToAddressOption = new Option<SoldToAddress>(value); } }

        /// <summary>
        /// Used to track the state of AdditionalAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<AdditionalAddressesInner>> AdditionalAddressesOption { get; private set; }

        /// <summary>
        /// A list of additional addresses associated with the shipment.  - Each object includes an address and its designated type, such as BROKER or other parties involved in customs or shipping processes.  - Additional address could be domestic or International both.  
        /// </summary>
        /// <value>A list of additional addresses associated with the shipment.  - Each object includes an address and its designated type, such as BROKER or other parties involved in customs or shipping processes.  - Additional address could be domestic or International both.  </value>
        [JsonPropertyName("additionalAddresses")]
        public List<AdditionalAddressesInner> AdditionalAddresses { get { return this.AdditionalAddressesOption; } set { this.AdditionalAddressesOption = new Option<List<AdditionalAddressesInner>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InternationalShipmentResponse {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  AltReturnAddress: ").Append(AltReturnAddress).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  ParcelTrackingNumber: ").Append(ParcelTrackingNumber).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipmentOptions: ").Append(ShipmentOptions).Append("\n");
            sb.Append("  CarrierPayments: ").Append(CarrierPayments).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("  Customs: ").Append(Customs).Append("\n");
            sb.Append("  SoldToAddress: ").Append(SoldToAddress).Append("\n");
            sb.Append("  AdditionalAddresses: ").Append(AdditionalAddresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InternationalShipmentResponse" />
    /// </summary>
    public class InternationalShipmentResponseJsonConverter : JsonConverter<InternationalShipmentResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="InternationalShipmentResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InternationalShipmentResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> correlationId = default;
            Option<InternationalShipmentResponse.SizeEnum?> size = default;
            Option<InternationalShipmentResponse.TypeEnum?> type = default;
            Option<InternationalShipmentResponse.FormatEnum?> format = default;
            Option<InternationalShipmentResponseFromAddress> fromAddress = default;
            Option<InternationalShipmentResponseAltReturnAddress> altReturnAddress = default;
            Option<ReturnLabelParcel> parcel = default;
            Option<string> parcelTrackingNumber = default;
            Option<InternationalShipmentResponseRate> rate = default;
            Option<string> shipmentId = default;
            Option<GetAllShipmentsDataInnerShipmentOptions> shipmentOptions = default;
            Option<List<CarrierPaymentsInner>> carrierPayments = default;
            Option<ReprintShipmentToAddress> toAddress = default;
            Option<InternationalShipmentResponseCustoms> customs = default;
            Option<SoldToAddress> soldToAddress = default;
            Option<List<AdditionalAddressesInner>> additionalAddresses = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "correlationId":
                            correlationId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "size":
                            string sizeRawValue = utf8JsonReader.GetString();
                            if (sizeRawValue != null)
                                size = new Option<InternationalShipmentResponse.SizeEnum?>(InternationalShipmentResponse.SizeEnumFromStringOrDefault(sizeRawValue));
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<InternationalShipmentResponse.TypeEnum?>(InternationalShipmentResponse.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "format":
                            string formatRawValue = utf8JsonReader.GetString();
                            if (formatRawValue != null)
                                format = new Option<InternationalShipmentResponse.FormatEnum?>(InternationalShipmentResponse.FormatEnumFromStringOrDefault(formatRawValue));
                            break;
                        case "fromAddress":
                            fromAddress = new Option<InternationalShipmentResponseFromAddress>(JsonSerializer.Deserialize<InternationalShipmentResponseFromAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "altReturnAddress":
                            altReturnAddress = new Option<InternationalShipmentResponseAltReturnAddress>(JsonSerializer.Deserialize<InternationalShipmentResponseAltReturnAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "parcel":
                            parcel = new Option<ReturnLabelParcel>(JsonSerializer.Deserialize<ReturnLabelParcel>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "parcelTrackingNumber":
                            parcelTrackingNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rate":
                            rate = new Option<InternationalShipmentResponseRate>(JsonSerializer.Deserialize<InternationalShipmentResponseRate>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shipmentId":
                            shipmentId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "shipmentOptions":
                            shipmentOptions = new Option<GetAllShipmentsDataInnerShipmentOptions>(JsonSerializer.Deserialize<GetAllShipmentsDataInnerShipmentOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "carrierPayments":
                            carrierPayments = new Option<List<CarrierPaymentsInner>>(JsonSerializer.Deserialize<List<CarrierPaymentsInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "toAddress":
                            toAddress = new Option<ReprintShipmentToAddress>(JsonSerializer.Deserialize<ReprintShipmentToAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "customs":
                            customs = new Option<InternationalShipmentResponseCustoms>(JsonSerializer.Deserialize<InternationalShipmentResponseCustoms>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "soldToAddress":
                            soldToAddress = new Option<SoldToAddress>(JsonSerializer.Deserialize<SoldToAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "additionalAddresses":
                            additionalAddresses = new Option<List<AdditionalAddressesInner>>(JsonSerializer.Deserialize<List<AdditionalAddressesInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (correlationId.IsSet && correlationId.Value == null)
                throw new ArgumentNullException(nameof(correlationId), "Property is not nullable for class InternationalShipmentResponse.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class InternationalShipmentResponse.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class InternationalShipmentResponse.");

            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format), "Property is not nullable for class InternationalShipmentResponse.");

            if (fromAddress.IsSet && fromAddress.Value == null)
                throw new ArgumentNullException(nameof(fromAddress), "Property is not nullable for class InternationalShipmentResponse.");

            if (altReturnAddress.IsSet && altReturnAddress.Value == null)
                throw new ArgumentNullException(nameof(altReturnAddress), "Property is not nullable for class InternationalShipmentResponse.");

            if (parcel.IsSet && parcel.Value == null)
                throw new ArgumentNullException(nameof(parcel), "Property is not nullable for class InternationalShipmentResponse.");

            if (parcelTrackingNumber.IsSet && parcelTrackingNumber.Value == null)
                throw new ArgumentNullException(nameof(parcelTrackingNumber), "Property is not nullable for class InternationalShipmentResponse.");

            if (rate.IsSet && rate.Value == null)
                throw new ArgumentNullException(nameof(rate), "Property is not nullable for class InternationalShipmentResponse.");

            if (shipmentId.IsSet && shipmentId.Value == null)
                throw new ArgumentNullException(nameof(shipmentId), "Property is not nullable for class InternationalShipmentResponse.");

            if (shipmentOptions.IsSet && shipmentOptions.Value == null)
                throw new ArgumentNullException(nameof(shipmentOptions), "Property is not nullable for class InternationalShipmentResponse.");

            if (carrierPayments.IsSet && carrierPayments.Value == null)
                throw new ArgumentNullException(nameof(carrierPayments), "Property is not nullable for class InternationalShipmentResponse.");

            if (toAddress.IsSet && toAddress.Value == null)
                throw new ArgumentNullException(nameof(toAddress), "Property is not nullable for class InternationalShipmentResponse.");

            if (customs.IsSet && customs.Value == null)
                throw new ArgumentNullException(nameof(customs), "Property is not nullable for class InternationalShipmentResponse.");

            if (soldToAddress.IsSet && soldToAddress.Value == null)
                throw new ArgumentNullException(nameof(soldToAddress), "Property is not nullable for class InternationalShipmentResponse.");

            if (additionalAddresses.IsSet && additionalAddresses.Value == null)
                throw new ArgumentNullException(nameof(additionalAddresses), "Property is not nullable for class InternationalShipmentResponse.");

            return new InternationalShipmentResponse(correlationId, size, type, format, fromAddress, altReturnAddress, parcel, parcelTrackingNumber, rate, shipmentId, shipmentOptions, carrierPayments, toAddress, customs, soldToAddress, additionalAddresses);
        }

        /// <summary>
        /// Serializes a <see cref="InternationalShipmentResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="internationalShipmentResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InternationalShipmentResponse internationalShipmentResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, internationalShipmentResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InternationalShipmentResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="internationalShipmentResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InternationalShipmentResponse internationalShipmentResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (internationalShipmentResponse.CorrelationIdOption.IsSet && internationalShipmentResponse.CorrelationId == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponse.CorrelationId), "Property is required for class InternationalShipmentResponse.");

            if (internationalShipmentResponse.FromAddressOption.IsSet && internationalShipmentResponse.FromAddress == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponse.FromAddress), "Property is required for class InternationalShipmentResponse.");

            if (internationalShipmentResponse.AltReturnAddressOption.IsSet && internationalShipmentResponse.AltReturnAddress == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponse.AltReturnAddress), "Property is required for class InternationalShipmentResponse.");

            if (internationalShipmentResponse.ParcelOption.IsSet && internationalShipmentResponse.Parcel == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponse.Parcel), "Property is required for class InternationalShipmentResponse.");

            if (internationalShipmentResponse.ParcelTrackingNumberOption.IsSet && internationalShipmentResponse.ParcelTrackingNumber == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponse.ParcelTrackingNumber), "Property is required for class InternationalShipmentResponse.");

            if (internationalShipmentResponse.RateOption.IsSet && internationalShipmentResponse.Rate == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponse.Rate), "Property is required for class InternationalShipmentResponse.");

            if (internationalShipmentResponse.ShipmentIdOption.IsSet && internationalShipmentResponse.ShipmentId == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponse.ShipmentId), "Property is required for class InternationalShipmentResponse.");

            if (internationalShipmentResponse.ShipmentOptionsOption.IsSet && internationalShipmentResponse.ShipmentOptions == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponse.ShipmentOptions), "Property is required for class InternationalShipmentResponse.");

            if (internationalShipmentResponse.CarrierPaymentsOption.IsSet && internationalShipmentResponse.CarrierPayments == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponse.CarrierPayments), "Property is required for class InternationalShipmentResponse.");

            if (internationalShipmentResponse.ToAddressOption.IsSet && internationalShipmentResponse.ToAddress == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponse.ToAddress), "Property is required for class InternationalShipmentResponse.");

            if (internationalShipmentResponse.CustomsOption.IsSet && internationalShipmentResponse.Customs == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponse.Customs), "Property is required for class InternationalShipmentResponse.");

            if (internationalShipmentResponse.SoldToAddressOption.IsSet && internationalShipmentResponse.SoldToAddress == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponse.SoldToAddress), "Property is required for class InternationalShipmentResponse.");

            if (internationalShipmentResponse.AdditionalAddressesOption.IsSet && internationalShipmentResponse.AdditionalAddresses == null)
                throw new ArgumentNullException(nameof(internationalShipmentResponse.AdditionalAddresses), "Property is required for class InternationalShipmentResponse.");

            if (internationalShipmentResponse.CorrelationIdOption.IsSet)
                writer.WriteString("correlationId", internationalShipmentResponse.CorrelationId);

            var sizeRawValue = InternationalShipmentResponse.SizeEnumToJsonValue(internationalShipmentResponse.SizeOption.Value.Value);
            writer.WriteString("size", sizeRawValue);
            var typeRawValue = InternationalShipmentResponse.TypeEnumToJsonValue(internationalShipmentResponse.TypeOption.Value.Value);
            writer.WriteString("type", typeRawValue);
            var formatRawValue = InternationalShipmentResponse.FormatEnumToJsonValue(internationalShipmentResponse.FormatOption.Value.Value);
            writer.WriteString("format", formatRawValue);
            if (internationalShipmentResponse.FromAddressOption.IsSet)
            {
                writer.WritePropertyName("fromAddress");
                JsonSerializer.Serialize(writer, internationalShipmentResponse.FromAddress, jsonSerializerOptions);
            }
            if (internationalShipmentResponse.AltReturnAddressOption.IsSet)
            {
                writer.WritePropertyName("altReturnAddress");
                JsonSerializer.Serialize(writer, internationalShipmentResponse.AltReturnAddress, jsonSerializerOptions);
            }
            if (internationalShipmentResponse.ParcelOption.IsSet)
            {
                writer.WritePropertyName("parcel");
                JsonSerializer.Serialize(writer, internationalShipmentResponse.Parcel, jsonSerializerOptions);
            }
            if (internationalShipmentResponse.ParcelTrackingNumberOption.IsSet)
                writer.WriteString("parcelTrackingNumber", internationalShipmentResponse.ParcelTrackingNumber);

            if (internationalShipmentResponse.RateOption.IsSet)
            {
                writer.WritePropertyName("rate");
                JsonSerializer.Serialize(writer, internationalShipmentResponse.Rate, jsonSerializerOptions);
            }
            if (internationalShipmentResponse.ShipmentIdOption.IsSet)
                writer.WriteString("shipmentId", internationalShipmentResponse.ShipmentId);

            if (internationalShipmentResponse.ShipmentOptionsOption.IsSet)
            {
                writer.WritePropertyName("shipmentOptions");
                JsonSerializer.Serialize(writer, internationalShipmentResponse.ShipmentOptions, jsonSerializerOptions);
            }
            if (internationalShipmentResponse.CarrierPaymentsOption.IsSet)
            {
                writer.WritePropertyName("carrierPayments");
                JsonSerializer.Serialize(writer, internationalShipmentResponse.CarrierPayments, jsonSerializerOptions);
            }
            if (internationalShipmentResponse.ToAddressOption.IsSet)
            {
                writer.WritePropertyName("toAddress");
                JsonSerializer.Serialize(writer, internationalShipmentResponse.ToAddress, jsonSerializerOptions);
            }
            if (internationalShipmentResponse.CustomsOption.IsSet)
            {
                writer.WritePropertyName("customs");
                JsonSerializer.Serialize(writer, internationalShipmentResponse.Customs, jsonSerializerOptions);
            }
            if (internationalShipmentResponse.SoldToAddressOption.IsSet)
            {
                writer.WritePropertyName("soldToAddress");
                JsonSerializer.Serialize(writer, internationalShipmentResponse.SoldToAddress, jsonSerializerOptions);
            }
            if (internationalShipmentResponse.AdditionalAddressesOption.IsSet)
            {
                writer.WritePropertyName("additionalAddresses");
                JsonSerializer.Serialize(writer, internationalShipmentResponse.AdditionalAddresses, jsonSerializerOptions);
            }
        }
    }
}
