// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// This is an optional field. if a package shipped from Location_A to Location_B needs to return to Location_C. The alternate address will be printed on the label. Use this object to specify a return address different from the fromAddress. Supported by FedEx, UPS, and Purolator.
    /// </summary>
    public partial class ShipmentDomesticByCarrierAltReturnAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDomesticByCarrierAltReturnAddress" /> class.
        /// </summary>
        /// <param name="addressLine1">The first line of the alternate return address, such as a street address or PO Box.</param>
        /// <param name="addressLine2">The addressLine2 contains Street address or Landmark (if any).</param>
        /// <param name="addressLine3">The addressLine3 contains P.O. Box (if any) near the address.</param>
        /// <param name="company">The name of the company for the alternate return address, in case if the recipient&#39;s address is not residential. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</param>
        /// <param name="email">The email address of the recipient. It can be person&#39;s email address or company email address (for non-residential).</param>
        /// <param name="residential">The specified address can be Residential or Official. In case if the address is Residential, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.</param>
        /// <param name="cityTown">The city or town for the alternate return address.</param>
        /// <param name="countryCode">The two-letter ISO country code for the alternate return address.</param>
        /// <param name="name">The name of the recipient or organization for the alternate return address.</param>
        /// <param name="phone">The phone number associated with the alternate return address.</param>
        /// <param name="postalCode">The postal or ZIP code for the alternate return address.</param>
        /// <param name="stateProvince">The 2-letter state or province code for the alternate return address.</param>
        [JsonConstructor]
        public ShipmentDomesticByCarrierAltReturnAddress(Option<string> addressLine1 = default, Option<string> addressLine2 = default, Option<string> addressLine3 = default, Option<string> company = default, Option<string> email = default, Option<bool?> residential = default, Option<string> cityTown = default, Option<string> countryCode = default, Option<string> name = default, Option<string> phone = default, Option<string> postalCode = default, Option<string> stateProvince = default)
        {
            AddressLine1Option = addressLine1;
            AddressLine2Option = addressLine2;
            AddressLine3Option = addressLine3;
            CompanyOption = company;
            EmailOption = email;
            ResidentialOption = residential;
            CityTownOption = cityTown;
            CountryCodeOption = countryCode;
            NameOption = name;
            PhoneOption = phone;
            PostalCodeOption = postalCode;
            StateProvinceOption = stateProvince;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AddressLine1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressLine1Option { get; private set; }

        /// <summary>
        /// The first line of the alternate return address, such as a street address or PO Box.
        /// </summary>
        /// <value>The first line of the alternate return address, such as a street address or PO Box.</value>
        /* <example>500 Terry Francois Blvd</example> */
        [JsonPropertyName("addressLine1")]
        public string AddressLine1 { get { return this.AddressLine1Option; } set { this.AddressLine1Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressLine2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressLine2Option { get; private set; }

        /// <summary>
        /// The addressLine2 contains Street address or Landmark (if any).
        /// </summary>
        /// <value>The addressLine2 contains Street address or Landmark (if any).</value>
        /* <example>near abc street</example> */
        [JsonPropertyName("addressLine2")]
        public string AddressLine2 { get { return this.AddressLine2Option; } set { this.AddressLine2Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressLine3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressLine3Option { get; private set; }

        /// <summary>
        /// The addressLine3 contains P.O. Box (if any) near the address.
        /// </summary>
        /// <value>The addressLine3 contains P.O. Box (if any) near the address.</value>
        /* <example>near xyz street</example> */
        [JsonPropertyName("addressLine3")]
        public string AddressLine3 { get { return this.AddressLine3Option; } set { this.AddressLine3Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CompanyOption { get; private set; }

        /// <summary>
        /// The name of the company for the alternate return address, in case if the recipient&#39;s address is not residential. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>The name of the company for the alternate return address, in case if the recipient&#39;s address is not residential. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /* <example>PB</example> */
        [JsonPropertyName("company")]
        public string Company { get { return this.CompanyOption; } set { this.CompanyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailOption { get; private set; }

        /// <summary>
        /// The email address of the recipient. It can be person&#39;s email address or company email address (for non-residential).
        /// </summary>
        /// <value>The email address of the recipient. It can be person&#39;s email address or company email address (for non-residential).</value>
        /* <example>user@email.com</example> */
        [JsonPropertyName("email")]
        public string Email { get { return this.EmailOption; } set { this.EmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Residential
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ResidentialOption { get; private set; }

        /// <summary>
        /// The specified address can be Residential or Official. In case if the address is Residential, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.
        /// </summary>
        /// <value>The specified address can be Residential or Official. In case if the address is Residential, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.</value>
        /* <example>true</example> */
        [JsonPropertyName("residential")]
        public bool? Residential { get { return this.ResidentialOption; } set { this.ResidentialOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of CityTown
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CityTownOption { get; private set; }

        /// <summary>
        /// The city or town for the alternate return address.
        /// </summary>
        /// <value>The city or town for the alternate return address.</value>
        /* <example>San Francisco</example> */
        [JsonPropertyName("cityTown")]
        public string CityTown { get { return this.CityTownOption; } set { this.CityTownOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryCodeOption { get; private set; }

        /// <summary>
        /// The two-letter ISO country code for the alternate return address.
        /// </summary>
        /// <value>The two-letter ISO country code for the alternate return address.</value>
        /* <example>US</example> */
        [JsonPropertyName("countryCode")]
        public string CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// The name of the recipient or organization for the alternate return address.
        /// </summary>
        /// <value>The name of the recipient or organization for the alternate return address.</value>
        /* <example>User Name</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PhoneOption { get; private set; }

        /// <summary>
        /// The phone number associated with the alternate return address.
        /// </summary>
        /// <value>The phone number associated with the alternate return address.</value>
        /* <example>415-555-7890</example> */
        [JsonPropertyName("phone")]
        public string Phone { get { return this.PhoneOption; } set { this.PhoneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PostalCodeOption { get; private set; }

        /// <summary>
        /// The postal or ZIP code for the alternate return address.
        /// </summary>
        /// <value>The postal or ZIP code for the alternate return address.</value>
        /* <example>94158</example> */
        [JsonPropertyName("postalCode")]
        public string PostalCode { get { return this.PostalCodeOption; } set { this.PostalCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StateProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StateProvinceOption { get; private set; }

        /// <summary>
        /// The 2-letter state or province code for the alternate return address.
        /// </summary>
        /// <value>The 2-letter state or province code for the alternate return address.</value>
        /* <example>CA</example> */
        [JsonPropertyName("stateProvince")]
        public string StateProvince { get { return this.StateProvinceOption; } set { this.StateProvinceOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentDomesticByCarrierAltReturnAddress {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Residential: ").Append(Residential).Append("\n");
            sb.Append("  CityTown: ").Append(CityTown).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentDomesticByCarrierAltReturnAddress" />
    /// </summary>
    public class ShipmentDomesticByCarrierAltReturnAddressJsonConverter : JsonConverter<ShipmentDomesticByCarrierAltReturnAddress>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShipmentDomesticByCarrierAltReturnAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentDomesticByCarrierAltReturnAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> addressLine1 = default;
            Option<string> addressLine2 = default;
            Option<string> addressLine3 = default;
            Option<string> company = default;
            Option<string> email = default;
            Option<bool?> residential = default;
            Option<string> cityTown = default;
            Option<string> countryCode = default;
            Option<string> name = default;
            Option<string> phone = default;
            Option<string> postalCode = default;
            Option<string> stateProvince = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "addressLine1":
                            addressLine1 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "addressLine2":
                            addressLine2 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "addressLine3":
                            addressLine3 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "company":
                            company = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "residential":
                            residential = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "cityTown":
                            cityTown = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "countryCode":
                            countryCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phone":
                            phone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "postalCode":
                            postalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "stateProvince":
                            stateProvince = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (addressLine1.IsSet && addressLine1.Value == null)
                throw new ArgumentNullException(nameof(addressLine1), "Property is not nullable for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (addressLine2.IsSet && addressLine2.Value == null)
                throw new ArgumentNullException(nameof(addressLine2), "Property is not nullable for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (addressLine3.IsSet && addressLine3.Value == null)
                throw new ArgumentNullException(nameof(addressLine3), "Property is not nullable for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (company.IsSet && company.Value == null)
                throw new ArgumentNullException(nameof(company), "Property is not nullable for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (residential.IsSet && residential.Value == null)
                throw new ArgumentNullException(nameof(residential), "Property is not nullable for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (cityTown.IsSet && cityTown.Value == null)
                throw new ArgumentNullException(nameof(cityTown), "Property is not nullable for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (phone.IsSet && phone.Value == null)
                throw new ArgumentNullException(nameof(phone), "Property is not nullable for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (stateProvince.IsSet && stateProvince.Value == null)
                throw new ArgumentNullException(nameof(stateProvince), "Property is not nullable for class ShipmentDomesticByCarrierAltReturnAddress.");

            return new ShipmentDomesticByCarrierAltReturnAddress(addressLine1, addressLine2, addressLine3, company, email, residential, cityTown, countryCode, name, phone, postalCode, stateProvince);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentDomesticByCarrierAltReturnAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticByCarrierAltReturnAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentDomesticByCarrierAltReturnAddress shipmentDomesticByCarrierAltReturnAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, shipmentDomesticByCarrierAltReturnAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentDomesticByCarrierAltReturnAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticByCarrierAltReturnAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ShipmentDomesticByCarrierAltReturnAddress shipmentDomesticByCarrierAltReturnAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentDomesticByCarrierAltReturnAddress.AddressLine1Option.IsSet && shipmentDomesticByCarrierAltReturnAddress.AddressLine1 == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierAltReturnAddress.AddressLine1), "Property is required for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (shipmentDomesticByCarrierAltReturnAddress.AddressLine2Option.IsSet && shipmentDomesticByCarrierAltReturnAddress.AddressLine2 == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierAltReturnAddress.AddressLine2), "Property is required for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (shipmentDomesticByCarrierAltReturnAddress.AddressLine3Option.IsSet && shipmentDomesticByCarrierAltReturnAddress.AddressLine3 == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierAltReturnAddress.AddressLine3), "Property is required for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (shipmentDomesticByCarrierAltReturnAddress.CompanyOption.IsSet && shipmentDomesticByCarrierAltReturnAddress.Company == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierAltReturnAddress.Company), "Property is required for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (shipmentDomesticByCarrierAltReturnAddress.EmailOption.IsSet && shipmentDomesticByCarrierAltReturnAddress.Email == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierAltReturnAddress.Email), "Property is required for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (shipmentDomesticByCarrierAltReturnAddress.CityTownOption.IsSet && shipmentDomesticByCarrierAltReturnAddress.CityTown == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierAltReturnAddress.CityTown), "Property is required for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (shipmentDomesticByCarrierAltReturnAddress.CountryCodeOption.IsSet && shipmentDomesticByCarrierAltReturnAddress.CountryCode == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierAltReturnAddress.CountryCode), "Property is required for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (shipmentDomesticByCarrierAltReturnAddress.NameOption.IsSet && shipmentDomesticByCarrierAltReturnAddress.Name == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierAltReturnAddress.Name), "Property is required for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (shipmentDomesticByCarrierAltReturnAddress.PhoneOption.IsSet && shipmentDomesticByCarrierAltReturnAddress.Phone == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierAltReturnAddress.Phone), "Property is required for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (shipmentDomesticByCarrierAltReturnAddress.PostalCodeOption.IsSet && shipmentDomesticByCarrierAltReturnAddress.PostalCode == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierAltReturnAddress.PostalCode), "Property is required for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (shipmentDomesticByCarrierAltReturnAddress.StateProvinceOption.IsSet && shipmentDomesticByCarrierAltReturnAddress.StateProvince == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierAltReturnAddress.StateProvince), "Property is required for class ShipmentDomesticByCarrierAltReturnAddress.");

            if (shipmentDomesticByCarrierAltReturnAddress.AddressLine1Option.IsSet)
                writer.WriteString("addressLine1", shipmentDomesticByCarrierAltReturnAddress.AddressLine1);

            if (shipmentDomesticByCarrierAltReturnAddress.AddressLine2Option.IsSet)
                writer.WriteString("addressLine2", shipmentDomesticByCarrierAltReturnAddress.AddressLine2);

            if (shipmentDomesticByCarrierAltReturnAddress.AddressLine3Option.IsSet)
                writer.WriteString("addressLine3", shipmentDomesticByCarrierAltReturnAddress.AddressLine3);

            if (shipmentDomesticByCarrierAltReturnAddress.CompanyOption.IsSet)
                writer.WriteString("company", shipmentDomesticByCarrierAltReturnAddress.Company);

            if (shipmentDomesticByCarrierAltReturnAddress.EmailOption.IsSet)
                writer.WriteString("email", shipmentDomesticByCarrierAltReturnAddress.Email);

            if (shipmentDomesticByCarrierAltReturnAddress.ResidentialOption.IsSet)
                writer.WriteBoolean("residential", shipmentDomesticByCarrierAltReturnAddress.ResidentialOption.Value.Value);

            if (shipmentDomesticByCarrierAltReturnAddress.CityTownOption.IsSet)
                writer.WriteString("cityTown", shipmentDomesticByCarrierAltReturnAddress.CityTown);

            if (shipmentDomesticByCarrierAltReturnAddress.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", shipmentDomesticByCarrierAltReturnAddress.CountryCode);

            if (shipmentDomesticByCarrierAltReturnAddress.NameOption.IsSet)
                writer.WriteString("name", shipmentDomesticByCarrierAltReturnAddress.Name);

            if (shipmentDomesticByCarrierAltReturnAddress.PhoneOption.IsSet)
                writer.WriteString("phone", shipmentDomesticByCarrierAltReturnAddress.Phone);

            if (shipmentDomesticByCarrierAltReturnAddress.PostalCodeOption.IsSet)
                writer.WriteString("postalCode", shipmentDomesticByCarrierAltReturnAddress.PostalCode);

            if (shipmentDomesticByCarrierAltReturnAddress.StateProvinceOption.IsSet)
                writer.WriteString("stateProvince", shipmentDomesticByCarrierAltReturnAddress.StateProvince);
        }
    }
}
