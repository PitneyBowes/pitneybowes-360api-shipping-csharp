/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.pitneybowes.api360.Client.OpenAPIDateConverter;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// SingleRate
    /// </summary>
    [DataContract(Name = "singleRate")]
    public partial class SingleRate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleRate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SingleRate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleRate" /> class.
        /// </summary>
        /// <param name="dateOfShipment">This defines the date of the Shipment in the format YYYY:MM:DD, required for future shipment rating.</param>
        /// <param name="fromAddress">fromAddress (required).</param>
        /// <param name="parcel">parcel (required).</param>
        /// <param name="carrierAccounts"> This provides a single carrier account Id in case of single rate request. It can be referred from response of &#x60;Get Carrier Accounts&#x60; API. (required).</param>
        /// <param name="parcelType">Parcel Type its value can be referred from response of &#x60;Get Parcel Types&#x60; API. (required).</param>
        /// <param name="parcelId">&gt;-Parcel Id is optional and required to be given in case of branded parcels which have brandedDimension and/or brandedWeight. If parcel has brandedDimension, in that case user need not to pass dimensionUnit and dimension details(length, width and height) in the parcel object. And if brandedWeight is also available for the parcel then in that case weightUnit and weight need not to be passed  in parcel object  .</param>
        /// <param name="serviceId">Service to be used for rating, it can be referred from response of &#x60;Get Services&#x60; API (required).</param>
        /// <param name="specialServices">Special services to be used for rating, it can be referred from response of &#x60;Get Special Services&#x60; API.</param>
        /// <param name="toAddress">toAddress (required).</param>
        public SingleRate(string dateOfShipment = default(string), SingleRateFromAddress fromAddress = default(SingleRateFromAddress), SingleRateParcel parcel = default(SingleRateParcel), List<string> carrierAccounts = default(List<string>), string parcelType = default(string), string parcelId = default(string), string serviceId = default(string), List<SpecialService> specialServices = default(List<SpecialService>), SingleRateToAddress toAddress = default(SingleRateToAddress))
        {
            // to ensure "fromAddress" is required (not null)
            if (fromAddress == null)
            {
                throw new ArgumentNullException("fromAddress is a required property for SingleRate and cannot be null");
            }
            this.FromAddress = fromAddress;
            // to ensure "parcel" is required (not null)
            if (parcel == null)
            {
                throw new ArgumentNullException("parcel is a required property for SingleRate and cannot be null");
            }
            this.Parcel = parcel;
            // to ensure "carrierAccounts" is required (not null)
            if (carrierAccounts == null)
            {
                throw new ArgumentNullException("carrierAccounts is a required property for SingleRate and cannot be null");
            }
            this.CarrierAccounts = carrierAccounts;
            // to ensure "parcelType" is required (not null)
            if (parcelType == null)
            {
                throw new ArgumentNullException("parcelType is a required property for SingleRate and cannot be null");
            }
            this.ParcelType = parcelType;
            // to ensure "serviceId" is required (not null)
            if (serviceId == null)
            {
                throw new ArgumentNullException("serviceId is a required property for SingleRate and cannot be null");
            }
            this.ServiceId = serviceId;
            // to ensure "toAddress" is required (not null)
            if (toAddress == null)
            {
                throw new ArgumentNullException("toAddress is a required property for SingleRate and cannot be null");
            }
            this.ToAddress = toAddress;
            this.DateOfShipment = dateOfShipment;
            this.ParcelId = parcelId;
            this.SpecialServices = specialServices;
        }

        /// <summary>
        /// This defines the date of the Shipment in the format YYYY:MM:DD, required for future shipment rating
        /// </summary>
        /// <value>This defines the date of the Shipment in the format YYYY:MM:DD, required for future shipment rating</value>
        /// <example>2023-07-12</example>
        [DataMember(Name = "dateOfShipment", EmitDefaultValue = false)]
        public string DateOfShipment { get; set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [DataMember(Name = "fromAddress", IsRequired = true, EmitDefaultValue = true)]
        public SingleRateFromAddress FromAddress { get; set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [DataMember(Name = "parcel", IsRequired = true, EmitDefaultValue = true)]
        public SingleRateParcel Parcel { get; set; }

        /// <summary>
        ///  This provides a single carrier account Id in case of single rate request. It can be referred from response of &#x60;Get Carrier Accounts&#x60; API.
        /// </summary>
        /// <value> This provides a single carrier account Id in case of single rate request. It can be referred from response of &#x60;Get Carrier Accounts&#x60; API.</value>
        /// <example>[&quot;12prrs1&quot;]</example>
        [DataMember(Name = "carrierAccounts", IsRequired = true, EmitDefaultValue = true)]
        public List<string> CarrierAccounts { get; set; }

        /// <summary>
        /// Parcel Type its value can be referred from response of &#x60;Get Parcel Types&#x60; API.
        /// </summary>
        /// <value>Parcel Type its value can be referred from response of &#x60;Get Parcel Types&#x60; API.</value>
        /// <example>FRE</example>
        [DataMember(Name = "parcelType", IsRequired = true, EmitDefaultValue = true)]
        public string ParcelType { get; set; }

        /// <summary>
        /// &gt;-Parcel Id is optional and required to be given in case of branded parcels which have brandedDimension and/or brandedWeight. If parcel has brandedDimension, in that case user need not to pass dimensionUnit and dimension details(length, width and height) in the parcel object. And if brandedWeight is also available for the parcel then in that case weightUnit and weight need not to be passed  in parcel object  
        /// </summary>
        /// <value>&gt;-Parcel Id is optional and required to be given in case of branded parcels which have brandedDimension and/or brandedWeight. If parcel has brandedDimension, in that case user need not to pass dimensionUnit and dimension details(length, width and height) in the parcel object. And if brandedWeight is also available for the parcel then in that case weightUnit and weight need not to be passed  in parcel object  </value>
        /// <example>FRE</example>
        [DataMember(Name = "parcelId", EmitDefaultValue = false)]
        public string ParcelId { get; set; }

        /// <summary>
        /// Service to be used for rating, it can be referred from response of &#x60;Get Services&#x60; API
        /// </summary>
        /// <value>Service to be used for rating, it can be referred from response of &#x60;Get Services&#x60; API</value>
        /// <example>PM</example>
        [DataMember(Name = "serviceId", IsRequired = true, EmitDefaultValue = true)]
        public string ServiceId { get; set; }

        /// <summary>
        /// Special services to be used for rating, it can be referred from response of &#x60;Get Special Services&#x60; API
        /// </summary>
        /// <value>Special services to be used for rating, it can be referred from response of &#x60;Get Special Services&#x60; API</value>
        [DataMember(Name = "specialServices", EmitDefaultValue = false)]
        public List<SpecialService> SpecialServices { get; set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [DataMember(Name = "toAddress", IsRequired = true, EmitDefaultValue = true)]
        public SingleRateToAddress ToAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SingleRate {\n");
            sb.Append("  DateOfShipment: ").Append(DateOfShipment).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  CarrierAccounts: ").Append(CarrierAccounts).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  ParcelId: ").Append(ParcelId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  SpecialServices: ").Append(SpecialServices).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
