// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// Sending Options includes used carrier related details, sender details, and parcel details.
    /// </summary>
    public partial class SendingOptionsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendingOptionsResponse" /> class.
        /// </summary>
        /// <param name="carrier">Name of the carrier. E.g., FedEx.</param>
        /// <param name="service">Name of the carrier-based service. E.g., 2DA.</param>
        /// <param name="carrierAccounts">carrierAccounts</param>
        /// <param name="labelSize">Size of the label, e.g., DOC_4X6.</param>
        /// <param name="labelType">Type of the Label, e.g., Shipping_Label.</param>
        /// <param name="labelFormat">Format of the Label, e.g., PDF.</param>
        /// <param name="fromAddress">fromAddress</param>
        /// <param name="parcel">parcel</param>
        [JsonConstructor]
        public SendingOptionsResponse(Option<string> carrier = default, Option<string> service = default, Option<SendingOptionsResponseCarrierAccounts> carrierAccounts = default, Option<LabelSizeEnum?> labelSize = default, Option<string> labelType = default, Option<string> labelFormat = default, Option<FromAddressV2Response> fromAddress = default, Option<ParcelV2Response> parcel = default)
        {
            CarrierOption = carrier;
            ServiceOption = service;
            CarrierAccountsOption = carrierAccounts;
            LabelSizeOption = labelSize;
            LabelTypeOption = labelType;
            LabelFormatOption = labelFormat;
            FromAddressOption = fromAddress;
            ParcelOption = parcel;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Size of the label, e.g., DOC_4X6.
        /// </summary>
        /// <value>Size of the label, e.g., DOC_4X6.</value>
        public enum LabelSizeEnum
        {
            /// <summary>
            /// Enum DOC4X6 for value: DOC_4X6
            /// </summary>
            DOC4X6 = 1
        }

        /// <summary>
        /// Returns a <see cref="LabelSizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static LabelSizeEnum LabelSizeEnumFromString(string value)
        {
            if (value.Equals("DOC_4X6"))
                return LabelSizeEnum.DOC4X6;

            throw new NotImplementedException($"Could not convert value to type LabelSizeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="LabelSizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LabelSizeEnum? LabelSizeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("DOC_4X6"))
                return LabelSizeEnum.DOC4X6;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LabelSizeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string LabelSizeEnumToJsonValue(LabelSizeEnum? value)
        {
            if (value == LabelSizeEnum.DOC4X6)
                return "DOC_4X6";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of LabelSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LabelSizeEnum?> LabelSizeOption { get; private set; }

        /// <summary>
        /// Size of the label, e.g., DOC_4X6.
        /// </summary>
        /// <value>Size of the label, e.g., DOC_4X6.</value>
        /* <example>DOC_4X6</example> */
        [JsonPropertyName("labelSize")]
        public LabelSizeEnum? LabelSize { get { return this.LabelSizeOption; } set { this.LabelSizeOption = new Option<LabelSizeEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Carrier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CarrierOption { get; private set; }

        /// <summary>
        /// Name of the carrier. E.g., FedEx.
        /// </summary>
        /// <value>Name of the carrier. E.g., FedEx.</value>
        /* <example>FedEx</example> */
        [JsonPropertyName("carrier")]
        public string Carrier { get { return this.CarrierOption; } set { this.CarrierOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Service
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ServiceOption { get; private set; }

        /// <summary>
        /// Name of the carrier-based service. E.g., 2DA.
        /// </summary>
        /// <value>Name of the carrier-based service. E.g., 2DA.</value>
        /* <example>2DA</example> */
        [JsonPropertyName("service")]
        public string Service { get { return this.ServiceOption; } set { this.ServiceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CarrierAccounts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SendingOptionsResponseCarrierAccounts> CarrierAccountsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CarrierAccounts
        /// </summary>
        [JsonPropertyName("carrierAccounts")]
        public SendingOptionsResponseCarrierAccounts CarrierAccounts { get { return this.CarrierAccountsOption; } set { this.CarrierAccountsOption = new Option<SendingOptionsResponseCarrierAccounts>(value); } }

        /// <summary>
        /// Used to track the state of LabelType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LabelTypeOption { get; private set; }

        /// <summary>
        /// Type of the Label, e.g., Shipping_Label.
        /// </summary>
        /// <value>Type of the Label, e.g., Shipping_Label.</value>
        /* <example>SHIPPING_LABEL</example> */
        [JsonPropertyName("labelType")]
        public string LabelType { get { return this.LabelTypeOption; } set { this.LabelTypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LabelFormat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LabelFormatOption { get; private set; }

        /// <summary>
        /// Format of the Label, e.g., PDF.
        /// </summary>
        /// <value>Format of the Label, e.g., PDF.</value>
        /* <example>PDF</example> */
        [JsonPropertyName("labelFormat")]
        public string LabelFormat { get { return this.LabelFormatOption; } set { this.LabelFormatOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FromAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FromAddressV2Response> FromAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [JsonPropertyName("fromAddress")]
        public FromAddressV2Response FromAddress { get { return this.FromAddressOption; } set { this.FromAddressOption = new Option<FromAddressV2Response>(value); } }

        /// <summary>
        /// Used to track the state of Parcel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ParcelV2Response> ParcelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [JsonPropertyName("parcel")]
        public ParcelV2Response Parcel { get { return this.ParcelOption; } set { this.ParcelOption = new Option<ParcelV2Response>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendingOptionsResponse {\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  CarrierAccounts: ").Append(CarrierAccounts).Append("\n");
            sb.Append("  LabelSize: ").Append(LabelSize).Append("\n");
            sb.Append("  LabelType: ").Append(LabelType).Append("\n");
            sb.Append("  LabelFormat: ").Append(LabelFormat).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendingOptionsResponse" />
    /// </summary>
    public class SendingOptionsResponseJsonConverter : JsonConverter<SendingOptionsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="SendingOptionsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendingOptionsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> carrier = default;
            Option<string> service = default;
            Option<SendingOptionsResponseCarrierAccounts> carrierAccounts = default;
            Option<SendingOptionsResponse.LabelSizeEnum?> labelSize = default;
            Option<string> labelType = default;
            Option<string> labelFormat = default;
            Option<FromAddressV2Response> fromAddress = default;
            Option<ParcelV2Response> parcel = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "carrier":
                            carrier = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "service":
                            service = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "carrierAccounts":
                            carrierAccounts = new Option<SendingOptionsResponseCarrierAccounts>(JsonSerializer.Deserialize<SendingOptionsResponseCarrierAccounts>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "labelSize":
                            string labelSizeRawValue = utf8JsonReader.GetString();
                            if (labelSizeRawValue != null)
                                labelSize = new Option<SendingOptionsResponse.LabelSizeEnum?>(SendingOptionsResponse.LabelSizeEnumFromStringOrDefault(labelSizeRawValue));
                            break;
                        case "labelType":
                            labelType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "labelFormat":
                            labelFormat = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fromAddress":
                            fromAddress = new Option<FromAddressV2Response>(JsonSerializer.Deserialize<FromAddressV2Response>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "parcel":
                            parcel = new Option<ParcelV2Response>(JsonSerializer.Deserialize<ParcelV2Response>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (carrier.IsSet && carrier.Value == null)
                throw new ArgumentNullException(nameof(carrier), "Property is not nullable for class SendingOptionsResponse.");

            if (service.IsSet && service.Value == null)
                throw new ArgumentNullException(nameof(service), "Property is not nullable for class SendingOptionsResponse.");

            if (carrierAccounts.IsSet && carrierAccounts.Value == null)
                throw new ArgumentNullException(nameof(carrierAccounts), "Property is not nullable for class SendingOptionsResponse.");

            if (labelSize.IsSet && labelSize.Value == null)
                throw new ArgumentNullException(nameof(labelSize), "Property is not nullable for class SendingOptionsResponse.");

            if (labelType.IsSet && labelType.Value == null)
                throw new ArgumentNullException(nameof(labelType), "Property is not nullable for class SendingOptionsResponse.");

            if (labelFormat.IsSet && labelFormat.Value == null)
                throw new ArgumentNullException(nameof(labelFormat), "Property is not nullable for class SendingOptionsResponse.");

            if (fromAddress.IsSet && fromAddress.Value == null)
                throw new ArgumentNullException(nameof(fromAddress), "Property is not nullable for class SendingOptionsResponse.");

            if (parcel.IsSet && parcel.Value == null)
                throw new ArgumentNullException(nameof(parcel), "Property is not nullable for class SendingOptionsResponse.");

            return new SendingOptionsResponse(carrier, service, carrierAccounts, labelSize, labelType, labelFormat, fromAddress, parcel);
        }

        /// <summary>
        /// Serializes a <see cref="SendingOptionsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendingOptionsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendingOptionsResponse sendingOptionsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendingOptionsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendingOptionsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendingOptionsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendingOptionsResponse sendingOptionsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendingOptionsResponse.CarrierOption.IsSet && sendingOptionsResponse.Carrier == null)
                throw new ArgumentNullException(nameof(sendingOptionsResponse.Carrier), "Property is required for class SendingOptionsResponse.");

            if (sendingOptionsResponse.ServiceOption.IsSet && sendingOptionsResponse.Service == null)
                throw new ArgumentNullException(nameof(sendingOptionsResponse.Service), "Property is required for class SendingOptionsResponse.");

            if (sendingOptionsResponse.CarrierAccountsOption.IsSet && sendingOptionsResponse.CarrierAccounts == null)
                throw new ArgumentNullException(nameof(sendingOptionsResponse.CarrierAccounts), "Property is required for class SendingOptionsResponse.");

            if (sendingOptionsResponse.LabelTypeOption.IsSet && sendingOptionsResponse.LabelType == null)
                throw new ArgumentNullException(nameof(sendingOptionsResponse.LabelType), "Property is required for class SendingOptionsResponse.");

            if (sendingOptionsResponse.LabelFormatOption.IsSet && sendingOptionsResponse.LabelFormat == null)
                throw new ArgumentNullException(nameof(sendingOptionsResponse.LabelFormat), "Property is required for class SendingOptionsResponse.");

            if (sendingOptionsResponse.FromAddressOption.IsSet && sendingOptionsResponse.FromAddress == null)
                throw new ArgumentNullException(nameof(sendingOptionsResponse.FromAddress), "Property is required for class SendingOptionsResponse.");

            if (sendingOptionsResponse.ParcelOption.IsSet && sendingOptionsResponse.Parcel == null)
                throw new ArgumentNullException(nameof(sendingOptionsResponse.Parcel), "Property is required for class SendingOptionsResponse.");

            if (sendingOptionsResponse.CarrierOption.IsSet)
                writer.WriteString("carrier", sendingOptionsResponse.Carrier);

            if (sendingOptionsResponse.ServiceOption.IsSet)
                writer.WriteString("service", sendingOptionsResponse.Service);

            if (sendingOptionsResponse.CarrierAccountsOption.IsSet)
            {
                writer.WritePropertyName("carrierAccounts");
                JsonSerializer.Serialize(writer, sendingOptionsResponse.CarrierAccounts, jsonSerializerOptions);
            }
            var labelSizeRawValue = SendingOptionsResponse.LabelSizeEnumToJsonValue(sendingOptionsResponse.LabelSizeOption.Value.Value);
            writer.WriteString("labelSize", labelSizeRawValue);
            if (sendingOptionsResponse.LabelTypeOption.IsSet)
                writer.WriteString("labelType", sendingOptionsResponse.LabelType);

            if (sendingOptionsResponse.LabelFormatOption.IsSet)
                writer.WriteString("labelFormat", sendingOptionsResponse.LabelFormat);

            if (sendingOptionsResponse.FromAddressOption.IsSet)
            {
                writer.WritePropertyName("fromAddress");
                JsonSerializer.Serialize(writer, sendingOptionsResponse.FromAddress, jsonSerializerOptions);
            }
            if (sendingOptionsResponse.ParcelOption.IsSet)
            {
                writer.WritePropertyName("parcel");
                JsonSerializer.Serialize(writer, sendingOptionsResponse.Parcel, jsonSerializerOptions);
            }
        }
    }
}
