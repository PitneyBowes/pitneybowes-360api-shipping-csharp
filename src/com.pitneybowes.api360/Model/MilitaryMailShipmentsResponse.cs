// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// MilitaryMailShipmentsResponse
    /// </summary>
    public partial class MilitaryMailShipmentsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MilitaryMailShipmentsResponse" /> class.
        /// </summary>
        /// <param name="correlationId">Key assigned by the shipping system to the transaction.</param>
        /// <param name="fromAddress">fromAddress</param>
        /// <param name="parcel">parcel</param>
        /// <param name="parcelTrackingNumber">The Tracking number given to the Parcel for tracking purpose.</param>
        /// <param name="labelLayout">labelLayout</param>
        /// <param name="rate">rate</param>
        /// <param name="shipmentId">A unique identifier for the shipment, generated by the system in response to shipment purchase.</param>
        /// <param name="shipmentOptions">shipmentOptions</param>
        /// <param name="carrierPayments">Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. </param>
        /// <param name="toAddress">toAddress</param>
        /// <param name="soldToAddress">soldToAddress</param>
        /// <param name="customs">customs</param>
        [JsonConstructor]
        public MilitaryMailShipmentsResponse(Option<string?> correlationId = default, Option<MilitaryMailShipmentsResponseFromAddress?> fromAddress = default, Option<ReturnLabelParcel?> parcel = default, Option<string?> parcelTrackingNumber = default, Option<List<DomesticShipmentResponseLabelLayoutInner>?> labelLayout = default, Option<MilitaryMailShipmentsResponseRate?> rate = default, Option<string?> shipmentId = default, Option<ShipmentOptions?> shipmentOptions = default, Option<List<CarrierPaymentsInner>?> carrierPayments = default, Option<MilitaryMailShipmentsResponseToAddress?> toAddress = default, Option<SoldToAddress?> soldToAddress = default, Option<MilitaryMailShipmentsCustoms?> customs = default)
        {
            CorrelationIdOption = correlationId;
            FromAddressOption = fromAddress;
            ParcelOption = parcel;
            ParcelTrackingNumberOption = parcelTrackingNumber;
            LabelLayoutOption = labelLayout;
            RateOption = rate;
            ShipmentIdOption = shipmentId;
            ShipmentOptionsOption = shipmentOptions;
            CarrierPaymentsOption = carrierPayments;
            ToAddressOption = toAddress;
            SoldToAddressOption = soldToAddress;
            CustomsOption = customs;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CorrelationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CorrelationIdOption { get; private set; }

        /// <summary>
        /// Key assigned by the shipping system to the transaction.
        /// </summary>
        /// <value>Key assigned by the shipping system to the transaction.</value>
        /* <example>00adf56ed852487ba9caec62b7ab2635</example> */
        [JsonPropertyName("correlationId")]
        public string? CorrelationId { get { return this.CorrelationIdOption; } set { this.CorrelationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FromAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MilitaryMailShipmentsResponseFromAddress?> FromAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [JsonPropertyName("fromAddress")]
        public MilitaryMailShipmentsResponseFromAddress? FromAddress { get { return this.FromAddressOption; } set { this.FromAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Parcel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReturnLabelParcel?> ParcelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [JsonPropertyName("parcel")]
        public ReturnLabelParcel? Parcel { get { return this.ParcelOption; } set { this.ParcelOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParcelTrackingNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParcelTrackingNumberOption { get; private set; }

        /// <summary>
        /// The Tracking number given to the Parcel for tracking purpose.
        /// </summary>
        /// <value>The Tracking number given to the Parcel for tracking purpose.</value>
        /* <example>9471309105156000826739</example> */
        [JsonPropertyName("parcelTrackingNumber")]
        public string? ParcelTrackingNumber { get { return this.ParcelTrackingNumberOption; } set { this.ParcelTrackingNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of LabelLayout
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DomesticShipmentResponseLabelLayoutInner>?> LabelLayoutOption { get; private set; }

        /// <summary>
        /// Gets or Sets LabelLayout
        /// </summary>
        [JsonPropertyName("labelLayout")]
        public List<DomesticShipmentResponseLabelLayoutInner>? LabelLayout { get { return this.LabelLayoutOption; } set { this.LabelLayoutOption = new(value); } }

        /// <summary>
        /// Used to track the state of Rate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MilitaryMailShipmentsResponseRate?> RateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [JsonPropertyName("rate")]
        public MilitaryMailShipmentsResponseRate? Rate { get { return this.RateOption; } set { this.RateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShipmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShipmentIdOption { get; private set; }

        /// <summary>
        /// A unique identifier for the shipment, generated by the system in response to shipment purchase.
        /// </summary>
        /// <value>A unique identifier for the shipment, generated by the system in response to shipment purchase.</value>
        /* <example>USPS2200579677758143</example> */
        [JsonPropertyName("shipmentId")]
        public string? ShipmentId { get { return this.ShipmentIdOption; } set { this.ShipmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShipmentOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipmentOptions?> ShipmentOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShipmentOptions
        /// </summary>
        [JsonPropertyName("shipmentOptions")]
        public ShipmentOptions? ShipmentOptions { get { return this.ShipmentOptionsOption; } set { this.ShipmentOptionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CarrierPayments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CarrierPaymentsInner>?> CarrierPaymentsOption { get; private set; }

        /// <summary>
        /// Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. 
        /// </summary>
        /// <value>Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. </value>
        [JsonPropertyName("carrierPayments")]
        public List<CarrierPaymentsInner>? CarrierPayments { get { return this.CarrierPaymentsOption; } set { this.CarrierPaymentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ToAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MilitaryMailShipmentsResponseToAddress?> ToAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [JsonPropertyName("toAddress")]
        public MilitaryMailShipmentsResponseToAddress? ToAddress { get { return this.ToAddressOption; } set { this.ToAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of SoldToAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SoldToAddress?> SoldToAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets SoldToAddress
        /// </summary>
        [JsonPropertyName("soldToAddress")]
        public SoldToAddress? SoldToAddress { get { return this.SoldToAddressOption; } set { this.SoldToAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Customs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MilitaryMailShipmentsCustoms?> CustomsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Customs
        /// </summary>
        [JsonPropertyName("customs")]
        public MilitaryMailShipmentsCustoms? Customs { get { return this.CustomsOption; } set { this.CustomsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MilitaryMailShipmentsResponse {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  ParcelTrackingNumber: ").Append(ParcelTrackingNumber).Append("\n");
            sb.Append("  LabelLayout: ").Append(LabelLayout).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipmentOptions: ").Append(ShipmentOptions).Append("\n");
            sb.Append("  CarrierPayments: ").Append(CarrierPayments).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("  SoldToAddress: ").Append(SoldToAddress).Append("\n");
            sb.Append("  Customs: ").Append(Customs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MilitaryMailShipmentsResponse" />
    /// </summary>
    public class MilitaryMailShipmentsResponseJsonConverter : JsonConverter<MilitaryMailShipmentsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="MilitaryMailShipmentsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MilitaryMailShipmentsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> correlationId = default;
            Option<MilitaryMailShipmentsResponseFromAddress?> fromAddress = default;
            Option<ReturnLabelParcel?> parcel = default;
            Option<string?> parcelTrackingNumber = default;
            Option<List<DomesticShipmentResponseLabelLayoutInner>?> labelLayout = default;
            Option<MilitaryMailShipmentsResponseRate?> rate = default;
            Option<string?> shipmentId = default;
            Option<ShipmentOptions?> shipmentOptions = default;
            Option<List<CarrierPaymentsInner>?> carrierPayments = default;
            Option<MilitaryMailShipmentsResponseToAddress?> toAddress = default;
            Option<SoldToAddress?> soldToAddress = default;
            Option<MilitaryMailShipmentsCustoms?> customs = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "correlationId":
                            correlationId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fromAddress":
                            fromAddress = new Option<MilitaryMailShipmentsResponseFromAddress?>(JsonSerializer.Deserialize<MilitaryMailShipmentsResponseFromAddress>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "parcel":
                            parcel = new Option<ReturnLabelParcel?>(JsonSerializer.Deserialize<ReturnLabelParcel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "parcelTrackingNumber":
                            parcelTrackingNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "labelLayout":
                            labelLayout = new Option<List<DomesticShipmentResponseLabelLayoutInner>?>(JsonSerializer.Deserialize<List<DomesticShipmentResponseLabelLayoutInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "rate":
                            rate = new Option<MilitaryMailShipmentsResponseRate?>(JsonSerializer.Deserialize<MilitaryMailShipmentsResponseRate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "shipmentId":
                            shipmentId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "shipmentOptions":
                            shipmentOptions = new Option<ShipmentOptions?>(JsonSerializer.Deserialize<ShipmentOptions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "carrierPayments":
                            carrierPayments = new Option<List<CarrierPaymentsInner>?>(JsonSerializer.Deserialize<List<CarrierPaymentsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "toAddress":
                            toAddress = new Option<MilitaryMailShipmentsResponseToAddress?>(JsonSerializer.Deserialize<MilitaryMailShipmentsResponseToAddress>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "soldToAddress":
                            soldToAddress = new Option<SoldToAddress?>(JsonSerializer.Deserialize<SoldToAddress>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "customs":
                            customs = new Option<MilitaryMailShipmentsCustoms?>(JsonSerializer.Deserialize<MilitaryMailShipmentsCustoms>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (correlationId.IsSet && correlationId.Value == null)
                throw new ArgumentNullException(nameof(correlationId), "Property is not nullable for class MilitaryMailShipmentsResponse.");

            if (fromAddress.IsSet && fromAddress.Value == null)
                throw new ArgumentNullException(nameof(fromAddress), "Property is not nullable for class MilitaryMailShipmentsResponse.");

            if (parcel.IsSet && parcel.Value == null)
                throw new ArgumentNullException(nameof(parcel), "Property is not nullable for class MilitaryMailShipmentsResponse.");

            if (parcelTrackingNumber.IsSet && parcelTrackingNumber.Value == null)
                throw new ArgumentNullException(nameof(parcelTrackingNumber), "Property is not nullable for class MilitaryMailShipmentsResponse.");

            if (labelLayout.IsSet && labelLayout.Value == null)
                throw new ArgumentNullException(nameof(labelLayout), "Property is not nullable for class MilitaryMailShipmentsResponse.");

            if (rate.IsSet && rate.Value == null)
                throw new ArgumentNullException(nameof(rate), "Property is not nullable for class MilitaryMailShipmentsResponse.");

            if (shipmentId.IsSet && shipmentId.Value == null)
                throw new ArgumentNullException(nameof(shipmentId), "Property is not nullable for class MilitaryMailShipmentsResponse.");

            if (shipmentOptions.IsSet && shipmentOptions.Value == null)
                throw new ArgumentNullException(nameof(shipmentOptions), "Property is not nullable for class MilitaryMailShipmentsResponse.");

            if (carrierPayments.IsSet && carrierPayments.Value == null)
                throw new ArgumentNullException(nameof(carrierPayments), "Property is not nullable for class MilitaryMailShipmentsResponse.");

            if (toAddress.IsSet && toAddress.Value == null)
                throw new ArgumentNullException(nameof(toAddress), "Property is not nullable for class MilitaryMailShipmentsResponse.");

            if (soldToAddress.IsSet && soldToAddress.Value == null)
                throw new ArgumentNullException(nameof(soldToAddress), "Property is not nullable for class MilitaryMailShipmentsResponse.");

            if (customs.IsSet && customs.Value == null)
                throw new ArgumentNullException(nameof(customs), "Property is not nullable for class MilitaryMailShipmentsResponse.");

            return new MilitaryMailShipmentsResponse(correlationId, fromAddress, parcel, parcelTrackingNumber, labelLayout, rate, shipmentId, shipmentOptions, carrierPayments, toAddress, soldToAddress, customs);
        }

        /// <summary>
        /// Serializes a <see cref="MilitaryMailShipmentsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="militaryMailShipmentsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MilitaryMailShipmentsResponse militaryMailShipmentsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, militaryMailShipmentsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MilitaryMailShipmentsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="militaryMailShipmentsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MilitaryMailShipmentsResponse militaryMailShipmentsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (militaryMailShipmentsResponse.CorrelationIdOption.IsSet && militaryMailShipmentsResponse.CorrelationId == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentsResponse.CorrelationId), "Property is required for class MilitaryMailShipmentsResponse.");

            if (militaryMailShipmentsResponse.FromAddressOption.IsSet && militaryMailShipmentsResponse.FromAddress == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentsResponse.FromAddress), "Property is required for class MilitaryMailShipmentsResponse.");

            if (militaryMailShipmentsResponse.ParcelOption.IsSet && militaryMailShipmentsResponse.Parcel == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentsResponse.Parcel), "Property is required for class MilitaryMailShipmentsResponse.");

            if (militaryMailShipmentsResponse.ParcelTrackingNumberOption.IsSet && militaryMailShipmentsResponse.ParcelTrackingNumber == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentsResponse.ParcelTrackingNumber), "Property is required for class MilitaryMailShipmentsResponse.");

            if (militaryMailShipmentsResponse.LabelLayoutOption.IsSet && militaryMailShipmentsResponse.LabelLayout == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentsResponse.LabelLayout), "Property is required for class MilitaryMailShipmentsResponse.");

            if (militaryMailShipmentsResponse.RateOption.IsSet && militaryMailShipmentsResponse.Rate == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentsResponse.Rate), "Property is required for class MilitaryMailShipmentsResponse.");

            if (militaryMailShipmentsResponse.ShipmentIdOption.IsSet && militaryMailShipmentsResponse.ShipmentId == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentsResponse.ShipmentId), "Property is required for class MilitaryMailShipmentsResponse.");

            if (militaryMailShipmentsResponse.ShipmentOptionsOption.IsSet && militaryMailShipmentsResponse.ShipmentOptions == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentsResponse.ShipmentOptions), "Property is required for class MilitaryMailShipmentsResponse.");

            if (militaryMailShipmentsResponse.CarrierPaymentsOption.IsSet && militaryMailShipmentsResponse.CarrierPayments == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentsResponse.CarrierPayments), "Property is required for class MilitaryMailShipmentsResponse.");

            if (militaryMailShipmentsResponse.ToAddressOption.IsSet && militaryMailShipmentsResponse.ToAddress == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentsResponse.ToAddress), "Property is required for class MilitaryMailShipmentsResponse.");

            if (militaryMailShipmentsResponse.SoldToAddressOption.IsSet && militaryMailShipmentsResponse.SoldToAddress == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentsResponse.SoldToAddress), "Property is required for class MilitaryMailShipmentsResponse.");

            if (militaryMailShipmentsResponse.CustomsOption.IsSet && militaryMailShipmentsResponse.Customs == null)
                throw new ArgumentNullException(nameof(militaryMailShipmentsResponse.Customs), "Property is required for class MilitaryMailShipmentsResponse.");

            if (militaryMailShipmentsResponse.CorrelationIdOption.IsSet)
                writer.WriteString("correlationId", militaryMailShipmentsResponse.CorrelationId);

            if (militaryMailShipmentsResponse.FromAddressOption.IsSet)
            {
                writer.WritePropertyName("fromAddress");
                JsonSerializer.Serialize(writer, militaryMailShipmentsResponse.FromAddress, jsonSerializerOptions);
            }
            if (militaryMailShipmentsResponse.ParcelOption.IsSet)
            {
                writer.WritePropertyName("parcel");
                JsonSerializer.Serialize(writer, militaryMailShipmentsResponse.Parcel, jsonSerializerOptions);
            }
            if (militaryMailShipmentsResponse.ParcelTrackingNumberOption.IsSet)
                writer.WriteString("parcelTrackingNumber", militaryMailShipmentsResponse.ParcelTrackingNumber);

            if (militaryMailShipmentsResponse.LabelLayoutOption.IsSet)
            {
                writer.WritePropertyName("labelLayout");
                JsonSerializer.Serialize(writer, militaryMailShipmentsResponse.LabelLayout, jsonSerializerOptions);
            }
            if (militaryMailShipmentsResponse.RateOption.IsSet)
            {
                writer.WritePropertyName("rate");
                JsonSerializer.Serialize(writer, militaryMailShipmentsResponse.Rate, jsonSerializerOptions);
            }
            if (militaryMailShipmentsResponse.ShipmentIdOption.IsSet)
                writer.WriteString("shipmentId", militaryMailShipmentsResponse.ShipmentId);

            if (militaryMailShipmentsResponse.ShipmentOptionsOption.IsSet)
            {
                writer.WritePropertyName("shipmentOptions");
                JsonSerializer.Serialize(writer, militaryMailShipmentsResponse.ShipmentOptions, jsonSerializerOptions);
            }
            if (militaryMailShipmentsResponse.CarrierPaymentsOption.IsSet)
            {
                writer.WritePropertyName("carrierPayments");
                JsonSerializer.Serialize(writer, militaryMailShipmentsResponse.CarrierPayments, jsonSerializerOptions);
            }
            if (militaryMailShipmentsResponse.ToAddressOption.IsSet)
            {
                writer.WritePropertyName("toAddress");
                JsonSerializer.Serialize(writer, militaryMailShipmentsResponse.ToAddress, jsonSerializerOptions);
            }
            if (militaryMailShipmentsResponse.SoldToAddressOption.IsSet)
            {
                writer.WritePropertyName("soldToAddress");
                JsonSerializer.Serialize(writer, militaryMailShipmentsResponse.SoldToAddress, jsonSerializerOptions);
            }
            if (militaryMailShipmentsResponse.CustomsOption.IsSet)
            {
                writer.WritePropertyName("customs");
                JsonSerializer.Serialize(writer, militaryMailShipmentsResponse.Customs, jsonSerializerOptions);
            }
        }
    }
}
