// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// ErrCoversheetRequest
    /// </summary>
    public partial class ErrCoversheetRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrCoversheetRequest" /> class.
        /// </summary>
        /// <param name="type">The type of the coversheet.</param>
        /// <param name="carrierAccountId">A unique identifier assigned to the specific carrier account. Its value can be referred from the response of &#x60;Get Carrier Accounts&#x60; API.</param>
        /// <param name="parcelType">Type of the parcel, such as Letter or Envelope.</param>
        /// <param name="serviceId">The unique identifier given to the carrier specific service, such as First Class Mail (FCM). It can be referred from response of &#x60;Get Services&#x60; API.</param>
        /// <param name="specialServices">List of special services applied.</param>
        /// <param name="fromAddress">fromAddress</param>
        /// <param name="parcel">parcel</param>
        /// <param name="toAddress">toAddress</param>
        /// <param name="format">The file format of the coversheet. Default format is &#x60;PDF&#x60;.</param>
        /// <param name="size">The size of the coversheet. Default size is &#x60;10&#x60;.</param>
        /// <param name="shipmentOptions">shipmentOptions</param>
        /// <param name="metadata">Optional metadata for the shipment.</param>
        /// <param name="shippingReferences">shippingReferences</param>
        [JsonConstructor]
        public ErrCoversheetRequest(TypeEnum type, string carrierAccountId, ParcelTypeEnum parcelType, string serviceId, List<ErrCoversheetRequestSpecialServicesInner> specialServices, ErrCoversheetRequestFromAddress fromAddress, ErrCoversheetRequestParcel parcel, ErrCoversheetRequestToAddress toAddress, Option<FormatEnum?> format = default, Option<SizeEnum?> size = default, Option<ErrCoversheetRequestShipmentOptions> shipmentOptions = default, Option<List<MultipieceShipmentRequestMetadataInner>> metadata = default, Option<ErrCoversheetRequestShippingReferences> shippingReferences = default)
        {
            Type = type;
            CarrierAccountId = carrierAccountId;
            ParcelType = parcelType;
            ServiceId = serviceId;
            SpecialServices = specialServices;
            FromAddress = fromAddress;
            Parcel = parcel;
            ToAddress = toAddress;
            FormatOption = format;
            SizeOption = size;
            ShipmentOptionsOption = shipmentOptions;
            MetadataOption = metadata;
            ShippingReferencesOption = shippingReferences;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of the coversheet.
        /// </summary>
        /// <value>The type of the coversheet.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum COVERSHEET for value: COVERSHEET
            /// </summary>
            COVERSHEET = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("COVERSHEET"))
                return TypeEnum.COVERSHEET;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("COVERSHEET"))
                return TypeEnum.COVERSHEET;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.COVERSHEET)
                return "COVERSHEET";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The type of the coversheet.
        /// </summary>
        /// <value>The type of the coversheet.</value>
        /* <example>COVERSHEET</example> */
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Type of the parcel, such as Letter or Envelope.
        /// </summary>
        /// <value>Type of the parcel, such as Letter or Envelope.</value>
        public enum ParcelTypeEnum
        {
            /// <summary>
            /// Enum LGENV for value: LGENV
            /// </summary>
            LGENV = 1,

            /// <summary>
            /// Enum PKG for value: PKG
            /// </summary>
            PKG = 2
        }

        /// <summary>
        /// Returns a <see cref="ParcelTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ParcelTypeEnum ParcelTypeEnumFromString(string value)
        {
            if (value.Equals("LGENV"))
                return ParcelTypeEnum.LGENV;

            if (value.Equals("PKG"))
                return ParcelTypeEnum.PKG;

            throw new NotImplementedException($"Could not convert value to type ParcelTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ParcelTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ParcelTypeEnum? ParcelTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("LGENV"))
                return ParcelTypeEnum.LGENV;

            if (value.Equals("PKG"))
                return ParcelTypeEnum.PKG;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ParcelTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ParcelTypeEnumToJsonValue(ParcelTypeEnum value)
        {
            if (value == ParcelTypeEnum.LGENV)
                return "LGENV";

            if (value == ParcelTypeEnum.PKG)
                return "PKG";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of the parcel, such as Letter or Envelope.
        /// </summary>
        /// <value>Type of the parcel, such as Letter or Envelope.</value>
        /* <example>LGENV</example> */
        [JsonPropertyName("parcelType")]
        public ParcelTypeEnum ParcelType { get; set; }

        /// <summary>
        /// The file format of the coversheet. Default format is &#x60;PDF&#x60;.
        /// </summary>
        /// <value>The file format of the coversheet. Default format is &#x60;PDF&#x60;.</value>
        public enum FormatEnum
        {
            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            PDF = 1
        }

        /// <summary>
        /// Returns a <see cref="FormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FormatEnum FormatEnumFromString(string value)
        {
            if (value.Equals("PDF"))
                return FormatEnum.PDF;

            throw new NotImplementedException($"Could not convert value to type FormatEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FormatEnum? FormatEnumFromStringOrDefault(string value)
        {
            if (value.Equals("PDF"))
                return FormatEnum.PDF;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FormatEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FormatEnumToJsonValue(FormatEnum? value)
        {
            if (value == FormatEnum.PDF)
                return "PDF";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Format
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FormatEnum?> FormatOption { get; private set; }

        /// <summary>
        /// The file format of the coversheet. Default format is &#x60;PDF&#x60;.
        /// </summary>
        /// <value>The file format of the coversheet. Default format is &#x60;PDF&#x60;.</value>
        /* <example>PDF</example> */
        [JsonPropertyName("format")]
        public FormatEnum? Format { get { return this.FormatOption; } set { this.FormatOption = new Option<FormatEnum?>(value); } }

        /// <summary>
        /// The size of the coversheet. Default size is &#x60;10&#x60;.
        /// </summary>
        /// <value>The size of the coversheet. Default size is &#x60;10&#x60;.</value>
        public enum SizeEnum
        {
            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            _10 = 1,

            /// <summary>
            /// Enum _6X95 for value: 6X9.5
            /// </summary>
            _6X95 = 2,

            /// <summary>
            /// Enum _6X9 for value: 6X9
            /// </summary>
            _6X9 = 3,

            /// <summary>
            /// Enum _95x12 for value: 9.5x12
            /// </summary>
            _95x12 = 4
        }

        /// <summary>
        /// Returns a <see cref="SizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SizeEnum SizeEnumFromString(string value)
        {
            if (value.Equals("10"))
                return SizeEnum._10;

            if (value.Equals("6X9.5"))
                return SizeEnum._6X95;

            if (value.Equals("6X9"))
                return SizeEnum._6X9;

            if (value.Equals("9.5x12"))
                return SizeEnum._95x12;

            throw new NotImplementedException($"Could not convert value to type SizeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SizeEnum? SizeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("10"))
                return SizeEnum._10;

            if (value.Equals("6X9.5"))
                return SizeEnum._6X95;

            if (value.Equals("6X9"))
                return SizeEnum._6X9;

            if (value.Equals("9.5x12"))
                return SizeEnum._95x12;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SizeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SizeEnumToJsonValue(SizeEnum? value)
        {
            if (value == SizeEnum._10)
                return "10";

            if (value == SizeEnum._6X95)
                return "6X9.5";

            if (value == SizeEnum._6X9)
                return "6X9";

            if (value == SizeEnum._95x12)
                return "9.5x12";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SizeEnum?> SizeOption { get; private set; }

        /// <summary>
        /// The size of the coversheet. Default size is &#x60;10&#x60;.
        /// </summary>
        /// <value>The size of the coversheet. Default size is &#x60;10&#x60;.</value>
        /* <example>6X9.5</example> */
        [JsonPropertyName("size")]
        public SizeEnum? Size { get { return this.SizeOption; } set { this.SizeOption = new Option<SizeEnum?>(value); } }

        /// <summary>
        /// A unique identifier assigned to the specific carrier account. Its value can be referred from the response of &#x60;Get Carrier Accounts&#x60; API.
        /// </summary>
        /// <value>A unique identifier assigned to the specific carrier account. Its value can be referred from the response of &#x60;Get Carrier Accounts&#x60; API.</value>
        /* <example>JPZlE8DldKwx</example> */
        [JsonPropertyName("carrierAccountId")]
        public string CarrierAccountId { get; set; }

        /// <summary>
        /// The unique identifier given to the carrier specific service, such as First Class Mail (FCM). It can be referred from response of &#x60;Get Services&#x60; API.
        /// </summary>
        /// <value>The unique identifier given to the carrier specific service, such as First Class Mail (FCM). It can be referred from response of &#x60;Get Services&#x60; API.</value>
        /* <example>FCM</example> */
        [JsonPropertyName("serviceId")]
        public string ServiceId { get; set; }

        /// <summary>
        /// List of special services applied.
        /// </summary>
        /// <value>List of special services applied.</value>
        /* <example>[{&quot;specialServiceId&quot;:&quot;Cert&quot;},{&quot;specialServiceId&quot;:&quot;ERR&quot;}]</example> */
        [JsonPropertyName("specialServices")]
        public List<ErrCoversheetRequestSpecialServicesInner> SpecialServices { get; set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [JsonPropertyName("fromAddress")]
        public ErrCoversheetRequestFromAddress FromAddress { get; set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [JsonPropertyName("parcel")]
        public ErrCoversheetRequestParcel Parcel { get; set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [JsonPropertyName("toAddress")]
        public ErrCoversheetRequestToAddress ToAddress { get; set; }

        /// <summary>
        /// Used to track the state of ShipmentOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ErrCoversheetRequestShipmentOptions> ShipmentOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShipmentOptions
        /// </summary>
        [JsonPropertyName("shipmentOptions")]
        public ErrCoversheetRequestShipmentOptions ShipmentOptions { get { return this.ShipmentOptionsOption; } set { this.ShipmentOptionsOption = new Option<ErrCoversheetRequestShipmentOptions>(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<MultipieceShipmentRequestMetadataInner>> MetadataOption { get; private set; }

        /// <summary>
        /// Optional metadata for the shipment.
        /// </summary>
        /// <value>Optional metadata for the shipment.</value>
        [JsonPropertyName("metadata")]
        public List<MultipieceShipmentRequestMetadataInner> Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new Option<List<MultipieceShipmentRequestMetadataInner>>(value); } }

        /// <summary>
        /// Used to track the state of ShippingReferences
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ErrCoversheetRequestShippingReferences> ShippingReferencesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShippingReferences
        /// </summary>
        [JsonPropertyName("shippingReferences")]
        public ErrCoversheetRequestShippingReferences ShippingReferences { get { return this.ShippingReferencesOption; } set { this.ShippingReferencesOption = new Option<ErrCoversheetRequestShippingReferences>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrCoversheetRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CarrierAccountId: ").Append(CarrierAccountId).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  SpecialServices: ").Append(SpecialServices).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  ShipmentOptions: ").Append(ShipmentOptions).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ShippingReferences: ").Append(ShippingReferences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ErrCoversheetRequest" />
    /// </summary>
    public class ErrCoversheetRequestJsonConverter : JsonConverter<ErrCoversheetRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ErrCoversheetRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ErrCoversheetRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ErrCoversheetRequest.TypeEnum?> type = default;
            Option<string> carrierAccountId = default;
            Option<ErrCoversheetRequest.ParcelTypeEnum?> parcelType = default;
            Option<string> serviceId = default;
            Option<List<ErrCoversheetRequestSpecialServicesInner>> specialServices = default;
            Option<ErrCoversheetRequestFromAddress> fromAddress = default;
            Option<ErrCoversheetRequestParcel> parcel = default;
            Option<ErrCoversheetRequestToAddress> toAddress = default;
            Option<ErrCoversheetRequest.FormatEnum?> format = default;
            Option<ErrCoversheetRequest.SizeEnum?> size = default;
            Option<ErrCoversheetRequestShipmentOptions> shipmentOptions = default;
            Option<List<MultipieceShipmentRequestMetadataInner>> metadata = default;
            Option<ErrCoversheetRequestShippingReferences> shippingReferences = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ErrCoversheetRequest.TypeEnum?>(ErrCoversheetRequest.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "carrierAccountId":
                            carrierAccountId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "parcelType":
                            string parcelTypeRawValue = utf8JsonReader.GetString();
                            if (parcelTypeRawValue != null)
                                parcelType = new Option<ErrCoversheetRequest.ParcelTypeEnum?>(ErrCoversheetRequest.ParcelTypeEnumFromStringOrDefault(parcelTypeRawValue));
                            break;
                        case "serviceId":
                            serviceId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "specialServices":
                            specialServices = new Option<List<ErrCoversheetRequestSpecialServicesInner>>(JsonSerializer.Deserialize<List<ErrCoversheetRequestSpecialServicesInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fromAddress":
                            fromAddress = new Option<ErrCoversheetRequestFromAddress>(JsonSerializer.Deserialize<ErrCoversheetRequestFromAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "parcel":
                            parcel = new Option<ErrCoversheetRequestParcel>(JsonSerializer.Deserialize<ErrCoversheetRequestParcel>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "toAddress":
                            toAddress = new Option<ErrCoversheetRequestToAddress>(JsonSerializer.Deserialize<ErrCoversheetRequestToAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "format":
                            string formatRawValue = utf8JsonReader.GetString();
                            if (formatRawValue != null)
                                format = new Option<ErrCoversheetRequest.FormatEnum?>(ErrCoversheetRequest.FormatEnumFromStringOrDefault(formatRawValue));
                            break;
                        case "size":
                            string sizeRawValue = utf8JsonReader.GetString();
                            if (sizeRawValue != null)
                                size = new Option<ErrCoversheetRequest.SizeEnum?>(ErrCoversheetRequest.SizeEnumFromStringOrDefault(sizeRawValue));
                            break;
                        case "shipmentOptions":
                            shipmentOptions = new Option<ErrCoversheetRequestShipmentOptions>(JsonSerializer.Deserialize<ErrCoversheetRequestShipmentOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metadata":
                            metadata = new Option<List<MultipieceShipmentRequestMetadataInner>>(JsonSerializer.Deserialize<List<MultipieceShipmentRequestMetadataInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shippingReferences":
                            shippingReferences = new Option<ErrCoversheetRequestShippingReferences>(JsonSerializer.Deserialize<ErrCoversheetRequestShippingReferences>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ErrCoversheetRequest.", nameof(type));

            if (!carrierAccountId.IsSet)
                throw new ArgumentException("Property is required for class ErrCoversheetRequest.", nameof(carrierAccountId));

            if (!parcelType.IsSet)
                throw new ArgumentException("Property is required for class ErrCoversheetRequest.", nameof(parcelType));

            if (!serviceId.IsSet)
                throw new ArgumentException("Property is required for class ErrCoversheetRequest.", nameof(serviceId));

            if (!specialServices.IsSet)
                throw new ArgumentException("Property is required for class ErrCoversheetRequest.", nameof(specialServices));

            if (!fromAddress.IsSet)
                throw new ArgumentException("Property is required for class ErrCoversheetRequest.", nameof(fromAddress));

            if (!parcel.IsSet)
                throw new ArgumentException("Property is required for class ErrCoversheetRequest.", nameof(parcel));

            if (!toAddress.IsSet)
                throw new ArgumentException("Property is required for class ErrCoversheetRequest.", nameof(toAddress));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ErrCoversheetRequest.");

            if (carrierAccountId.IsSet && carrierAccountId.Value == null)
                throw new ArgumentNullException(nameof(carrierAccountId), "Property is not nullable for class ErrCoversheetRequest.");

            if (parcelType.IsSet && parcelType.Value == null)
                throw new ArgumentNullException(nameof(parcelType), "Property is not nullable for class ErrCoversheetRequest.");

            if (serviceId.IsSet && serviceId.Value == null)
                throw new ArgumentNullException(nameof(serviceId), "Property is not nullable for class ErrCoversheetRequest.");

            if (specialServices.IsSet && specialServices.Value == null)
                throw new ArgumentNullException(nameof(specialServices), "Property is not nullable for class ErrCoversheetRequest.");

            if (fromAddress.IsSet && fromAddress.Value == null)
                throw new ArgumentNullException(nameof(fromAddress), "Property is not nullable for class ErrCoversheetRequest.");

            if (parcel.IsSet && parcel.Value == null)
                throw new ArgumentNullException(nameof(parcel), "Property is not nullable for class ErrCoversheetRequest.");

            if (toAddress.IsSet && toAddress.Value == null)
                throw new ArgumentNullException(nameof(toAddress), "Property is not nullable for class ErrCoversheetRequest.");

            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format), "Property is not nullable for class ErrCoversheetRequest.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class ErrCoversheetRequest.");

            if (shipmentOptions.IsSet && shipmentOptions.Value == null)
                throw new ArgumentNullException(nameof(shipmentOptions), "Property is not nullable for class ErrCoversheetRequest.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class ErrCoversheetRequest.");

            if (shippingReferences.IsSet && shippingReferences.Value == null)
                throw new ArgumentNullException(nameof(shippingReferences), "Property is not nullable for class ErrCoversheetRequest.");

            return new ErrCoversheetRequest(type.Value.Value, carrierAccountId.Value, parcelType.Value.Value, serviceId.Value, specialServices.Value, fromAddress.Value, parcel.Value, toAddress.Value, format, size, shipmentOptions, metadata, shippingReferences);
        }

        /// <summary>
        /// Serializes a <see cref="ErrCoversheetRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errCoversheetRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ErrCoversheetRequest errCoversheetRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, errCoversheetRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ErrCoversheetRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errCoversheetRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ErrCoversheetRequest errCoversheetRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (errCoversheetRequest.CarrierAccountId == null)
                throw new ArgumentNullException(nameof(errCoversheetRequest.CarrierAccountId), "Property is required for class ErrCoversheetRequest.");

            if (errCoversheetRequest.ServiceId == null)
                throw new ArgumentNullException(nameof(errCoversheetRequest.ServiceId), "Property is required for class ErrCoversheetRequest.");

            if (errCoversheetRequest.SpecialServices == null)
                throw new ArgumentNullException(nameof(errCoversheetRequest.SpecialServices), "Property is required for class ErrCoversheetRequest.");

            if (errCoversheetRequest.FromAddress == null)
                throw new ArgumentNullException(nameof(errCoversheetRequest.FromAddress), "Property is required for class ErrCoversheetRequest.");

            if (errCoversheetRequest.Parcel == null)
                throw new ArgumentNullException(nameof(errCoversheetRequest.Parcel), "Property is required for class ErrCoversheetRequest.");

            if (errCoversheetRequest.ToAddress == null)
                throw new ArgumentNullException(nameof(errCoversheetRequest.ToAddress), "Property is required for class ErrCoversheetRequest.");

            if (errCoversheetRequest.ShipmentOptionsOption.IsSet && errCoversheetRequest.ShipmentOptions == null)
                throw new ArgumentNullException(nameof(errCoversheetRequest.ShipmentOptions), "Property is required for class ErrCoversheetRequest.");

            if (errCoversheetRequest.MetadataOption.IsSet && errCoversheetRequest.Metadata == null)
                throw new ArgumentNullException(nameof(errCoversheetRequest.Metadata), "Property is required for class ErrCoversheetRequest.");

            if (errCoversheetRequest.ShippingReferencesOption.IsSet && errCoversheetRequest.ShippingReferences == null)
                throw new ArgumentNullException(nameof(errCoversheetRequest.ShippingReferences), "Property is required for class ErrCoversheetRequest.");

            var typeRawValue = ErrCoversheetRequest.TypeEnumToJsonValue(errCoversheetRequest.Type);
            writer.WriteString("type", typeRawValue);
            writer.WriteString("carrierAccountId", errCoversheetRequest.CarrierAccountId);

            var parcelTypeRawValue = ErrCoversheetRequest.ParcelTypeEnumToJsonValue(errCoversheetRequest.ParcelType);
            writer.WriteString("parcelType", parcelTypeRawValue);
            writer.WriteString("serviceId", errCoversheetRequest.ServiceId);

            writer.WritePropertyName("specialServices");
            JsonSerializer.Serialize(writer, errCoversheetRequest.SpecialServices, jsonSerializerOptions);
            writer.WritePropertyName("fromAddress");
            JsonSerializer.Serialize(writer, errCoversheetRequest.FromAddress, jsonSerializerOptions);
            writer.WritePropertyName("parcel");
            JsonSerializer.Serialize(writer, errCoversheetRequest.Parcel, jsonSerializerOptions);
            writer.WritePropertyName("toAddress");
            JsonSerializer.Serialize(writer, errCoversheetRequest.ToAddress, jsonSerializerOptions);
            var formatRawValue = ErrCoversheetRequest.FormatEnumToJsonValue(errCoversheetRequest.FormatOption.Value.Value);
            writer.WriteString("format", formatRawValue);
            var sizeRawValue = ErrCoversheetRequest.SizeEnumToJsonValue(errCoversheetRequest.SizeOption.Value.Value);
            writer.WriteString("size", sizeRawValue);
            if (errCoversheetRequest.ShipmentOptionsOption.IsSet)
            {
                writer.WritePropertyName("shipmentOptions");
                JsonSerializer.Serialize(writer, errCoversheetRequest.ShipmentOptions, jsonSerializerOptions);
            }
            if (errCoversheetRequest.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, errCoversheetRequest.Metadata, jsonSerializerOptions);
            }
            if (errCoversheetRequest.ShippingReferencesOption.IsSet)
            {
                writer.WritePropertyName("shippingReferences");
                JsonSerializer.Serialize(writer, errCoversheetRequest.ShippingReferences, jsonSerializerOptions);
            }
        }
    }
}
