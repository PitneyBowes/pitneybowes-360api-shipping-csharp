/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.pitneybowes.api360.Client.OpenAPIDateConverter;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// ParcelTypesInner
    /// </summary>
    [DataContract(Name = "parcelTypes_inner")]
    public partial class ParcelTypesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelTypesInner" /> class.
        /// </summary>
        /// <param name="brandedName">The branded name of parcel type.</param>
        /// <param name="carrier">A unique identifier associated with the specific carrier..</param>
        /// <param name="dimensionRules">This defines the maximum and minimum dimension supported for given parcel type..</param>
        /// <param name="groupName">groupName.</param>
        /// <param name="brandedDimensions">brandedDimensions.</param>
        /// <param name="parcelId">A unique identifier associated with the Parcel type..</param>
        /// <param name="isBranded">If the Parcel is Branded. If yees, it will take &#x60;true&#x60;, else will take &#x60;false&#x60;..</param>
        /// <param name="parcelType">This defines the type of Parcel..</param>
        /// <param name="serviceId">A unique identifier associated with the carrier based service..</param>
        /// <param name="serviceName">Name of the Carrier Service..</param>
        /// <param name="suggestedTrackableSpecialserviceId">This defines the parcel has feature to track special serviceID..</param>
        /// <param name="weightRules">This defines the maximum and minimum weight supported for given parcel type..</param>
        public ParcelTypesInner(string brandedName = default(string), string carrier = default(string), List<ParcelTypesInnerDimensionRulesInner> dimensionRules = default(List<ParcelTypesInnerDimensionRulesInner>), string groupName = default(string), ParcelTypesInnerBrandedDimensions brandedDimensions = default(ParcelTypesInnerBrandedDimensions), string parcelId = default(string), bool isBranded = default(bool), string parcelType = default(string), string serviceId = default(string), string serviceName = default(string), string suggestedTrackableSpecialserviceId = default(string), List<ParcelTypesInnerWeightRulesInner> weightRules = default(List<ParcelTypesInnerWeightRulesInner>))
        {
            this.BrandedName = brandedName;
            this.Carrier = carrier;
            this.DimensionRules = dimensionRules;
            this.GroupName = groupName;
            this.BrandedDimensions = brandedDimensions;
            this.ParcelId = parcelId;
            this.IsBranded = isBranded;
            this.ParcelType = parcelType;
            this.ServiceId = serviceId;
            this.ServiceName = serviceName;
            this.SuggestedTrackableSpecialserviceId = suggestedTrackableSpecialserviceId;
            this.WeightRules = weightRules;
        }

        /// <summary>
        /// The branded name of parcel type
        /// </summary>
        /// <value>The branded name of parcel type</value>
        /// <example>Box 1092</example>
        [DataMember(Name = "brandedName", EmitDefaultValue = false)]
        public string BrandedName { get; set; }

        /// <summary>
        /// A unique identifier associated with the specific carrier.
        /// </summary>
        /// <value>A unique identifier associated with the specific carrier.</value>
        /// <example>usps</example>
        [DataMember(Name = "carrier", EmitDefaultValue = false)]
        public string Carrier { get; set; }

        /// <summary>
        /// This defines the maximum and minimum dimension supported for given parcel type.
        /// </summary>
        /// <value>This defines the maximum and minimum dimension supported for given parcel type.</value>
        /// <example>[{&quot;maxLengthPlusGirth&quot;:58,&quot;maxParcelDimensions&quot;:{&quot;height&quot;:18,&quot;length&quot;:18,&quot;unitOfMeasurement&quot;:&quot;IN&quot;,&quot;width&quot;:2},&quot;minLengthPlusGirth&quot;:0.001,&quot;minParcelDimensions&quot;:{&quot;height&quot;:0.001,&quot;length&quot;:0.001,&quot;unitOfMeasurement&quot;:&quot;IN&quot;,&quot;width&quot;:0.001},&quot;required&quot;:true,&quot;unitOfMeasurement&quot;:&quot;IN&quot;}]</example>
        [DataMember(Name = "dimensionRules", EmitDefaultValue = false)]
        public List<ParcelTypesInnerDimensionRulesInner> DimensionRules { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        /// <example>Specialty Boxes and Envelopes</example>
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets BrandedDimensions
        /// </summary>
        [DataMember(Name = "brandedDimensions", EmitDefaultValue = false)]
        public ParcelTypesInnerBrandedDimensions BrandedDimensions { get; set; }

        /// <summary>
        /// A unique identifier associated with the Parcel type.
        /// </summary>
        /// <value>A unique identifier associated with the Parcel type.</value>
        /// <example>B1092</example>
        [DataMember(Name = "parcelId", EmitDefaultValue = false)]
        public string ParcelId { get; set; }

        /// <summary>
        /// If the Parcel is Branded. If yees, it will take &#x60;true&#x60;, else will take &#x60;false&#x60;.
        /// </summary>
        /// <value>If the Parcel is Branded. If yees, it will take &#x60;true&#x60;, else will take &#x60;false&#x60;.</value>
        /// <example>true</example>
        [DataMember(Name = "isBranded", EmitDefaultValue = true)]
        public bool IsBranded { get; set; }

        /// <summary>
        /// This defines the type of Parcel.
        /// </summary>
        /// <value>This defines the type of Parcel.</value>
        /// <example>LP</example>
        [DataMember(Name = "parcelType", EmitDefaultValue = false)]
        public string ParcelType { get; set; }

        /// <summary>
        /// A unique identifier associated with the carrier based service.
        /// </summary>
        /// <value>A unique identifier associated with the carrier based service.</value>
        /// <example>PM</example>
        [DataMember(Name = "serviceId", EmitDefaultValue = false)]
        public string ServiceId { get; set; }

        /// <summary>
        /// Name of the Carrier Service.
        /// </summary>
        /// <value>Name of the Carrier Service.</value>
        /// <example>Priority MailÂ®</example>
        [DataMember(Name = "serviceName", EmitDefaultValue = false)]
        public string ServiceName { get; set; }

        /// <summary>
        /// This defines the parcel has feature to track special serviceID.
        /// </summary>
        /// <value>This defines the parcel has feature to track special serviceID.</value>
        /// <example>DelCon</example>
        [DataMember(Name = "suggestedTrackableSpecialserviceId", EmitDefaultValue = false)]
        public string SuggestedTrackableSpecialserviceId { get; set; }

        /// <summary>
        /// This defines the maximum and minimum weight supported for given parcel type.
        /// </summary>
        /// <value>This defines the maximum and minimum weight supported for given parcel type.</value>
        /// <example>[{&quot;maxWeight&quot;:1120,&quot;minWeight&quot;:0.01,&quot;required&quot;:true,&quot;unitOfMeasurement&quot;:&quot;OZ&quot;}]</example>
        [DataMember(Name = "weightRules", EmitDefaultValue = false)]
        public List<ParcelTypesInnerWeightRulesInner> WeightRules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParcelTypesInner {\n");
            sb.Append("  BrandedName: ").Append(BrandedName).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  DimensionRules: ").Append(DimensionRules).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  BrandedDimensions: ").Append(BrandedDimensions).Append("\n");
            sb.Append("  ParcelId: ").Append(ParcelId).Append("\n");
            sb.Append("  IsBranded: ").Append(IsBranded).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  SuggestedTrackableSpecialserviceId: ").Append(SuggestedTrackableSpecialserviceId).Append("\n");
            sb.Append("  WeightRules: ").Append(WeightRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
