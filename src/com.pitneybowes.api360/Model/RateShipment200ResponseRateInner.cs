// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// Carrier-provided rate details for the shipment.
    /// </summary>
    public partial class RateShipment200ResponseRateInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RateShipment200ResponseRateInner" /> class.
        /// </summary>
        /// <param name="baseCharge">The base service charge payable to the carrier, excluding special service charges.</param>
        /// <param name="baseChargeTaxes">List of taxes applied to the base charge. Returned in case of Canada carriers, such as: purolator, Canpar and Fedex.</param>
        /// <param name="carrier">Carrier responsible for transporting the shipment.</param>
        /// <param name="parcelType">Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.&lt;br/&gt; ParcelType have categories like Package, Envelopes, Paks, Boxes, Tube, etc.</param>
        /// <param name="rateTypeId">Type of rate associated with the quote, such as CONTRACT_RATES or RETAIL_RATES.</param>
        /// <param name="serviceId">The unique identifier given to the carrier specific service.</param>
        /// <param name="surcharges">Additional fees or surcharges applied to the shipment. Each object in the array represents a specific surcharge and its associated fee.  The &#x60;name&#x60; field must be one of the supported surcharge types from the respective carrier.  **Supported Surcharge Names by Carrier:**  | Carrier       | Surcharge Names | |- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- --| | DHL Express   | FUEL, GO_GREEN_BASIC, OVERSIZE, PREMIUM, RURAL, TOLL | | FedEx         | ANCILLARY_FEE, CANADIAN_DESTINATION, DELIVERY_AREA, DELIVERY_CONFIRMATION, FUEL, NON_MACHINABLE, OTHER, OUT_OF_DELIVERY_AREA, OUT_OF_PICKUP_AREA, OVERSIZE, RESIDENTIAL_DELIVERY, RESIDENTIAL_PICKUP | | UPS           | DELIVERY_AREA, EXTENDED_AREA, FUEL, LARGE_PACKAGE, RESIDENTIAL, SHIPPER_PAYS_DUTY_TAX | | USPS          | nonmachinable, oversize | </param>
        /// <param name="totalCarrierCharge">Total amount payable to the carrier, including base and special service fees.</param>
        /// <param name="deliveryCommitment">deliveryCommitment</param>
        /// <param name="totalTaxAmount">Total tax amount applied to the shipment. Returned in case of canada carriers.</param>
        /// <param name="destinationZone">This is the postal or delivery zone assigned to the shipment&#39;s destination by the carrier. This field is returned for USPS as of now.</param>
        /// <param name="publishedTotalCarrierCharge">The total amount based on the carrier&#39;s standard (published) rates, including base charges, surcharges, special services, discounts, and applicable taxes. This value reflects the amount the carrier would charge without any negotiated discounts or platform-specific rate adjustments. - Returned only when supported by the carrier (e.g., FedEx, UPS, DHL, USPS).\&quot; </param>
        [JsonConstructor]
        public RateShipment200ResponseRateInner(Option<decimal?> baseCharge = default, Option<List<RateShipment200ResponseRateInnerBaseChargeTaxesInner>?> baseChargeTaxes = default, Option<string?> carrier = default, Option<string?> parcelType = default, Option<string?> rateTypeId = default, Option<string?> serviceId = default, Option<List<RateShipment200ResponseRateInnerSurchargesInner>?> surcharges = default, Option<decimal?> totalCarrierCharge = default, Option<RateShipment200ResponseRateInnerDeliveryCommitment?> deliveryCommitment = default, Option<float?> totalTaxAmount = default, Option<string?> destinationZone = default, Option<decimal?> publishedTotalCarrierCharge = default)
        {
            BaseChargeOption = baseCharge;
            BaseChargeTaxesOption = baseChargeTaxes;
            CarrierOption = carrier;
            ParcelTypeOption = parcelType;
            RateTypeIdOption = rateTypeId;
            ServiceIdOption = serviceId;
            SurchargesOption = surcharges;
            TotalCarrierChargeOption = totalCarrierCharge;
            DeliveryCommitmentOption = deliveryCommitment;
            TotalTaxAmountOption = totalTaxAmount;
            DestinationZoneOption = destinationZone;
            PublishedTotalCarrierChargeOption = publishedTotalCarrierCharge;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BaseCharge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> BaseChargeOption { get; private set; }

        /// <summary>
        /// The base service charge payable to the carrier, excluding special service charges.
        /// </summary>
        /// <value>The base service charge payable to the carrier, excluding special service charges.</value>
        /* <example>8.55</example> */
        [JsonPropertyName("baseCharge")]
        public decimal? BaseCharge { get { return this.BaseChargeOption; } set { this.BaseChargeOption = new(value); } }

        /// <summary>
        /// Used to track the state of BaseChargeTaxes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<RateShipment200ResponseRateInnerBaseChargeTaxesInner>?> BaseChargeTaxesOption { get; private set; }

        /// <summary>
        /// List of taxes applied to the base charge. Returned in case of Canada carriers, such as: purolator, Canpar and Fedex.
        /// </summary>
        /// <value>List of taxes applied to the base charge. Returned in case of Canada carriers, such as: purolator, Canpar and Fedex.</value>
        [JsonPropertyName("baseChargeTaxes")]
        public List<RateShipment200ResponseRateInnerBaseChargeTaxesInner>? BaseChargeTaxes { get { return this.BaseChargeTaxesOption; } set { this.BaseChargeTaxesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Carrier
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CarrierOption { get; private set; }

        /// <summary>
        /// Carrier responsible for transporting the shipment.
        /// </summary>
        /// <value>Carrier responsible for transporting the shipment.</value>
        /* <example>usps</example> */
        [JsonPropertyName("carrier")]
        public string? Carrier { get { return this.CarrierOption; } set { this.CarrierOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParcelType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParcelTypeOption { get; private set; }

        /// <summary>
        /// Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.&lt;br/&gt; ParcelType have categories like Package, Envelopes, Paks, Boxes, Tube, etc.
        /// </summary>
        /// <value>Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection.&lt;br/&gt; ParcelType have categories like Package, Envelopes, Paks, Boxes, Tube, etc.</value>
        /* <example>PKG</example> */
        [JsonPropertyName("parcelType")]
        public string? ParcelType { get { return this.ParcelTypeOption; } set { this.ParcelTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of RateTypeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RateTypeIdOption { get; private set; }

        /// <summary>
        /// Type of rate associated with the quote, such as CONTRACT_RATES or RETAIL_RATES.
        /// </summary>
        /// <value>Type of rate associated with the quote, such as CONTRACT_RATES or RETAIL_RATES.</value>
        /* <example>CONTRACT_RATES</example> */
        [JsonPropertyName("rateTypeId")]
        public string? RateTypeId { get { return this.RateTypeIdOption; } set { this.RateTypeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServiceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ServiceIdOption { get; private set; }

        /// <summary>
        /// The unique identifier given to the carrier specific service.
        /// </summary>
        /// <value>The unique identifier given to the carrier specific service.</value>
        /* <example>PM</example> */
        [JsonPropertyName("serviceId")]
        public string? ServiceId { get { return this.ServiceIdOption; } set { this.ServiceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Surcharges
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<RateShipment200ResponseRateInnerSurchargesInner>?> SurchargesOption { get; private set; }

        /// <summary>
        /// Additional fees or surcharges applied to the shipment. Each object in the array represents a specific surcharge and its associated fee.  The &#x60;name&#x60; field must be one of the supported surcharge types from the respective carrier.  **Supported Surcharge Names by Carrier:**  | Carrier       | Surcharge Names | |- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- --| | DHL Express   | FUEL, GO_GREEN_BASIC, OVERSIZE, PREMIUM, RURAL, TOLL | | FedEx         | ANCILLARY_FEE, CANADIAN_DESTINATION, DELIVERY_AREA, DELIVERY_CONFIRMATION, FUEL, NON_MACHINABLE, OTHER, OUT_OF_DELIVERY_AREA, OUT_OF_PICKUP_AREA, OVERSIZE, RESIDENTIAL_DELIVERY, RESIDENTIAL_PICKUP | | UPS           | DELIVERY_AREA, EXTENDED_AREA, FUEL, LARGE_PACKAGE, RESIDENTIAL, SHIPPER_PAYS_DUTY_TAX | | USPS          | nonmachinable, oversize | 
        /// </summary>
        /// <value>Additional fees or surcharges applied to the shipment. Each object in the array represents a specific surcharge and its associated fee.  The &#x60;name&#x60; field must be one of the supported surcharge types from the respective carrier.  **Supported Surcharge Names by Carrier:**  | Carrier       | Surcharge Names | |- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- --| | DHL Express   | FUEL, GO_GREEN_BASIC, OVERSIZE, PREMIUM, RURAL, TOLL | | FedEx         | ANCILLARY_FEE, CANADIAN_DESTINATION, DELIVERY_AREA, DELIVERY_CONFIRMATION, FUEL, NON_MACHINABLE, OTHER, OUT_OF_DELIVERY_AREA, OUT_OF_PICKUP_AREA, OVERSIZE, RESIDENTIAL_DELIVERY, RESIDENTIAL_PICKUP | | UPS           | DELIVERY_AREA, EXTENDED_AREA, FUEL, LARGE_PACKAGE, RESIDENTIAL, SHIPPER_PAYS_DUTY_TAX | | USPS          | nonmachinable, oversize | </value>
        /* <example>[{&quot;fee&quot;:5.85,&quot;name&quot;:&quot;RESIDENTIAL&quot;},{&quot;fee&quot;:4.66,&quot;name&quot;:&quot;FUEL&quot;}]</example> */
        [JsonPropertyName("surcharges")]
        public List<RateShipment200ResponseRateInnerSurchargesInner>? Surcharges { get { return this.SurchargesOption; } set { this.SurchargesOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalCarrierCharge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TotalCarrierChargeOption { get; private set; }

        /// <summary>
        /// Total amount payable to the carrier, including base and special service fees.
        /// </summary>
        /// <value>Total amount payable to the carrier, including base and special service fees.</value>
        /* <example>12.7</example> */
        [JsonPropertyName("totalCarrierCharge")]
        public decimal? TotalCarrierCharge { get { return this.TotalCarrierChargeOption; } set { this.TotalCarrierChargeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryCommitment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RateShipment200ResponseRateInnerDeliveryCommitment?> DeliveryCommitmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryCommitment
        /// </summary>
        [JsonPropertyName("deliveryCommitment")]
        public RateShipment200ResponseRateInnerDeliveryCommitment? DeliveryCommitment { get { return this.DeliveryCommitmentOption; } set { this.DeliveryCommitmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalTaxAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> TotalTaxAmountOption { get; private set; }

        /// <summary>
        /// Total tax amount applied to the shipment. Returned in case of canada carriers.
        /// </summary>
        /// <value>Total tax amount applied to the shipment. Returned in case of canada carriers.</value>
        /* <example>2.69</example> */
        [JsonPropertyName("totalTaxAmount")]
        public float? TotalTaxAmount { get { return this.TotalTaxAmountOption; } set { this.TotalTaxAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of DestinationZone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DestinationZoneOption { get; private set; }

        /// <summary>
        /// This is the postal or delivery zone assigned to the shipment&#39;s destination by the carrier. This field is returned for USPS as of now.
        /// </summary>
        /// <value>This is the postal or delivery zone assigned to the shipment&#39;s destination by the carrier. This field is returned for USPS as of now.</value>
        /* <example>8</example> */
        [JsonPropertyName("destinationZone")]
        public string? DestinationZone { get { return this.DestinationZoneOption; } set { this.DestinationZoneOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublishedTotalCarrierCharge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> PublishedTotalCarrierChargeOption { get; private set; }

        /// <summary>
        /// The total amount based on the carrier&#39;s standard (published) rates, including base charges, surcharges, special services, discounts, and applicable taxes. This value reflects the amount the carrier would charge without any negotiated discounts or platform-specific rate adjustments. - Returned only when supported by the carrier (e.g., FedEx, UPS, DHL, USPS).\&quot; 
        /// </summary>
        /// <value>The total amount based on the carrier&#39;s standard (published) rates, including base charges, surcharges, special services, discounts, and applicable taxes. This value reflects the amount the carrier would charge without any negotiated discounts or platform-specific rate adjustments. - Returned only when supported by the carrier (e.g., FedEx, UPS, DHL, USPS).\&quot; </value>
        /* <example>73.12</example> */
        [JsonPropertyName("publishedTotalCarrierCharge")]
        public decimal? PublishedTotalCarrierCharge { get { return this.PublishedTotalCarrierChargeOption; } set { this.PublishedTotalCarrierChargeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RateShipment200ResponseRateInner {\n");
            sb.Append("  BaseCharge: ").Append(BaseCharge).Append("\n");
            sb.Append("  BaseChargeTaxes: ").Append(BaseChargeTaxes).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  RateTypeId: ").Append(RateTypeId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  Surcharges: ").Append(Surcharges).Append("\n");
            sb.Append("  TotalCarrierCharge: ").Append(TotalCarrierCharge).Append("\n");
            sb.Append("  DeliveryCommitment: ").Append(DeliveryCommitment).Append("\n");
            sb.Append("  TotalTaxAmount: ").Append(TotalTaxAmount).Append("\n");
            sb.Append("  DestinationZone: ").Append(DestinationZone).Append("\n");
            sb.Append("  PublishedTotalCarrierCharge: ").Append(PublishedTotalCarrierCharge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RateShipment200ResponseRateInner" />
    /// </summary>
    public class RateShipment200ResponseRateInnerJsonConverter : JsonConverter<RateShipment200ResponseRateInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="RateShipment200ResponseRateInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RateShipment200ResponseRateInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> baseCharge = default;
            Option<List<RateShipment200ResponseRateInnerBaseChargeTaxesInner>?> baseChargeTaxes = default;
            Option<string?> carrier = default;
            Option<string?> parcelType = default;
            Option<string?> rateTypeId = default;
            Option<string?> serviceId = default;
            Option<List<RateShipment200ResponseRateInnerSurchargesInner>?> surcharges = default;
            Option<decimal?> totalCarrierCharge = default;
            Option<RateShipment200ResponseRateInnerDeliveryCommitment?> deliveryCommitment = default;
            Option<float?> totalTaxAmount = default;
            Option<string?> destinationZone = default;
            Option<decimal?> publishedTotalCarrierCharge = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "baseCharge":
                            baseCharge = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "baseChargeTaxes":
                            baseChargeTaxes = new Option<List<RateShipment200ResponseRateInnerBaseChargeTaxesInner>?>(JsonSerializer.Deserialize<List<RateShipment200ResponseRateInnerBaseChargeTaxesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "carrier":
                            carrier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parcelType":
                            parcelType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "rateTypeId":
                            rateTypeId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "serviceId":
                            serviceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "surcharges":
                            surcharges = new Option<List<RateShipment200ResponseRateInnerSurchargesInner>?>(JsonSerializer.Deserialize<List<RateShipment200ResponseRateInnerSurchargesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "totalCarrierCharge":
                            totalCarrierCharge = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "deliveryCommitment":
                            deliveryCommitment = new Option<RateShipment200ResponseRateInnerDeliveryCommitment?>(JsonSerializer.Deserialize<RateShipment200ResponseRateInnerDeliveryCommitment>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "totalTaxAmount":
                            totalTaxAmount = new Option<float?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (float?)null : (float)utf8JsonReader.GetDouble());
                            break;
                        case "destinationZone":
                            destinationZone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "publishedTotalCarrierCharge":
                            publishedTotalCarrierCharge = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (baseCharge.IsSet && baseCharge.Value == null)
                throw new ArgumentNullException(nameof(baseCharge), "Property is not nullable for class RateShipment200ResponseRateInner.");

            if (baseChargeTaxes.IsSet && baseChargeTaxes.Value == null)
                throw new ArgumentNullException(nameof(baseChargeTaxes), "Property is not nullable for class RateShipment200ResponseRateInner.");

            if (carrier.IsSet && carrier.Value == null)
                throw new ArgumentNullException(nameof(carrier), "Property is not nullable for class RateShipment200ResponseRateInner.");

            if (parcelType.IsSet && parcelType.Value == null)
                throw new ArgumentNullException(nameof(parcelType), "Property is not nullable for class RateShipment200ResponseRateInner.");

            if (rateTypeId.IsSet && rateTypeId.Value == null)
                throw new ArgumentNullException(nameof(rateTypeId), "Property is not nullable for class RateShipment200ResponseRateInner.");

            if (serviceId.IsSet && serviceId.Value == null)
                throw new ArgumentNullException(nameof(serviceId), "Property is not nullable for class RateShipment200ResponseRateInner.");

            if (surcharges.IsSet && surcharges.Value == null)
                throw new ArgumentNullException(nameof(surcharges), "Property is not nullable for class RateShipment200ResponseRateInner.");

            if (totalCarrierCharge.IsSet && totalCarrierCharge.Value == null)
                throw new ArgumentNullException(nameof(totalCarrierCharge), "Property is not nullable for class RateShipment200ResponseRateInner.");

            if (deliveryCommitment.IsSet && deliveryCommitment.Value == null)
                throw new ArgumentNullException(nameof(deliveryCommitment), "Property is not nullable for class RateShipment200ResponseRateInner.");

            if (totalTaxAmount.IsSet && totalTaxAmount.Value == null)
                throw new ArgumentNullException(nameof(totalTaxAmount), "Property is not nullable for class RateShipment200ResponseRateInner.");

            if (destinationZone.IsSet && destinationZone.Value == null)
                throw new ArgumentNullException(nameof(destinationZone), "Property is not nullable for class RateShipment200ResponseRateInner.");

            if (publishedTotalCarrierCharge.IsSet && publishedTotalCarrierCharge.Value == null)
                throw new ArgumentNullException(nameof(publishedTotalCarrierCharge), "Property is not nullable for class RateShipment200ResponseRateInner.");

            return new RateShipment200ResponseRateInner(baseCharge, baseChargeTaxes, carrier, parcelType, rateTypeId, serviceId, surcharges, totalCarrierCharge, deliveryCommitment, totalTaxAmount, destinationZone, publishedTotalCarrierCharge);
        }

        /// <summary>
        /// Serializes a <see cref="RateShipment200ResponseRateInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rateShipment200ResponseRateInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RateShipment200ResponseRateInner rateShipment200ResponseRateInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rateShipment200ResponseRateInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RateShipment200ResponseRateInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rateShipment200ResponseRateInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RateShipment200ResponseRateInner rateShipment200ResponseRateInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rateShipment200ResponseRateInner.BaseChargeTaxesOption.IsSet && rateShipment200ResponseRateInner.BaseChargeTaxes == null)
                throw new ArgumentNullException(nameof(rateShipment200ResponseRateInner.BaseChargeTaxes), "Property is required for class RateShipment200ResponseRateInner.");

            if (rateShipment200ResponseRateInner.CarrierOption.IsSet && rateShipment200ResponseRateInner.Carrier == null)
                throw new ArgumentNullException(nameof(rateShipment200ResponseRateInner.Carrier), "Property is required for class RateShipment200ResponseRateInner.");

            if (rateShipment200ResponseRateInner.ParcelTypeOption.IsSet && rateShipment200ResponseRateInner.ParcelType == null)
                throw new ArgumentNullException(nameof(rateShipment200ResponseRateInner.ParcelType), "Property is required for class RateShipment200ResponseRateInner.");

            if (rateShipment200ResponseRateInner.RateTypeIdOption.IsSet && rateShipment200ResponseRateInner.RateTypeId == null)
                throw new ArgumentNullException(nameof(rateShipment200ResponseRateInner.RateTypeId), "Property is required for class RateShipment200ResponseRateInner.");

            if (rateShipment200ResponseRateInner.ServiceIdOption.IsSet && rateShipment200ResponseRateInner.ServiceId == null)
                throw new ArgumentNullException(nameof(rateShipment200ResponseRateInner.ServiceId), "Property is required for class RateShipment200ResponseRateInner.");

            if (rateShipment200ResponseRateInner.SurchargesOption.IsSet && rateShipment200ResponseRateInner.Surcharges == null)
                throw new ArgumentNullException(nameof(rateShipment200ResponseRateInner.Surcharges), "Property is required for class RateShipment200ResponseRateInner.");

            if (rateShipment200ResponseRateInner.DeliveryCommitmentOption.IsSet && rateShipment200ResponseRateInner.DeliveryCommitment == null)
                throw new ArgumentNullException(nameof(rateShipment200ResponseRateInner.DeliveryCommitment), "Property is required for class RateShipment200ResponseRateInner.");

            if (rateShipment200ResponseRateInner.DestinationZoneOption.IsSet && rateShipment200ResponseRateInner.DestinationZone == null)
                throw new ArgumentNullException(nameof(rateShipment200ResponseRateInner.DestinationZone), "Property is required for class RateShipment200ResponseRateInner.");

            if (rateShipment200ResponseRateInner.BaseChargeOption.IsSet)
                writer.WriteNumber("baseCharge", rateShipment200ResponseRateInner.BaseChargeOption.Value!.Value);

            if (rateShipment200ResponseRateInner.BaseChargeTaxesOption.IsSet)
            {
                writer.WritePropertyName("baseChargeTaxes");
                JsonSerializer.Serialize(writer, rateShipment200ResponseRateInner.BaseChargeTaxes, jsonSerializerOptions);
            }
            if (rateShipment200ResponseRateInner.CarrierOption.IsSet)
                writer.WriteString("carrier", rateShipment200ResponseRateInner.Carrier);

            if (rateShipment200ResponseRateInner.ParcelTypeOption.IsSet)
                writer.WriteString("parcelType", rateShipment200ResponseRateInner.ParcelType);

            if (rateShipment200ResponseRateInner.RateTypeIdOption.IsSet)
                writer.WriteString("rateTypeId", rateShipment200ResponseRateInner.RateTypeId);

            if (rateShipment200ResponseRateInner.ServiceIdOption.IsSet)
                writer.WriteString("serviceId", rateShipment200ResponseRateInner.ServiceId);

            if (rateShipment200ResponseRateInner.SurchargesOption.IsSet)
            {
                writer.WritePropertyName("surcharges");
                JsonSerializer.Serialize(writer, rateShipment200ResponseRateInner.Surcharges, jsonSerializerOptions);
            }
            if (rateShipment200ResponseRateInner.TotalCarrierChargeOption.IsSet)
                writer.WriteNumber("totalCarrierCharge", rateShipment200ResponseRateInner.TotalCarrierChargeOption.Value!.Value);

            if (rateShipment200ResponseRateInner.DeliveryCommitmentOption.IsSet)
            {
                writer.WritePropertyName("deliveryCommitment");
                JsonSerializer.Serialize(writer, rateShipment200ResponseRateInner.DeliveryCommitment, jsonSerializerOptions);
            }
            if (rateShipment200ResponseRateInner.TotalTaxAmountOption.IsSet)
                writer.WriteNumber("totalTaxAmount", rateShipment200ResponseRateInner.TotalTaxAmountOption.Value!.Value);

            if (rateShipment200ResponseRateInner.DestinationZoneOption.IsSet)
                writer.WriteString("destinationZone", rateShipment200ResponseRateInner.DestinationZone);

            if (rateShipment200ResponseRateInner.PublishedTotalCarrierChargeOption.IsSet)
                writer.WriteNumber("publishedTotalCarrierCharge", rateShipment200ResponseRateInner.PublishedTotalCarrierChargeOption.Value!.Value);
        }
    }
}
