// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// ReturnLabel
    /// </summary>
    public partial class ReturnLabel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnLabel" /> class.
        /// </summary>
        /// <param name="size">Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).</param>
        /// <param name="type">Defines the type of the Shipment, e.g., Shipping Label.</param>
        /// <param name="fromAddress">fromAddress</param>
        /// <param name="parcel">parcel</param>
        /// <param name="carrierAccountId">The unique identifier associated with the Carrier account used by client users during shipment process.</param>
        /// <param name="parcelType">&gt;-Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. It has categories like Package, Envelopes, Paks, Boxes, Tube, defined per specific carrier and used in abbreviated form, e.g., FRPKG, LGENV, TUBE, PKG.</param>
        /// <param name="parcelId">A unique identifier associated with the Parcel.</param>
        /// <param name="serviceId">&gt;-A unique identifier given to the carrier-specific service. This is required for creating a shipment, while it is optional for rating a parcel.</param>
        /// <param name="specialServices">specialServices</param>
        /// <param name="shipmentOptions">shipmentOptions</param>
        /// <param name="metadata">Additional metadata that needs to be stored for this shipment can be added here. For now, &#39;Cost Account Name&#39; is supported.</param>
        /// <param name="toAddress">toAddress</param>
        [JsonConstructor]
        public ReturnLabel(Option<SizeEnum?> size = default, Option<TypeEnum?> type = default, Option<ReturnLabelFromAddress?> fromAddress = default, Option<ReturnLabelParcel?> parcel = default, Option<string?> carrierAccountId = default, Option<string?> parcelType = default, Option<string?> parcelId = default, Option<string?> serviceId = default, Option<List<ReturnLabelSpecialServicesInner>?> specialServices = default, Option<ShipmentOptions?> shipmentOptions = default, Option<List<ShipmentDomesticMetadataInner>?> metadata = default, Option<ReturnLabelToAddress?> toAddress = default)
        {
            SizeOption = size;
            TypeOption = type;
            FromAddressOption = fromAddress;
            ParcelOption = parcel;
            CarrierAccountIdOption = carrierAccountId;
            ParcelTypeOption = parcelType;
            ParcelIdOption = parcelId;
            ServiceIdOption = serviceId;
            SpecialServicesOption = specialServices;
            ShipmentOptionsOption = shipmentOptions;
            MetadataOption = metadata;
            ToAddressOption = toAddress;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).
        /// </summary>
        /// <value>Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).</value>
        public enum SizeEnum
        {
            /// <summary>
            /// Enum DOC8X11 for value: DOC_8X11
            /// </summary>
            DOC8X11 = 1
        }

        /// <summary>
        /// Returns a <see cref="SizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SizeEnum SizeEnumFromString(string value)
        {
            if (value.Equals("DOC_8X11"))
                return SizeEnum.DOC8X11;

            throw new NotImplementedException($"Could not convert value to type SizeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SizeEnum? SizeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("DOC_8X11"))
                return SizeEnum.DOC8X11;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SizeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SizeEnumToJsonValue(SizeEnum? value)
        {
            if (value == SizeEnum.DOC8X11)
                return "DOC_8X11";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SizeEnum?> SizeOption { get; private set; }

        /// <summary>
        /// Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).
        /// </summary>
        /// <value>Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).</value>
        /* <example>DOC_8X11</example> */
        [JsonPropertyName("size")]
        public SizeEnum? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Defines the type of the Shipment, e.g., Shipping Label.
        /// </summary>
        /// <value>Defines the type of the Shipment, e.g., Shipping Label.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SHIPPINGLABEL for value: SHIPPING_LABEL
            /// </summary>
            SHIPPINGLABEL = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("SHIPPING_LABEL"))
                return TypeEnum.SHIPPINGLABEL;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SHIPPING_LABEL"))
                return TypeEnum.SHIPPINGLABEL;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.SHIPPINGLABEL)
                return "SHIPPING_LABEL";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Defines the type of the Shipment, e.g., Shipping Label.
        /// </summary>
        /// <value>Defines the type of the Shipment, e.g., Shipping Label.</value>
        /* <example>SHIPPING_LABEL</example> */
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of FromAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReturnLabelFromAddress?> FromAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [JsonPropertyName("fromAddress")]
        public ReturnLabelFromAddress? FromAddress { get { return this.FromAddressOption; } set { this.FromAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Parcel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReturnLabelParcel?> ParcelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [JsonPropertyName("parcel")]
        public ReturnLabelParcel? Parcel { get { return this.ParcelOption; } set { this.ParcelOption = new(value); } }

        /// <summary>
        /// Used to track the state of CarrierAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CarrierAccountIdOption { get; private set; }

        /// <summary>
        /// The unique identifier associated with the Carrier account used by client users during shipment process.
        /// </summary>
        /// <value>The unique identifier associated with the Carrier account used by client users during shipment process.</value>
        /* <example>asas2223</example> */
        [JsonPropertyName("carrierAccountId")]
        public string? CarrierAccountId { get { return this.CarrierAccountIdOption; } set { this.CarrierAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParcelType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParcelTypeOption { get; private set; }

        /// <summary>
        /// &gt;-Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. It has categories like Package, Envelopes, Paks, Boxes, Tube, defined per specific carrier and used in abbreviated form, e.g., FRPKG, LGENV, TUBE, PKG.
        /// </summary>
        /// <value>&gt;-Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. It has categories like Package, Envelopes, Paks, Boxes, Tube, defined per specific carrier and used in abbreviated form, e.g., FRPKG, LGENV, TUBE, PKG.</value>
        /* <example>LTR</example> */
        [JsonPropertyName("parcelType")]
        public string? ParcelType { get { return this.ParcelTypeOption; } set { this.ParcelTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParcelId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParcelIdOption { get; private set; }

        /// <summary>
        /// A unique identifier associated with the Parcel.
        /// </summary>
        /// <value>A unique identifier associated with the Parcel.</value>
        /* <example>LR</example> */
        [JsonPropertyName("parcelId")]
        public string? ParcelId { get { return this.ParcelIdOption; } set { this.ParcelIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServiceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ServiceIdOption { get; private set; }

        /// <summary>
        /// &gt;-A unique identifier given to the carrier-specific service. This is required for creating a shipment, while it is optional for rating a parcel.
        /// </summary>
        /// <value>&gt;-A unique identifier given to the carrier-specific service. This is required for creating a shipment, while it is optional for rating a parcel.</value>
        /* <example>NDA</example> */
        [JsonPropertyName("serviceId")]
        public string? ServiceId { get { return this.ServiceIdOption; } set { this.ServiceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpecialServices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ReturnLabelSpecialServicesInner>?> SpecialServicesOption { get; private set; }

        /// <summary>
        /// Gets or Sets SpecialServices
        /// </summary>
        [JsonPropertyName("specialServices")]
        public List<ReturnLabelSpecialServicesInner>? SpecialServices { get { return this.SpecialServicesOption; } set { this.SpecialServicesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShipmentOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipmentOptions?> ShipmentOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShipmentOptions
        /// </summary>
        [JsonPropertyName("shipmentOptions")]
        public ShipmentOptions? ShipmentOptions { get { return this.ShipmentOptionsOption; } set { this.ShipmentOptionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ShipmentDomesticMetadataInner>?> MetadataOption { get; private set; }

        /// <summary>
        /// Additional metadata that needs to be stored for this shipment can be added here. For now, &#39;Cost Account Name&#39; is supported.
        /// </summary>
        /// <value>Additional metadata that needs to be stored for this shipment can be added here. For now, &#39;Cost Account Name&#39; is supported.</value>
        [JsonPropertyName("metadata")]
        public List<ShipmentDomesticMetadataInner>? Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new(value); } }

        /// <summary>
        /// Used to track the state of ToAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReturnLabelToAddress?> ToAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [JsonPropertyName("toAddress")]
        public ReturnLabelToAddress? ToAddress { get { return this.ToAddressOption; } set { this.ToAddressOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnLabel {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  CarrierAccountId: ").Append(CarrierAccountId).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  ParcelId: ").Append(ParcelId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  SpecialServices: ").Append(SpecialServices).Append("\n");
            sb.Append("  ShipmentOptions: ").Append(ShipmentOptions).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReturnLabel" />
    /// </summary>
    public class ReturnLabelJsonConverter : JsonConverter<ReturnLabel>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReturnLabel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReturnLabel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ReturnLabel.SizeEnum?> size = default;
            Option<ReturnLabel.TypeEnum?> type = default;
            Option<ReturnLabelFromAddress?> fromAddress = default;
            Option<ReturnLabelParcel?> parcel = default;
            Option<string?> carrierAccountId = default;
            Option<string?> parcelType = default;
            Option<string?> parcelId = default;
            Option<string?> serviceId = default;
            Option<List<ReturnLabelSpecialServicesInner>?> specialServices = default;
            Option<ShipmentOptions?> shipmentOptions = default;
            Option<List<ShipmentDomesticMetadataInner>?> metadata = default;
            Option<ReturnLabelToAddress?> toAddress = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "size":
                            string? sizeRawValue = utf8JsonReader.GetString();
                            if (sizeRawValue != null)
                                size = new Option<ReturnLabel.SizeEnum?>(ReturnLabel.SizeEnumFromStringOrDefault(sizeRawValue));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ReturnLabel.TypeEnum?>(ReturnLabel.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "fromAddress":
                            fromAddress = new Option<ReturnLabelFromAddress?>(JsonSerializer.Deserialize<ReturnLabelFromAddress>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "parcel":
                            parcel = new Option<ReturnLabelParcel?>(JsonSerializer.Deserialize<ReturnLabelParcel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "carrierAccountId":
                            carrierAccountId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parcelType":
                            parcelType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parcelId":
                            parcelId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "serviceId":
                            serviceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "specialServices":
                            specialServices = new Option<List<ReturnLabelSpecialServicesInner>?>(JsonSerializer.Deserialize<List<ReturnLabelSpecialServicesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "shipmentOptions":
                            shipmentOptions = new Option<ShipmentOptions?>(JsonSerializer.Deserialize<ShipmentOptions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "metadata":
                            metadata = new Option<List<ShipmentDomesticMetadataInner>?>(JsonSerializer.Deserialize<List<ShipmentDomesticMetadataInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "toAddress":
                            toAddress = new Option<ReturnLabelToAddress?>(JsonSerializer.Deserialize<ReturnLabelToAddress>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class ReturnLabel.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ReturnLabel.");

            if (fromAddress.IsSet && fromAddress.Value == null)
                throw new ArgumentNullException(nameof(fromAddress), "Property is not nullable for class ReturnLabel.");

            if (parcel.IsSet && parcel.Value == null)
                throw new ArgumentNullException(nameof(parcel), "Property is not nullable for class ReturnLabel.");

            if (carrierAccountId.IsSet && carrierAccountId.Value == null)
                throw new ArgumentNullException(nameof(carrierAccountId), "Property is not nullable for class ReturnLabel.");

            if (parcelType.IsSet && parcelType.Value == null)
                throw new ArgumentNullException(nameof(parcelType), "Property is not nullable for class ReturnLabel.");

            if (parcelId.IsSet && parcelId.Value == null)
                throw new ArgumentNullException(nameof(parcelId), "Property is not nullable for class ReturnLabel.");

            if (serviceId.IsSet && serviceId.Value == null)
                throw new ArgumentNullException(nameof(serviceId), "Property is not nullable for class ReturnLabel.");

            if (specialServices.IsSet && specialServices.Value == null)
                throw new ArgumentNullException(nameof(specialServices), "Property is not nullable for class ReturnLabel.");

            if (shipmentOptions.IsSet && shipmentOptions.Value == null)
                throw new ArgumentNullException(nameof(shipmentOptions), "Property is not nullable for class ReturnLabel.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class ReturnLabel.");

            if (toAddress.IsSet && toAddress.Value == null)
                throw new ArgumentNullException(nameof(toAddress), "Property is not nullable for class ReturnLabel.");

            return new ReturnLabel(size, type, fromAddress, parcel, carrierAccountId, parcelType, parcelId, serviceId, specialServices, shipmentOptions, metadata, toAddress);
        }

        /// <summary>
        /// Serializes a <see cref="ReturnLabel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="returnLabel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReturnLabel returnLabel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, returnLabel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReturnLabel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="returnLabel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReturnLabel returnLabel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (returnLabel.FromAddressOption.IsSet && returnLabel.FromAddress == null)
                throw new ArgumentNullException(nameof(returnLabel.FromAddress), "Property is required for class ReturnLabel.");

            if (returnLabel.ParcelOption.IsSet && returnLabel.Parcel == null)
                throw new ArgumentNullException(nameof(returnLabel.Parcel), "Property is required for class ReturnLabel.");

            if (returnLabel.CarrierAccountIdOption.IsSet && returnLabel.CarrierAccountId == null)
                throw new ArgumentNullException(nameof(returnLabel.CarrierAccountId), "Property is required for class ReturnLabel.");

            if (returnLabel.ParcelTypeOption.IsSet && returnLabel.ParcelType == null)
                throw new ArgumentNullException(nameof(returnLabel.ParcelType), "Property is required for class ReturnLabel.");

            if (returnLabel.ParcelIdOption.IsSet && returnLabel.ParcelId == null)
                throw new ArgumentNullException(nameof(returnLabel.ParcelId), "Property is required for class ReturnLabel.");

            if (returnLabel.ServiceIdOption.IsSet && returnLabel.ServiceId == null)
                throw new ArgumentNullException(nameof(returnLabel.ServiceId), "Property is required for class ReturnLabel.");

            if (returnLabel.SpecialServicesOption.IsSet && returnLabel.SpecialServices == null)
                throw new ArgumentNullException(nameof(returnLabel.SpecialServices), "Property is required for class ReturnLabel.");

            if (returnLabel.ShipmentOptionsOption.IsSet && returnLabel.ShipmentOptions == null)
                throw new ArgumentNullException(nameof(returnLabel.ShipmentOptions), "Property is required for class ReturnLabel.");

            if (returnLabel.MetadataOption.IsSet && returnLabel.Metadata == null)
                throw new ArgumentNullException(nameof(returnLabel.Metadata), "Property is required for class ReturnLabel.");

            if (returnLabel.ToAddressOption.IsSet && returnLabel.ToAddress == null)
                throw new ArgumentNullException(nameof(returnLabel.ToAddress), "Property is required for class ReturnLabel.");

            var sizeRawValue = ReturnLabel.SizeEnumToJsonValue(returnLabel.SizeOption.Value!.Value);
            writer.WriteString("size", sizeRawValue);
            var typeRawValue = ReturnLabel.TypeEnumToJsonValue(returnLabel.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
            if (returnLabel.FromAddressOption.IsSet)
            {
                writer.WritePropertyName("fromAddress");
                JsonSerializer.Serialize(writer, returnLabel.FromAddress, jsonSerializerOptions);
            }
            if (returnLabel.ParcelOption.IsSet)
            {
                writer.WritePropertyName("parcel");
                JsonSerializer.Serialize(writer, returnLabel.Parcel, jsonSerializerOptions);
            }
            if (returnLabel.CarrierAccountIdOption.IsSet)
                writer.WriteString("carrierAccountId", returnLabel.CarrierAccountId);

            if (returnLabel.ParcelTypeOption.IsSet)
                writer.WriteString("parcelType", returnLabel.ParcelType);

            if (returnLabel.ParcelIdOption.IsSet)
                writer.WriteString("parcelId", returnLabel.ParcelId);

            if (returnLabel.ServiceIdOption.IsSet)
                writer.WriteString("serviceId", returnLabel.ServiceId);

            if (returnLabel.SpecialServicesOption.IsSet)
            {
                writer.WritePropertyName("specialServices");
                JsonSerializer.Serialize(writer, returnLabel.SpecialServices, jsonSerializerOptions);
            }
            if (returnLabel.ShipmentOptionsOption.IsSet)
            {
                writer.WritePropertyName("shipmentOptions");
                JsonSerializer.Serialize(writer, returnLabel.ShipmentOptions, jsonSerializerOptions);
            }
            if (returnLabel.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, returnLabel.Metadata, jsonSerializerOptions);
            }
            if (returnLabel.ToAddressOption.IsSet)
            {
                writer.WritePropertyName("toAddress");
                JsonSerializer.Serialize(writer, returnLabel.ToAddress, jsonSerializerOptions);
            }
        }
    }
}
