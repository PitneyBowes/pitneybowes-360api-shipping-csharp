/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.pitneybowes.api360.Client.OpenAPIDateConverter;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// ReturnLabel
    /// </summary>
    [DataContract(Name = "returnLabel")]
    public partial class ReturnLabel : IValidatableObject
    {
        /// <summary>
        /// This defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).
        /// </summary>
        /// <value>This defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SizeEnum
        {
            /// <summary>
            /// Enum DOC8X11 for value: DOC_8X11
            /// </summary>
            [EnumMember(Value = "DOC_8X11")]
            DOC8X11 = 1
        }


        /// <summary>
        /// This defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).
        /// </summary>
        /// <value>This defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;).</value>
        /// <example>DOC_8X11</example>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public SizeEnum? Size { get; set; }
        /// <summary>
        /// This defines the type of the Shipment, e.g., Shipping Label.
        /// </summary>
        /// <value>This defines the type of the Shipment, e.g., Shipping Label.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SHIPPINGLABEL for value: SHIPPING_LABEL
            /// </summary>
            [EnumMember(Value = "SHIPPING_LABEL")]
            SHIPPINGLABEL = 1
        }


        /// <summary>
        /// This defines the type of the Shipment, e.g., Shipping Label.
        /// </summary>
        /// <value>This defines the type of the Shipment, e.g., Shipping Label.</value>
        /// <example>SHIPPING_LABEL</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnLabel" /> class.
        /// </summary>
        /// <param name="size">This defines the label size of the Shipment, e.g., Shipping Label having Doc Size (8&#39; X 11&#39;)..</param>
        /// <param name="type">This defines the type of the Shipment, e.g., Shipping Label..</param>
        /// <param name="fromAddress">fromAddress.</param>
        /// <param name="parcel">parcel.</param>
        /// <param name="carrierAccountId">The unique identifier associated with the Carrier account used by client users during shipment process..</param>
        /// <param name="parcelType">&gt;-Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. It has categories like Package, Envelopes, Paks, Boxes, Tube, defined per specific carrier and used in abbreviated form, e.g., FRPKG, LGENV, TUBE,PKG..</param>
        /// <param name="parcelId">A unique identifier associated with the Parcel..</param>
        /// <param name="serviceId">&gt;-A unique identifier given to the carrier-specific service. This is required for creating a shipment, while it is optional for rating a parcel..</param>
        /// <param name="specialServices">specialServices.</param>
        /// <param name="shipmentOptions">shipmentOptions.</param>
        /// <param name="metadata">Additional metadata that needs to be stored for this shipment can be added here. For now, &#x60;costAccountName&#x60; is supported..</param>
        /// <param name="toAddress">toAddress.</param>
        public ReturnLabel(SizeEnum? size = default(SizeEnum?), TypeEnum? type = default(TypeEnum?), ReturnLabelFromAddress fromAddress = default(ReturnLabelFromAddress), ShipmentDomesticParcel parcel = default(ShipmentDomesticParcel), string carrierAccountId = default(string), string parcelType = default(string), string parcelId = default(string), string serviceId = default(string), List<ReturnLabelSpecialServicesInner> specialServices = default(List<ReturnLabelSpecialServicesInner>), ShipmentOptionsV2 shipmentOptions = default(ShipmentOptionsV2), List<ShipmentInternationalMetadataInner> metadata = default(List<ShipmentInternationalMetadataInner>), ReturnLabelToAddress toAddress = default(ReturnLabelToAddress))
        {
            this.Size = size;
            this.Type = type;
            this.FromAddress = fromAddress;
            this.Parcel = parcel;
            this.CarrierAccountId = carrierAccountId;
            this.ParcelType = parcelType;
            this.ParcelId = parcelId;
            this.ServiceId = serviceId;
            this.SpecialServices = specialServices;
            this.ShipmentOptions = shipmentOptions;
            this.Metadata = metadata;
            this.ToAddress = toAddress;
        }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [DataMember(Name = "fromAddress", EmitDefaultValue = false)]
        public ReturnLabelFromAddress FromAddress { get; set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [DataMember(Name = "parcel", EmitDefaultValue = false)]
        public ShipmentDomesticParcel Parcel { get; set; }

        /// <summary>
        /// The unique identifier associated with the Carrier account used by client users during shipment process.
        /// </summary>
        /// <value>The unique identifier associated with the Carrier account used by client users during shipment process.</value>
        /// <example>asas2223</example>
        [DataMember(Name = "carrierAccountId", EmitDefaultValue = false)]
        public string CarrierAccountId { get; set; }

        /// <summary>
        /// &gt;-Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. It has categories like Package, Envelopes, Paks, Boxes, Tube, defined per specific carrier and used in abbreviated form, e.g., FRPKG, LGENV, TUBE,PKG.
        /// </summary>
        /// <value>&gt;-Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. It has categories like Package, Envelopes, Paks, Boxes, Tube, defined per specific carrier and used in abbreviated form, e.g., FRPKG, LGENV, TUBE,PKG.</value>
        /// <example>PKG</example>
        [DataMember(Name = "parcelType", EmitDefaultValue = false)]
        public string ParcelType { get; set; }

        /// <summary>
        /// A unique identifier associated with the Parcel.
        /// </summary>
        /// <value>A unique identifier associated with the Parcel.</value>
        /// <example>PKG</example>
        [DataMember(Name = "parcelId", EmitDefaultValue = false)]
        public string ParcelId { get; set; }

        /// <summary>
        /// &gt;-A unique identifier given to the carrier-specific service. This is required for creating a shipment, while it is optional for rating a parcel.
        /// </summary>
        /// <value>&gt;-A unique identifier given to the carrier-specific service. This is required for creating a shipment, while it is optional for rating a parcel.</value>
        /// <example>PM</example>
        [DataMember(Name = "serviceId", EmitDefaultValue = false)]
        public string ServiceId { get; set; }

        /// <summary>
        /// Gets or Sets SpecialServices
        /// </summary>
        [DataMember(Name = "specialServices", EmitDefaultValue = false)]
        public List<ReturnLabelSpecialServicesInner> SpecialServices { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentOptions
        /// </summary>
        [DataMember(Name = "shipmentOptions", EmitDefaultValue = false)]
        public ShipmentOptionsV2 ShipmentOptions { get; set; }

        /// <summary>
        /// Additional metadata that needs to be stored for this shipment can be added here. For now, &#x60;costAccountName&#x60; is supported.
        /// </summary>
        /// <value>Additional metadata that needs to be stored for this shipment can be added here. For now, &#x60;costAccountName&#x60; is supported.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public List<ShipmentInternationalMetadataInner> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [DataMember(Name = "toAddress", EmitDefaultValue = false)]
        public ReturnLabelToAddress ToAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnLabel {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  CarrierAccountId: ").Append(CarrierAccountId).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  ParcelId: ").Append(ParcelId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  SpecialServices: ").Append(SpecialServices).Append("\n");
            sb.Append("  ShipmentOptions: ").Append(ShipmentOptions).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
