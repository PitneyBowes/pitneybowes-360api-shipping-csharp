// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// SchedulePickupDHLEXPResponsePickupAddress
    /// </summary>
    public partial class SchedulePickupDHLEXPResponsePickupAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulePickupDHLEXPResponsePickupAddress" /> class.
        /// </summary>
        /// <param name="name">The name of the person or entity at the pickup address.</param>
        /// <param name="addressLine1">First line of the address where the pickup will occur.</param>
        /// <param name="cityTown">The city or town where the pickup address is located.</param>
        /// <param name="stateProvince">The state or province of the pickup address. For a US or Canadian address, it is the 2-letter state or province code.</param>
        /// <param name="postalCode">The postal or ZIP code for the pickup address. For US addresses, use either the 5-digit or 9-digit ZIP Code in one of the following formats: &#39;12345&#39; or &#39;12345-6789&#39;. If you use a different format, such as 12345- or 123451234, will receive an error.</param>
        /// <param name="countryCode">The two-letter country code for the pickup address.</param>
        /// <param name="phone">The contact phone number for the pickup location.</param>
        /// <param name="company">The name of the company at the pickup address, if the recipient address is not residential.</param>
        /// <param name="email">The email address associated with the pickup location.</param>
        /// <param name="residential">Indicates whether the pickup address is a residential location. Set to &#39;false&#39; for commercial addresses.</param>
        [JsonConstructor]
        public SchedulePickupDHLEXPResponsePickupAddress(Option<string> name = default, Option<string> addressLine1 = default, Option<string> cityTown = default, Option<string> stateProvince = default, Option<string> postalCode = default, Option<string> countryCode = default, Option<string> phone = default, Option<string> company = default, Option<string> email = default, Option<bool?> residential = default)
        {
            NameOption = name;
            AddressLine1Option = addressLine1;
            CityTownOption = cityTown;
            StateProvinceOption = stateProvince;
            PostalCodeOption = postalCode;
            CountryCodeOption = countryCode;
            PhoneOption = phone;
            CompanyOption = company;
            EmailOption = email;
            ResidentialOption = residential;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// The name of the person or entity at the pickup address.
        /// </summary>
        /// <value>The name of the person or entity at the pickup address.</value>
        /* <example>Test</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AddressLine1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AddressLine1Option { get; private set; }

        /// <summary>
        /// First line of the address where the pickup will occur.
        /// </summary>
        /// <value>First line of the address where the pickup will occur.</value>
        /* <example>27 Waterview Dr</example> */
        [JsonPropertyName("addressLine1")]
        public string AddressLine1 { get { return this.AddressLine1Option; } set { this.AddressLine1Option = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CityTown
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CityTownOption { get; private set; }

        /// <summary>
        /// The city or town where the pickup address is located.
        /// </summary>
        /// <value>The city or town where the pickup address is located.</value>
        /* <example>Shelton</example> */
        [JsonPropertyName("cityTown")]
        public string CityTown { get { return this.CityTownOption; } set { this.CityTownOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StateProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StateProvinceOption { get; private set; }

        /// <summary>
        /// The state or province of the pickup address. For a US or Canadian address, it is the 2-letter state or province code.
        /// </summary>
        /// <value>The state or province of the pickup address. For a US or Canadian address, it is the 2-letter state or province code.</value>
        /* <example>CT</example> */
        [JsonPropertyName("stateProvince")]
        public string StateProvince { get { return this.StateProvinceOption; } set { this.StateProvinceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PostalCodeOption { get; private set; }

        /// <summary>
        /// The postal or ZIP code for the pickup address. For US addresses, use either the 5-digit or 9-digit ZIP Code in one of the following formats: &#39;12345&#39; or &#39;12345-6789&#39;. If you use a different format, such as 12345- or 123451234, will receive an error.
        /// </summary>
        /// <value>The postal or ZIP code for the pickup address. For US addresses, use either the 5-digit or 9-digit ZIP Code in one of the following formats: &#39;12345&#39; or &#39;12345-6789&#39;. If you use a different format, such as 12345- or 123451234, will receive an error.</value>
        /* <example>06484-4301</example> */
        [JsonPropertyName("postalCode")]
        public string PostalCode { get { return this.PostalCodeOption; } set { this.PostalCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CountryCodeOption { get; private set; }

        /// <summary>
        /// The two-letter country code for the pickup address.
        /// </summary>
        /// <value>The two-letter country code for the pickup address.</value>
        /* <example>US</example> */
        [JsonPropertyName("countryCode")]
        public string CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PhoneOption { get; private set; }

        /// <summary>
        /// The contact phone number for the pickup location.
        /// </summary>
        /// <value>The contact phone number for the pickup location.</value>
        /* <example>1234567890</example> */
        [JsonPropertyName("phone")]
        public string Phone { get { return this.PhoneOption; } set { this.PhoneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CompanyOption { get; private set; }

        /// <summary>
        /// The name of the company at the pickup address, if the recipient address is not residential.
        /// </summary>
        /// <value>The name of the company at the pickup address, if the recipient address is not residential.</value>
        /* <example>PB</example> */
        [JsonPropertyName("company")]
        public string Company { get { return this.CompanyOption; } set { this.CompanyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EmailOption { get; private set; }

        /// <summary>
        /// The email address associated with the pickup location.
        /// </summary>
        /// <value>The email address associated with the pickup location.</value>
        /* <example>ankita.chaurasia@pb.com</example> */
        [JsonPropertyName("email")]
        public string Email { get { return this.EmailOption; } set { this.EmailOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Residential
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ResidentialOption { get; private set; }

        /// <summary>
        /// Indicates whether the pickup address is a residential location. Set to &#39;false&#39; for commercial addresses.
        /// </summary>
        /// <value>Indicates whether the pickup address is a residential location. Set to &#39;false&#39; for commercial addresses.</value>
        /* <example>false</example> */
        [JsonPropertyName("residential")]
        public bool? Residential { get { return this.ResidentialOption; } set { this.ResidentialOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SchedulePickupDHLEXPResponsePickupAddress {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  CityTown: ").Append(CityTown).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Residential: ").Append(Residential).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SchedulePickupDHLEXPResponsePickupAddress" />
    /// </summary>
    public class SchedulePickupDHLEXPResponsePickupAddressJsonConverter : JsonConverter<SchedulePickupDHLEXPResponsePickupAddress>
    {
        /// <summary>
        /// Deserializes json to <see cref="SchedulePickupDHLEXPResponsePickupAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SchedulePickupDHLEXPResponsePickupAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<string> addressLine1 = default;
            Option<string> cityTown = default;
            Option<string> stateProvince = default;
            Option<string> postalCode = default;
            Option<string> countryCode = default;
            Option<string> phone = default;
            Option<string> company = default;
            Option<string> email = default;
            Option<bool?> residential = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "addressLine1":
                            addressLine1 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cityTown":
                            cityTown = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "stateProvince":
                            stateProvince = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "postalCode":
                            postalCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "countryCode":
                            countryCode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "phone":
                            phone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "company":
                            company = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "residential":
                            residential = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (addressLine1.IsSet && addressLine1.Value == null)
                throw new ArgumentNullException(nameof(addressLine1), "Property is not nullable for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (cityTown.IsSet && cityTown.Value == null)
                throw new ArgumentNullException(nameof(cityTown), "Property is not nullable for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (stateProvince.IsSet && stateProvince.Value == null)
                throw new ArgumentNullException(nameof(stateProvince), "Property is not nullable for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (phone.IsSet && phone.Value == null)
                throw new ArgumentNullException(nameof(phone), "Property is not nullable for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (company.IsSet && company.Value == null)
                throw new ArgumentNullException(nameof(company), "Property is not nullable for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (residential.IsSet && residential.Value == null)
                throw new ArgumentNullException(nameof(residential), "Property is not nullable for class SchedulePickupDHLEXPResponsePickupAddress.");

            return new SchedulePickupDHLEXPResponsePickupAddress(name, addressLine1, cityTown, stateProvince, postalCode, countryCode, phone, company, email, residential);
        }

        /// <summary>
        /// Serializes a <see cref="SchedulePickupDHLEXPResponsePickupAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="schedulePickupDHLEXPResponsePickupAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SchedulePickupDHLEXPResponsePickupAddress schedulePickupDHLEXPResponsePickupAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, schedulePickupDHLEXPResponsePickupAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SchedulePickupDHLEXPResponsePickupAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="schedulePickupDHLEXPResponsePickupAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SchedulePickupDHLEXPResponsePickupAddress schedulePickupDHLEXPResponsePickupAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (schedulePickupDHLEXPResponsePickupAddress.NameOption.IsSet && schedulePickupDHLEXPResponsePickupAddress.Name == null)
                throw new ArgumentNullException(nameof(schedulePickupDHLEXPResponsePickupAddress.Name), "Property is required for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (schedulePickupDHLEXPResponsePickupAddress.AddressLine1Option.IsSet && schedulePickupDHLEXPResponsePickupAddress.AddressLine1 == null)
                throw new ArgumentNullException(nameof(schedulePickupDHLEXPResponsePickupAddress.AddressLine1), "Property is required for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (schedulePickupDHLEXPResponsePickupAddress.CityTownOption.IsSet && schedulePickupDHLEXPResponsePickupAddress.CityTown == null)
                throw new ArgumentNullException(nameof(schedulePickupDHLEXPResponsePickupAddress.CityTown), "Property is required for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (schedulePickupDHLEXPResponsePickupAddress.StateProvinceOption.IsSet && schedulePickupDHLEXPResponsePickupAddress.StateProvince == null)
                throw new ArgumentNullException(nameof(schedulePickupDHLEXPResponsePickupAddress.StateProvince), "Property is required for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (schedulePickupDHLEXPResponsePickupAddress.PostalCodeOption.IsSet && schedulePickupDHLEXPResponsePickupAddress.PostalCode == null)
                throw new ArgumentNullException(nameof(schedulePickupDHLEXPResponsePickupAddress.PostalCode), "Property is required for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (schedulePickupDHLEXPResponsePickupAddress.CountryCodeOption.IsSet && schedulePickupDHLEXPResponsePickupAddress.CountryCode == null)
                throw new ArgumentNullException(nameof(schedulePickupDHLEXPResponsePickupAddress.CountryCode), "Property is required for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (schedulePickupDHLEXPResponsePickupAddress.PhoneOption.IsSet && schedulePickupDHLEXPResponsePickupAddress.Phone == null)
                throw new ArgumentNullException(nameof(schedulePickupDHLEXPResponsePickupAddress.Phone), "Property is required for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (schedulePickupDHLEXPResponsePickupAddress.CompanyOption.IsSet && schedulePickupDHLEXPResponsePickupAddress.Company == null)
                throw new ArgumentNullException(nameof(schedulePickupDHLEXPResponsePickupAddress.Company), "Property is required for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (schedulePickupDHLEXPResponsePickupAddress.EmailOption.IsSet && schedulePickupDHLEXPResponsePickupAddress.Email == null)
                throw new ArgumentNullException(nameof(schedulePickupDHLEXPResponsePickupAddress.Email), "Property is required for class SchedulePickupDHLEXPResponsePickupAddress.");

            if (schedulePickupDHLEXPResponsePickupAddress.NameOption.IsSet)
                writer.WriteString("name", schedulePickupDHLEXPResponsePickupAddress.Name);

            if (schedulePickupDHLEXPResponsePickupAddress.AddressLine1Option.IsSet)
                writer.WriteString("addressLine1", schedulePickupDHLEXPResponsePickupAddress.AddressLine1);

            if (schedulePickupDHLEXPResponsePickupAddress.CityTownOption.IsSet)
                writer.WriteString("cityTown", schedulePickupDHLEXPResponsePickupAddress.CityTown);

            if (schedulePickupDHLEXPResponsePickupAddress.StateProvinceOption.IsSet)
                writer.WriteString("stateProvince", schedulePickupDHLEXPResponsePickupAddress.StateProvince);

            if (schedulePickupDHLEXPResponsePickupAddress.PostalCodeOption.IsSet)
                writer.WriteString("postalCode", schedulePickupDHLEXPResponsePickupAddress.PostalCode);

            if (schedulePickupDHLEXPResponsePickupAddress.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", schedulePickupDHLEXPResponsePickupAddress.CountryCode);

            if (schedulePickupDHLEXPResponsePickupAddress.PhoneOption.IsSet)
                writer.WriteString("phone", schedulePickupDHLEXPResponsePickupAddress.Phone);

            if (schedulePickupDHLEXPResponsePickupAddress.CompanyOption.IsSet)
                writer.WriteString("company", schedulePickupDHLEXPResponsePickupAddress.Company);

            if (schedulePickupDHLEXPResponsePickupAddress.EmailOption.IsSet)
                writer.WriteString("email", schedulePickupDHLEXPResponsePickupAddress.Email);

            if (schedulePickupDHLEXPResponsePickupAddress.ResidentialOption.IsSet)
                writer.WriteBoolean("residential", schedulePickupDHLEXPResponsePickupAddress.ResidentialOption.Value.Value);
        }
    }
}
