// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// ShipmentInternationalCustomsCustomsItemsInner
    /// </summary>
    public partial class ShipmentInternationalCustomsCustomsItemsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentInternationalCustomsCustomsItemsInner" /> class.
        /// </summary>
        /// <param name="description">A detailed description of the commodity, up to 255 characters. The description will appear on the customs form. If the shipment has multiple types of items, create a separate customsItems object for each. Each description will appear on the form.</param>
        /// <param name="quantity">Enter the total number of items of this type of commodity.</param>
        /// <param name="unitPrice">The price of one item of this type of commodity.</param>
        /// <param name="weightUnit">The unit of measurement. This field is required by the unitWeight object.</param>
        /// <param name="weight">The weight of the item.</param>
        /// <param name="hSTariffCode">The destination country&#39;s tariff-classification number (HS code) for the commodity. Most countries use the six-digit Harmonized System (HS) as the basis for their tariff classifications and then add digits for more detail. The maximum length for an HS code is 14 characters. The HS code will appear on the customs form. If the shipment has multiple types of items, create a separate customsItems object for each. Required for RMG carrier.</param>
        /// <param name="originCountryCode">The two-character ISO country code of the shipment’s origin country. Use ISO 3166-1 Alpha-2 standard values.</param>
        [JsonConstructor]
        public ShipmentInternationalCustomsCustomsItemsInner(string description, decimal quantity, decimal unitPrice, WeightUnitEnum weightUnit, decimal weight, Option<Object?> hSTariffCode = default, Option<string?> originCountryCode = default)
        {
            Description = description;
            Quantity = quantity;
            UnitPrice = unitPrice;
            WeightUnit = weightUnit;
            Weight = weight;
            HSTariffCodeOption = hSTariffCode;
            OriginCountryCodeOption = originCountryCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The unit of measurement. This field is required by the unitWeight object.
        /// </summary>
        /// <value>The unit of measurement. This field is required by the unitWeight object.</value>
        public enum WeightUnitEnum
        {
            /// <summary>
            /// Enum OZ for value: OZ
            /// </summary>
            OZ = 1
        }

        /// <summary>
        /// Returns a <see cref="WeightUnitEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static WeightUnitEnum WeightUnitEnumFromString(string value)
        {
            if (value.Equals("OZ"))
                return WeightUnitEnum.OZ;

            throw new NotImplementedException($"Could not convert value to type WeightUnitEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="WeightUnitEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WeightUnitEnum? WeightUnitEnumFromStringOrDefault(string value)
        {
            if (value.Equals("OZ"))
                return WeightUnitEnum.OZ;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="WeightUnitEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string WeightUnitEnumToJsonValue(WeightUnitEnum value)
        {
            if (value == WeightUnitEnum.OZ)
                return "OZ";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The unit of measurement. This field is required by the unitWeight object.
        /// </summary>
        /// <value>The unit of measurement. This field is required by the unitWeight object.</value>
        /* <example>OZ</example> */
        [JsonPropertyName("weightUnit")]
        public WeightUnitEnum WeightUnit { get; set; }

        /// <summary>
        /// A detailed description of the commodity, up to 255 characters. The description will appear on the customs form. If the shipment has multiple types of items, create a separate customsItems object for each. Each description will appear on the form.
        /// </summary>
        /// <value>A detailed description of the commodity, up to 255 characters. The description will appear on the customs form. If the shipment has multiple types of items, create a separate customsItems object for each. Each description will appear on the form.</value>
        /* <example>T-shirt</example> */
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Enter the total number of items of this type of commodity.
        /// </summary>
        /// <value>Enter the total number of items of this type of commodity.</value>
        /* <example>1</example> */
        [JsonPropertyName("quantity")]
        public decimal Quantity { get; set; }

        /// <summary>
        /// The price of one item of this type of commodity.
        /// </summary>
        /// <value>The price of one item of this type of commodity.</value>
        /* <example>10</example> */
        [JsonPropertyName("unitPrice")]
        public decimal UnitPrice { get; set; }

        /// <summary>
        /// The weight of the item.
        /// </summary>
        /// <value>The weight of the item.</value>
        /* <example>1</example> */
        [JsonPropertyName("weight")]
        public decimal Weight { get; set; }

        /// <summary>
        /// Used to track the state of HSTariffCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> HSTariffCodeOption { get; private set; }

        /// <summary>
        /// The destination country&#39;s tariff-classification number (HS code) for the commodity. Most countries use the six-digit Harmonized System (HS) as the basis for their tariff classifications and then add digits for more detail. The maximum length for an HS code is 14 characters. The HS code will appear on the customs form. If the shipment has multiple types of items, create a separate customsItems object for each. Required for RMG carrier.
        /// </summary>
        /// <value>The destination country&#39;s tariff-classification number (HS code) for the commodity. Most countries use the six-digit Harmonized System (HS) as the basis for their tariff classifications and then add digits for more detail. The maximum length for an HS code is 14 characters. The HS code will appear on the customs form. If the shipment has multiple types of items, create a separate customsItems object for each. Required for RMG carrier.</value>
        /* <example>610910</example> */
        [JsonPropertyName("hSTariffCode")]
        public Object? HSTariffCode { get { return this.HSTariffCodeOption; } set { this.HSTariffCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of OriginCountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OriginCountryCodeOption { get; private set; }

        /// <summary>
        /// The two-character ISO country code of the shipment’s origin country. Use ISO 3166-1 Alpha-2 standard values.
        /// </summary>
        /// <value>The two-character ISO country code of the shipment’s origin country. Use ISO 3166-1 Alpha-2 standard values.</value>
        /* <example>US</example> */
        [JsonPropertyName("originCountryCode")]
        public string? OriginCountryCode { get { return this.OriginCountryCodeOption; } set { this.OriginCountryCodeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentInternationalCustomsCustomsItemsInner {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  WeightUnit: ").Append(WeightUnit).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  HSTariffCode: ").Append(HSTariffCode).Append("\n");
            sb.Append("  OriginCountryCode: ").Append(OriginCountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentInternationalCustomsCustomsItemsInner" />
    /// </summary>
    public class ShipmentInternationalCustomsCustomsItemsInnerJsonConverter : JsonConverter<ShipmentInternationalCustomsCustomsItemsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShipmentInternationalCustomsCustomsItemsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentInternationalCustomsCustomsItemsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> description = default;
            Option<decimal?> quantity = default;
            Option<decimal?> unitPrice = default;
            Option<ShipmentInternationalCustomsCustomsItemsInner.WeightUnitEnum?> weightUnit = default;
            Option<decimal?> weight = default;
            Option<Object?> hSTariffCode = default;
            Option<string?> originCountryCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "quantity":
                            quantity = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "unitPrice":
                            unitPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "weightUnit":
                            string? weightUnitRawValue = utf8JsonReader.GetString();
                            if (weightUnitRawValue != null)
                                weightUnit = new Option<ShipmentInternationalCustomsCustomsItemsInner.WeightUnitEnum?>(ShipmentInternationalCustomsCustomsItemsInner.WeightUnitEnumFromStringOrDefault(weightUnitRawValue));
                            break;
                        case "weight":
                            weight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "hSTariffCode":
                            hSTariffCode = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "originCountryCode":
                            originCountryCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class ShipmentInternationalCustomsCustomsItemsInner.", nameof(description));

            if (!quantity.IsSet)
                throw new ArgumentException("Property is required for class ShipmentInternationalCustomsCustomsItemsInner.", nameof(quantity));

            if (!unitPrice.IsSet)
                throw new ArgumentException("Property is required for class ShipmentInternationalCustomsCustomsItemsInner.", nameof(unitPrice));

            if (!weightUnit.IsSet)
                throw new ArgumentException("Property is required for class ShipmentInternationalCustomsCustomsItemsInner.", nameof(weightUnit));

            if (!weight.IsSet)
                throw new ArgumentException("Property is required for class ShipmentInternationalCustomsCustomsItemsInner.", nameof(weight));

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class ShipmentInternationalCustomsCustomsItemsInner.");

            if (quantity.IsSet && quantity.Value == null)
                throw new ArgumentNullException(nameof(quantity), "Property is not nullable for class ShipmentInternationalCustomsCustomsItemsInner.");

            if (unitPrice.IsSet && unitPrice.Value == null)
                throw new ArgumentNullException(nameof(unitPrice), "Property is not nullable for class ShipmentInternationalCustomsCustomsItemsInner.");

            if (weightUnit.IsSet && weightUnit.Value == null)
                throw new ArgumentNullException(nameof(weightUnit), "Property is not nullable for class ShipmentInternationalCustomsCustomsItemsInner.");

            if (weight.IsSet && weight.Value == null)
                throw new ArgumentNullException(nameof(weight), "Property is not nullable for class ShipmentInternationalCustomsCustomsItemsInner.");

            if (hSTariffCode.IsSet && hSTariffCode.Value == null)
                throw new ArgumentNullException(nameof(hSTariffCode), "Property is not nullable for class ShipmentInternationalCustomsCustomsItemsInner.");

            if (originCountryCode.IsSet && originCountryCode.Value == null)
                throw new ArgumentNullException(nameof(originCountryCode), "Property is not nullable for class ShipmentInternationalCustomsCustomsItemsInner.");

            return new ShipmentInternationalCustomsCustomsItemsInner(description.Value!, quantity.Value!.Value!, unitPrice.Value!.Value!, weightUnit.Value!.Value!, weight.Value!.Value!, hSTariffCode, originCountryCode);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentInternationalCustomsCustomsItemsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentInternationalCustomsCustomsItemsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentInternationalCustomsCustomsItemsInner shipmentInternationalCustomsCustomsItemsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, shipmentInternationalCustomsCustomsItemsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentInternationalCustomsCustomsItemsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentInternationalCustomsCustomsItemsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ShipmentInternationalCustomsCustomsItemsInner shipmentInternationalCustomsCustomsItemsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentInternationalCustomsCustomsItemsInner.Description == null)
                throw new ArgumentNullException(nameof(shipmentInternationalCustomsCustomsItemsInner.Description), "Property is required for class ShipmentInternationalCustomsCustomsItemsInner.");

            if (shipmentInternationalCustomsCustomsItemsInner.HSTariffCodeOption.IsSet && shipmentInternationalCustomsCustomsItemsInner.HSTariffCode == null)
                throw new ArgumentNullException(nameof(shipmentInternationalCustomsCustomsItemsInner.HSTariffCode), "Property is required for class ShipmentInternationalCustomsCustomsItemsInner.");

            if (shipmentInternationalCustomsCustomsItemsInner.OriginCountryCodeOption.IsSet && shipmentInternationalCustomsCustomsItemsInner.OriginCountryCode == null)
                throw new ArgumentNullException(nameof(shipmentInternationalCustomsCustomsItemsInner.OriginCountryCode), "Property is required for class ShipmentInternationalCustomsCustomsItemsInner.");

            writer.WriteString("description", shipmentInternationalCustomsCustomsItemsInner.Description);

            writer.WriteNumber("quantity", shipmentInternationalCustomsCustomsItemsInner.Quantity);

            writer.WriteNumber("unitPrice", shipmentInternationalCustomsCustomsItemsInner.UnitPrice);

            var weightUnitRawValue = ShipmentInternationalCustomsCustomsItemsInner.WeightUnitEnumToJsonValue(shipmentInternationalCustomsCustomsItemsInner.WeightUnit);
            writer.WriteString("weightUnit", weightUnitRawValue);
            writer.WriteNumber("weight", shipmentInternationalCustomsCustomsItemsInner.Weight);

            if (shipmentInternationalCustomsCustomsItemsInner.HSTariffCodeOption.IsSet)
            {
                writer.WritePropertyName("hSTariffCode");
                JsonSerializer.Serialize(writer, shipmentInternationalCustomsCustomsItemsInner.HSTariffCode, jsonSerializerOptions);
            }
            if (shipmentInternationalCustomsCustomsItemsInner.OriginCountryCodeOption.IsSet)
                writer.WriteString("originCountryCode", shipmentInternationalCustomsCustomsItemsInner.OriginCountryCode);
        }
    }
}
