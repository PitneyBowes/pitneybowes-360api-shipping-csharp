/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.pitneybowes.api360.Client.OpenAPIDateConverter;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// References are tags or information that is printed on Shipping Label based on the customer&#39;s requirement. &lt;br /&gt; Reference Fields can have values/indication like department name, invoice no., package description, purchase order no., carrier note, cost account no., transportation no., or PO no., etc. &lt;br /&gt; Each of the reference field can have only one indication/value. 
    /// </summary>
    [DataContract(Name = "referenceV2")]
    public partial class ReferenceV2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceV2" /> class.
        /// </summary>
        /// <param name="reference1">Reference 1 can have one of the above-indicated values/information, which is printed on Label, e.g. Cost Account No. (if any) or Invoice Number. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;..</param>
        /// <param name="reference2">Reference 2 can have other details as indicated in the example values above. This is also printed on Label, e.g. Package Description . &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;..</param>
        /// <param name="reference3">Reference 3 can have the information which were not fulfilled in Ref1 and Ref2, e.g. Order No. or Purchase Order ID. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;..</param>
        /// <param name="reference4">Reference 4 can have more information which were not provided in Ref1, Ref2, or Ref3 e.g. Carrier Note. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;..</param>
        /// <param name="poNumber">The Postal Office Number. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;..</param>
        /// <param name="department">The department of the Recipient. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;..</param>
        /// <param name="additionalReference1">Additional Reference is hardly used, but sender can mention anything as per requirement, just for Recipient&#39;s information. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;..</param>
        /// <param name="additionalReference2">Any tags or information that to be shown to Recipient, can be mentioned by Sender, which is not indicated on AdditionalReference1 field, e.g. PO No, Order No. etc.&lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;..</param>
        public ReferenceV2(string reference1 = default(string), string reference2 = default(string), string reference3 = default(string), string reference4 = default(string), string poNumber = default(string), string department = default(string), string additionalReference1 = default(string), string additionalReference2 = default(string))
        {
            this.Reference1 = reference1;
            this.Reference2 = reference2;
            this.Reference3 = reference3;
            this.Reference4 = reference4;
            this.PoNumber = poNumber;
            this.Department = department;
            this.AdditionalReference1 = additionalReference1;
            this.AdditionalReference2 = additionalReference2;
        }

        /// <summary>
        /// Reference 1 can have one of the above-indicated values/information, which is printed on Label, e.g. Cost Account No. (if any) or Invoice Number. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>Reference 1 can have one of the above-indicated values/information, which is printed on Label, e.g. Cost Account No. (if any) or Invoice Number. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /// <example>123456</example>
        [DataMember(Name = "reference1", EmitDefaultValue = false)]
        public string Reference1 { get; set; }

        /// <summary>
        /// Reference 2 can have other details as indicated in the example values above. This is also printed on Label, e.g. Package Description . &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>Reference 2 can have other details as indicated in the example values above. This is also printed on Label, e.g. Package Description . &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /// <example>SendTech</example>
        [DataMember(Name = "reference2", EmitDefaultValue = false)]
        public string Reference2 { get; set; }

        /// <summary>
        /// Reference 3 can have the information which were not fulfilled in Ref1 and Ref2, e.g. Order No. or Purchase Order ID. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>Reference 3 can have the information which were not fulfilled in Ref1 and Ref2, e.g. Order No. or Purchase Order ID. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /// <example>98437</example>
        [DataMember(Name = "reference3", EmitDefaultValue = false)]
        public string Reference3 { get; set; }

        /// <summary>
        /// Reference 4 can have more information which were not provided in Ref1, Ref2, or Ref3 e.g. Carrier Note. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>Reference 4 can have more information which were not provided in Ref1, Ref2, or Ref3 e.g. Carrier Note. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /// <example>FedEx Overnight Shipping</example>
        [DataMember(Name = "reference4", EmitDefaultValue = false)]
        public string Reference4 { get; set; }

        /// <summary>
        /// The Postal Office Number. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>The Postal Office Number. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /// <example>R2W 2H2</example>
        [DataMember(Name = "poNumber", EmitDefaultValue = false)]
        public string PoNumber { get; set; }

        /// <summary>
        /// The department of the Recipient. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>The department of the Recipient. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /// <example>Name department</example>
        [DataMember(Name = "department", EmitDefaultValue = false)]
        public string Department { get; set; }

        /// <summary>
        /// Additional Reference is hardly used, but sender can mention anything as per requirement, just for Recipient&#39;s information. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>Additional Reference is hardly used, but sender can mention anything as per requirement, just for Recipient&#39;s information. &lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /// <example>612987641</example>
        [DataMember(Name = "additionalReference1", EmitDefaultValue = false)]
        public string AdditionalReference1 { get; set; }

        /// <summary>
        /// Any tags or information that to be shown to Recipient, can be mentioned by Sender, which is not indicated on AdditionalReference1 field, e.g. PO No, Order No. etc.&lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.
        /// </summary>
        /// <value>Any tags or information that to be shown to Recipient, can be mentioned by Sender, which is not indicated on AdditionalReference1 field, e.g. PO No, Order No. etc.&lt;br /&gt; &#x60;Max length &#x3D; 30&#x60;.</value>
        /// <example>989</example>
        [DataMember(Name = "additionalReference2", EmitDefaultValue = false)]
        public string AdditionalReference2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReferenceV2 {\n");
            sb.Append("  Reference1: ").Append(Reference1).Append("\n");
            sb.Append("  Reference2: ").Append(Reference2).Append("\n");
            sb.Append("  Reference3: ").Append(Reference3).Append("\n");
            sb.Append("  Reference4: ").Append(Reference4).Append("\n");
            sb.Append("  PoNumber: ").Append(PoNumber).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  AdditionalReference1: ").Append(AdditionalReference1).Append("\n");
            sb.Append("  AdditionalReference2: ").Append(AdditionalReference2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
