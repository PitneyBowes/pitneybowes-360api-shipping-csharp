// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// Shipment Options have an added feature that is Manifest.&lt;br /&gt; With Manifest, the Mail Center agent can print the Manifest (End of day records of all created shipment) of selected carrier.
    /// </summary>
    public partial class ShipmentDomesticByCarrierShipmentOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDomesticByCarrierShipmentOptions" /> class.
        /// </summary>
        /// <param name="addToManifest">This option asks if the shipment is to be added for Manifest, so that the shipment will reflect in the Manifest Form while compilation. Supported for CPC and USPS carriers. &lt;br /&gt; The value can be &#39;true&#39; or &#39;false&#39;.</param>
        /// <param name="minimalAddressValidation">Allows performing minimal address validation during shipment creation. the addressLine1 field is not validated if set to true. Minimal address validation is supported only for these APIs:   - Create Shipment   - Create Bulk Shipments   - Create Multipiece Shipment </param>
        /// <param name="bookingConfirmationNumber">This field specifies the booking confirmation number for Freight International services.</param>
        /// <param name="b2b">Required only for RMG carrier. Must be set to true to indicate a business-to-business (B2B) shipment.</param>
        /// <param name="senderEORI">Sender&#39;s Economic Operators Registration and Identification number. EORI is a unique identification number used for customs clearance in the European Union. This Number can be 14 characters long in Alphanumeric format. **Required for RMG B2B shipments**.</param>
        /// <param name="recipientEORI">Recipient&#39;s EORI number. ORI is a unique identification number used for customs clearance in the European Union. This Number can be 14 characters long in Alphanumeric format. **Required for RMG B2B shipments**.</param>
        /// <param name="senderUKIMSNumber">UKIMS (UK Internal Market Scheme) is an authorization that allows businesses to move goods between Great Britain (GB) and Northern Ireland (NI) without paying EU (European) duty. UKIMS Number can be 32 characters long in Alphanumeric format. Required if the package value value is over £135.</param>
        /// <param name="exportLicenceRequired">Specifies whether the shipment includes goods that require an official export license. - applies to both RMG B2B and B2C shipments - Required as part of customs compliance under the Windsor Agreement </param>
        /// <param name="shipperID">The unique identifier of the known shipper associated with this shipment.</param>
        [JsonConstructor]
        public ShipmentDomesticByCarrierShipmentOptions(Option<bool?> addToManifest = default, Option<bool?> minimalAddressValidation = default, Option<string> bookingConfirmationNumber = default, Option<bool?> b2b = default, Option<string> senderEORI = default, Option<string> recipientEORI = default, Option<string> senderUKIMSNumber = default, Option<bool?> exportLicenceRequired = default, Option<string> shipperID = default)
        {
            AddToManifestOption = addToManifest;
            MinimalAddressValidationOption = minimalAddressValidation;
            BookingConfirmationNumberOption = bookingConfirmationNumber;
            B2bOption = b2b;
            SenderEORIOption = senderEORI;
            RecipientEORIOption = recipientEORI;
            SenderUKIMSNumberOption = senderUKIMSNumber;
            ExportLicenceRequiredOption = exportLicenceRequired;
            ShipperIDOption = shipperID;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AddToManifest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AddToManifestOption { get; private set; }

        /// <summary>
        /// This option asks if the shipment is to be added for Manifest, so that the shipment will reflect in the Manifest Form while compilation. Supported for CPC and USPS carriers. &lt;br /&gt; The value can be &#39;true&#39; or &#39;false&#39;.
        /// </summary>
        /// <value>This option asks if the shipment is to be added for Manifest, so that the shipment will reflect in the Manifest Form while compilation. Supported for CPC and USPS carriers. &lt;br /&gt; The value can be &#39;true&#39; or &#39;false&#39;.</value>
        /* <example>true</example> */
        [JsonPropertyName("addToManifest")]
        public bool? AddToManifest { get { return this.AddToManifestOption; } set { this.AddToManifestOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of MinimalAddressValidation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MinimalAddressValidationOption { get; private set; }

        /// <summary>
        /// Allows performing minimal address validation during shipment creation. the addressLine1 field is not validated if set to true. Minimal address validation is supported only for these APIs:   - Create Shipment   - Create Bulk Shipments   - Create Multipiece Shipment 
        /// </summary>
        /// <value>Allows performing minimal address validation during shipment creation. the addressLine1 field is not validated if set to true. Minimal address validation is supported only for these APIs:   - Create Shipment   - Create Bulk Shipments   - Create Multipiece Shipment </value>
        /* <example>true</example> */
        [JsonPropertyName("minimalAddressValidation")]
        public bool? MinimalAddressValidation { get { return this.MinimalAddressValidationOption; } set { this.MinimalAddressValidationOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of BookingConfirmationNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> BookingConfirmationNumberOption { get; private set; }

        /// <summary>
        /// This field specifies the booking confirmation number for Freight International services.
        /// </summary>
        /// <value>This field specifies the booking confirmation number for Freight International services.</value>
        /* <example>1085test</example> */
        [JsonPropertyName("bookingConfirmationNumber")]
        public string BookingConfirmationNumber { get { return this.BookingConfirmationNumberOption; } set { this.BookingConfirmationNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of B2b
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> B2bOption { get; private set; }

        /// <summary>
        /// Required only for RMG carrier. Must be set to true to indicate a business-to-business (B2B) shipment.
        /// </summary>
        /// <value>Required only for RMG carrier. Must be set to true to indicate a business-to-business (B2B) shipment.</value>
        /* <example>true</example> */
        [JsonPropertyName("b2b")]
        public bool? B2b { get { return this.B2bOption; } set { this.B2bOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SenderEORI
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SenderEORIOption { get; private set; }

        /// <summary>
        /// Sender&#39;s Economic Operators Registration and Identification number. EORI is a unique identification number used for customs clearance in the European Union. This Number can be 14 characters long in Alphanumeric format. **Required for RMG B2B shipments**.
        /// </summary>
        /// <value>Sender&#39;s Economic Operators Registration and Identification number. EORI is a unique identification number used for customs clearance in the European Union. This Number can be 14 characters long in Alphanumeric format. **Required for RMG B2B shipments**.</value>
        /* <example>GB123456789101</example> */
        [JsonPropertyName("senderEORI")]
        public string SenderEORI { get { return this.SenderEORIOption; } set { this.SenderEORIOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RecipientEORI
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RecipientEORIOption { get; private set; }

        /// <summary>
        /// Recipient&#39;s EORI number. ORI is a unique identification number used for customs clearance in the European Union. This Number can be 14 characters long in Alphanumeric format. **Required for RMG B2B shipments**.
        /// </summary>
        /// <value>Recipient&#39;s EORI number. ORI is a unique identification number used for customs clearance in the European Union. This Number can be 14 characters long in Alphanumeric format. **Required for RMG B2B shipments**.</value>
        /* <example>GB123456789102</example> */
        [JsonPropertyName("recipientEORI")]
        public string RecipientEORI { get { return this.RecipientEORIOption; } set { this.RecipientEORIOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SenderUKIMSNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SenderUKIMSNumberOption { get; private set; }

        /// <summary>
        /// UKIMS (UK Internal Market Scheme) is an authorization that allows businesses to move goods between Great Britain (GB) and Northern Ireland (NI) without paying EU (European) duty. UKIMS Number can be 32 characters long in Alphanumeric format. Required if the package value value is over £135.
        /// </summary>
        /// <value>UKIMS (UK Internal Market Scheme) is an authorization that allows businesses to move goods between Great Britain (GB) and Northern Ireland (NI) without paying EU (European) duty. UKIMS Number can be 32 characters long in Alphanumeric format. Required if the package value value is over £135.</value>
        /* <example>GBUKIM12345678910100000000000000</example> */
        [JsonPropertyName("senderUKIMSNumber")]
        public string SenderUKIMSNumber { get { return this.SenderUKIMSNumberOption; } set { this.SenderUKIMSNumberOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ExportLicenceRequired
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ExportLicenceRequiredOption { get; private set; }

        /// <summary>
        /// Specifies whether the shipment includes goods that require an official export license. - applies to both RMG B2B and B2C shipments - Required as part of customs compliance under the Windsor Agreement 
        /// </summary>
        /// <value>Specifies whether the shipment includes goods that require an official export license. - applies to both RMG B2B and B2C shipments - Required as part of customs compliance under the Windsor Agreement </value>
        /* <example>true</example> */
        [JsonPropertyName("exportLicenceRequired")]
        public bool? ExportLicenceRequired { get { return this.ExportLicenceRequiredOption; } set { this.ExportLicenceRequiredOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of ShipperID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ShipperIDOption { get; private set; }

        /// <summary>
        /// The unique identifier of the known shipper associated with this shipment.
        /// </summary>
        /// <value>The unique identifier of the known shipper associated with this shipment.</value>
        /* <example>1234567890</example> */
        [JsonPropertyName("shipperID")]
        public string ShipperID { get { return this.ShipperIDOption; } set { this.ShipperIDOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentDomesticByCarrierShipmentOptions {\n");
            sb.Append("  AddToManifest: ").Append(AddToManifest).Append("\n");
            sb.Append("  MinimalAddressValidation: ").Append(MinimalAddressValidation).Append("\n");
            sb.Append("  BookingConfirmationNumber: ").Append(BookingConfirmationNumber).Append("\n");
            sb.Append("  B2b: ").Append(B2b).Append("\n");
            sb.Append("  SenderEORI: ").Append(SenderEORI).Append("\n");
            sb.Append("  RecipientEORI: ").Append(RecipientEORI).Append("\n");
            sb.Append("  SenderUKIMSNumber: ").Append(SenderUKIMSNumber).Append("\n");
            sb.Append("  ExportLicenceRequired: ").Append(ExportLicenceRequired).Append("\n");
            sb.Append("  ShipperID: ").Append(ShipperID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentDomesticByCarrierShipmentOptions" />
    /// </summary>
    public class ShipmentDomesticByCarrierShipmentOptionsJsonConverter : JsonConverter<ShipmentDomesticByCarrierShipmentOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShipmentDomesticByCarrierShipmentOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentDomesticByCarrierShipmentOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> addToManifest = default;
            Option<bool?> minimalAddressValidation = default;
            Option<string> bookingConfirmationNumber = default;
            Option<bool?> b2b = default;
            Option<string> senderEORI = default;
            Option<string> recipientEORI = default;
            Option<string> senderUKIMSNumber = default;
            Option<bool?> exportLicenceRequired = default;
            Option<string> shipperID = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "addToManifest":
                            addToManifest = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "minimalAddressValidation":
                            minimalAddressValidation = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "bookingConfirmationNumber":
                            bookingConfirmationNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "b2b":
                            b2b = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "senderEORI":
                            senderEORI = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "recipientEORI":
                            recipientEORI = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "senderUKIMSNumber":
                            senderUKIMSNumber = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "exportLicenceRequired":
                            exportLicenceRequired = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "shipperID":
                            shipperID = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (addToManifest.IsSet && addToManifest.Value == null)
                throw new ArgumentNullException(nameof(addToManifest), "Property is not nullable for class ShipmentDomesticByCarrierShipmentOptions.");

            if (minimalAddressValidation.IsSet && minimalAddressValidation.Value == null)
                throw new ArgumentNullException(nameof(minimalAddressValidation), "Property is not nullable for class ShipmentDomesticByCarrierShipmentOptions.");

            if (bookingConfirmationNumber.IsSet && bookingConfirmationNumber.Value == null)
                throw new ArgumentNullException(nameof(bookingConfirmationNumber), "Property is not nullable for class ShipmentDomesticByCarrierShipmentOptions.");

            if (b2b.IsSet && b2b.Value == null)
                throw new ArgumentNullException(nameof(b2b), "Property is not nullable for class ShipmentDomesticByCarrierShipmentOptions.");

            if (senderEORI.IsSet && senderEORI.Value == null)
                throw new ArgumentNullException(nameof(senderEORI), "Property is not nullable for class ShipmentDomesticByCarrierShipmentOptions.");

            if (recipientEORI.IsSet && recipientEORI.Value == null)
                throw new ArgumentNullException(nameof(recipientEORI), "Property is not nullable for class ShipmentDomesticByCarrierShipmentOptions.");

            if (senderUKIMSNumber.IsSet && senderUKIMSNumber.Value == null)
                throw new ArgumentNullException(nameof(senderUKIMSNumber), "Property is not nullable for class ShipmentDomesticByCarrierShipmentOptions.");

            if (exportLicenceRequired.IsSet && exportLicenceRequired.Value == null)
                throw new ArgumentNullException(nameof(exportLicenceRequired), "Property is not nullable for class ShipmentDomesticByCarrierShipmentOptions.");

            if (shipperID.IsSet && shipperID.Value == null)
                throw new ArgumentNullException(nameof(shipperID), "Property is not nullable for class ShipmentDomesticByCarrierShipmentOptions.");

            return new ShipmentDomesticByCarrierShipmentOptions(addToManifest, minimalAddressValidation, bookingConfirmationNumber, b2b, senderEORI, recipientEORI, senderUKIMSNumber, exportLicenceRequired, shipperID);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentDomesticByCarrierShipmentOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticByCarrierShipmentOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentDomesticByCarrierShipmentOptions shipmentDomesticByCarrierShipmentOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, shipmentDomesticByCarrierShipmentOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentDomesticByCarrierShipmentOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticByCarrierShipmentOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ShipmentDomesticByCarrierShipmentOptions shipmentDomesticByCarrierShipmentOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentDomesticByCarrierShipmentOptions.BookingConfirmationNumberOption.IsSet && shipmentDomesticByCarrierShipmentOptions.BookingConfirmationNumber == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierShipmentOptions.BookingConfirmationNumber), "Property is required for class ShipmentDomesticByCarrierShipmentOptions.");

            if (shipmentDomesticByCarrierShipmentOptions.SenderEORIOption.IsSet && shipmentDomesticByCarrierShipmentOptions.SenderEORI == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierShipmentOptions.SenderEORI), "Property is required for class ShipmentDomesticByCarrierShipmentOptions.");

            if (shipmentDomesticByCarrierShipmentOptions.RecipientEORIOption.IsSet && shipmentDomesticByCarrierShipmentOptions.RecipientEORI == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierShipmentOptions.RecipientEORI), "Property is required for class ShipmentDomesticByCarrierShipmentOptions.");

            if (shipmentDomesticByCarrierShipmentOptions.SenderUKIMSNumberOption.IsSet && shipmentDomesticByCarrierShipmentOptions.SenderUKIMSNumber == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierShipmentOptions.SenderUKIMSNumber), "Property is required for class ShipmentDomesticByCarrierShipmentOptions.");

            if (shipmentDomesticByCarrierShipmentOptions.ShipperIDOption.IsSet && shipmentDomesticByCarrierShipmentOptions.ShipperID == null)
                throw new ArgumentNullException(nameof(shipmentDomesticByCarrierShipmentOptions.ShipperID), "Property is required for class ShipmentDomesticByCarrierShipmentOptions.");

            if (shipmentDomesticByCarrierShipmentOptions.AddToManifestOption.IsSet)
                writer.WriteBoolean("addToManifest", shipmentDomesticByCarrierShipmentOptions.AddToManifestOption.Value.Value);

            if (shipmentDomesticByCarrierShipmentOptions.MinimalAddressValidationOption.IsSet)
                writer.WriteBoolean("minimalAddressValidation", shipmentDomesticByCarrierShipmentOptions.MinimalAddressValidationOption.Value.Value);

            if (shipmentDomesticByCarrierShipmentOptions.BookingConfirmationNumberOption.IsSet)
                writer.WriteString("bookingConfirmationNumber", shipmentDomesticByCarrierShipmentOptions.BookingConfirmationNumber);

            if (shipmentDomesticByCarrierShipmentOptions.B2bOption.IsSet)
                writer.WriteBoolean("b2b", shipmentDomesticByCarrierShipmentOptions.B2bOption.Value.Value);

            if (shipmentDomesticByCarrierShipmentOptions.SenderEORIOption.IsSet)
                writer.WriteString("senderEORI", shipmentDomesticByCarrierShipmentOptions.SenderEORI);

            if (shipmentDomesticByCarrierShipmentOptions.RecipientEORIOption.IsSet)
                writer.WriteString("recipientEORI", shipmentDomesticByCarrierShipmentOptions.RecipientEORI);

            if (shipmentDomesticByCarrierShipmentOptions.SenderUKIMSNumberOption.IsSet)
                writer.WriteString("senderUKIMSNumber", shipmentDomesticByCarrierShipmentOptions.SenderUKIMSNumber);

            if (shipmentDomesticByCarrierShipmentOptions.ExportLicenceRequiredOption.IsSet)
                writer.WriteBoolean("exportLicenceRequired", shipmentDomesticByCarrierShipmentOptions.ExportLicenceRequiredOption.Value.Value);

            if (shipmentDomesticByCarrierShipmentOptions.ShipperIDOption.IsSet)
                writer.WriteString("shipperID", shipmentDomesticByCarrierShipmentOptions.ShipperID);
        }
    }
}
