// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// For domestic USPS Military Mail shipments (APO/FPO/DPO Address), &#x60;customs&#x60; object is required if any of the following are true:   - Weight is greater than or equal to 16 ounces.   - Weight is less than 16 ounces AND shipment contains items other than documents. Specify the items in customs.customsInfo.reasonForExport.   - Shipment uses Priority Mail Express (EM). A customs form is always required for Priority Mail Express. 
    /// </summary>
    public partial class MilitaryMailShipments : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MilitaryMailShipments" /> class.
        /// </summary>
        /// <param name="size">Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (4&#39; X 6&#39; or 8.5&#39; X 11&#39;).</param>
        /// <param name="type">Defines the type of the Shipment, e.g., Shipping Label.QR_CODE supported for carrier USPS only as of now.</param>
        /// <param name="fromAddress">fromAddress</param>
        /// <param name="parcel">parcel</param>
        /// <param name="carrierAccountId"> A unique identifier associated with the Carrier account used by client users during shipment process.</param>
        /// <param name="parcelType">&gt;-Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. It has categories like Package, Envelopes, Paks, Boxes, Tube, defined per specific carrier and used in abbreviated form, e.g., FRPKG, LGENV, TUBE, PKG.</param>
        /// <param name="serviceId">&gt;-A unique identifier given to the carrier-specific service. This is required for creating a shipment, while it is optional for rating a parcel.</param>
        /// <param name="toAddress">toAddress</param>
        /// <param name="format">Defines the type of the shipment label that is printed. QR_CODE can be generated only in GIF format.</param>
        /// <param name="contentType">Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; and &#x60;GIF&#x60;. &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;, &#x60;PNG&#x60;, and &#x60;GIF&#x60;. </param>
        /// <param name="dateOfShipment">The date when shipment is created/shipped. The format of the Date is YYYY-MM-DD.</param>
        /// <param name="specialServices"> It provides a carrier-service based special or extra service.</param>
        /// <param name="shipmentOptions">shipmentOptions</param>
        /// <param name="carrierPayments">Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. </param>
        /// <param name="metadata">Additional metadata that needs to be stored for this shipment can be added here. For now, &#39;Cost Account Name&#39; is supported.</param>
        /// <param name="soldToAddress">soldToAddress</param>
        /// <param name="customs">customs</param>
        [JsonConstructor]
        public MilitaryMailShipments(SizeEnum size, TypeEnum type, MilitaryMailShipmentsFromAddress fromAddress, MilitaryMailShipmentsParcel parcel, string carrierAccountId, string parcelType, string serviceId, MilitaryMailShipmentsToAddress toAddress, Option<FormatEnum?> format = default, Option<ContentTypeEnum?> contentType = default, Option<DateTime?> dateOfShipment = default, Option<List<SpecialService>> specialServices = default, Option<ShipmentOptions> shipmentOptions = default, Option<List<CarrierPaymentsInner>> carrierPayments = default, Option<List<ShipmentDomesticMetadataInner>> metadata = default, Option<SoldToAddress> soldToAddress = default, Option<MilitaryMailShipmentsCustoms> customs = default)
        {
            Size = size;
            Type = type;
            FromAddress = fromAddress;
            Parcel = parcel;
            CarrierAccountId = carrierAccountId;
            ParcelType = parcelType;
            ServiceId = serviceId;
            ToAddress = toAddress;
            FormatOption = format;
            ContentTypeOption = contentType;
            DateOfShipmentOption = dateOfShipment;
            SpecialServicesOption = specialServices;
            ShipmentOptionsOption = shipmentOptions;
            CarrierPaymentsOption = carrierPayments;
            MetadataOption = metadata;
            SoldToAddressOption = soldToAddress;
            CustomsOption = customs;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (4&#39; X 6&#39; or 8.5&#39; X 11&#39;).
        /// </summary>
        /// <value>Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (4&#39; X 6&#39; or 8.5&#39; X 11&#39;).</value>
        public enum SizeEnum
        {
            /// <summary>
            /// Enum DOC8X11 for value: DOC_8X11
            /// </summary>
            DOC8X11 = 1,

            /// <summary>
            /// Enum DOC4X6 for value: DOC_4X6
            /// </summary>
            DOC4X6 = 2
        }

        /// <summary>
        /// Returns a <see cref="SizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SizeEnum SizeEnumFromString(string value)
        {
            if (value.Equals("DOC_8X11"))
                return SizeEnum.DOC8X11;

            if (value.Equals("DOC_4X6"))
                return SizeEnum.DOC4X6;

            throw new NotImplementedException($"Could not convert value to type SizeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SizeEnum? SizeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("DOC_8X11"))
                return SizeEnum.DOC8X11;

            if (value.Equals("DOC_4X6"))
                return SizeEnum.DOC4X6;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SizeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SizeEnumToJsonValue(SizeEnum value)
        {
            if (value == SizeEnum.DOC8X11)
                return "DOC_8X11";

            if (value == SizeEnum.DOC4X6)
                return "DOC_4X6";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (4&#39; X 6&#39; or 8.5&#39; X 11&#39;).
        /// </summary>
        /// <value>Defines the label size of the Shipment, e.g., Shipping Label having Doc Size (4&#39; X 6&#39; or 8.5&#39; X 11&#39;).</value>
        /* <example>DOC_8x11</example> */
        [JsonPropertyName("size")]
        public SizeEnum Size { get; set; }

        /// <summary>
        /// Defines the type of the Shipment, e.g., Shipping Label.QR_CODE supported for carrier USPS only as of now.
        /// </summary>
        /// <value>Defines the type of the Shipment, e.g., Shipping Label.QR_CODE supported for carrier USPS only as of now.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SHIPPINGLABEL for value: SHIPPING_LABEL
            /// </summary>
            SHIPPINGLABEL = 1,

            /// <summary>
            /// Enum QRCODE for value: QR_CODE
            /// </summary>
            QRCODE = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("SHIPPING_LABEL"))
                return TypeEnum.SHIPPINGLABEL;

            if (value.Equals("QR_CODE"))
                return TypeEnum.QRCODE;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SHIPPING_LABEL"))
                return TypeEnum.SHIPPINGLABEL;

            if (value.Equals("QR_CODE"))
                return TypeEnum.QRCODE;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.SHIPPINGLABEL)
                return "SHIPPING_LABEL";

            if (value == TypeEnum.QRCODE)
                return "QR_CODE";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Defines the type of the Shipment, e.g., Shipping Label.QR_CODE supported for carrier USPS only as of now.
        /// </summary>
        /// <value>Defines the type of the Shipment, e.g., Shipping Label.QR_CODE supported for carrier USPS only as of now.</value>
        /* <example>SHIPPING_LABEL</example> */
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Defines the type of the shipment label that is printed. QR_CODE can be generated only in GIF format.
        /// </summary>
        /// <value>Defines the type of the shipment label that is printed. QR_CODE can be generated only in GIF format.</value>
        public enum FormatEnum
        {
            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            PDF = 1,

            /// <summary>
            /// Enum ZPL2 for value: ZPL2
            /// </summary>
            ZPL2 = 2,

            /// <summary>
            /// Enum PNG for value: PNG
            /// </summary>
            PNG = 3,

            /// <summary>
            /// Enum GIF for value: GIF
            /// </summary>
            GIF = 4
        }

        /// <summary>
        /// Returns a <see cref="FormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FormatEnum FormatEnumFromString(string value)
        {
            if (value.Equals("PDF"))
                return FormatEnum.PDF;

            if (value.Equals("ZPL2"))
                return FormatEnum.ZPL2;

            if (value.Equals("PNG"))
                return FormatEnum.PNG;

            if (value.Equals("GIF"))
                return FormatEnum.GIF;

            throw new NotImplementedException($"Could not convert value to type FormatEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FormatEnum? FormatEnumFromStringOrDefault(string value)
        {
            if (value.Equals("PDF"))
                return FormatEnum.PDF;

            if (value.Equals("ZPL2"))
                return FormatEnum.ZPL2;

            if (value.Equals("PNG"))
                return FormatEnum.PNG;

            if (value.Equals("GIF"))
                return FormatEnum.GIF;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FormatEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FormatEnumToJsonValue(FormatEnum? value)
        {
            if (value == FormatEnum.PDF)
                return "PDF";

            if (value == FormatEnum.ZPL2)
                return "ZPL2";

            if (value == FormatEnum.PNG)
                return "PNG";

            if (value == FormatEnum.GIF)
                return "GIF";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Format
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FormatEnum?> FormatOption { get; private set; }

        /// <summary>
        /// Defines the type of the shipment label that is printed. QR_CODE can be generated only in GIF format.
        /// </summary>
        /// <value>Defines the type of the shipment label that is printed. QR_CODE can be generated only in GIF format.</value>
        /* <example>PDF</example> */
        [JsonPropertyName("format")]
        public FormatEnum? Format { get { return this.FormatOption; } set { this.FormatOption = new Option<FormatEnum?>(value); } }

        /// <summary>
        /// Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; and &#x60;GIF&#x60;. &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;, &#x60;PNG&#x60;, and &#x60;GIF&#x60;. 
        /// </summary>
        /// <value>Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; and &#x60;GIF&#x60;. &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;, &#x60;PNG&#x60;, and &#x60;GIF&#x60;. </value>
        public enum ContentTypeEnum
        {
            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            URL = 1,

            /// <summary>
            /// Enum BASE64 for value: BASE64
            /// </summary>
            BASE64 = 2
        }

        /// <summary>
        /// Returns a <see cref="ContentTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ContentTypeEnum ContentTypeEnumFromString(string value)
        {
            if (value.Equals("URL"))
                return ContentTypeEnum.URL;

            if (value.Equals("BASE64"))
                return ContentTypeEnum.BASE64;

            throw new NotImplementedException($"Could not convert value to type ContentTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ContentTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ContentTypeEnum? ContentTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("URL"))
                return ContentTypeEnum.URL;

            if (value.Equals("BASE64"))
                return ContentTypeEnum.BASE64;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ContentTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ContentTypeEnumToJsonValue(ContentTypeEnum? value)
        {
            if (value == ContentTypeEnum.URL)
                return "URL";

            if (value == ContentTypeEnum.BASE64)
                return "BASE64";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ContentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ContentTypeEnum?> ContentTypeOption { get; private set; }

        /// <summary>
        /// Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; and &#x60;GIF&#x60;. &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;, &#x60;PNG&#x60;, and &#x60;GIF&#x60;. 
        /// </summary>
        /// <value>Specifies how the label content is encoded.&lt;br/&gt; URL is supported for &#x60;PDF&#x60; and &#x60;GIF&#x60;. &lt;br/&gt; BASE64 is supported for &#x60;ZPL2&#x60;, &#x60;PNG&#x60;, and &#x60;GIF&#x60;. </value>
        /* <example>URL</example> */
        [JsonPropertyName("contentType")]
        public ContentTypeEnum? ContentType { get { return this.ContentTypeOption; } set { this.ContentTypeOption = new Option<ContentTypeEnum?>(value); } }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [JsonPropertyName("fromAddress")]
        public MilitaryMailShipmentsFromAddress FromAddress { get; set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [JsonPropertyName("parcel")]
        public MilitaryMailShipmentsParcel Parcel { get; set; }

        /// <summary>
        ///  A unique identifier associated with the Carrier account used by client users during shipment process.
        /// </summary>
        /// <value> A unique identifier associated with the Carrier account used by client users during shipment process.</value>
        /* <example>asas2223</example> */
        [JsonPropertyName("carrierAccountId")]
        public string CarrierAccountId { get; set; }

        /// <summary>
        /// &gt;-Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. It has categories like Package, Envelopes, Paks, Boxes, Tube, defined per specific carrier and used in abbreviated form, e.g., FRPKG, LGENV, TUBE, PKG.
        /// </summary>
        /// <value>&gt;-Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. It has categories like Package, Envelopes, Paks, Boxes, Tube, defined per specific carrier and used in abbreviated form, e.g., FRPKG, LGENV, TUBE, PKG.</value>
        /* <example>LP</example> */
        [JsonPropertyName("parcelType")]
        public string ParcelType { get; set; }

        /// <summary>
        /// &gt;-A unique identifier given to the carrier-specific service. This is required for creating a shipment, while it is optional for rating a parcel.
        /// </summary>
        /// <value>&gt;-A unique identifier given to the carrier-specific service. This is required for creating a shipment, while it is optional for rating a parcel.</value>
        /* <example>PM</example> */
        [JsonPropertyName("serviceId")]
        public string ServiceId { get; set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [JsonPropertyName("toAddress")]
        public MilitaryMailShipmentsToAddress ToAddress { get; set; }

        /// <summary>
        /// Used to track the state of DateOfShipment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateOfShipmentOption { get; private set; }

        /// <summary>
        /// The date when shipment is created/shipped. The format of the Date is YYYY-MM-DD.
        /// </summary>
        /// <value>The date when shipment is created/shipped. The format of the Date is YYYY-MM-DD.</value>
        /* <example>Fri Apr 04 05:30:00 IST 2025</example> */
        [JsonPropertyName("dateOfShipment")]
        public DateTime? DateOfShipment { get { return this.DateOfShipmentOption; } set { this.DateOfShipmentOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of SpecialServices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SpecialService>> SpecialServicesOption { get; private set; }

        /// <summary>
        ///  It provides a carrier-service based special or extra service.
        /// </summary>
        /// <value> It provides a carrier-service based special or extra service.</value>
        [JsonPropertyName("specialServices")]
        public List<SpecialService> SpecialServices { get { return this.SpecialServicesOption; } set { this.SpecialServicesOption = new Option<List<SpecialService>>(value); } }

        /// <summary>
        /// Used to track the state of ShipmentOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShipmentOptions> ShipmentOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShipmentOptions
        /// </summary>
        [JsonPropertyName("shipmentOptions")]
        public ShipmentOptions ShipmentOptions { get { return this.ShipmentOptionsOption; } set { this.ShipmentOptionsOption = new Option<ShipmentOptions>(value); } }

        /// <summary>
        /// Used to track the state of CarrierPayments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CarrierPaymentsInner>> CarrierPaymentsOption { get; private set; }

        /// <summary>
        /// Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. 
        /// </summary>
        /// <value>Defines how carrier charges are billed to a third party. Use this field to specify  account and charge type details for transportation and/or duties and taxes. This  field is optional and currently supported for FedEx, UPS, and DHL Express.  - If no &#x60;party&#x60; (who will pay for TRANSPORTATION_CHARGES or duties and taxes) is explicitly specified during shipment creation, the charges will automatically default to the sender (shipper). To direct charges to a different party, the appropriate bill-to details must be provided in the request. </value>
        [JsonPropertyName("carrierPayments")]
        public List<CarrierPaymentsInner> CarrierPayments { get { return this.CarrierPaymentsOption; } set { this.CarrierPaymentsOption = new Option<List<CarrierPaymentsInner>>(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ShipmentDomesticMetadataInner>> MetadataOption { get; private set; }

        /// <summary>
        /// Additional metadata that needs to be stored for this shipment can be added here. For now, &#39;Cost Account Name&#39; is supported.
        /// </summary>
        /// <value>Additional metadata that needs to be stored for this shipment can be added here. For now, &#39;Cost Account Name&#39; is supported.</value>
        [JsonPropertyName("metadata")]
        public List<ShipmentDomesticMetadataInner> Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new Option<List<ShipmentDomesticMetadataInner>>(value); } }

        /// <summary>
        /// Used to track the state of SoldToAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SoldToAddress> SoldToAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets SoldToAddress
        /// </summary>
        [JsonPropertyName("soldToAddress")]
        public SoldToAddress SoldToAddress { get { return this.SoldToAddressOption; } set { this.SoldToAddressOption = new Option<SoldToAddress>(value); } }

        /// <summary>
        /// Used to track the state of Customs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MilitaryMailShipmentsCustoms> CustomsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Customs
        /// </summary>
        [JsonPropertyName("customs")]
        public MilitaryMailShipmentsCustoms Customs { get { return this.CustomsOption; } set { this.CustomsOption = new Option<MilitaryMailShipmentsCustoms>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MilitaryMailShipments {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  CarrierAccountId: ").Append(CarrierAccountId).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  DateOfShipment: ").Append(DateOfShipment).Append("\n");
            sb.Append("  SpecialServices: ").Append(SpecialServices).Append("\n");
            sb.Append("  ShipmentOptions: ").Append(ShipmentOptions).Append("\n");
            sb.Append("  CarrierPayments: ").Append(CarrierPayments).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  SoldToAddress: ").Append(SoldToAddress).Append("\n");
            sb.Append("  Customs: ").Append(Customs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MilitaryMailShipments" />
    /// </summary>
    public class MilitaryMailShipmentsJsonConverter : JsonConverter<MilitaryMailShipments>
    {
        /// <summary>
        /// The format to use to serialize DateOfShipment
        /// </summary>
        public static string DateOfShipmentFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="MilitaryMailShipments" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MilitaryMailShipments Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<MilitaryMailShipments.SizeEnum?> size = default;
            Option<MilitaryMailShipments.TypeEnum?> type = default;
            Option<MilitaryMailShipmentsFromAddress> fromAddress = default;
            Option<MilitaryMailShipmentsParcel> parcel = default;
            Option<string> carrierAccountId = default;
            Option<string> parcelType = default;
            Option<string> serviceId = default;
            Option<MilitaryMailShipmentsToAddress> toAddress = default;
            Option<MilitaryMailShipments.FormatEnum?> format = default;
            Option<MilitaryMailShipments.ContentTypeEnum?> contentType = default;
            Option<DateTime?> dateOfShipment = default;
            Option<List<SpecialService>> specialServices = default;
            Option<ShipmentOptions> shipmentOptions = default;
            Option<List<CarrierPaymentsInner>> carrierPayments = default;
            Option<List<ShipmentDomesticMetadataInner>> metadata = default;
            Option<SoldToAddress> soldToAddress = default;
            Option<MilitaryMailShipmentsCustoms> customs = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "size":
                            string sizeRawValue = utf8JsonReader.GetString();
                            if (sizeRawValue != null)
                                size = new Option<MilitaryMailShipments.SizeEnum?>(MilitaryMailShipments.SizeEnumFromStringOrDefault(sizeRawValue));
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<MilitaryMailShipments.TypeEnum?>(MilitaryMailShipments.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "fromAddress":
                            fromAddress = new Option<MilitaryMailShipmentsFromAddress>(JsonSerializer.Deserialize<MilitaryMailShipmentsFromAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "parcel":
                            parcel = new Option<MilitaryMailShipmentsParcel>(JsonSerializer.Deserialize<MilitaryMailShipmentsParcel>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "carrierAccountId":
                            carrierAccountId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "parcelType":
                            parcelType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "serviceId":
                            serviceId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "toAddress":
                            toAddress = new Option<MilitaryMailShipmentsToAddress>(JsonSerializer.Deserialize<MilitaryMailShipmentsToAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "format":
                            string formatRawValue = utf8JsonReader.GetString();
                            if (formatRawValue != null)
                                format = new Option<MilitaryMailShipments.FormatEnum?>(MilitaryMailShipments.FormatEnumFromStringOrDefault(formatRawValue));
                            break;
                        case "contentType":
                            string contentTypeRawValue = utf8JsonReader.GetString();
                            if (contentTypeRawValue != null)
                                contentType = new Option<MilitaryMailShipments.ContentTypeEnum?>(MilitaryMailShipments.ContentTypeEnumFromStringOrDefault(contentTypeRawValue));
                            break;
                        case "dateOfShipment":
                            dateOfShipment = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "specialServices":
                            specialServices = new Option<List<SpecialService>>(JsonSerializer.Deserialize<List<SpecialService>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "shipmentOptions":
                            shipmentOptions = new Option<ShipmentOptions>(JsonSerializer.Deserialize<ShipmentOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "carrierPayments":
                            carrierPayments = new Option<List<CarrierPaymentsInner>>(JsonSerializer.Deserialize<List<CarrierPaymentsInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metadata":
                            metadata = new Option<List<ShipmentDomesticMetadataInner>>(JsonSerializer.Deserialize<List<ShipmentDomesticMetadataInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "soldToAddress":
                            soldToAddress = new Option<SoldToAddress>(JsonSerializer.Deserialize<SoldToAddress>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "customs":
                            customs = new Option<MilitaryMailShipmentsCustoms>(JsonSerializer.Deserialize<MilitaryMailShipmentsCustoms>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!size.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipments.", nameof(size));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipments.", nameof(type));

            if (!fromAddress.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipments.", nameof(fromAddress));

            if (!parcel.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipments.", nameof(parcel));

            if (!carrierAccountId.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipments.", nameof(carrierAccountId));

            if (!parcelType.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipments.", nameof(parcelType));

            if (!serviceId.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipments.", nameof(serviceId));

            if (!toAddress.IsSet)
                throw new ArgumentException("Property is required for class MilitaryMailShipments.", nameof(toAddress));

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class MilitaryMailShipments.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class MilitaryMailShipments.");

            if (fromAddress.IsSet && fromAddress.Value == null)
                throw new ArgumentNullException(nameof(fromAddress), "Property is not nullable for class MilitaryMailShipments.");

            if (parcel.IsSet && parcel.Value == null)
                throw new ArgumentNullException(nameof(parcel), "Property is not nullable for class MilitaryMailShipments.");

            if (carrierAccountId.IsSet && carrierAccountId.Value == null)
                throw new ArgumentNullException(nameof(carrierAccountId), "Property is not nullable for class MilitaryMailShipments.");

            if (parcelType.IsSet && parcelType.Value == null)
                throw new ArgumentNullException(nameof(parcelType), "Property is not nullable for class MilitaryMailShipments.");

            if (serviceId.IsSet && serviceId.Value == null)
                throw new ArgumentNullException(nameof(serviceId), "Property is not nullable for class MilitaryMailShipments.");

            if (toAddress.IsSet && toAddress.Value == null)
                throw new ArgumentNullException(nameof(toAddress), "Property is not nullable for class MilitaryMailShipments.");

            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format), "Property is not nullable for class MilitaryMailShipments.");

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType), "Property is not nullable for class MilitaryMailShipments.");

            if (dateOfShipment.IsSet && dateOfShipment.Value == null)
                throw new ArgumentNullException(nameof(dateOfShipment), "Property is not nullable for class MilitaryMailShipments.");

            if (specialServices.IsSet && specialServices.Value == null)
                throw new ArgumentNullException(nameof(specialServices), "Property is not nullable for class MilitaryMailShipments.");

            if (shipmentOptions.IsSet && shipmentOptions.Value == null)
                throw new ArgumentNullException(nameof(shipmentOptions), "Property is not nullable for class MilitaryMailShipments.");

            if (carrierPayments.IsSet && carrierPayments.Value == null)
                throw new ArgumentNullException(nameof(carrierPayments), "Property is not nullable for class MilitaryMailShipments.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class MilitaryMailShipments.");

            if (soldToAddress.IsSet && soldToAddress.Value == null)
                throw new ArgumentNullException(nameof(soldToAddress), "Property is not nullable for class MilitaryMailShipments.");

            if (customs.IsSet && customs.Value == null)
                throw new ArgumentNullException(nameof(customs), "Property is not nullable for class MilitaryMailShipments.");

            return new MilitaryMailShipments(size.Value.Value, type.Value.Value, fromAddress.Value, parcel.Value, carrierAccountId.Value, parcelType.Value, serviceId.Value, toAddress.Value, format, contentType, dateOfShipment, specialServices, shipmentOptions, carrierPayments, metadata, soldToAddress, customs);
        }

        /// <summary>
        /// Serializes a <see cref="MilitaryMailShipments" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="militaryMailShipments"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MilitaryMailShipments militaryMailShipments, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, militaryMailShipments, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MilitaryMailShipments" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="militaryMailShipments"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MilitaryMailShipments militaryMailShipments, JsonSerializerOptions jsonSerializerOptions)
        {
            if (militaryMailShipments.FromAddress == null)
                throw new ArgumentNullException(nameof(militaryMailShipments.FromAddress), "Property is required for class MilitaryMailShipments.");

            if (militaryMailShipments.Parcel == null)
                throw new ArgumentNullException(nameof(militaryMailShipments.Parcel), "Property is required for class MilitaryMailShipments.");

            if (militaryMailShipments.CarrierAccountId == null)
                throw new ArgumentNullException(nameof(militaryMailShipments.CarrierAccountId), "Property is required for class MilitaryMailShipments.");

            if (militaryMailShipments.ParcelType == null)
                throw new ArgumentNullException(nameof(militaryMailShipments.ParcelType), "Property is required for class MilitaryMailShipments.");

            if (militaryMailShipments.ServiceId == null)
                throw new ArgumentNullException(nameof(militaryMailShipments.ServiceId), "Property is required for class MilitaryMailShipments.");

            if (militaryMailShipments.ToAddress == null)
                throw new ArgumentNullException(nameof(militaryMailShipments.ToAddress), "Property is required for class MilitaryMailShipments.");

            if (militaryMailShipments.SpecialServicesOption.IsSet && militaryMailShipments.SpecialServices == null)
                throw new ArgumentNullException(nameof(militaryMailShipments.SpecialServices), "Property is required for class MilitaryMailShipments.");

            if (militaryMailShipments.ShipmentOptionsOption.IsSet && militaryMailShipments.ShipmentOptions == null)
                throw new ArgumentNullException(nameof(militaryMailShipments.ShipmentOptions), "Property is required for class MilitaryMailShipments.");

            if (militaryMailShipments.CarrierPaymentsOption.IsSet && militaryMailShipments.CarrierPayments == null)
                throw new ArgumentNullException(nameof(militaryMailShipments.CarrierPayments), "Property is required for class MilitaryMailShipments.");

            if (militaryMailShipments.MetadataOption.IsSet && militaryMailShipments.Metadata == null)
                throw new ArgumentNullException(nameof(militaryMailShipments.Metadata), "Property is required for class MilitaryMailShipments.");

            if (militaryMailShipments.SoldToAddressOption.IsSet && militaryMailShipments.SoldToAddress == null)
                throw new ArgumentNullException(nameof(militaryMailShipments.SoldToAddress), "Property is required for class MilitaryMailShipments.");

            if (militaryMailShipments.CustomsOption.IsSet && militaryMailShipments.Customs == null)
                throw new ArgumentNullException(nameof(militaryMailShipments.Customs), "Property is required for class MilitaryMailShipments.");

            var sizeRawValue = MilitaryMailShipments.SizeEnumToJsonValue(militaryMailShipments.Size);
            writer.WriteString("size", sizeRawValue);
            var typeRawValue = MilitaryMailShipments.TypeEnumToJsonValue(militaryMailShipments.Type);
            writer.WriteString("type", typeRawValue);
            writer.WritePropertyName("fromAddress");
            JsonSerializer.Serialize(writer, militaryMailShipments.FromAddress, jsonSerializerOptions);
            writer.WritePropertyName("parcel");
            JsonSerializer.Serialize(writer, militaryMailShipments.Parcel, jsonSerializerOptions);
            writer.WriteString("carrierAccountId", militaryMailShipments.CarrierAccountId);

            writer.WriteString("parcelType", militaryMailShipments.ParcelType);

            writer.WriteString("serviceId", militaryMailShipments.ServiceId);

            writer.WritePropertyName("toAddress");
            JsonSerializer.Serialize(writer, militaryMailShipments.ToAddress, jsonSerializerOptions);
            var formatRawValue = MilitaryMailShipments.FormatEnumToJsonValue(militaryMailShipments.FormatOption.Value.Value);
            writer.WriteString("format", formatRawValue);
            var contentTypeRawValue = MilitaryMailShipments.ContentTypeEnumToJsonValue(militaryMailShipments.ContentTypeOption.Value.Value);
            writer.WriteString("contentType", contentTypeRawValue);
            if (militaryMailShipments.DateOfShipmentOption.IsSet)
                writer.WriteString("dateOfShipment", militaryMailShipments.DateOfShipmentOption.Value.Value.ToString(DateOfShipmentFormat));

            if (militaryMailShipments.SpecialServicesOption.IsSet)
            {
                writer.WritePropertyName("specialServices");
                JsonSerializer.Serialize(writer, militaryMailShipments.SpecialServices, jsonSerializerOptions);
            }
            if (militaryMailShipments.ShipmentOptionsOption.IsSet)
            {
                writer.WritePropertyName("shipmentOptions");
                JsonSerializer.Serialize(writer, militaryMailShipments.ShipmentOptions, jsonSerializerOptions);
            }
            if (militaryMailShipments.CarrierPaymentsOption.IsSet)
            {
                writer.WritePropertyName("carrierPayments");
                JsonSerializer.Serialize(writer, militaryMailShipments.CarrierPayments, jsonSerializerOptions);
            }
            if (militaryMailShipments.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, militaryMailShipments.Metadata, jsonSerializerOptions);
            }
            if (militaryMailShipments.SoldToAddressOption.IsSet)
            {
                writer.WritePropertyName("soldToAddress");
                JsonSerializer.Serialize(writer, militaryMailShipments.SoldToAddress, jsonSerializerOptions);
            }
            if (militaryMailShipments.CustomsOption.IsSet)
            {
                writer.WritePropertyName("customs");
                JsonSerializer.Serialize(writer, militaryMailShipments.Customs, jsonSerializerOptions);
            }
        }
    }
}
