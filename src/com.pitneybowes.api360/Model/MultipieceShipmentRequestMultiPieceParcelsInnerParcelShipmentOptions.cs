// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// Parcel-level references are supported for carrier FedEx as of now. These references override shipment-level values and will be printed on the specific parcel label where provided. &lt;br/&gt; If only shipment-level references are provided, these references will be printed on all parcel labels.  &lt;br/&gt; If only parcel-level references are provided, each parcel label will be printed with its own parcel-specific references. &lt;br/&gt; If both shipment-level and parcel-level references are provided, the parcel-level references take precedence and will be printed on the corresponding parcel labels. &lt;br/&gt; If shipment-level references are provided along with parcel-level references for some parcels, parcel-level references will be printed where provided; shipment-level references will be printed for the remaining parcels. 
    /// </summary>
    public partial class MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions" /> class.
        /// </summary>
        /// <param name="printCustomMessage">Custom message to be printed on the specific parcel label.</param>
        /// <param name="printDepartment">Department name to be printed on the specific parcel label.</param>
        /// <param name="printInvoiceNumber">Invoice number to be printed on the specific parcel label.</param>
        /// <param name="printPONumber">Purchase order number to be printed on the specific parcel label.</param>
        [JsonConstructor]
        public MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions(Option<string?> printCustomMessage = default, Option<string?> printDepartment = default, Option<string?> printInvoiceNumber = default, Option<string?> printPONumber = default)
        {
            PrintCustomMessageOption = printCustomMessage;
            PrintDepartmentOption = printDepartment;
            PrintInvoiceNumberOption = printInvoiceNumber;
            PrintPONumberOption = printPONumber;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PrintCustomMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrintCustomMessageOption { get; private set; }

        /// <summary>
        /// Custom message to be printed on the specific parcel label.
        /// </summary>
        /// <value>Custom message to be printed on the specific parcel label.</value>
        /* <example>Handle with care - Parcel 1</example> */
        [JsonPropertyName("printCustomMessage")]
        public string? PrintCustomMessage { get { return this.PrintCustomMessageOption; } set { this.PrintCustomMessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrintDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrintDepartmentOption { get; private set; }

        /// <summary>
        /// Department name to be printed on the specific parcel label.
        /// </summary>
        /// <value>Department name to be printed on the specific parcel label.</value>
        /* <example>Dept-A1</example> */
        [JsonPropertyName("printDepartment")]
        public string? PrintDepartment { get { return this.PrintDepartmentOption; } set { this.PrintDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrintInvoiceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrintInvoiceNumberOption { get; private set; }

        /// <summary>
        /// Invoice number to be printed on the specific parcel label.
        /// </summary>
        /// <value>Invoice number to be printed on the specific parcel label.</value>
        /* <example>INV-1001</example> */
        [JsonPropertyName("printInvoiceNumber")]
        public string? PrintInvoiceNumber { get { return this.PrintInvoiceNumberOption; } set { this.PrintInvoiceNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrintPONumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrintPONumberOption { get; private set; }

        /// <summary>
        /// Purchase order number to be printed on the specific parcel label.
        /// </summary>
        /// <value>Purchase order number to be printed on the specific parcel label.</value>
        /* <example>PO-2001</example> */
        [JsonPropertyName("printPONumber")]
        public string? PrintPONumber { get { return this.PrintPONumberOption; } set { this.PrintPONumberOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions {\n");
            sb.Append("  PrintCustomMessage: ").Append(PrintCustomMessage).Append("\n");
            sb.Append("  PrintDepartment: ").Append(PrintDepartment).Append("\n");
            sb.Append("  PrintInvoiceNumber: ").Append(PrintInvoiceNumber).Append("\n");
            sb.Append("  PrintPONumber: ").Append(PrintPONumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions" />
    /// </summary>
    public class MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptionsJsonConverter : JsonConverter<MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> printCustomMessage = default;
            Option<string?> printDepartment = default;
            Option<string?> printInvoiceNumber = default;
            Option<string?> printPONumber = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "printCustomMessage":
                            printCustomMessage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "printDepartment":
                            printDepartment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "printInvoiceNumber":
                            printInvoiceNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "printPONumber":
                            printPONumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (printCustomMessage.IsSet && printCustomMessage.Value == null)
                throw new ArgumentNullException(nameof(printCustomMessage), "Property is not nullable for class MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.");

            if (printDepartment.IsSet && printDepartment.Value == null)
                throw new ArgumentNullException(nameof(printDepartment), "Property is not nullable for class MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.");

            if (printInvoiceNumber.IsSet && printInvoiceNumber.Value == null)
                throw new ArgumentNullException(nameof(printInvoiceNumber), "Property is not nullable for class MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.");

            if (printPONumber.IsSet && printPONumber.Value == null)
                throw new ArgumentNullException(nameof(printPONumber), "Property is not nullable for class MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.");

            return new MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions(printCustomMessage, printDepartment, printInvoiceNumber, printPONumber);
        }

        /// <summary>
        /// Serializes a <see cref="MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintCustomMessageOption.IsSet && multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintCustomMessage == null)
                throw new ArgumentNullException(nameof(multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintCustomMessage), "Property is required for class MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.");

            if (multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintDepartmentOption.IsSet && multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintDepartment == null)
                throw new ArgumentNullException(nameof(multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintDepartment), "Property is required for class MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.");

            if (multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintInvoiceNumberOption.IsSet && multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintInvoiceNumber == null)
                throw new ArgumentNullException(nameof(multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintInvoiceNumber), "Property is required for class MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.");

            if (multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintPONumberOption.IsSet && multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintPONumber == null)
                throw new ArgumentNullException(nameof(multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintPONumber), "Property is required for class MultipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.");

            if (multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintCustomMessageOption.IsSet)
                writer.WriteString("printCustomMessage", multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintCustomMessage);

            if (multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintDepartmentOption.IsSet)
                writer.WriteString("printDepartment", multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintDepartment);

            if (multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintInvoiceNumberOption.IsSet)
                writer.WriteString("printInvoiceNumber", multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintInvoiceNumber);

            if (multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintPONumberOption.IsSet)
                writer.WriteString("printPONumber", multipieceShipmentRequestMultiPieceParcelsInnerParcelShipmentOptions.PrintPONumber);
        }
    }
}
