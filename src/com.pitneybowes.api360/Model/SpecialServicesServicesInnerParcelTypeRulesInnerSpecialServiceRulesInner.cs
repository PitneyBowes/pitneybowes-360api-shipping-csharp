// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner
    /// </summary>
    public partial class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner" /> class.
        /// </summary>
        /// <param name="specialserviceId">It display the unique id of the special service</param>
        /// <param name="brandedName">The brand name of the special service.</param>
        /// <param name="categoryId">The unique identifier associated with the special service based on the category.</param>
        /// <param name="categoryName">The special service is categorized with some name and rules, It indicates the category name of the special service.</param>
        /// <param name="incompatibleSpecialServices">Indicates non-compatible special services with this special service</param>
        /// <param name="inputParameterRules">The rules defined for input parameters for this special service</param>
        /// <param name="prerequisiteRules">It displays other pre-requisite special services for this special service</param>
        /// <param name="trackable">If this special service is trackable or not</param>
        [JsonConstructor]
        public SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner(Option<string?> specialserviceId = default, Option<string?> brandedName = default, Option<string?> categoryId = default, Option<string?> categoryName = default, Option<List<string>?> incompatibleSpecialServices = default, Option<List<SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerInputParameterRulesInner>?> inputParameterRules = default, Option<List<SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerPrerequisiteRulesInner>?> prerequisiteRules = default, Option<bool?> trackable = default)
        {
            SpecialserviceIdOption = specialserviceId;
            BrandedNameOption = brandedName;
            CategoryIdOption = categoryId;
            CategoryNameOption = categoryName;
            IncompatibleSpecialServicesOption = incompatibleSpecialServices;
            InputParameterRulesOption = inputParameterRules;
            PrerequisiteRulesOption = prerequisiteRules;
            TrackableOption = trackable;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SpecialserviceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SpecialserviceIdOption { get; private set; }

        /// <summary>
        /// It display the unique id of the special service
        /// </summary>
        /// <value>It display the unique id of the special service</value>
        /* <example>COD</example> */
        [JsonPropertyName("specialserviceId")]
        public string? SpecialserviceId { get { return this.SpecialserviceIdOption; } set { this.SpecialserviceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BrandedName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BrandedNameOption { get; private set; }

        /// <summary>
        /// The brand name of the special service.
        /// </summary>
        /// <value>The brand name of the special service.</value>
        /* <example>Collect on Delivery</example> */
        [JsonPropertyName("brandedName")]
        public string? BrandedName { get { return this.BrandedNameOption; } set { this.BrandedNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CategoryId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryIdOption { get; private set; }

        /// <summary>
        /// The unique identifier associated with the special service based on the category.
        /// </summary>
        /// <value>The unique identifier associated with the special service based on the category.</value>
        /* <example>COD</example> */
        [JsonPropertyName("categoryId")]
        public string? CategoryId { get { return this.CategoryIdOption; } set { this.CategoryIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CategoryName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryNameOption { get; private set; }

        /// <summary>
        /// The special service is categorized with some name and rules, It indicates the category name of the special service.
        /// </summary>
        /// <value>The special service is categorized with some name and rules, It indicates the category name of the special service.</value>
        /* <example>Collect on Delivery</example> */
        [JsonPropertyName("categoryName")]
        public string? CategoryName { get { return this.CategoryNameOption; } set { this.CategoryNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncompatibleSpecialServices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> IncompatibleSpecialServicesOption { get; private set; }

        /// <summary>
        /// Indicates non-compatible special services with this special service
        /// </summary>
        /// <value>Indicates non-compatible special services with this special service</value>
        /* <example>[&quot;CODRD&quot;,&quot;Ins&quot;,&quot;InsRD&quot;,&quot;SigRD&quot;]</example> */
        [JsonPropertyName("incompatibleSpecialServices")]
        public List<string>? IncompatibleSpecialServices { get { return this.IncompatibleSpecialServicesOption; } set { this.IncompatibleSpecialServicesOption = new(value); } }

        /// <summary>
        /// Used to track the state of InputParameterRules
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerInputParameterRulesInner>?> InputParameterRulesOption { get; private set; }

        /// <summary>
        /// The rules defined for input parameters for this special service
        /// </summary>
        /// <value>The rules defined for input parameters for this special service</value>
        /* <example>[{&quot;brandedName&quot;:&quot;COD Amount&quot;,&quot;maxValue&quot;:1000,&quot;minValue&quot;:1,&quot;name&quot;:&quot;INPUT_VALUE&quot;,&quot;required&quot;:true}]</example> */
        [JsonPropertyName("inputParameterRules")]
        public List<SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerInputParameterRulesInner>? InputParameterRules { get { return this.InputParameterRulesOption; } set { this.InputParameterRulesOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrerequisiteRules
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerPrerequisiteRulesInner>?> PrerequisiteRulesOption { get; private set; }

        /// <summary>
        /// It displays other pre-requisite special services for this special service
        /// </summary>
        /// <value>It displays other pre-requisite special services for this special service</value>
        /* <example>[{&quot;specialserviceId&quot;:&quot;COD&quot;},{&quot;specialserviceId&quot;:&quot;CODRD&quot;}]</example> */
        [JsonPropertyName("prerequisiteRules")]
        public List<SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerPrerequisiteRulesInner>? PrerequisiteRules { get { return this.PrerequisiteRulesOption; } set { this.PrerequisiteRulesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Trackable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TrackableOption { get; private set; }

        /// <summary>
        /// If this special service is trackable or not
        /// </summary>
        /// <value>If this special service is trackable or not</value>
        /* <example>true</example> */
        [JsonPropertyName("trackable")]
        public bool? Trackable { get { return this.TrackableOption; } set { this.TrackableOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner {\n");
            sb.Append("  SpecialserviceId: ").Append(SpecialserviceId).Append("\n");
            sb.Append("  BrandedName: ").Append(BrandedName).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  IncompatibleSpecialServices: ").Append(IncompatibleSpecialServices).Append("\n");
            sb.Append("  InputParameterRules: ").Append(InputParameterRules).Append("\n");
            sb.Append("  PrerequisiteRules: ").Append(PrerequisiteRules).Append("\n");
            sb.Append("  Trackable: ").Append(Trackable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner" />
    /// </summary>
    public class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerJsonConverter : JsonConverter<SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> specialserviceId = default;
            Option<string?> brandedName = default;
            Option<string?> categoryId = default;
            Option<string?> categoryName = default;
            Option<List<string>?> incompatibleSpecialServices = default;
            Option<List<SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerInputParameterRulesInner>?> inputParameterRules = default;
            Option<List<SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerPrerequisiteRulesInner>?> prerequisiteRules = default;
            Option<bool?> trackable = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "specialserviceId":
                            specialserviceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "brandedName":
                            brandedName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "categoryId":
                            categoryId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "categoryName":
                            categoryName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "incompatibleSpecialServices":
                            incompatibleSpecialServices = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "inputParameterRules":
                            inputParameterRules = new Option<List<SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerInputParameterRulesInner>?>(JsonSerializer.Deserialize<List<SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerInputParameterRulesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "prerequisiteRules":
                            prerequisiteRules = new Option<List<SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerPrerequisiteRulesInner>?>(JsonSerializer.Deserialize<List<SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInnerPrerequisiteRulesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "trackable":
                            trackable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (specialserviceId.IsSet && specialserviceId.Value == null)
                throw new ArgumentNullException(nameof(specialserviceId), "Property is not nullable for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (brandedName.IsSet && brandedName.Value == null)
                throw new ArgumentNullException(nameof(brandedName), "Property is not nullable for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (categoryId.IsSet && categoryId.Value == null)
                throw new ArgumentNullException(nameof(categoryId), "Property is not nullable for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (categoryName.IsSet && categoryName.Value == null)
                throw new ArgumentNullException(nameof(categoryName), "Property is not nullable for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (incompatibleSpecialServices.IsSet && incompatibleSpecialServices.Value == null)
                throw new ArgumentNullException(nameof(incompatibleSpecialServices), "Property is not nullable for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (inputParameterRules.IsSet && inputParameterRules.Value == null)
                throw new ArgumentNullException(nameof(inputParameterRules), "Property is not nullable for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (prerequisiteRules.IsSet && prerequisiteRules.Value == null)
                throw new ArgumentNullException(nameof(prerequisiteRules), "Property is not nullable for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (trackable.IsSet && trackable.Value == null)
                throw new ArgumentNullException(nameof(trackable), "Property is not nullable for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            return new SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner(specialserviceId, brandedName, categoryId, categoryName, incompatibleSpecialServices, inputParameterRules, prerequisiteRules, trackable);
        }

        /// <summary>
        /// Serializes a <see cref="SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.SpecialserviceIdOption.IsSet && specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.SpecialserviceId == null)
                throw new ArgumentNullException(nameof(specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.SpecialserviceId), "Property is required for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.BrandedNameOption.IsSet && specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.BrandedName == null)
                throw new ArgumentNullException(nameof(specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.BrandedName), "Property is required for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.CategoryIdOption.IsSet && specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.CategoryId == null)
                throw new ArgumentNullException(nameof(specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.CategoryId), "Property is required for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.CategoryNameOption.IsSet && specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.CategoryName == null)
                throw new ArgumentNullException(nameof(specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.CategoryName), "Property is required for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.IncompatibleSpecialServicesOption.IsSet && specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.IncompatibleSpecialServices == null)
                throw new ArgumentNullException(nameof(specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.IncompatibleSpecialServices), "Property is required for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.InputParameterRulesOption.IsSet && specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.InputParameterRules == null)
                throw new ArgumentNullException(nameof(specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.InputParameterRules), "Property is required for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.PrerequisiteRulesOption.IsSet && specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.PrerequisiteRules == null)
                throw new ArgumentNullException(nameof(specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.PrerequisiteRules), "Property is required for class SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.");

            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.SpecialserviceIdOption.IsSet)
                writer.WriteString("specialserviceId", specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.SpecialserviceId);

            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.BrandedNameOption.IsSet)
                writer.WriteString("brandedName", specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.BrandedName);

            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.CategoryIdOption.IsSet)
                writer.WriteString("categoryId", specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.CategoryId);

            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.CategoryNameOption.IsSet)
                writer.WriteString("categoryName", specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.CategoryName);

            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.IncompatibleSpecialServicesOption.IsSet)
            {
                writer.WritePropertyName("incompatibleSpecialServices");
                JsonSerializer.Serialize(writer, specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.IncompatibleSpecialServices, jsonSerializerOptions);
            }
            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.InputParameterRulesOption.IsSet)
            {
                writer.WritePropertyName("inputParameterRules");
                JsonSerializer.Serialize(writer, specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.InputParameterRules, jsonSerializerOptions);
            }
            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.PrerequisiteRulesOption.IsSet)
            {
                writer.WritePropertyName("prerequisiteRules");
                JsonSerializer.Serialize(writer, specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.PrerequisiteRules, jsonSerializerOptions);
            }
            if (specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.TrackableOption.IsSet)
                writer.WriteBoolean("trackable", specialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner.TrackableOption.Value!.Value);
        }
    }
}
