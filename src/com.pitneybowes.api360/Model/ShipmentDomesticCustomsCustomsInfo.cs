// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// This is additional customs information required along with item details.
    /// </summary>
    public partial class ShipmentDomesticCustomsCustomsInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDomesticCustomsCustomsInfo" /> class.
        /// </summary>
        /// <param name="reasonForExport">The reason the commodity is being exported.</param>
        /// <param name="customsDeclaredValue">Item value in mentioned currencyCode</param>
        /// <param name="currencyCode">The currency used for declared value. Use three uppercase letters, per ISO 4217</param>
        /// <param name="eELPFC">A number provided by the Automated Export System (AES). &lt;br/&gt; Required if the item is more than $2,500 USD, per Schedule B export codes. &lt;br/&gt; Required if EELPFC  is AES ITN. - AES ITN is a unique transaction number generated by the Automated Export System (AES) when export data is filed for international shipments from the U.S. - The ITN format is AES XYYYYMMDDNNNNNN, where X indicates the type, YYYYMMDD is the filing date, and NNNNNN is a 6-digit number. Example: &#x60;AES X20250327123456&#x60; - If the ITN is not available, an exemption format may be used: AESDOWN [Filer ID] [mm/dd/yyyy]. Example: &#x60;AESDOWN 12345678912 03/27/2025&#x60; </param>
        /// <param name="certificateNumber">The certificate number associated with the commodity</param>
        /// <param name="comments">Free-form comments regarding the exported shipment.</param>
        /// <param name="fromCustomsReference">Free-form reference information provided by the requestor of the shipment. Depending on the carrier this information may or may not be rendered on the customs documents.</param>
        /// <param name="importerCustomsReference">A reference number used by the importer, such as a VAT number, PO number, or insured number.</param>
        /// <param name="invoiceNumber">The commercial invoice number assigned by the exporter.</param>
        /// <param name="licenseNumber">The export license number associated with the commodity.</param>
        /// <param name="sdrValue">When an international parcel is insured, the insured value must be expressed in Special Drawing Rights values.</param>
        /// <param name="termsOfSale">Defines the delivery and payment terms between the shipper and recipient.Currenty supported by carriers - UPS, FedEx and DHL. - Common values include:   - CIP: Carriage and Insurance Paid to   - CPT: Carriage Paid To   - DAP: Delivered at Place   - DAT: Delivered at Terminal   - DDP: Delivered Duty Paid   - EXW: Ex Works   - FCA: Free Carrier </param>
        [JsonConstructor]
        public ShipmentDomesticCustomsCustomsInfo(ReasonForExportEnum reasonForExport, decimal customsDeclaredValue, string currencyCode, Option<string?> eELPFC = default, Option<string?> certificateNumber = default, Option<string?> comments = default, Option<string?> fromCustomsReference = default, Option<string?> importerCustomsReference = default, Option<string?> invoiceNumber = default, Option<string?> licenseNumber = default, Option<decimal?> sdrValue = default, Option<TermsOfSaleEnum?> termsOfSale = default)
        {
            ReasonForExport = reasonForExport;
            CustomsDeclaredValue = customsDeclaredValue;
            CurrencyCode = currencyCode;
            EELPFCOption = eELPFC;
            CertificateNumberOption = certificateNumber;
            CommentsOption = comments;
            FromCustomsReferenceOption = fromCustomsReference;
            ImporterCustomsReferenceOption = importerCustomsReference;
            InvoiceNumberOption = invoiceNumber;
            LicenseNumberOption = licenseNumber;
            SdrValueOption = sdrValue;
            TermsOfSaleOption = termsOfSale;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The reason the commodity is being exported.
        /// </summary>
        /// <value>The reason the commodity is being exported.</value>
        public enum ReasonForExportEnum
        {
            /// <summary>
            /// Enum GIFT for value: GIFT
            /// </summary>
            GIFT = 1,

            /// <summary>
            /// Enum COMMERCIALSAMPLE for value: COMMERCIAL_SAMPLE
            /// </summary>
            COMMERCIALSAMPLE = 2,

            /// <summary>
            /// Enum MERCHANDISE for value: MERCHANDISE
            /// </summary>
            MERCHANDISE = 3,

            /// <summary>
            /// Enum DOCUMENTS for value: DOCUMENTS
            /// </summary>
            DOCUMENTS = 4,

            /// <summary>
            /// Enum RETURNEDGOODS for value: RETURNED_GOODS
            /// </summary>
            RETURNEDGOODS = 5,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            OTHER = 6
        }

        /// <summary>
        /// Returns a <see cref="ReasonForExportEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ReasonForExportEnum ReasonForExportEnumFromString(string value)
        {
            if (value.Equals("GIFT"))
                return ReasonForExportEnum.GIFT;

            if (value.Equals("COMMERCIAL_SAMPLE"))
                return ReasonForExportEnum.COMMERCIALSAMPLE;

            if (value.Equals("MERCHANDISE"))
                return ReasonForExportEnum.MERCHANDISE;

            if (value.Equals("DOCUMENTS"))
                return ReasonForExportEnum.DOCUMENTS;

            if (value.Equals("RETURNED_GOODS"))
                return ReasonForExportEnum.RETURNEDGOODS;

            if (value.Equals("OTHER"))
                return ReasonForExportEnum.OTHER;

            throw new NotImplementedException($"Could not convert value to type ReasonForExportEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ReasonForExportEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReasonForExportEnum? ReasonForExportEnumFromStringOrDefault(string value)
        {
            if (value.Equals("GIFT"))
                return ReasonForExportEnum.GIFT;

            if (value.Equals("COMMERCIAL_SAMPLE"))
                return ReasonForExportEnum.COMMERCIALSAMPLE;

            if (value.Equals("MERCHANDISE"))
                return ReasonForExportEnum.MERCHANDISE;

            if (value.Equals("DOCUMENTS"))
                return ReasonForExportEnum.DOCUMENTS;

            if (value.Equals("RETURNED_GOODS"))
                return ReasonForExportEnum.RETURNEDGOODS;

            if (value.Equals("OTHER"))
                return ReasonForExportEnum.OTHER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ReasonForExportEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ReasonForExportEnumToJsonValue(ReasonForExportEnum value)
        {
            if (value == ReasonForExportEnum.GIFT)
                return "GIFT";

            if (value == ReasonForExportEnum.COMMERCIALSAMPLE)
                return "COMMERCIAL_SAMPLE";

            if (value == ReasonForExportEnum.MERCHANDISE)
                return "MERCHANDISE";

            if (value == ReasonForExportEnum.DOCUMENTS)
                return "DOCUMENTS";

            if (value == ReasonForExportEnum.RETURNEDGOODS)
                return "RETURNED_GOODS";

            if (value == ReasonForExportEnum.OTHER)
                return "OTHER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The reason the commodity is being exported.
        /// </summary>
        /// <value>The reason the commodity is being exported.</value>
        /* <example>GIFT</example> */
        [JsonPropertyName("reasonForExport")]
        public ReasonForExportEnum ReasonForExport { get; set; }

        /// <summary>
        /// Defines the delivery and payment terms between the shipper and recipient.Currenty supported by carriers - UPS, FedEx and DHL. - Common values include:   - CIP: Carriage and Insurance Paid to   - CPT: Carriage Paid To   - DAP: Delivered at Place   - DAT: Delivered at Terminal   - DDP: Delivered Duty Paid   - EXW: Ex Works   - FCA: Free Carrier 
        /// </summary>
        /// <value>Defines the delivery and payment terms between the shipper and recipient.Currenty supported by carriers - UPS, FedEx and DHL. - Common values include:   - CIP: Carriage and Insurance Paid to   - CPT: Carriage Paid To   - DAP: Delivered at Place   - DAT: Delivered at Terminal   - DDP: Delivered Duty Paid   - EXW: Ex Works   - FCA: Free Carrier </value>
        public enum TermsOfSaleEnum
        {
            /// <summary>
            /// Enum CIP for value: CIP
            /// </summary>
            CIP = 1,

            /// <summary>
            /// Enum CPT for value: CPT
            /// </summary>
            CPT = 2,

            /// <summary>
            /// Enum DAP for value: DAP
            /// </summary>
            DAP = 3,

            /// <summary>
            /// Enum DAT for value: DAT
            /// </summary>
            DAT = 4,

            /// <summary>
            /// Enum DDP for value: DDP
            /// </summary>
            DDP = 5,

            /// <summary>
            /// Enum EXW for value: EXW
            /// </summary>
            EXW = 6,

            /// <summary>
            /// Enum FCA for value: FCA
            /// </summary>
            FCA = 7
        }

        /// <summary>
        /// Returns a <see cref="TermsOfSaleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TermsOfSaleEnum TermsOfSaleEnumFromString(string value)
        {
            if (value.Equals("CIP"))
                return TermsOfSaleEnum.CIP;

            if (value.Equals("CPT"))
                return TermsOfSaleEnum.CPT;

            if (value.Equals("DAP"))
                return TermsOfSaleEnum.DAP;

            if (value.Equals("DAT"))
                return TermsOfSaleEnum.DAT;

            if (value.Equals("DDP"))
                return TermsOfSaleEnum.DDP;

            if (value.Equals("EXW"))
                return TermsOfSaleEnum.EXW;

            if (value.Equals("FCA"))
                return TermsOfSaleEnum.FCA;

            throw new NotImplementedException($"Could not convert value to type TermsOfSaleEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TermsOfSaleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TermsOfSaleEnum? TermsOfSaleEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CIP"))
                return TermsOfSaleEnum.CIP;

            if (value.Equals("CPT"))
                return TermsOfSaleEnum.CPT;

            if (value.Equals("DAP"))
                return TermsOfSaleEnum.DAP;

            if (value.Equals("DAT"))
                return TermsOfSaleEnum.DAT;

            if (value.Equals("DDP"))
                return TermsOfSaleEnum.DDP;

            if (value.Equals("EXW"))
                return TermsOfSaleEnum.EXW;

            if (value.Equals("FCA"))
                return TermsOfSaleEnum.FCA;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TermsOfSaleEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TermsOfSaleEnumToJsonValue(TermsOfSaleEnum? value)
        {
            if (value == TermsOfSaleEnum.CIP)
                return "CIP";

            if (value == TermsOfSaleEnum.CPT)
                return "CPT";

            if (value == TermsOfSaleEnum.DAP)
                return "DAP";

            if (value == TermsOfSaleEnum.DAT)
                return "DAT";

            if (value == TermsOfSaleEnum.DDP)
                return "DDP";

            if (value == TermsOfSaleEnum.EXW)
                return "EXW";

            if (value == TermsOfSaleEnum.FCA)
                return "FCA";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of TermsOfSale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TermsOfSaleEnum?> TermsOfSaleOption { get; private set; }

        /// <summary>
        /// Defines the delivery and payment terms between the shipper and recipient.Currenty supported by carriers - UPS, FedEx and DHL. - Common values include:   - CIP: Carriage and Insurance Paid to   - CPT: Carriage Paid To   - DAP: Delivered at Place   - DAT: Delivered at Terminal   - DDP: Delivered Duty Paid   - EXW: Ex Works   - FCA: Free Carrier 
        /// </summary>
        /// <value>Defines the delivery and payment terms between the shipper and recipient.Currenty supported by carriers - UPS, FedEx and DHL. - Common values include:   - CIP: Carriage and Insurance Paid to   - CPT: Carriage Paid To   - DAP: Delivered at Place   - DAT: Delivered at Terminal   - DDP: Delivered Duty Paid   - EXW: Ex Works   - FCA: Free Carrier </value>
        /* <example>DDU</example> */
        [JsonPropertyName("termsOfSale")]
        public TermsOfSaleEnum? TermsOfSale { get { return this.TermsOfSaleOption; } set { this.TermsOfSaleOption = new(value); } }

        /// <summary>
        /// Item value in mentioned currencyCode
        /// </summary>
        /// <value>Item value in mentioned currencyCode</value>
        /* <example>10</example> */
        [JsonPropertyName("customsDeclaredValue")]
        public decimal CustomsDeclaredValue { get; set; }

        /// <summary>
        /// The currency used for declared value. Use three uppercase letters, per ISO 4217
        /// </summary>
        /// <value>The currency used for declared value. Use three uppercase letters, per ISO 4217</value>
        /* <example>USD</example> */
        [JsonPropertyName("currencyCode")]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Used to track the state of EELPFC
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EELPFCOption { get; private set; }

        /// <summary>
        /// A number provided by the Automated Export System (AES). &lt;br/&gt; Required if the item is more than $2,500 USD, per Schedule B export codes. &lt;br/&gt; Required if EELPFC  is AES ITN. - AES ITN is a unique transaction number generated by the Automated Export System (AES) when export data is filed for international shipments from the U.S. - The ITN format is AES XYYYYMMDDNNNNNN, where X indicates the type, YYYYMMDD is the filing date, and NNNNNN is a 6-digit number. Example: &#x60;AES X20250327123456&#x60; - If the ITN is not available, an exemption format may be used: AESDOWN [Filer ID] [mm/dd/yyyy]. Example: &#x60;AESDOWN 12345678912 03/27/2025&#x60; 
        /// </summary>
        /// <value>A number provided by the Automated Export System (AES). &lt;br/&gt; Required if the item is more than $2,500 USD, per Schedule B export codes. &lt;br/&gt; Required if EELPFC  is AES ITN. - AES ITN is a unique transaction number generated by the Automated Export System (AES) when export data is filed for international shipments from the U.S. - The ITN format is AES XYYYYMMDDNNNNNN, where X indicates the type, YYYYMMDD is the filing date, and NNNNNN is a 6-digit number. Example: &#x60;AES X20250327123456&#x60; - If the ITN is not available, an exemption format may be used: AESDOWN [Filer ID] [mm/dd/yyyy]. Example: &#x60;AESDOWN 12345678912 03/27/2025&#x60; </value>
        /* <example>NOEEI 30.2D2</example> */
        [JsonPropertyName("EELPFC")]
        public string? EELPFC { get { return this.EELPFCOption; } set { this.EELPFCOption = new(value); } }

        /// <summary>
        /// Used to track the state of CertificateNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CertificateNumberOption { get; private set; }

        /// <summary>
        /// The certificate number associated with the commodity
        /// </summary>
        /// <value>The certificate number associated with the commodity</value>
        /* <example>123456</example> */
        [JsonPropertyName("certificateNumber")]
        public string? CertificateNumber { get { return this.CertificateNumberOption; } set { this.CertificateNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentsOption { get; private set; }

        /// <summary>
        /// Free-form comments regarding the exported shipment.
        /// </summary>
        /// <value>Free-form comments regarding the exported shipment.</value>
        /* <example>This is a sample comment</example> */
        [JsonPropertyName("comments")]
        public string? Comments { get { return this.CommentsOption; } set { this.CommentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of FromCustomsReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FromCustomsReferenceOption { get; private set; }

        /// <summary>
        /// Free-form reference information provided by the requestor of the shipment. Depending on the carrier this information may or may not be rendered on the customs documents.
        /// </summary>
        /// <value>Free-form reference information provided by the requestor of the shipment. Depending on the carrier this information may or may not be rendered on the customs documents.</value>
        /* <example>EFEFE4554545</example> */
        [JsonPropertyName("fromCustomsReference")]
        public string? FromCustomsReference { get { return this.FromCustomsReferenceOption; } set { this.FromCustomsReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ImporterCustomsReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ImporterCustomsReferenceOption { get; private set; }

        /// <summary>
        /// A reference number used by the importer, such as a VAT number, PO number, or insured number.
        /// </summary>
        /// <value>A reference number used by the importer, such as a VAT number, PO number, or insured number.</value>
        /* <example>dff3433</example> */
        [JsonPropertyName("importerCustomsReference")]
        public string? ImporterCustomsReference { get { return this.ImporterCustomsReferenceOption; } set { this.ImporterCustomsReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of InvoiceNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InvoiceNumberOption { get; private set; }

        /// <summary>
        /// The commercial invoice number assigned by the exporter.
        /// </summary>
        /// <value>The commercial invoice number assigned by the exporter.</value>
        /* <example>123456</example> */
        [JsonPropertyName("invoiceNumber")]
        public string? InvoiceNumber { get { return this.InvoiceNumberOption; } set { this.InvoiceNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of LicenseNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LicenseNumberOption { get; private set; }

        /// <summary>
        /// The export license number associated with the commodity.
        /// </summary>
        /// <value>The export license number associated with the commodity.</value>
        /* <example>123456</example> */
        [JsonPropertyName("licenseNumber")]
        public string? LicenseNumber { get { return this.LicenseNumberOption; } set { this.LicenseNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of SdrValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> SdrValueOption { get; private set; }

        /// <summary>
        /// When an international parcel is insured, the insured value must be expressed in Special Drawing Rights values.
        /// </summary>
        /// <value>When an international parcel is insured, the insured value must be expressed in Special Drawing Rights values.</value>
        /* <example>10</example> */
        [JsonPropertyName("sdrValue")]
        public decimal? SdrValue { get { return this.SdrValueOption; } set { this.SdrValueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentDomesticCustomsCustomsInfo {\n");
            sb.Append("  ReasonForExport: ").Append(ReasonForExport).Append("\n");
            sb.Append("  CustomsDeclaredValue: ").Append(CustomsDeclaredValue).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  EELPFC: ").Append(EELPFC).Append("\n");
            sb.Append("  CertificateNumber: ").Append(CertificateNumber).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  FromCustomsReference: ").Append(FromCustomsReference).Append("\n");
            sb.Append("  ImporterCustomsReference: ").Append(ImporterCustomsReference).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  LicenseNumber: ").Append(LicenseNumber).Append("\n");
            sb.Append("  SdrValue: ").Append(SdrValue).Append("\n");
            sb.Append("  TermsOfSale: ").Append(TermsOfSale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShipmentDomesticCustomsCustomsInfo" />
    /// </summary>
    public class ShipmentDomesticCustomsCustomsInfoJsonConverter : JsonConverter<ShipmentDomesticCustomsCustomsInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShipmentDomesticCustomsCustomsInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShipmentDomesticCustomsCustomsInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ShipmentDomesticCustomsCustomsInfo.ReasonForExportEnum?> reasonForExport = default;
            Option<decimal?> customsDeclaredValue = default;
            Option<string?> currencyCode = default;
            Option<string?> eELPFC = default;
            Option<string?> certificateNumber = default;
            Option<string?> comments = default;
            Option<string?> fromCustomsReference = default;
            Option<string?> importerCustomsReference = default;
            Option<string?> invoiceNumber = default;
            Option<string?> licenseNumber = default;
            Option<decimal?> sdrValue = default;
            Option<ShipmentDomesticCustomsCustomsInfo.TermsOfSaleEnum?> termsOfSale = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "reasonForExport":
                            string? reasonForExportRawValue = utf8JsonReader.GetString();
                            if (reasonForExportRawValue != null)
                                reasonForExport = new Option<ShipmentDomesticCustomsCustomsInfo.ReasonForExportEnum?>(ShipmentDomesticCustomsCustomsInfo.ReasonForExportEnumFromStringOrDefault(reasonForExportRawValue));
                            break;
                        case "customsDeclaredValue":
                            customsDeclaredValue = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "currencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "EELPFC":
                            eELPFC = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "certificateNumber":
                            certificateNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "comments":
                            comments = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fromCustomsReference":
                            fromCustomsReference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "importerCustomsReference":
                            importerCustomsReference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "invoiceNumber":
                            invoiceNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "licenseNumber":
                            licenseNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sdrValue":
                            sdrValue = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "termsOfSale":
                            string? termsOfSaleRawValue = utf8JsonReader.GetString();
                            if (termsOfSaleRawValue != null)
                                termsOfSale = new Option<ShipmentDomesticCustomsCustomsInfo.TermsOfSaleEnum?>(ShipmentDomesticCustomsCustomsInfo.TermsOfSaleEnumFromStringOrDefault(termsOfSaleRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!reasonForExport.IsSet)
                throw new ArgumentException("Property is required for class ShipmentDomesticCustomsCustomsInfo.", nameof(reasonForExport));

            if (!customsDeclaredValue.IsSet)
                throw new ArgumentException("Property is required for class ShipmentDomesticCustomsCustomsInfo.", nameof(customsDeclaredValue));

            if (!currencyCode.IsSet)
                throw new ArgumentException("Property is required for class ShipmentDomesticCustomsCustomsInfo.", nameof(currencyCode));

            if (reasonForExport.IsSet && reasonForExport.Value == null)
                throw new ArgumentNullException(nameof(reasonForExport), "Property is not nullable for class ShipmentDomesticCustomsCustomsInfo.");

            if (customsDeclaredValue.IsSet && customsDeclaredValue.Value == null)
                throw new ArgumentNullException(nameof(customsDeclaredValue), "Property is not nullable for class ShipmentDomesticCustomsCustomsInfo.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class ShipmentDomesticCustomsCustomsInfo.");

            if (eELPFC.IsSet && eELPFC.Value == null)
                throw new ArgumentNullException(nameof(eELPFC), "Property is not nullable for class ShipmentDomesticCustomsCustomsInfo.");

            if (certificateNumber.IsSet && certificateNumber.Value == null)
                throw new ArgumentNullException(nameof(certificateNumber), "Property is not nullable for class ShipmentDomesticCustomsCustomsInfo.");

            if (comments.IsSet && comments.Value == null)
                throw new ArgumentNullException(nameof(comments), "Property is not nullable for class ShipmentDomesticCustomsCustomsInfo.");

            if (fromCustomsReference.IsSet && fromCustomsReference.Value == null)
                throw new ArgumentNullException(nameof(fromCustomsReference), "Property is not nullable for class ShipmentDomesticCustomsCustomsInfo.");

            if (importerCustomsReference.IsSet && importerCustomsReference.Value == null)
                throw new ArgumentNullException(nameof(importerCustomsReference), "Property is not nullable for class ShipmentDomesticCustomsCustomsInfo.");

            if (invoiceNumber.IsSet && invoiceNumber.Value == null)
                throw new ArgumentNullException(nameof(invoiceNumber), "Property is not nullable for class ShipmentDomesticCustomsCustomsInfo.");

            if (licenseNumber.IsSet && licenseNumber.Value == null)
                throw new ArgumentNullException(nameof(licenseNumber), "Property is not nullable for class ShipmentDomesticCustomsCustomsInfo.");

            if (sdrValue.IsSet && sdrValue.Value == null)
                throw new ArgumentNullException(nameof(sdrValue), "Property is not nullable for class ShipmentDomesticCustomsCustomsInfo.");

            if (termsOfSale.IsSet && termsOfSale.Value == null)
                throw new ArgumentNullException(nameof(termsOfSale), "Property is not nullable for class ShipmentDomesticCustomsCustomsInfo.");

            return new ShipmentDomesticCustomsCustomsInfo(reasonForExport.Value!.Value!, customsDeclaredValue.Value!.Value!, currencyCode.Value!, eELPFC, certificateNumber, comments, fromCustomsReference, importerCustomsReference, invoiceNumber, licenseNumber, sdrValue, termsOfSale);
        }

        /// <summary>
        /// Serializes a <see cref="ShipmentDomesticCustomsCustomsInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticCustomsCustomsInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShipmentDomesticCustomsCustomsInfo shipmentDomesticCustomsCustomsInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, shipmentDomesticCustomsCustomsInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShipmentDomesticCustomsCustomsInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shipmentDomesticCustomsCustomsInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ShipmentDomesticCustomsCustomsInfo shipmentDomesticCustomsCustomsInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shipmentDomesticCustomsCustomsInfo.CurrencyCode == null)
                throw new ArgumentNullException(nameof(shipmentDomesticCustomsCustomsInfo.CurrencyCode), "Property is required for class ShipmentDomesticCustomsCustomsInfo.");

            if (shipmentDomesticCustomsCustomsInfo.EELPFCOption.IsSet && shipmentDomesticCustomsCustomsInfo.EELPFC == null)
                throw new ArgumentNullException(nameof(shipmentDomesticCustomsCustomsInfo.EELPFC), "Property is required for class ShipmentDomesticCustomsCustomsInfo.");

            if (shipmentDomesticCustomsCustomsInfo.CertificateNumberOption.IsSet && shipmentDomesticCustomsCustomsInfo.CertificateNumber == null)
                throw new ArgumentNullException(nameof(shipmentDomesticCustomsCustomsInfo.CertificateNumber), "Property is required for class ShipmentDomesticCustomsCustomsInfo.");

            if (shipmentDomesticCustomsCustomsInfo.CommentsOption.IsSet && shipmentDomesticCustomsCustomsInfo.Comments == null)
                throw new ArgumentNullException(nameof(shipmentDomesticCustomsCustomsInfo.Comments), "Property is required for class ShipmentDomesticCustomsCustomsInfo.");

            if (shipmentDomesticCustomsCustomsInfo.FromCustomsReferenceOption.IsSet && shipmentDomesticCustomsCustomsInfo.FromCustomsReference == null)
                throw new ArgumentNullException(nameof(shipmentDomesticCustomsCustomsInfo.FromCustomsReference), "Property is required for class ShipmentDomesticCustomsCustomsInfo.");

            if (shipmentDomesticCustomsCustomsInfo.ImporterCustomsReferenceOption.IsSet && shipmentDomesticCustomsCustomsInfo.ImporterCustomsReference == null)
                throw new ArgumentNullException(nameof(shipmentDomesticCustomsCustomsInfo.ImporterCustomsReference), "Property is required for class ShipmentDomesticCustomsCustomsInfo.");

            if (shipmentDomesticCustomsCustomsInfo.InvoiceNumberOption.IsSet && shipmentDomesticCustomsCustomsInfo.InvoiceNumber == null)
                throw new ArgumentNullException(nameof(shipmentDomesticCustomsCustomsInfo.InvoiceNumber), "Property is required for class ShipmentDomesticCustomsCustomsInfo.");

            if (shipmentDomesticCustomsCustomsInfo.LicenseNumberOption.IsSet && shipmentDomesticCustomsCustomsInfo.LicenseNumber == null)
                throw new ArgumentNullException(nameof(shipmentDomesticCustomsCustomsInfo.LicenseNumber), "Property is required for class ShipmentDomesticCustomsCustomsInfo.");

            var reasonForExportRawValue = ShipmentDomesticCustomsCustomsInfo.ReasonForExportEnumToJsonValue(shipmentDomesticCustomsCustomsInfo.ReasonForExport);
            writer.WriteString("reasonForExport", reasonForExportRawValue);
            writer.WriteNumber("customsDeclaredValue", shipmentDomesticCustomsCustomsInfo.CustomsDeclaredValue);

            writer.WriteString("currencyCode", shipmentDomesticCustomsCustomsInfo.CurrencyCode);

            if (shipmentDomesticCustomsCustomsInfo.EELPFCOption.IsSet)
                writer.WriteString("EELPFC", shipmentDomesticCustomsCustomsInfo.EELPFC);

            if (shipmentDomesticCustomsCustomsInfo.CertificateNumberOption.IsSet)
                writer.WriteString("certificateNumber", shipmentDomesticCustomsCustomsInfo.CertificateNumber);

            if (shipmentDomesticCustomsCustomsInfo.CommentsOption.IsSet)
                writer.WriteString("comments", shipmentDomesticCustomsCustomsInfo.Comments);

            if (shipmentDomesticCustomsCustomsInfo.FromCustomsReferenceOption.IsSet)
                writer.WriteString("fromCustomsReference", shipmentDomesticCustomsCustomsInfo.FromCustomsReference);

            if (shipmentDomesticCustomsCustomsInfo.ImporterCustomsReferenceOption.IsSet)
                writer.WriteString("importerCustomsReference", shipmentDomesticCustomsCustomsInfo.ImporterCustomsReference);

            if (shipmentDomesticCustomsCustomsInfo.InvoiceNumberOption.IsSet)
                writer.WriteString("invoiceNumber", shipmentDomesticCustomsCustomsInfo.InvoiceNumber);

            if (shipmentDomesticCustomsCustomsInfo.LicenseNumberOption.IsSet)
                writer.WriteString("licenseNumber", shipmentDomesticCustomsCustomsInfo.LicenseNumber);

            if (shipmentDomesticCustomsCustomsInfo.SdrValueOption.IsSet)
                writer.WriteNumber("sdrValue", shipmentDomesticCustomsCustomsInfo.SdrValueOption.Value!.Value);

            var termsOfSaleRawValue = ShipmentDomesticCustomsCustomsInfo.TermsOfSaleEnumToJsonValue(shipmentDomesticCustomsCustomsInfo.TermsOfSaleOption.Value!.Value);
            writer.WriteString("termsOfSale", termsOfSaleRawValue);
        }
    }
}
