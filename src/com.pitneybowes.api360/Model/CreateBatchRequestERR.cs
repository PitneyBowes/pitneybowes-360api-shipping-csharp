/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.pitneybowes.api360.Client.OpenAPIDateConverter;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// CreateBatchRequestERR
    /// </summary>
    [DataContract(Name = "CreateBatchRequestERR")]
    public partial class CreateBatchRequestERR : IValidatableObject
    {
        /// <summary>
        /// This indicates the label size of the Bulk Shipment when it gets printed,i.e., DocSize.
        /// </summary>
        /// <value>This indicates the label size of the Bulk Shipment when it gets printed,i.e., DocSize.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SizeEnum
        {
            /// <summary>
            /// Enum LabelDOC8X11AndDOC4X6 for value: ERR Label - DOC_8X11 and DOC_4X6.
            /// </summary>
            [EnumMember(Value = "ERR Label - DOC_8X11 and DOC_4X6.")]
            LabelDOC8X11AndDOC4X6 = 1,

            /// <summary>
            /// Enum Coversheet106X96X95And95X12 for value: ERR Coversheet - 10, 6 X 9, 6 X 9.5, and 9.5 X 12
            /// </summary>
            [EnumMember(Value = "ERR Coversheet - 10, 6 X 9, 6 X 9.5, and 9.5 X 12")]
            Coversheet106X96X95And95X12 = 2
        }


        /// <summary>
        /// This indicates the label size of the Bulk Shipment when it gets printed,i.e., DocSize.
        /// </summary>
        /// <value>This indicates the label size of the Bulk Shipment when it gets printed,i.e., DocSize.</value>
        /// <example>DOC_8X11</example>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public SizeEnum Size { get; set; }
        /// <summary>
        /// This indicates the type of the Batch Shipment, e.g., Shipping Label and Coversheet.
        /// </summary>
        /// <value>This indicates the type of the Batch Shipment, e.g., Shipping Label and Coversheet.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SHIPPINGLABEL for value: SHIPPING_LABEL
            /// </summary>
            [EnumMember(Value = "SHIPPING_LABEL")]
            SHIPPINGLABEL = 1,

            /// <summary>
            /// Enum COVERSHEET for value: COVERSHEET
            /// </summary>
            [EnumMember(Value = "COVERSHEET")]
            COVERSHEET = 2
        }


        /// <summary>
        /// This indicates the type of the Batch Shipment, e.g., Shipping Label and Coversheet.
        /// </summary>
        /// <value>This indicates the type of the Batch Shipment, e.g., Shipping Label and Coversheet.</value>
        /// <example>SHIPPING_LABEL</example>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// This defines the type of the shipment which is printed, e.g., Shipping label gets printed in PDF form.
        /// </summary>
        /// <value>This defines the type of the shipment which is printed, e.g., Shipping label gets printed in PDF form.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF = 1
        }


        /// <summary>
        /// This defines the type of the shipment which is printed, e.g., Shipping label gets printed in PDF form.
        /// </summary>
        /// <value>This defines the type of the shipment which is printed, e.g., Shipping label gets printed in PDF form.</value>
        /// <example>PDF</example>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBatchRequestERR" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateBatchRequestERR() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBatchRequestERR" /> class.
        /// </summary>
        /// <param name="name">Name of the of ERR Batch which is imported, e.g. ERR-Import-05..</param>
        /// <param name="groupName">Indicates the name of the group of batches, which consists of multiple Batch groups..</param>
        /// <param name="size">This indicates the label size of the Bulk Shipment when it gets printed,i.e., DocSize. (required).</param>
        /// <param name="type">This indicates the type of the Batch Shipment, e.g., Shipping Label and Coversheet. (required).</param>
        /// <param name="format">This defines the type of the shipment which is printed, e.g., Shipping label gets printed in PDF form..</param>
        /// <param name="carrierAccountId">A unique identifier associated with the carrier account used by client users during shipment process. Default CarrierAccountID for this batch will be user&#39;s registered USPS account. (required).</param>
        /// <param name="serviceId">A unique identifier given to the carrier-specific service. User can override this value by defining it at Shipment level. (required).</param>
        /// <param name="parcelType">Parcel Type is required for creating a shipment while rating a parcel. And it varies as per USPS selected services, e.g. FRPKG, LGENV, TUBE, and PKG. (required).</param>
        /// <param name="specialServices">specialServices.</param>
        public CreateBatchRequestERR(string name = default(string), string groupName = default(string), SizeEnum size = default(SizeEnum), TypeEnum type = default(TypeEnum), FormatEnum? format = default(FormatEnum?), string carrierAccountId = default(string), string serviceId = default(string), string parcelType = default(string), List<SpecialServiceBatchERR> specialServices = default(List<SpecialServiceBatchERR>))
        {
            this.Size = size;
            this.Type = type;
            // to ensure "carrierAccountId" is required (not null)
            if (carrierAccountId == null)
            {
                throw new ArgumentNullException("carrierAccountId is a required property for CreateBatchRequestERR and cannot be null");
            }
            this.CarrierAccountId = carrierAccountId;
            // to ensure "serviceId" is required (not null)
            if (serviceId == null)
            {
                throw new ArgumentNullException("serviceId is a required property for CreateBatchRequestERR and cannot be null");
            }
            this.ServiceId = serviceId;
            // to ensure "parcelType" is required (not null)
            if (parcelType == null)
            {
                throw new ArgumentNullException("parcelType is a required property for CreateBatchRequestERR and cannot be null");
            }
            this.ParcelType = parcelType;
            this.Name = name;
            this.GroupName = groupName;
            this.Format = format;
            this.SpecialServices = specialServices;
        }

        /// <summary>
        /// Name of the of ERR Batch which is imported, e.g. ERR-Import-05.
        /// </summary>
        /// <value>Name of the of ERR Batch which is imported, e.g. ERR-Import-05.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates the name of the group of batches, which consists of multiple Batch groups.
        /// </summary>
        /// <value>Indicates the name of the group of batches, which consists of multiple Batch groups.</value>
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// A unique identifier associated with the carrier account used by client users during shipment process. Default CarrierAccountID for this batch will be user&#39;s registered USPS account.
        /// </summary>
        /// <value>A unique identifier associated with the carrier account used by client users during shipment process. Default CarrierAccountID for this batch will be user&#39;s registered USPS account.</value>
        [DataMember(Name = "carrierAccountId", IsRequired = true, EmitDefaultValue = true)]
        public string CarrierAccountId { get; set; }

        /// <summary>
        /// A unique identifier given to the carrier-specific service. User can override this value by defining it at Shipment level.
        /// </summary>
        /// <value>A unique identifier given to the carrier-specific service. User can override this value by defining it at Shipment level.</value>
        [DataMember(Name = "serviceId", IsRequired = true, EmitDefaultValue = true)]
        public string ServiceId { get; set; }

        /// <summary>
        /// Parcel Type is required for creating a shipment while rating a parcel. And it varies as per USPS selected services, e.g. FRPKG, LGENV, TUBE, and PKG.
        /// </summary>
        /// <value>Parcel Type is required for creating a shipment while rating a parcel. And it varies as per USPS selected services, e.g. FRPKG, LGENV, TUBE, and PKG.</value>
        [DataMember(Name = "parcelType", IsRequired = true, EmitDefaultValue = true)]
        public string ParcelType { get; set; }

        /// <summary>
        /// Gets or Sets SpecialServices
        /// </summary>
        [DataMember(Name = "specialServices", EmitDefaultValue = false)]
        public List<SpecialServiceBatchERR> SpecialServices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateBatchRequestERR {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  CarrierAccountId: ").Append(CarrierAccountId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  SpecialServices: ").Append(SpecialServices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
