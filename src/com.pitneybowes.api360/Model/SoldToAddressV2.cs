// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// Billing address of the buyer responsible for the shipment payment. It can be domestic or international address.  - If the importer is the same as the final recipient, the &#x60;toAddress&#x60; and &#x60;soldToAddress&#x60; must match. - If the importer is different from the final recipient, enter the importer address in the &#x60;soldToAddress&#x60; and enter the final recipient&#39;s address in the &#x60;toAddress&#x60;. 
    /// </summary>
    public partial class SoldToAddressV2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SoldToAddressV2" /> class.
        /// </summary>
        /// <param name="addressLine1">Primary street address of the billing entity.</param>
        /// <param name="addressLine2">Additional address information such as apartment, suite, or unit number.</param>
        /// <param name="addressLine3">Optional extra address details.</param>
        /// <param name="company">The name of the company associated with the SoldTo address.</param>
        /// <param name="name">The contact person&#39;s full name for the billing entity.</param>
        /// <param name="phone">Phone number of the SoldTo entity.</param>
        /// <param name="email">Email address of the SoldTo entity.</param>
        /// <param name="residential">Indicates whether the SoldTo address is a residential location (true/false).</param>
        /// <param name="cityTown">City or town of the billing address.</param>
        /// <param name="stateProvince">State or province of the billing address.</param>
        /// <param name="postalCode">Postal or ZIP code of the billing address.</param>
        /// <param name="countryCode">Two-letter country code of the billing address (ISO 3166-1 alpha-2).</param>
        /// <param name="taxId">The Tax Identification Number (TIN). TIN Number is supported for FedEx as of now.&lt;br /&gt; &#x60;Max character length &#x3D; 18&#x60;.  - &#x60;EIN&#x60;, &#x60;VAT&#x60;, &#x60;GST&#x60;, and &#x60;IOSS&#x60; are mapped to &#x60;BUSINESS_NATIONAL&#x60;. - &#x60;EORI&#x60; is mapped to &#x60;BUSINESS_UNION&#x60;. - &#x60;RFC&#x60; with a length of 12 characters is mapped to &#x60;BUSINESS_NATIONAL&#x60;. - &#x60;RFC&#x60; with a length of 13 characters is mapped to &#x60;PERSONAL_NATIONAL&#x60;. </param>
        /// <param name="taxIdType">Specifies the type of tax identification being provided.</param>
        [JsonConstructor]
        public SoldToAddressV2(Option<string?> addressLine1 = default, Option<string?> addressLine2 = default, Option<string?> addressLine3 = default, Option<string?> company = default, Option<string?> name = default, Option<string?> phone = default, Option<string?> email = default, Option<bool?> residential = default, Option<string?> cityTown = default, Option<string?> stateProvince = default, Option<string?> postalCode = default, Option<string?> countryCode = default, Option<string?> taxId = default, Option<TaxIdTypeEnum?> taxIdType = default)
        {
            AddressLine1Option = addressLine1;
            AddressLine2Option = addressLine2;
            AddressLine3Option = addressLine3;
            CompanyOption = company;
            NameOption = name;
            PhoneOption = phone;
            EmailOption = email;
            ResidentialOption = residential;
            CityTownOption = cityTown;
            StateProvinceOption = stateProvince;
            PostalCodeOption = postalCode;
            CountryCodeOption = countryCode;
            TaxIdOption = taxId;
            TaxIdTypeOption = taxIdType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Specifies the type of tax identification being provided.
        /// </summary>
        /// <value>Specifies the type of tax identification being provided.</value>
        public enum TaxIdTypeEnum
        {
            /// <summary>
            /// Enum EIN for value: EIN
            /// </summary>
            EIN = 1,

            /// <summary>
            /// Enum GST for value: GST
            /// </summary>
            GST = 2,

            /// <summary>
            /// Enum VAT for value: VAT
            /// </summary>
            VAT = 3,

            /// <summary>
            /// Enum IOSS for value: IOSS
            /// </summary>
            IOSS = 4,

            /// <summary>
            /// Enum RFC for value: RFC
            /// </summary>
            RFC = 5,

            /// <summary>
            /// Enum EORI for value: EORI
            /// </summary>
            EORI = 6
        }

        /// <summary>
        /// Returns a <see cref="TaxIdTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TaxIdTypeEnum TaxIdTypeEnumFromString(string value)
        {
            if (value.Equals("EIN"))
                return TaxIdTypeEnum.EIN;

            if (value.Equals("GST"))
                return TaxIdTypeEnum.GST;

            if (value.Equals("VAT"))
                return TaxIdTypeEnum.VAT;

            if (value.Equals("IOSS"))
                return TaxIdTypeEnum.IOSS;

            if (value.Equals("RFC"))
                return TaxIdTypeEnum.RFC;

            if (value.Equals("EORI"))
                return TaxIdTypeEnum.EORI;

            throw new NotImplementedException($"Could not convert value to type TaxIdTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TaxIdTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TaxIdTypeEnum? TaxIdTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("EIN"))
                return TaxIdTypeEnum.EIN;

            if (value.Equals("GST"))
                return TaxIdTypeEnum.GST;

            if (value.Equals("VAT"))
                return TaxIdTypeEnum.VAT;

            if (value.Equals("IOSS"))
                return TaxIdTypeEnum.IOSS;

            if (value.Equals("RFC"))
                return TaxIdTypeEnum.RFC;

            if (value.Equals("EORI"))
                return TaxIdTypeEnum.EORI;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TaxIdTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TaxIdTypeEnumToJsonValue(TaxIdTypeEnum? value)
        {
            if (value == TaxIdTypeEnum.EIN)
                return "EIN";

            if (value == TaxIdTypeEnum.GST)
                return "GST";

            if (value == TaxIdTypeEnum.VAT)
                return "VAT";

            if (value == TaxIdTypeEnum.IOSS)
                return "IOSS";

            if (value == TaxIdTypeEnum.RFC)
                return "RFC";

            if (value == TaxIdTypeEnum.EORI)
                return "EORI";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of TaxIdType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TaxIdTypeEnum?> TaxIdTypeOption { get; private set; }

        /// <summary>
        /// Specifies the type of tax identification being provided.
        /// </summary>
        /// <value>Specifies the type of tax identification being provided.</value>
        [JsonPropertyName("taxIdType")]
        public TaxIdTypeEnum? TaxIdType { get { return this.TaxIdTypeOption; } set { this.TaxIdTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AddressLine1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine1Option { get; private set; }

        /// <summary>
        /// Primary street address of the billing entity.
        /// </summary>
        /// <value>Primary street address of the billing entity.</value>
        /* <example>1600 Amphitheatre Parkway</example> */
        [JsonPropertyName("addressLine1")]
        public string? AddressLine1 { get { return this.AddressLine1Option; } set { this.AddressLine1Option = new(value); } }

        /// <summary>
        /// Used to track the state of AddressLine2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine2Option { get; private set; }

        /// <summary>
        /// Additional address information such as apartment, suite, or unit number.
        /// </summary>
        /// <value>Additional address information such as apartment, suite, or unit number.</value>
        /* <example>Suite 101</example> */
        [JsonPropertyName("addressLine2")]
        public string? AddressLine2 { get { return this.AddressLine2Option; } set { this.AddressLine2Option = new(value); } }

        /// <summary>
        /// Used to track the state of AddressLine3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine3Option { get; private set; }

        /// <summary>
        /// Optional extra address details.
        /// </summary>
        /// <value>Optional extra address details.</value>
        /* <example>Near central market</example> */
        [JsonPropertyName("addressLine3")]
        public string? AddressLine3 { get { return this.AddressLine3Option; } set { this.AddressLine3Option = new(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CompanyOption { get; private set; }

        /// <summary>
        /// The name of the company associated with the SoldTo address.
        /// </summary>
        /// <value>The name of the company associated with the SoldTo address.</value>
        /* <example>ABC Company</example> */
        [JsonPropertyName("company")]
        public string? Company { get { return this.CompanyOption; } set { this.CompanyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The contact person&#39;s full name for the billing entity.
        /// </summary>
        /// <value>The contact person&#39;s full name for the billing entity.</value>
        /* <example>John Doe</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneOption { get; private set; }

        /// <summary>
        /// Phone number of the SoldTo entity.
        /// </summary>
        /// <value>Phone number of the SoldTo entity.</value>
        /* <example>650-253-0000</example> */
        [JsonPropertyName("phone")]
        public string? Phone { get { return this.PhoneOption; } set { this.PhoneOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Email address of the SoldTo entity.
        /// </summary>
        /// <value>Email address of the SoldTo entity.</value>
        /* <example>billing@abccompany.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Residential
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ResidentialOption { get; private set; }

        /// <summary>
        /// Indicates whether the SoldTo address is a residential location (true/false).
        /// </summary>
        /// <value>Indicates whether the SoldTo address is a residential location (true/false).</value>
        /* <example>false</example> */
        [JsonPropertyName("residential")]
        public bool? Residential { get { return this.ResidentialOption; } set { this.ResidentialOption = new(value); } }

        /// <summary>
        /// Used to track the state of CityTown
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CityTownOption { get; private set; }

        /// <summary>
        /// City or town of the billing address.
        /// </summary>
        /// <value>City or town of the billing address.</value>
        /* <example>Mountain View</example> */
        [JsonPropertyName("cityTown")]
        public string? CityTown { get { return this.CityTownOption; } set { this.CityTownOption = new(value); } }

        /// <summary>
        /// Used to track the state of StateProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateProvinceOption { get; private set; }

        /// <summary>
        /// State or province of the billing address.
        /// </summary>
        /// <value>State or province of the billing address.</value>
        /* <example>CA</example> */
        [JsonPropertyName("stateProvince")]
        public string? StateProvince { get { return this.StateProvinceOption; } set { this.StateProvinceOption = new(value); } }

        /// <summary>
        /// Used to track the state of PostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PostalCodeOption { get; private set; }

        /// <summary>
        /// Postal or ZIP code of the billing address.
        /// </summary>
        /// <value>Postal or ZIP code of the billing address.</value>
        /* <example>94043</example> */
        [JsonPropertyName("postalCode")]
        public string? PostalCode { get { return this.PostalCodeOption; } set { this.PostalCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryCodeOption { get; private set; }

        /// <summary>
        /// Two-letter country code of the billing address (ISO 3166-1 alpha-2).
        /// </summary>
        /// <value>Two-letter country code of the billing address (ISO 3166-1 alpha-2).</value>
        /* <example>US</example> */
        [JsonPropertyName("countryCode")]
        public string? CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TaxId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TaxIdOption { get; private set; }

        /// <summary>
        /// The Tax Identification Number (TIN). TIN Number is supported for FedEx as of now.&lt;br /&gt; &#x60;Max character length &#x3D; 18&#x60;.  - &#x60;EIN&#x60;, &#x60;VAT&#x60;, &#x60;GST&#x60;, and &#x60;IOSS&#x60; are mapped to &#x60;BUSINESS_NATIONAL&#x60;. - &#x60;EORI&#x60; is mapped to &#x60;BUSINESS_UNION&#x60;. - &#x60;RFC&#x60; with a length of 12 characters is mapped to &#x60;BUSINESS_NATIONAL&#x60;. - &#x60;RFC&#x60; with a length of 13 characters is mapped to &#x60;PERSONAL_NATIONAL&#x60;. 
        /// </summary>
        /// <value>The Tax Identification Number (TIN). TIN Number is supported for FedEx as of now.&lt;br /&gt; &#x60;Max character length &#x3D; 18&#x60;.  - &#x60;EIN&#x60;, &#x60;VAT&#x60;, &#x60;GST&#x60;, and &#x60;IOSS&#x60; are mapped to &#x60;BUSINESS_NATIONAL&#x60;. - &#x60;EORI&#x60; is mapped to &#x60;BUSINESS_UNION&#x60;. - &#x60;RFC&#x60; with a length of 12 characters is mapped to &#x60;BUSINESS_NATIONAL&#x60;. - &#x60;RFC&#x60; with a length of 13 characters is mapped to &#x60;PERSONAL_NATIONAL&#x60;. </value>
        [JsonPropertyName("taxId")]
        public string? TaxId { get { return this.TaxIdOption; } set { this.TaxIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SoldToAddressV2 {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Residential: ").Append(Residential).Append("\n");
            sb.Append("  CityTown: ").Append(CityTown).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("  TaxIdType: ").Append(TaxIdType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SoldToAddressV2" />
    /// </summary>
    public class SoldToAddressV2JsonConverter : JsonConverter<SoldToAddressV2>
    {
        /// <summary>
        /// Deserializes json to <see cref="SoldToAddressV2" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SoldToAddressV2 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> addressLine1 = default;
            Option<string?> addressLine2 = default;
            Option<string?> addressLine3 = default;
            Option<string?> company = default;
            Option<string?> name = default;
            Option<string?> phone = default;
            Option<string?> email = default;
            Option<bool?> residential = default;
            Option<string?> cityTown = default;
            Option<string?> stateProvince = default;
            Option<string?> postalCode = default;
            Option<string?> countryCode = default;
            Option<string?> taxId = default;
            Option<SoldToAddressV2.TaxIdTypeEnum?> taxIdType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "addressLine1":
                            addressLine1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressLine2":
                            addressLine2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressLine3":
                            addressLine3 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "company":
                            company = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "phone":
                            phone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "residential":
                            residential = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "cityTown":
                            cityTown = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stateProvince":
                            stateProvince = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "postalCode":
                            postalCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "countryCode":
                            countryCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "taxId":
                            taxId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "taxIdType":
                            string? taxIdTypeRawValue = utf8JsonReader.GetString();
                            if (taxIdTypeRawValue != null)
                                taxIdType = new Option<SoldToAddressV2.TaxIdTypeEnum?>(SoldToAddressV2.TaxIdTypeEnumFromStringOrDefault(taxIdTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (addressLine1.IsSet && addressLine1.Value == null)
                throw new ArgumentNullException(nameof(addressLine1), "Property is not nullable for class SoldToAddressV2.");

            if (addressLine2.IsSet && addressLine2.Value == null)
                throw new ArgumentNullException(nameof(addressLine2), "Property is not nullable for class SoldToAddressV2.");

            if (addressLine3.IsSet && addressLine3.Value == null)
                throw new ArgumentNullException(nameof(addressLine3), "Property is not nullable for class SoldToAddressV2.");

            if (company.IsSet && company.Value == null)
                throw new ArgumentNullException(nameof(company), "Property is not nullable for class SoldToAddressV2.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class SoldToAddressV2.");

            if (phone.IsSet && phone.Value == null)
                throw new ArgumentNullException(nameof(phone), "Property is not nullable for class SoldToAddressV2.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class SoldToAddressV2.");

            if (residential.IsSet && residential.Value == null)
                throw new ArgumentNullException(nameof(residential), "Property is not nullable for class SoldToAddressV2.");

            if (cityTown.IsSet && cityTown.Value == null)
                throw new ArgumentNullException(nameof(cityTown), "Property is not nullable for class SoldToAddressV2.");

            if (stateProvince.IsSet && stateProvince.Value == null)
                throw new ArgumentNullException(nameof(stateProvince), "Property is not nullable for class SoldToAddressV2.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class SoldToAddressV2.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class SoldToAddressV2.");

            if (taxId.IsSet && taxId.Value == null)
                throw new ArgumentNullException(nameof(taxId), "Property is not nullable for class SoldToAddressV2.");

            if (taxIdType.IsSet && taxIdType.Value == null)
                throw new ArgumentNullException(nameof(taxIdType), "Property is not nullable for class SoldToAddressV2.");

            return new SoldToAddressV2(addressLine1, addressLine2, addressLine3, company, name, phone, email, residential, cityTown, stateProvince, postalCode, countryCode, taxId, taxIdType);
        }

        /// <summary>
        /// Serializes a <see cref="SoldToAddressV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="soldToAddressV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SoldToAddressV2 soldToAddressV2, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, soldToAddressV2, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SoldToAddressV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="soldToAddressV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SoldToAddressV2 soldToAddressV2, JsonSerializerOptions jsonSerializerOptions)
        {
            if (soldToAddressV2.AddressLine1Option.IsSet && soldToAddressV2.AddressLine1 == null)
                throw new ArgumentNullException(nameof(soldToAddressV2.AddressLine1), "Property is required for class SoldToAddressV2.");

            if (soldToAddressV2.AddressLine2Option.IsSet && soldToAddressV2.AddressLine2 == null)
                throw new ArgumentNullException(nameof(soldToAddressV2.AddressLine2), "Property is required for class SoldToAddressV2.");

            if (soldToAddressV2.AddressLine3Option.IsSet && soldToAddressV2.AddressLine3 == null)
                throw new ArgumentNullException(nameof(soldToAddressV2.AddressLine3), "Property is required for class SoldToAddressV2.");

            if (soldToAddressV2.CompanyOption.IsSet && soldToAddressV2.Company == null)
                throw new ArgumentNullException(nameof(soldToAddressV2.Company), "Property is required for class SoldToAddressV2.");

            if (soldToAddressV2.NameOption.IsSet && soldToAddressV2.Name == null)
                throw new ArgumentNullException(nameof(soldToAddressV2.Name), "Property is required for class SoldToAddressV2.");

            if (soldToAddressV2.PhoneOption.IsSet && soldToAddressV2.Phone == null)
                throw new ArgumentNullException(nameof(soldToAddressV2.Phone), "Property is required for class SoldToAddressV2.");

            if (soldToAddressV2.EmailOption.IsSet && soldToAddressV2.Email == null)
                throw new ArgumentNullException(nameof(soldToAddressV2.Email), "Property is required for class SoldToAddressV2.");

            if (soldToAddressV2.CityTownOption.IsSet && soldToAddressV2.CityTown == null)
                throw new ArgumentNullException(nameof(soldToAddressV2.CityTown), "Property is required for class SoldToAddressV2.");

            if (soldToAddressV2.StateProvinceOption.IsSet && soldToAddressV2.StateProvince == null)
                throw new ArgumentNullException(nameof(soldToAddressV2.StateProvince), "Property is required for class SoldToAddressV2.");

            if (soldToAddressV2.PostalCodeOption.IsSet && soldToAddressV2.PostalCode == null)
                throw new ArgumentNullException(nameof(soldToAddressV2.PostalCode), "Property is required for class SoldToAddressV2.");

            if (soldToAddressV2.CountryCodeOption.IsSet && soldToAddressV2.CountryCode == null)
                throw new ArgumentNullException(nameof(soldToAddressV2.CountryCode), "Property is required for class SoldToAddressV2.");

            if (soldToAddressV2.TaxIdOption.IsSet && soldToAddressV2.TaxId == null)
                throw new ArgumentNullException(nameof(soldToAddressV2.TaxId), "Property is required for class SoldToAddressV2.");

            if (soldToAddressV2.AddressLine1Option.IsSet)
                writer.WriteString("addressLine1", soldToAddressV2.AddressLine1);

            if (soldToAddressV2.AddressLine2Option.IsSet)
                writer.WriteString("addressLine2", soldToAddressV2.AddressLine2);

            if (soldToAddressV2.AddressLine3Option.IsSet)
                writer.WriteString("addressLine3", soldToAddressV2.AddressLine3);

            if (soldToAddressV2.CompanyOption.IsSet)
                writer.WriteString("company", soldToAddressV2.Company);

            if (soldToAddressV2.NameOption.IsSet)
                writer.WriteString("name", soldToAddressV2.Name);

            if (soldToAddressV2.PhoneOption.IsSet)
                writer.WriteString("phone", soldToAddressV2.Phone);

            if (soldToAddressV2.EmailOption.IsSet)
                writer.WriteString("email", soldToAddressV2.Email);

            if (soldToAddressV2.ResidentialOption.IsSet)
                writer.WriteBoolean("residential", soldToAddressV2.ResidentialOption.Value!.Value);

            if (soldToAddressV2.CityTownOption.IsSet)
                writer.WriteString("cityTown", soldToAddressV2.CityTown);

            if (soldToAddressV2.StateProvinceOption.IsSet)
                writer.WriteString("stateProvince", soldToAddressV2.StateProvince);

            if (soldToAddressV2.PostalCodeOption.IsSet)
                writer.WriteString("postalCode", soldToAddressV2.PostalCode);

            if (soldToAddressV2.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", soldToAddressV2.CountryCode);

            if (soldToAddressV2.TaxIdOption.IsSet)
                writer.WriteString("taxId", soldToAddressV2.TaxId);

            var taxIdTypeRawValue = SoldToAddressV2.TaxIdTypeEnumToJsonValue(soldToAddressV2.TaxIdTypeOption.Value!.Value);
            writer.WriteString("taxIdType", taxIdTypeRawValue);
        }
    }
}
