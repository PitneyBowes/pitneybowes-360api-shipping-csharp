// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// Few shipments need a special handling, and the reason can be fragile items or highly secured shipments. There might be other case scenarios. In a simple term, this field defines shipment handling, which provides users a capability to select handling options. &lt;br /&gt; User can select any of the following handling options (special services), but they may vary as per the carrier selection.   - Hold For Pickup: HOLD_FOR_PICKUP   - Saturday Delivery: SATURDAY_DELIVERY   - UPS Premium Care: PREMIUM_CARE   - Direct Delivery Only: DIRECT_DELIVERY_ONLY   - Additional Handling: ADDITIONAL_HANDLING       Carrier specific options:   - UPS supports all handling options mentioned above.    - FedEx supports *HOLD_FOR_PICKUP, SATURDAY_DELIVERY, and ADDITIONAL_HANDLING*.   - Purolator supports *HOLD_FOR_PICKUP, SATURDAY_DELIVERY, and ADDITIONAL_HANDLING*.    
    /// </summary>
    public partial class MilitaryMailShipmentsRequestV2Handling : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MilitaryMailShipmentsRequestV2Handling" /> class.
        /// </summary>
        /// <param name="type">The special handling type.</param>
        [JsonConstructor]
        public MilitaryMailShipmentsRequestV2Handling(Option<TypeEnum?> type = default)
        {
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The special handling type.
        /// </summary>
        /// <value>The special handling type.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum HOLDFORPICKUP for value: HOLD_FOR_PICKUP
            /// </summary>
            HOLDFORPICKUP = 1,

            /// <summary>
            /// Enum SATURDAYDELIVERY for value: SATURDAY_DELIVERY
            /// </summary>
            SATURDAYDELIVERY = 2,

            /// <summary>
            /// Enum PREMIUMCARE for value: PREMIUM_CARE
            /// </summary>
            PREMIUMCARE = 3,

            /// <summary>
            /// Enum DIRECTDELIVERYONLY for value: DIRECT_DELIVERY_ONLY
            /// </summary>
            DIRECTDELIVERYONLY = 4,

            /// <summary>
            /// Enum ADDITIONALHANDLING for value: ADDITIONAL_HANDLING
            /// </summary>
            ADDITIONALHANDLING = 5
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("HOLD_FOR_PICKUP"))
                return TypeEnum.HOLDFORPICKUP;

            if (value.Equals("SATURDAY_DELIVERY"))
                return TypeEnum.SATURDAYDELIVERY;

            if (value.Equals("PREMIUM_CARE"))
                return TypeEnum.PREMIUMCARE;

            if (value.Equals("DIRECT_DELIVERY_ONLY"))
                return TypeEnum.DIRECTDELIVERYONLY;

            if (value.Equals("ADDITIONAL_HANDLING"))
                return TypeEnum.ADDITIONALHANDLING;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("HOLD_FOR_PICKUP"))
                return TypeEnum.HOLDFORPICKUP;

            if (value.Equals("SATURDAY_DELIVERY"))
                return TypeEnum.SATURDAYDELIVERY;

            if (value.Equals("PREMIUM_CARE"))
                return TypeEnum.PREMIUMCARE;

            if (value.Equals("DIRECT_DELIVERY_ONLY"))
                return TypeEnum.DIRECTDELIVERYONLY;

            if (value.Equals("ADDITIONAL_HANDLING"))
                return TypeEnum.ADDITIONALHANDLING;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.HOLDFORPICKUP)
                return "HOLD_FOR_PICKUP";

            if (value == TypeEnum.SATURDAYDELIVERY)
                return "SATURDAY_DELIVERY";

            if (value == TypeEnum.PREMIUMCARE)
                return "PREMIUM_CARE";

            if (value == TypeEnum.DIRECTDELIVERYONLY)
                return "DIRECT_DELIVERY_ONLY";

            if (value == TypeEnum.ADDITIONALHANDLING)
                return "ADDITIONAL_HANDLING";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// The special handling type.
        /// </summary>
        /// <value>The special handling type.</value>
        /* <example>ADDITIONAL_HANDLING</example> */
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new Option<TypeEnum?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MilitaryMailShipmentsRequestV2Handling {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MilitaryMailShipmentsRequestV2Handling" />
    /// </summary>
    public class MilitaryMailShipmentsRequestV2HandlingJsonConverter : JsonConverter<MilitaryMailShipmentsRequestV2Handling>
    {
        /// <summary>
        /// Deserializes json to <see cref="MilitaryMailShipmentsRequestV2Handling" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MilitaryMailShipmentsRequestV2Handling Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<MilitaryMailShipmentsRequestV2Handling.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<MilitaryMailShipmentsRequestV2Handling.TypeEnum?>(MilitaryMailShipmentsRequestV2Handling.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class MilitaryMailShipmentsRequestV2Handling.");

            return new MilitaryMailShipmentsRequestV2Handling(type);
        }

        /// <summary>
        /// Serializes a <see cref="MilitaryMailShipmentsRequestV2Handling" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="militaryMailShipmentsRequestV2Handling"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MilitaryMailShipmentsRequestV2Handling militaryMailShipmentsRequestV2Handling, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, militaryMailShipmentsRequestV2Handling, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MilitaryMailShipmentsRequestV2Handling" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="militaryMailShipmentsRequestV2Handling"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MilitaryMailShipmentsRequestV2Handling militaryMailShipmentsRequestV2Handling, JsonSerializerOptions jsonSerializerOptions)
        {
            var typeRawValue = MilitaryMailShipmentsRequestV2Handling.TypeEnumToJsonValue(militaryMailShipmentsRequestV2Handling.TypeOption.Value.Value);
            writer.WriteString("type", typeRawValue);
        }
    }
}
