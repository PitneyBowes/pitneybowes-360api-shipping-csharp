// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// ReprintShipmentFromAddress
    /// </summary>
    public partial class ReprintShipmentFromAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReprintShipmentFromAddress" /> class.
        /// </summary>
        /// <param name="addressLine1">The addressLine1 can contain the Flat number, Building or Apartment Name/number (if any) or company name (if not residential).</param>
        /// <param name="addressLine2">The addressLine2 contains Street address or Landmark (if any).</param>
        /// <param name="addressLine3">The addressLine3 contains P.O. Box (if any) near the address.</param>
        /// <param name="cityTown">The name of the city or town to where the address belongs.</param>
        /// <param name="company">The name of the company, in case if the sender address is not residential.</param>
        /// <param name="countryCode"> The country in which the address is located. Use ISO 3166-1 Alpha-2 standard values. For best results this should be included, especially if the country name does not appear in any of the unparsedAddressLines.</param>
        /// <param name="email">The email address of the sender. It can be person&#39;s email address or company email address (for non-residential).</param>
        /// <param name="name">Name of the sender to which this address points.</param>
        /// <param name="phone">This is sender&#39;s phone number. Enter the digits with or without spaces or hyphens. The maximum limit of characters for Phone number is 10 digits. </param>
        /// <param name="postalCode">The Postal Code or ZIP Code of the address. For US addresses, use either the 5-digit or 9-digit ZIP Code in one of the following formats: &#39;12345&#39; or &#39;12345-6789&#39;. If you use a different format, such as 12345- or 123451234, will receive an error.</param>
        /// <param name="residential">The specified address can be Residential or Official. In case if the address is Residential, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.</param>
        /// <param name="stateProvince">The State or Province of the address. For a US or Canadian address, it is the 2-letter state or province code. </param>
        [JsonConstructor]
        public ReprintShipmentFromAddress(Option<string?> addressLine1 = default, Option<string?> addressLine2 = default, Option<string?> addressLine3 = default, Option<string?> cityTown = default, Option<string?> company = default, Option<string?> countryCode = default, Option<string?> email = default, Option<string?> name = default, Option<string?> phone = default, Option<string?> postalCode = default, Option<bool?> residential = default, Option<string?> stateProvince = default)
        {
            AddressLine1Option = addressLine1;
            AddressLine2Option = addressLine2;
            AddressLine3Option = addressLine3;
            CityTownOption = cityTown;
            CompanyOption = company;
            CountryCodeOption = countryCode;
            EmailOption = email;
            NameOption = name;
            PhoneOption = phone;
            PostalCodeOption = postalCode;
            ResidentialOption = residential;
            StateProvinceOption = stateProvince;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AddressLine1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine1Option { get; private set; }

        /// <summary>
        /// The addressLine1 can contain the Flat number, Building or Apartment Name/number (if any) or company name (if not residential).
        /// </summary>
        /// <value>The addressLine1 can contain the Flat number, Building or Apartment Name/number (if any) or company name (if not residential).</value>
        /* <example>27 Waterview Dr</example> */
        [JsonPropertyName("addressLine1")]
        public string? AddressLine1 { get { return this.AddressLine1Option; } set { this.AddressLine1Option = new(value); } }

        /// <summary>
        /// Used to track the state of AddressLine2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine2Option { get; private set; }

        /// <summary>
        /// The addressLine2 contains Street address or Landmark (if any).
        /// </summary>
        /// <value>The addressLine2 contains Street address or Landmark (if any).</value>
        /* <example>near abc street</example> */
        [JsonPropertyName("addressLine2")]
        public string? AddressLine2 { get { return this.AddressLine2Option; } set { this.AddressLine2Option = new(value); } }

        /// <summary>
        /// Used to track the state of AddressLine3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine3Option { get; private set; }

        /// <summary>
        /// The addressLine3 contains P.O. Box (if any) near the address.
        /// </summary>
        /// <value>The addressLine3 contains P.O. Box (if any) near the address.</value>
        /* <example>near xyz street</example> */
        [JsonPropertyName("addressLine3")]
        public string? AddressLine3 { get { return this.AddressLine3Option; } set { this.AddressLine3Option = new(value); } }

        /// <summary>
        /// Used to track the state of CityTown
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CityTownOption { get; private set; }

        /// <summary>
        /// The name of the city or town to where the address belongs.
        /// </summary>
        /// <value>The name of the city or town to where the address belongs.</value>
        /* <example>Stamford</example> */
        [JsonPropertyName("cityTown")]
        public string? CityTown { get { return this.CityTownOption; } set { this.CityTownOption = new(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CompanyOption { get; private set; }

        /// <summary>
        /// The name of the company, in case if the sender address is not residential.
        /// </summary>
        /// <value>The name of the company, in case if the sender address is not residential.</value>
        /* <example>Pitney Bowes Inc.</example> */
        [JsonPropertyName("company")]
        public string? Company { get { return this.CompanyOption; } set { this.CompanyOption = new(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryCodeOption { get; private set; }

        /// <summary>
        ///  The country in which the address is located. Use ISO 3166-1 Alpha-2 standard values. For best results this should be included, especially if the country name does not appear in any of the unparsedAddressLines.
        /// </summary>
        /// <value> The country in which the address is located. Use ISO 3166-1 Alpha-2 standard values. For best results this should be included, especially if the country name does not appear in any of the unparsedAddressLines.</value>
        /* <example>US</example> */
        [JsonPropertyName("countryCode")]
        public string? CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// The email address of the sender. It can be person&#39;s email address or company email address (for non-residential).
        /// </summary>
        /// <value>The email address of the sender. It can be person&#39;s email address or company email address (for non-residential).</value>
        /* <example>john.publica@pb.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Name of the sender to which this address points.
        /// </summary>
        /// <value>Name of the sender to which this address points.</value>
        /* <example>Paul Wright</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Phone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneOption { get; private set; }

        /// <summary>
        /// This is sender&#39;s phone number. Enter the digits with or without spaces or hyphens. The maximum limit of characters for Phone number is 10 digits. 
        /// </summary>
        /// <value>This is sender&#39;s phone number. Enter the digits with or without spaces or hyphens. The maximum limit of characters for Phone number is 10 digits. </value>
        /* <example>203-555-1213</example> */
        [JsonPropertyName("phone")]
        public string? Phone { get { return this.PhoneOption; } set { this.PhoneOption = new(value); } }

        /// <summary>
        /// Used to track the state of PostalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PostalCodeOption { get; private set; }

        /// <summary>
        /// The Postal Code or ZIP Code of the address. For US addresses, use either the 5-digit or 9-digit ZIP Code in one of the following formats: &#39;12345&#39; or &#39;12345-6789&#39;. If you use a different format, such as 12345- or 123451234, will receive an error.
        /// </summary>
        /// <value>The Postal Code or ZIP Code of the address. For US addresses, use either the 5-digit or 9-digit ZIP Code in one of the following formats: &#39;12345&#39; or &#39;12345-6789&#39;. If you use a different format, such as 12345- or 123451234, will receive an error.</value>
        /* <example>06905-4317</example> */
        [JsonPropertyName("postalCode")]
        public string? PostalCode { get { return this.PostalCodeOption; } set { this.PostalCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Residential
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ResidentialOption { get; private set; }

        /// <summary>
        /// The specified address can be Residential or Official. In case if the address is Residential, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.
        /// </summary>
        /// <value>The specified address can be Residential or Official. In case if the address is Residential, the boolean value will be &#39;true&#39;, else it will take &#39;false&#39;.</value>
        /* <example>false</example> */
        [JsonPropertyName("residential")]
        public bool? Residential { get { return this.ResidentialOption; } set { this.ResidentialOption = new(value); } }

        /// <summary>
        /// Used to track the state of StateProvince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateProvinceOption { get; private set; }

        /// <summary>
        /// The State or Province of the address. For a US or Canadian address, it is the 2-letter state or province code. 
        /// </summary>
        /// <value>The State or Province of the address. For a US or Canadian address, it is the 2-letter state or province code. </value>
        /* <example>CT</example> */
        [JsonPropertyName("stateProvince")]
        public string? StateProvince { get { return this.StateProvinceOption; } set { this.StateProvinceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReprintShipmentFromAddress {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  CityTown: ").Append(CityTown).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Residential: ").Append(Residential).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReprintShipmentFromAddress" />
    /// </summary>
    public class ReprintShipmentFromAddressJsonConverter : JsonConverter<ReprintShipmentFromAddress>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReprintShipmentFromAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReprintShipmentFromAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> addressLine1 = default;
            Option<string?> addressLine2 = default;
            Option<string?> addressLine3 = default;
            Option<string?> cityTown = default;
            Option<string?> company = default;
            Option<string?> countryCode = default;
            Option<string?> email = default;
            Option<string?> name = default;
            Option<string?> phone = default;
            Option<string?> postalCode = default;
            Option<bool?> residential = default;
            Option<string?> stateProvince = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "addressLine1":
                            addressLine1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressLine2":
                            addressLine2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addressLine3":
                            addressLine3 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cityTown":
                            cityTown = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "company":
                            company = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "countryCode":
                            countryCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "phone":
                            phone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "postalCode":
                            postalCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "residential":
                            residential = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "stateProvince":
                            stateProvince = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (addressLine1.IsSet && addressLine1.Value == null)
                throw new ArgumentNullException(nameof(addressLine1), "Property is not nullable for class ReprintShipmentFromAddress.");

            if (addressLine2.IsSet && addressLine2.Value == null)
                throw new ArgumentNullException(nameof(addressLine2), "Property is not nullable for class ReprintShipmentFromAddress.");

            if (addressLine3.IsSet && addressLine3.Value == null)
                throw new ArgumentNullException(nameof(addressLine3), "Property is not nullable for class ReprintShipmentFromAddress.");

            if (cityTown.IsSet && cityTown.Value == null)
                throw new ArgumentNullException(nameof(cityTown), "Property is not nullable for class ReprintShipmentFromAddress.");

            if (company.IsSet && company.Value == null)
                throw new ArgumentNullException(nameof(company), "Property is not nullable for class ReprintShipmentFromAddress.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class ReprintShipmentFromAddress.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class ReprintShipmentFromAddress.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ReprintShipmentFromAddress.");

            if (phone.IsSet && phone.Value == null)
                throw new ArgumentNullException(nameof(phone), "Property is not nullable for class ReprintShipmentFromAddress.");

            if (postalCode.IsSet && postalCode.Value == null)
                throw new ArgumentNullException(nameof(postalCode), "Property is not nullable for class ReprintShipmentFromAddress.");

            if (residential.IsSet && residential.Value == null)
                throw new ArgumentNullException(nameof(residential), "Property is not nullable for class ReprintShipmentFromAddress.");

            if (stateProvince.IsSet && stateProvince.Value == null)
                throw new ArgumentNullException(nameof(stateProvince), "Property is not nullable for class ReprintShipmentFromAddress.");

            return new ReprintShipmentFromAddress(addressLine1, addressLine2, addressLine3, cityTown, company, countryCode, email, name, phone, postalCode, residential, stateProvince);
        }

        /// <summary>
        /// Serializes a <see cref="ReprintShipmentFromAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reprintShipmentFromAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReprintShipmentFromAddress reprintShipmentFromAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, reprintShipmentFromAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReprintShipmentFromAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reprintShipmentFromAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReprintShipmentFromAddress reprintShipmentFromAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (reprintShipmentFromAddress.AddressLine1Option.IsSet && reprintShipmentFromAddress.AddressLine1 == null)
                throw new ArgumentNullException(nameof(reprintShipmentFromAddress.AddressLine1), "Property is required for class ReprintShipmentFromAddress.");

            if (reprintShipmentFromAddress.AddressLine2Option.IsSet && reprintShipmentFromAddress.AddressLine2 == null)
                throw new ArgumentNullException(nameof(reprintShipmentFromAddress.AddressLine2), "Property is required for class ReprintShipmentFromAddress.");

            if (reprintShipmentFromAddress.AddressLine3Option.IsSet && reprintShipmentFromAddress.AddressLine3 == null)
                throw new ArgumentNullException(nameof(reprintShipmentFromAddress.AddressLine3), "Property is required for class ReprintShipmentFromAddress.");

            if (reprintShipmentFromAddress.CityTownOption.IsSet && reprintShipmentFromAddress.CityTown == null)
                throw new ArgumentNullException(nameof(reprintShipmentFromAddress.CityTown), "Property is required for class ReprintShipmentFromAddress.");

            if (reprintShipmentFromAddress.CompanyOption.IsSet && reprintShipmentFromAddress.Company == null)
                throw new ArgumentNullException(nameof(reprintShipmentFromAddress.Company), "Property is required for class ReprintShipmentFromAddress.");

            if (reprintShipmentFromAddress.CountryCodeOption.IsSet && reprintShipmentFromAddress.CountryCode == null)
                throw new ArgumentNullException(nameof(reprintShipmentFromAddress.CountryCode), "Property is required for class ReprintShipmentFromAddress.");

            if (reprintShipmentFromAddress.EmailOption.IsSet && reprintShipmentFromAddress.Email == null)
                throw new ArgumentNullException(nameof(reprintShipmentFromAddress.Email), "Property is required for class ReprintShipmentFromAddress.");

            if (reprintShipmentFromAddress.NameOption.IsSet && reprintShipmentFromAddress.Name == null)
                throw new ArgumentNullException(nameof(reprintShipmentFromAddress.Name), "Property is required for class ReprintShipmentFromAddress.");

            if (reprintShipmentFromAddress.PhoneOption.IsSet && reprintShipmentFromAddress.Phone == null)
                throw new ArgumentNullException(nameof(reprintShipmentFromAddress.Phone), "Property is required for class ReprintShipmentFromAddress.");

            if (reprintShipmentFromAddress.PostalCodeOption.IsSet && reprintShipmentFromAddress.PostalCode == null)
                throw new ArgumentNullException(nameof(reprintShipmentFromAddress.PostalCode), "Property is required for class ReprintShipmentFromAddress.");

            if (reprintShipmentFromAddress.StateProvinceOption.IsSet && reprintShipmentFromAddress.StateProvince == null)
                throw new ArgumentNullException(nameof(reprintShipmentFromAddress.StateProvince), "Property is required for class ReprintShipmentFromAddress.");

            if (reprintShipmentFromAddress.AddressLine1Option.IsSet)
                writer.WriteString("addressLine1", reprintShipmentFromAddress.AddressLine1);

            if (reprintShipmentFromAddress.AddressLine2Option.IsSet)
                writer.WriteString("addressLine2", reprintShipmentFromAddress.AddressLine2);

            if (reprintShipmentFromAddress.AddressLine3Option.IsSet)
                writer.WriteString("addressLine3", reprintShipmentFromAddress.AddressLine3);

            if (reprintShipmentFromAddress.CityTownOption.IsSet)
                writer.WriteString("cityTown", reprintShipmentFromAddress.CityTown);

            if (reprintShipmentFromAddress.CompanyOption.IsSet)
                writer.WriteString("company", reprintShipmentFromAddress.Company);

            if (reprintShipmentFromAddress.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", reprintShipmentFromAddress.CountryCode);

            if (reprintShipmentFromAddress.EmailOption.IsSet)
                writer.WriteString("email", reprintShipmentFromAddress.Email);

            if (reprintShipmentFromAddress.NameOption.IsSet)
                writer.WriteString("name", reprintShipmentFromAddress.Name);

            if (reprintShipmentFromAddress.PhoneOption.IsSet)
                writer.WriteString("phone", reprintShipmentFromAddress.Phone);

            if (reprintShipmentFromAddress.PostalCodeOption.IsSet)
                writer.WriteString("postalCode", reprintShipmentFromAddress.PostalCode);

            if (reprintShipmentFromAddress.ResidentialOption.IsSet)
                writer.WriteBoolean("residential", reprintShipmentFromAddress.ResidentialOption.Value!.Value);

            if (reprintShipmentFromAddress.StateProvinceOption.IsSet)
                writer.WriteString("stateProvince", reprintShipmentFromAddress.StateProvince);
        }
    }
}
