/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.pitneybowes.api360.Client.OpenAPIDateConverter;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// The details of the Parcel.
    /// </summary>
    [DataContract(Name = "parcelV2Response")]
    public partial class ParcelV2Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelV2Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParcelV2Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelV2Response" /> class.
        /// </summary>
        /// <param name="length">Length is always the greatest of the three dimensions. The other two dimensions are used in the calculation of the girth..</param>
        /// <param name="width">There is no strict rule as to which element is the width or the height, but the width is the second greatest dimension of a parcel by convention..</param>
        /// <param name="height">By convention, the height is the smallest dimension of the parcel..</param>
        /// <param name="dimUnit">DimUnit is a standard for measuring the physical quantities of specified dimension parameters..</param>
        /// <param name="weightUnit">WeightUnit is a standard for measuring the physical quantities of specified weight. &lt;br /&gt; For USPS shipments, this is OZ. (required).</param>
        /// <param name="weight">Weight measures the heaviness of an object (how heavy an object is) ..</param>
        /// <param name="packageValue">Indicates value of the package..</param>
        public ParcelV2Response(decimal length = default(decimal), decimal width = default(decimal), decimal height = default(decimal), string dimUnit = default(string), string weightUnit = default(string), decimal weight = default(decimal), decimal packageValue = default(decimal))
        {
            // to ensure "weightUnit" is required (not null)
            if (weightUnit == null)
            {
                throw new ArgumentNullException("weightUnit is a required property for ParcelV2Response and cannot be null");
            }
            this.WeightUnit = weightUnit;
            this.Length = length;
            this.Width = width;
            this.Height = height;
            this.DimUnit = dimUnit;
            this.Weight = weight;
            this.PackageValue = packageValue;
        }

        /// <summary>
        /// Length is always the greatest of the three dimensions. The other two dimensions are used in the calculation of the girth.
        /// </summary>
        /// <value>Length is always the greatest of the three dimensions. The other two dimensions are used in the calculation of the girth.</value>
        /// <example>2</example>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public decimal Length { get; set; }

        /// <summary>
        /// There is no strict rule as to which element is the width or the height, but the width is the second greatest dimension of a parcel by convention.
        /// </summary>
        /// <value>There is no strict rule as to which element is the width or the height, but the width is the second greatest dimension of a parcel by convention.</value>
        /// <example>1</example>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public decimal Width { get; set; }

        /// <summary>
        /// By convention, the height is the smallest dimension of the parcel.
        /// </summary>
        /// <value>By convention, the height is the smallest dimension of the parcel.</value>
        /// <example>1</example>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public decimal Height { get; set; }

        /// <summary>
        /// DimUnit is a standard for measuring the physical quantities of specified dimension parameters.
        /// </summary>
        /// <value>DimUnit is a standard for measuring the physical quantities of specified dimension parameters.</value>
        /// <example>IN</example>
        [DataMember(Name = "dimUnit", EmitDefaultValue = false)]
        public string DimUnit { get; set; }

        /// <summary>
        /// WeightUnit is a standard for measuring the physical quantities of specified weight. &lt;br /&gt; For USPS shipments, this is OZ.
        /// </summary>
        /// <value>WeightUnit is a standard for measuring the physical quantities of specified weight. &lt;br /&gt; For USPS shipments, this is OZ.</value>
        /// <example>OZ</example>
        [DataMember(Name = "weightUnit", IsRequired = true, EmitDefaultValue = true)]
        public string WeightUnit { get; set; }

        /// <summary>
        /// Weight measures the heaviness of an object (how heavy an object is) .
        /// </summary>
        /// <value>Weight measures the heaviness of an object (how heavy an object is) .</value>
        /// <example>2</example>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public decimal Weight { get; set; }

        /// <summary>
        /// Indicates value of the package.
        /// </summary>
        /// <value>Indicates value of the package.</value>
        /// <example>2</example>
        [DataMember(Name = "packageValue", EmitDefaultValue = false)]
        public decimal PackageValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParcelV2Response {\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  DimUnit: ").Append(DimUnit).Append("\n");
            sb.Append("  WeightUnit: ").Append(WeightUnit).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  PackageValue: ").Append(PackageValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
