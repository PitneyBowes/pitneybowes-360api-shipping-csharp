// <auto-generated>
/*
 * Shipping APIs
 *
 * ### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | - -- -- -- -- -- | - -- -- -- -- -- |  | Get Carriers    | The operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers. |  | Get Countries | The operation fetches list of supported destination countries for a provided carrier and origin country. |  | Get Services | The operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| The operation fetches ParcelTypes based on carrier, origin, and destination country. |  | Get Special Services| The operation fetches Special Services for a given carrier, service, origin, and destination country. |  | Get Carrier Accounts| The operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier. |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used to rate a shipment before creating it. |  | Create Shipment| The operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| The operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| The operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the ‘Create Shipment’ response is missing or lost. |  | Cancel Shipment| The operation cancels previously created shipment. |  
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using com.pitneybowes.api360.Client;

namespace com.pitneybowes.api360.Model
{
    /// <summary>
    /// The details of the Parcel.
    /// </summary>
    public partial class ParcelV2Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelV2Response" /> class.
        /// </summary>
        /// <param name="weightUnit">WeightUnit is a standard for measuring the physical quantities of specified weight. &lt;br /&gt; For USPS shipments, this is OZ.</param>
        /// <param name="length">Length is always the greatest of the three dimensions. The other two dimensions are used in the calculation of the girth.</param>
        /// <param name="width">There is no strict rule as to which element is the width or the height, but the width is the second greatest dimension of a parcel by convention.</param>
        /// <param name="height">By convention, the height is the smallest dimension of the parcel.</param>
        /// <param name="dimUnit">DimUnit is a standard for measuring the physical quantities of specified dimension parameters.</param>
        /// <param name="weight">Weight measures the heaviness of an object (how heavy an object is) .</param>
        /// <param name="packageValue">Indicates value of the package.</param>
        [JsonConstructor]
        public ParcelV2Response(string weightUnit, Option<decimal?> length = default, Option<decimal?> width = default, Option<decimal?> height = default, Option<string> dimUnit = default, Option<decimal?> weight = default, Option<decimal?> packageValue = default)
        {
            WeightUnit = weightUnit;
            LengthOption = length;
            WidthOption = width;
            HeightOption = height;
            DimUnitOption = dimUnit;
            WeightOption = weight;
            PackageValueOption = packageValue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// WeightUnit is a standard for measuring the physical quantities of specified weight. &lt;br /&gt; For USPS shipments, this is OZ.
        /// </summary>
        /// <value>WeightUnit is a standard for measuring the physical quantities of specified weight. &lt;br /&gt; For USPS shipments, this is OZ.</value>
        /* <example>OZ</example> */
        [JsonPropertyName("weightUnit")]
        public string WeightUnit { get; set; }

        /// <summary>
        /// Used to track the state of Length
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LengthOption { get; private set; }

        /// <summary>
        /// Length is always the greatest of the three dimensions. The other two dimensions are used in the calculation of the girth.
        /// </summary>
        /// <value>Length is always the greatest of the three dimensions. The other two dimensions are used in the calculation of the girth.</value>
        /* <example>2</example> */
        [JsonPropertyName("length")]
        public decimal? Length { get { return this.LengthOption; } set { this.LengthOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Width
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> WidthOption { get; private set; }

        /// <summary>
        /// There is no strict rule as to which element is the width or the height, but the width is the second greatest dimension of a parcel by convention.
        /// </summary>
        /// <value>There is no strict rule as to which element is the width or the height, but the width is the second greatest dimension of a parcel by convention.</value>
        /* <example>1</example> */
        [JsonPropertyName("width")]
        public decimal? Width { get { return this.WidthOption; } set { this.WidthOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Height
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> HeightOption { get; private set; }

        /// <summary>
        /// By convention, the height is the smallest dimension of the parcel.
        /// </summary>
        /// <value>By convention, the height is the smallest dimension of the parcel.</value>
        /* <example>1</example> */
        [JsonPropertyName("height")]
        public decimal? Height { get { return this.HeightOption; } set { this.HeightOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of DimUnit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DimUnitOption { get; private set; }

        /// <summary>
        /// DimUnit is a standard for measuring the physical quantities of specified dimension parameters.
        /// </summary>
        /// <value>DimUnit is a standard for measuring the physical quantities of specified dimension parameters.</value>
        /* <example>IN</example> */
        [JsonPropertyName("dimUnit")]
        public string DimUnit { get { return this.DimUnitOption; } set { this.DimUnitOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Weight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> WeightOption { get; private set; }

        /// <summary>
        /// Weight measures the heaviness of an object (how heavy an object is) .
        /// </summary>
        /// <value>Weight measures the heaviness of an object (how heavy an object is) .</value>
        /* <example>2</example> */
        [JsonPropertyName("weight")]
        public decimal? Weight { get { return this.WeightOption; } set { this.WeightOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of PackageValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> PackageValueOption { get; private set; }

        /// <summary>
        /// Indicates value of the package.
        /// </summary>
        /// <value>Indicates value of the package.</value>
        /* <example>2</example> */
        [JsonPropertyName("packageValue")]
        public decimal? PackageValue { get { return this.PackageValueOption; } set { this.PackageValueOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParcelV2Response {\n");
            sb.Append("  WeightUnit: ").Append(WeightUnit).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  DimUnit: ").Append(DimUnit).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  PackageValue: ").Append(PackageValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ParcelV2Response" />
    /// </summary>
    public class ParcelV2ResponseJsonConverter : JsonConverter<ParcelV2Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="ParcelV2Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ParcelV2Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> weightUnit = default;
            Option<decimal?> length = default;
            Option<decimal?> width = default;
            Option<decimal?> height = default;
            Option<string> dimUnit = default;
            Option<decimal?> weight = default;
            Option<decimal?> packageValue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "weightUnit":
                            weightUnit = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "length":
                            length = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "width":
                            width = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "height":
                            height = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "dimUnit":
                            dimUnit = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "weight":
                            weight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "packageValue":
                            packageValue = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!weightUnit.IsSet)
                throw new ArgumentException("Property is required for class ParcelV2Response.", nameof(weightUnit));

            if (weightUnit.IsSet && weightUnit.Value == null)
                throw new ArgumentNullException(nameof(weightUnit), "Property is not nullable for class ParcelV2Response.");

            if (length.IsSet && length.Value == null)
                throw new ArgumentNullException(nameof(length), "Property is not nullable for class ParcelV2Response.");

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class ParcelV2Response.");

            if (height.IsSet && height.Value == null)
                throw new ArgumentNullException(nameof(height), "Property is not nullable for class ParcelV2Response.");

            if (dimUnit.IsSet && dimUnit.Value == null)
                throw new ArgumentNullException(nameof(dimUnit), "Property is not nullable for class ParcelV2Response.");

            if (weight.IsSet && weight.Value == null)
                throw new ArgumentNullException(nameof(weight), "Property is not nullable for class ParcelV2Response.");

            if (packageValue.IsSet && packageValue.Value == null)
                throw new ArgumentNullException(nameof(packageValue), "Property is not nullable for class ParcelV2Response.");

            return new ParcelV2Response(weightUnit.Value, length, width, height, dimUnit, weight, packageValue);
        }

        /// <summary>
        /// Serializes a <see cref="ParcelV2Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="parcelV2Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ParcelV2Response parcelV2Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, parcelV2Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ParcelV2Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="parcelV2Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ParcelV2Response parcelV2Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (parcelV2Response.WeightUnit == null)
                throw new ArgumentNullException(nameof(parcelV2Response.WeightUnit), "Property is required for class ParcelV2Response.");

            if (parcelV2Response.DimUnitOption.IsSet && parcelV2Response.DimUnit == null)
                throw new ArgumentNullException(nameof(parcelV2Response.DimUnit), "Property is required for class ParcelV2Response.");

            writer.WriteString("weightUnit", parcelV2Response.WeightUnit);

            if (parcelV2Response.LengthOption.IsSet)
                writer.WriteNumber("length", parcelV2Response.LengthOption.Value.Value);

            if (parcelV2Response.WidthOption.IsSet)
                writer.WriteNumber("width", parcelV2Response.WidthOption.Value.Value);

            if (parcelV2Response.HeightOption.IsSet)
                writer.WriteNumber("height", parcelV2Response.HeightOption.Value.Value);

            if (parcelV2Response.DimUnitOption.IsSet)
                writer.WriteString("dimUnit", parcelV2Response.DimUnit);

            if (parcelV2Response.WeightOption.IsSet)
                writer.WriteNumber("weight", parcelV2Response.WeightOption.Value.Value);

            if (parcelV2Response.PackageValueOption.IsSet)
                writer.WriteNumber("packageValue", parcelV2Response.PackageValueOption.Value.Value);
        }
    }
}
